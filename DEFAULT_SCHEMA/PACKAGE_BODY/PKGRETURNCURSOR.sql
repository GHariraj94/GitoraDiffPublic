CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKGRETURNCURSOR" is

function fncGetMenuPath(MenuID in number)
  return varchar2
  is
    varoperation gconst.gvaroperation%type;
    varmessage gconst.gvarmessage%type;
    varerror gconst.gvarerror%type;
    varMenuPath varchar(500);
    varTemp varchar(500);
    vardescription varchar(50);
    numparentid number(4);
    numError number;
  begin 
  GLOG.log_write(' Entered Inside fncGetMenuPath Params ' || MenuID); 

  varmessage:= 'Generating Menu Path for Menu ID ' || MenuID;
  varoperation:='Started Generating';
  if (nvl(MenuID,-1)>0) then

      select  menu_description,  menu_parent_id
      into vardescription, numparentid
      from menufile
      where menu_menu_id = MenuID
      and menu_record_status not in(gconst.statusinactive,gconst.statusdeleted);
      varMenuPath:= nvl(vardescription,'');
      if nvl(numparentid,-1)>0 then
        varTemp:=fncGetMenuPath(numparentid);
        varMenuPath:=  nvl(varTemp,' ') ||  ' > ' || nvl(varMenuPath,'');
      end if;

  end if;
   return varMenuPath;
exception 
 when others then
       numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('fncGetMenuPath', numError, varMessage,
                      varOperation, varError);
Glog.Log_error(varError,'PKGRETURNCURSOR.fncGetMenuPath');                         
      raise_application_error(-20101, varError);
end fncGetMenuPath;

function fncUserLoginCheck
      (UserID in Varchar2, 
       UserPassword in varchar2) return varchar2
as
    varoperation gconst.gvaroperation%type;
    varmessage gconst.gvarmessage%type;
    varerror gconst.gvarerror%type;
    varReturnMsg varchar2(200);
    numCode  Number(8);
    numCode1  Number(8);    
    numTemp number(5);
    numCount number(5);
    numTemp1 number(8);
    datPassAddDate date;
    datLicenseExpDate date;
     numError            number;
    PRAGMA AUTONOMOUS_TRANSACTION;
begin 
GLOG.log_write(' Entered Inside fncUserLoginCheck Params ' || UserID || UserPassword ); 

  varoperation:=' User Login Check for the User ID : ' || UserID;


  begin
      select USER_GROUP_CODE,USER_STATUS_CODE
        into numCode,numCode1
      from usermaster
      where UPPER(user_User_ID) =UPPER(UserID)
      and user_license_reference=
                (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051) 
      and User_record_Status not in (10200005,10200006);
  exception 
    when no_data_found then 
      numCode :=null;
  end;
  if (numCode is null) then
    --  return ' User ID Does not Exists';
    return 'The username and password entered are not matching';
  end if;

  if (numCode1 != 14400001) then
    --  return ' User ID Does not Exists';
    return 'The User is not Active';
  end if;

  GLOG.Log_write('Checking license expiry');
  select LICM_EXPIRY_DATE
  into datLicenseExpDate
  from CloudDB_Master.TRLICENSE001
  where LICM_REFERENCE_NUMBER = (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051) 
  and LICM_RECORD_STATUS not in (10200005,10200006);

  GLOG.Log_write('license expiry : ' || to_char(datLicenseExpDate));
   GLOG.Log_write('Todays date : ' || to_char(trunc(sysdate)));

  if(trunc(sysdate) > datLicenseExpDate) then
    return 'Your License has expired, please contact System admin';   
  end if;

  varoperation:=' Password Check : ' || UserID;
   
  begin
      select count(*) ,PSWD_ADD_DATE
        into numTemp,datPassAddDate
      from trsystem023
      where upper(PSWD_USER_ID) =upper(UserID)
      and pswd_password_key=UserPassword
      and pswd_record_Status not in (10200005,10200006)
      group by PSWD_ADD_DATE;
  exception 
    when no_data_found then 
      numTemp:=0;
  end;

  if ((numTemp is null) or (numtemp=0)) then 
      varoperation:=' Update user with Unsuccessful count when Password Wrong: ' || UserID;
      update usermaster set USER_LOGIN_ATTEMPTS=nvl(USER_LOGIN_ATTEMPTS,0)+1
       where UPPER(User_user_ID) =UPPER(UserID)
       and user_record_Status not in (10200005,10200006);
       commit;

       select USER_LOGIN_ATTEMPTS
         into numCount
        from usermaster
        where UPPER(User_user_ID) =UPPER(UserID)
          and user_record_Status not in (10200005,10200006);

        select SPLC_LOGIN_ATTEMPTS 
          into numTemp1
        from TRSYSTEM021
        where SPLC_POLICY_GROUP =numCode
        and SPLC_record_Status not in (10200005,10200006);
       if (numCount >=numTemp1) then 
         return 'Your account blocked please contact System admin';   
       end if;
        -- return 'Password is not matching! your left with ' || (numTemp1-numCount) || ' attempts';
         return 'The username and password entered are not matching. You are left with ' || (numTemp1-numCount) || ' attempts';
   else
     varoperation:=' Update user with Last login';
      update usermaster set USER_LOGIN_ATTEMPTS=0,
        USER_LAST_LOGIN= to_char(systimestamp, 'DD-MON-YYYY HH24:MI:SS')
        where UPPER(User_user_ID) = UPPER(UserID)
       and user_record_Status not in (10200005,10200006);
       commit;
  end if;

  begin
      select count(*)
        into numTemp
      from TRSYSTEM021
      where SPLC_POLICY_GROUP =numCode
      and SPLC_record_Status not in (10200005,10200006);
  exception 
    when no_data_found then 
      numTemp :=0;
  end;
  insert into temp values ('numTemp inside fncUserLoginCheck', numTemp);
  
  if (numTemp  =0 ) then
      return ' Security policies are not defined for your Group please check with system admin';
  end if;
   numTemp:=0;
   NumCount:=0;
   for cur in (select SPLC_ACCESS_TIMEFROM TimeFrom,SPLC_ACCESS_TIMETO TimeTo,
                     SPLC_ACCESS_DAYS days, SPLC_ACCESS_TIME TimeRestriction, 
                     SPLC_PASSWORD_CHANGE PasswordChange, SPLC_ACCESS_DAYYN AccessDayYN, SPLC_LOGIN_ATTEMPTS No_FailureAttempts, 
                     SPLC_PASSWORD_FREQUENCY PasswordFrequency, SPLC_LOGIN_ALLOWTIME AllowTime, SPLC_ACCESS_WEEKLYOFF Weeklyoff,
                     SPLC_ACCESS_HOLIDAY AccessHoliday, SPLC_PASSWORD_REUSE PasswordReuse,
                     SPLC_PASSWORD_CHANGEDAYS PasswordChageDays
              from TRSYSTEM021
              where SPLC_POLICY_GROUP =numCode
              and SPLC_record_Status not in (10200005,10200006))
  loop
      varoperation:='Validating the Restricted time ' || UserID;
      if cur.TimeRestriction=12400001 then
         --if ((cur.TimeTo!=0) and (cur.TimeFrom!=0)) then

            if  ((to_number(to_char(systimestamp(),'HH24MI')) <cur.TimeFrom) 
               or (to_number(to_char(systimestamp(),'HH24MI')) >cur.TimeTo)) then
                 return 'You are not allowed to login in restricted time';
         --   end if;  
         end if;
      end if;
    if cur.AccessHoliday= 12400002 then 
      varoperation:=' Checking the holiday Check ' || UserID;
      select nvl(count(*),0)
        into numCount
       from trsystem001
       where HDAY_DAY_STATUS in (26400007,26400008,26400009)
       and hday_location_code =30299999
       and trunc(HDAY_CALENDAR_DATE)= trunc(sysdate)
       --and trunc(HDAY_CALENDAR_DATE)= trunc(to_date('30-May-2020'))
       and hday_record_status not in (10200005,10200006);

       if (numCount!=0) then
         return 'Not allowed to log in during holidays';
        end if;
    end if;
    if cur.Weeklyoff= 12400002 then 
      varoperation:='Checking the Weekly off Check ' || UserID;
      select nvl(count(*),0)
        into numCount
       from trsystem001
       where HDAY_DAY_STATUS in (26400008,26400009)
       and hday_location_code =30299999
       and trunc(HDAY_CALENDAR_DATE)= trunc(sysdate)
       --and trunc(HDAY_CALENDAR_DATE)= trunc(to_date('30-May-2020'))
       and hday_record_status not in (10200005,10200006);

       if (numCount!=0) then
          return 'Not allowed to log in during Weekly offs';
       end if;
    end if;

       if (cur.PasswordChange=12400001) then 

         if trunc(sysdate) >=(datPassAddDate+ cur.PasswordChageDays) then 
           update trsystem023 set PSWD_PASSWORD_STATUS=14500002
            where PSWD_USER_ID=UserID
            and PSWD_RECORD_STATUS not in (10200005,10200006);
            commit;
           return null;
         end if;
       end if;  

  end loop;

  commit;
return null;

exception
 when others then
       numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('fncUserLoginCheck', numError, varMessage,
                      varOperation, varError);
Glog.Log_error(varError,'PKGRETURNCURSOR.fncUserLoginCheck');  
insert into temp values ('Error in fncUserLoginCheck = ', varError);
      raise_application_error(-20101, varError);
end;
FUNCTION fncgethumanreadablefilesize (p_size IN NUMBER) 
RETURN VARCHAR2
AS
  v_i NUMBER;
  TYPE array_t IS VARRAY(5) OF VARCHAR2(20);
  v_array array_t := array_t(' Bytes', ' KB', ' MB',' GB',' TB');
  varoperation gconst.gvaroperation%type;
BEGIN
  varoperation := 'Coverting File Size';
  v_i := floor(LOG(1024, p_size));
  RETURN to_char(round(p_size/POWER(1024, v_i), 2))||v_array(v_i+1);
END fncgethumanreadablefilesize;

function fncReturnCursorgetdescriptionMulti
    ( pickkeyvalue in varchar2,
      descriptiontypeofPickVal in number,
      descriptiontypeofDescrip in number)
      return varchar2
      is
--  created on 22/03/2007
      numerror number;
      vardescription varchar2(1000);
      varoperation gconst.gvaroperation%type;
      varmessage gconst.gvarmessage%type;
      varerror gconst.gvarerror%type;
      begin
        varmessage := 'getting pickup description for: ' || pickkeyvalue;
        varoperation := 'extracting description';

        begin

          select listagg( case when PICK_KEY_TYPE = 10100003 then ''|| pick_long_description || ' as ' || pick_long_description || '_Desc' else 
          decode(descriptiontypeofPickVal,  gconst.pickuplong, 'Pkgreturncursor.Fncgetdescription(' || pick_long_description || ','||descriptiontypeofDescrip||') as ' || pick_long_description || '_Desc',  
                    gconst.pickupshort,'Pkgreturncursor.Fncgetdescription(' || pick_short_description || ','||descriptiontypeofDescrip||') as ' || pick_short_description || '_Desc' ,   'unknowvalue')
                    end
                    ,',')
                  within group (order by pick_key_value)
            into vardescription
            from pickupmaster
            where pick_key_value in (select regexp_substr(pickkeyvalue,'[^,]+', 1, level) from dual
                                connect by regexp_substr(pickkeyvalue, '[^,]+', 1, level) is not null)
            and pick_record_status not in(10200006);
--            AND PICK_KEY_TYPE NOT IN (10100003);

         exception
          when no_data_found then
            vardescription := '';
        end;

       return vardescription;

      exception
      when others then
        numerror := sqlcode;
        varerror := sqlerrm;
        varerror := gconst.fncreturnerror('getdesc',   numerror,   varmessage,   varoperation,   varerror);
      Glog.Log_error(varError,'PKGRETURNCURSOR.fncReturnCursorgetdescriptionMulti');  
        raise_application_error(-20101,   varerror);
        return vardescription;
end fncReturnCursorgetdescriptionMulti;

function fncgetShortcutNumber
     (ShortCut in number,
      ShortCutKey in number)
      return number is

      numTemp number(8);
      numTemp1 number(8);
      vartemp varchar(15);

       numError      number;
    varOperation  gconst.gvaroperation%type;
    varMessage    gconst.gvarmessage%type;
    varError      gconst.gvarerror%type;

 begin

    GLOG.log_write(' Entered Inside fncgetShortcutNumber Params ' || ShortCut || ShortCutKey ); 


      --29300001	Control
      --29300002	Alter
      --29400001 to 294000026   From A to Z
      vartemp := substr (to_char(ShortCutKey),7,2);
      if (ShortCut=29300001) then  --Control Key
          numTemp:=131136+to_number(vartemp); --Here I am Convert the Select ShortCut to Number
      elsif (ShortCut=29300002) then  --Alter Key
          numTemp:=262208+to_number(vartemp); --Here I am Convert the Select ShortCut to Number
      end if;
   return numtemp;
Exception
    when others then
     numError := SQLCODE;
     varError := SQLERRM;
     varError := GConst.fncReturnError('fncgetShortcutNumber', numError, varMessage,
                          varOperation, varError);   
 Glog.Log_error(varError,'PKGRETURNCURSOR.fncgetShortcutNumber');  
end fncgetShortcutNumber;
function fncGenerateMenu
    (userid in varchar2)
    return number is
--  created on 27/06/2007
-- this program generates menu dynamically. this checks the acl of each
-- program unit and searches for its parents in the hirearchy and adds
-- them to the menu list
   PRAGMA AUTONOMOUS_TRANSACTION;

    numerror number;
    numrecords number;
    nummenulevel number(5);
    numparentid number(5);
    nummenuid number(5);
    numgroupcode number(8);

    numShortCut  number(8);
    numShortCutNo number(8);
    numrunsprogram number(8);

    varmenuid varchar2(15);
    varuserid varchar2(30);
    varprogramunit varchar2(30);
    vardescription varchar2(50);
    varoperation gconst.gvaroperation%type;
    varmessage gconst.gvarmessage%type;
    varerror gconst.gvarerror%type;

    cursor curmenu is

     select punt_program_unit programunit,
      (CASE WHEN punt_access_insert=12400001 AND actl_access_insert=12400001 THEN 'Add,' ELSE '' END) ||
      (CASE WHEN punt_access_edit=12400001 AND actl_access_EDIT=12400001 THEN 'Edit,' ELSE '' END)||
      (CASE WHEN punt_access_delete=12400001 AND actl_access_DELETE=12400001 THEN 'Delete,' ELSE '' END)||   
      (CASE WHEN punt_access_confirm=12400001 AND actl_access_CONFIRM=12400001 THEN 'Confirm,' ELSE ''END)||
      (CASE WHEN punt_access_view=12400001 AND actl_access_VIEW=12400001 THEN 'View,' ELSE ''END)||
      (CASE WHEN punt_access_print=12400001 AND actl_access_PRINT=12400001 THEN 'Print,' ELSE ''END)||
      (CASE WHEN punt_access_save=12400001 AND actl_access_SAVE=12400001 THEN 'Save,' ELSE ''END)||
      (CASE WHEN punt_access_unconfirm=12400001 AND actl_access_UNCONFIRM=12400001 THEN 'Unconfirm,' ELSE ''END)||
      (CASE WHEN punt_access_inactive=12400001 AND actl_access_inactive=12400001 THEN 'Inactive' ELSE ''END) ProgramACL
--        decode(actl_access_insert, 12400001,'Add,','') ||
--        decode(actl_access_edit, 12400001,'Edit,','') ||
--        decode(actl_access_delete,12400001,'Delete,','') ||
--        decode(actl_access_confirm,12400001,'Confirm,','') ||
--        decode(actl_access_view, 12400001, 'View,','') ||
--        decode(actl_access_print,12400001,'Print,','') ||
--        decode(actl_access_save, 12400001,  'Save,','') || 
--        decode(ACTL_ACCESS_UNCONFIRM, 12400001,  'Unconfirm,','') || 
--        decode(actl_access_inactive,12400001,'Inactive','') ProgramACL

      from        
      ( select    punt_access_confirm, punt_access_save, punt_company_code, 
                  punt_program_unit, punt_serial_number, punt_access_insert, punt_access_edit, 
                  punt_access_print, punt_access_view, punt_access_delete, 
                  punt_access_unconfirm, punt_access_inactive,
                  actl_access_confirm, actl_access_save, actl_company_code, 
                  actl_program_unit, actl_serial_number, actl_access_insert, 
                  actl_user_id, actl_group_code, actl_access_edit, 
                  actl_access_print, actl_access_view, actl_access_delete, 
                  actl_access_unconfirm, actl_access_inactive
          from clouddb_master.trsystem005  left outer join  trsystem006  
             on punt_program_unit=actl_program_unit     
           and upper(actl_user_id) =upper(userid)
           and actl_group_code=numgroupcode
           and actl_record_status not in (10200005,10200006)
           union 
           select punt_access_confirm, punt_access_save, punt_company_code, 
                  punt_program_unit, punt_serial_number, punt_access_insert, punt_access_edit, 
                  punt_access_print, punt_access_view, punt_access_delete, 
                  punt_access_unconfirm, punt_access_inactive,
                  actl_access_confirm, actl_access_save, actl_company_code, 
                  actl_program_unit, actl_serial_number, actl_access_insert, 
                  actl_user_id, actl_group_code, actl_access_edit, 
                  actl_access_print, actl_access_view, actl_access_delete, 
                  actl_access_unconfirm, actl_access_inactive
          from clouddb_master.trsystem005  left outer join  trsystem006 m 
             on punt_program_unit=actl_program_unit
            and actl_user_id ='.'
           and actl_group_code=numgroupcode
           and actl_record_status not in (10200005,10200006)
           and not exists ( select 'x' from trsystem006 sub
            where  upper(sub.actl_user_id) =upper(userid)
            and m.actl_program_unit = sub.actl_program_unit
            and sub.actl_record_status not in (10200005,10200006)
            and sub.actl_group_code=numgroupcode)), menufile
      where actl_program_unit = menu_program_unit
      and actl_group_code = numgroupcode
      and menu_child_level<6
  --    and actl_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
      and (punt_access_insert =12400001  or  punt_access_edit =12400001  
           or  punt_access_delete =12400001 or  punt_access_confirm =12400001 
           or  punt_access_view =12400001  or  punt_access_print =12400001
           or  punt_access_print =12400001 or  punt_access_save =12400001 
           or  punt_access_unconfirm =12400001 or  punt_access_inactive =12400001)         
      and (actl_access_insert=12400001 or actl_access_edit=12400001
           or actl_access_delete=12400001 or actl_access_confirm=12400001
           or actl_access_view=12400001 or actl_access_print=12400001
           or actl_access_save=12400001 or actl_access_unconfirm=12400001
           or actl_access_inactive=12400001)
      and exists 
      (select 'x' from  clouddb_master.trlicense002a 
             inner join clouddb_master.trlicense001a
             on lmdd_module_reference= lmdu_modreference_number            
          where nvl(menu_program_unit,'na') = lmdd_program_unit 
          and lmdd_record_status not in (10200005,10200006)
          and lmdu_record_status not in (10200005,10200006)
          and lmdu_comreference_number= (select prmc_license_reference from trsystem051));


--    select actl_program_unit programunit,
--      decode(actl_access_insert, 12400001,'Add,','') ||
--        decode(actl_access_edit, 12400001,'Edit,','') ||
--        decode(actl_access_delete,12400001,'Delete,','') ||
--        decode(actl_access_confirm,12400001,'Confirm,','') ||
--        decode(actl_access_view, 12400001, 'View,','') ||
--        decode(actl_access_print,12400001,'Print,','') ||
--        decode(actl_access_save, 12400001,  'Save,','') || 
--        decode(ACTL_ACCESS_UNCONFIRM, 12400001,  'Unconfirm,','') || 
--        decode(actl_access_inactive,12400001,'Inactive','') ProgramACL
--      from   ( select ACTL_ACCESS_CONFIRM, ACTL_ACCESS_SAVE, ACTL_COMPANY_CODE, 
--                  ACTL_PROGRAM_UNIT, ACTL_SERIAL_NUMBER, ACTL_ACCESS_INSERT, 
--                  ACTL_USER_ID, ACTL_GROUP_CODE, ACTL_ACCESS_EDIT, 
--                  ACTL_ACCESS_PRINT, ACTL_ACCESS_VIEW, ACTL_ACCESS_DELETE, 
--                  ACTL_ACCESS_UNCONFIRM, ACTL_ACCESS_INACTIVE
--           from trsystem006 where upper(actl_user_id) =upper(userid)
--           and actl_group_code=numgroupcode
--           and actl_record_status not in (10200005,10200006)
--           union 
--           select ACTL_ACCESS_CONFIRM, ACTL_ACCESS_SAVE, ACTL_COMPANY_CODE, 
--                  ACTL_PROGRAM_UNIT, ACTL_SERIAL_NUMBER, ACTL_ACCESS_INSERT, 
--                  ACTL_USER_ID, ACTL_GROUP_CODE, ACTL_ACCESS_EDIT, 
--                  ACTL_ACCESS_PRINT, ACTL_ACCESS_VIEW, ACTL_ACCESS_DELETE, 
--                  ACTL_ACCESS_UNCONFIRM, ACTL_ACCESS_INACTIVE
--            from trsystem006 m
--            where actl_user_id ='.'
--           and actl_group_code=numgroupcode
--           and actl_record_Status not in (10200005,10200006)
--           and not exists ( select 'x' from trsystem006 sub
--            where  upper(sub.actl_user_id) =upper(userid)
--            and m.actl_program_unit = sub.actl_program_unit
--            and sub.actl_record_Status not in (10200005,10200006)
--            and sub.actl_group_code=numgroupcode)), menufile
--      where actl_program_unit = menu_program_unit
--      and actl_group_code = numgroupcode
--      and menu_child_level<6
--      --and actl_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
--      and (actl_access_insert=12400001 or actl_access_edit=12400001
--           or actl_access_delete=12400001 or actl_access_confirm=12400001
--           or actl_access_view=12400001 or actl_access_print=12400001
--           or actl_access_save=12400001 or ACTL_ACCESS_UNCONFIRM=12400001
--           or actl_access_inactive=12400001)
--      and exists 
--      (select 'x' from  clouddb_master.Trlicense002a 
--             inner join clouddb_master.trlicense001a
--             on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
--          where nvl(Menu_Program_Unit,'NA') = Lmdd_Program_Unit 
--          and lmdd_record_Status not in (10200005,10200006)
--          and lmdu_record_status not in (10200005,10200006)
--          and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051));

      currec curmenu % rowtype;

    begin
      numerror := 0;
      numerror := 1;
      varoperation := 'extracting user / group information';

      select user_group_code
        into numgroupcode
        from usermaster
        where upper(user_user_id) = upper(userid)
        and user_record_status not in(gconst.statusinactive,   gconst.statusdeleted);

      numerror := 2;
--      varoperation := 'checking user access control rights';
--      select count(*)
--        into numrecords
--        from accessfile
--        where upper(actl_user_id) = upper(userid)
--        and actl_record_status not in (10200005,10200006);
--
--      if numrecords > 0 then
--        varuserid := userid;
--      else
--        varuserid := '.';
--      end if;

      numerror := 3;
      varoperation := 'deleting old records for user: ' || userid;

      delete from trsystem998
      where tmnu_user_id = userid;

      numerror := 4;
      varoperation := 'processing menu items for user: ' || userid;

      open curmenu;
      loop
        fetch curmenu into currec;
        exit when curmenu % notfound;

        varprogramunit := currec.programunit;
        varmessage := 'menu for user: ' || userid || ' item: ' || varprogramunit;
      --modified by reddy on 03-apr-2008
        select menu_menu_id, menu_description, menu_child_level, menu_parent_id,
          menu_runs_program,fncgetShortcutNumber(menu_short_cut,menu_short_key),menu_short_number
          into nummenuid,vardescription,nummenulevel, numparentid,
          numrunsprogram,numShortCut,numShortCutNo
          from menufile
          where menu_program_unit = varprogramunit
          and menu_record_status not in(gconst.statusinactive,gconst.statusdeleted);

        insert
          into trsystem998(tmnu_user_id,tmnu_menu_id,tmnu_menu_description,
            tmnu_program_unit,tmnu_program_acl,tmnu_child_level,tmnu_parent_id,
            tmnu_runs_program,tmnu_short_cut,tmnu_short_number)
            values(userid,nummenuid,vardescription,varprogramunit,
            currec.programacl,nummenulevel,numparentid,
            numrunsprogram,numShortCut,numShortCutNo);

        if ((nummenulevel > 1)) then
          select menu_menu_id, menu_description, menu_child_level, menu_parent_id,
            menu_runs_program,fncgetShortcutNumber(menu_short_cut,menu_short_key),menu_short_number
            into nummenuid, vardescription, nummenulevel, numparentid,
            numrunsprogram,numShortCut,numShortCutNo
            from menufile
            where menu_menu_id = numparentid
            and menu_record_status not in(gconst.statusinactive,gconst.statusdeleted);

            insert
              into trsystem998(tmnu_user_id,tmnu_menu_id,tmnu_menu_description,
                tmnu_program_unit, tmnu_program_acl, tmnu_child_level,tmnu_parent_id,
                tmnu_runs_program,tmnu_short_cut,tmnu_short_number)
                values(userid,nummenuid,vardescription,null,null,nummenulevel,numparentid,
                numrunsprogram,numShortCut,numShortCutNo);

          if nummenulevel = 1 then
              nummenulevel := 0;
          end if;

        end if;

        if ((nummenulevel > 1)) then
          select menu_menu_id, menu_description, menu_child_level,menu_parent_id,
            menu_runs_program,fncgetShortcutNumber(menu_short_cut,menu_short_key),menu_short_number
            into nummenuid,vardescription, nummenulevel,numparentid,
            numrunsprogram,numShortCut,numShortCutNo
            from menufile
            where menu_menu_id = numparentid
            and menu_record_status not in(gconst.statusinactive,   gconst.statusdeleted);

          insert into trsystem998(tmnu_user_id,tmnu_menu_id,tmnu_menu_description,
            tmnu_program_unit, tmnu_program_acl, tmnu_child_level, tmnu_parent_id,
            tmnu_runs_program,tmnu_short_cut,tmnu_short_number)
            values(userid, nummenuid,vardescription,null,null,nummenulevel,numparentid,
            numrunsprogram,numShortCut,numShortCutNo);

          if nummenulevel = 1 then
            nummenulevel := 0;
          end if;

        end if;

        if ((nummenulevel > 1)) then
          select menu_menu_id, menu_description, menu_child_level, menu_parent_id,
          menu_runs_program,fncgetShortcutNumber(menu_short_cut,menu_short_key),menu_short_number
          into nummenuid,vardescription,nummenulevel,numparentid,
          numrunsprogram,numShortCut,numShortCutNo
          from menufile
          where menu_menu_id = numparentid and menu_record_status
          not in(gconst.statusinactive, gconst.statusdeleted);

          insert into trsystem998(tmnu_user_id,tmnu_menu_id,tmnu_menu_description,
            tmnu_program_unit,tmnu_program_acl,tmnu_child_level,tmnu_parent_id,
            tmnu_runs_program,tmnu_short_cut,tmnu_short_number)
            values(userid,nummenuid,vardescription,null,null,nummenulevel,numparentid,
            numrunsprogram,numShortCut,numShortCutNo);

        end if;

    end loop;

    commit;
    numerror := 0;
    return numerror;

    exception
    when others then
      rollback;
      numerror := sqlcode;
      varerror := sqlerrm;
      varerror := gconst.fncreturnerror('genmenu',   numerror,   varmessage,   varoperation,   varerror);
     Glog.Log_error(varError,'PKGRETURNCURSOR.fncgeneratemenu');  
      raise_application_error(-20101,   varerror);
      return numerror;
end fncgeneratemenu;

function fncGetDescription
    ( pickkeyvalue in number,
      descriptiontype in number)
      return varchar2 is
--  created on 22/03/2007
      numerror number;
      vardescription varchar2(200);
      varoperation gconst.gvaroperation%type;
      varmessage gconst.gvarmessage%type;
      varerror gconst.gvarerror%type;
      begin
        varmessage := 'getting pickup description for: ' || pickkeyvalue;
        varoperation := 'extracting description';

        begin
          select decode(descriptiontype,   gconst.pickuplong,   pick_long_description,   gconst.pickupshort,   pick_short_description,   'unknowvalue')
            into vardescription
            from pickupmaster
            where pick_key_value = pickkeyvalue
            --and pick_record_status not in(gconst.statusinactive,   gconst.statusdeleted);
            -- since we have introduced  the inactive we will not be checking this to get the description
            and pick_record_status !=   gconst.statusdeleted;
         exception
          when no_data_found then
            vardescription := '';
        end;

       return vardescription;

      exception
      when others then
        numerror := sqlcode;
        varerror := sqlerrm;
        varerror := gconst.fncreturnerror('getdesc',   numerror,   varmessage,   varoperation,   varerror);
            Glog.Log_error(varError,'PKGRETURNCURSOR.fncgetdescription');  
        raise_application_error(-20101,   varerror);
        return vardescription;

end fncgetdescription;


function fncGetDescriptionMulti
    ( pickkeyvalue in varchar2,
      descriptiontype in number)
      return varchar2
      is
--  created on 22/03/2007
      numerror number;
      vardescription varchar2(4000);
      varoperation gconst.gvaroperation%type;
      varmessage gconst.gvarmessage%type;
      varerror gconst.gvarerror%type;
      begin
        varmessage := 'getting pickup description for: ' || pickkeyvalue;
        varoperation := 'extracting description';

        begin
--          select listagg( decode(descriptiontype,   gconst.pickuplong,   pick_long_description,   gconst.pickupshort,   pick_short_description,   'unknowvalue'))
--            into vardescription
--            from pickupmaster
--            where pick_key_value in (select regexp_substr(pickkeyvalue,'[^,]+', 1, level) from dual
--                                connect by regexp_substr(pickkeyvalue, '[^,]+', 1, level) is not null)
--            and pick_record_status not in(10200006);

          select listagg( decode(descriptiontype,  gconst.pickuplong,   pick_long_description,  
                    gconst.pickupshort,   pick_short_description,   'unknowvalue'),',')
                  within group (order by pick_key_value)
            into vardescription
            from pickupmaster
            where pick_key_value in (select regexp_substr(pickkeyvalue,'[^,]+', 1, level) from dual
                                connect by regexp_substr(pickkeyvalue, '[^,]+', 1, level) is not null)
            and pick_record_status not in(10200006);

         exception
          when no_data_found then
            vardescription := '';
        end;

       return vardescription;

      exception
      when others then
        numerror := sqlcode;
        varerror := sqlerrm;
        varerror := gconst.fncreturnerror('getdesc',   numerror,   varmessage,   varoperation,   varerror);
      Glog.Log_error(varError,'PKGRETURNCURSOR.fncGetDescriptionMulti');  
        raise_application_error(-20101,   varerror);
        return vardescription;

end fncGetDescriptionMulti;


 function fncReturnCursor(xmlparam in gconst.gxmltype%type) return gconst.datacursor is --  created on 18/08/2006
     --  last modified on 29/08/2006
     --  this function is a wrapper for prcreturncursor
     numerror number;
     numinfotype number(4);
     varoperation gconst.gvaroperation%type;
     varmessage gconst.gvarmessage%type;
     varerror gconst.gvarerror%type;
     clbparam gconst.gclobtype%type;
     clberror gconst.gclobtype%type;
     clbprocess gconst.gclobtype%type;
     curprocess gconst.datacursor;
     error_occurred

     exception;
     begin
        varoperation := 'getting query type';
        numinfotype := gconst.fncxmlextract(xmlparam,   'query',   numinfotype);

        varmessage := 'extracting cursor for ' || numinfotype;

        varoperation := 'assigning parameters';
        clbparam := xmlparam.getclobval();

        varoperation := 'getting cursor';
        prcreturncursor(clbparam,   clberror,   clbprocess,   curprocess);

        numerror := gconst.fncreturnparam(clberror,   'error');
        varerror := gconst.fncreturnparam(clberror,   'message');

        if numerror <> 0 then
          raise error_occurred;
        end if;

        return curprocess;

    exception
    when error_occurred then
      varerror := 'retcursor(f): ' || varmessage || varoperation || varerror;
      raise_application_error(-20101,   varerror);
      return null;
    when others then
      varerror := 'retcursor(f): ' || varmessage || varoperation || varerror;
      raise_application_error(-20101,   varerror);
      return null;
end;

--
--procedure prcGetDictionary
--    ( paramdata in gconst.gclobtype%type,
--      errordata out nocopy gconst.gclobtype%type,
--      processdata out nocopy gconst.gclobtype%type,
--      gencursor out gconst.datacursor,
--      nextcursor out gconst.datacursor) is
----  created on 08/05/2007
--    numerror number;
--    numrecords number;
--    numrecordsets number;
--    varoperation gconst.gvaroperation%type;
--    varmessage gconst.gvarmessage%type;
--    varerror gconst.gvarerror%type;
--
--    begin
--      numerror := 0;
--      varmessage := 'getting cursors for dictionary';
--
--      numerror := 1;
--      varoperation := 'extracting pick group for dictionary';
--
--    open gencursor for
--    select pick_key_value keyvalue,
--        to_char(pick_key_value) keystring,
--        pick_short_description shortdescription,
--        pick_long_description longdescription,
--        pick_key_group keytype
--      from pickupmaster
--      where pick_key_number > 0
--      and pick_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
--      order by pick_key_value;
--
--    numerror := 2;
--    varoperation := 'extracting relations for dictionary';
--
--    open nextcursor for
--    select erel_main_entity mainentity,
--      to_char(pick_key_value) keystring,
--      erel_entity_relation keyvalue,
--      pick_short_description shortdescription,
--      pick_long_description longdescription,
--      pick_key_group keytype
--      from relationtable,
--      pickupmaster
--      where erel_entity_relation = pick_key_value
--      order by erel_main_entity,
--      erel_entity_relation;
--
--    processdata := paramdata;
--    numerror := 0;
--    varerror := ' : successful operation';
--    errordata := gconst.fncreturnerror('retcursor',   varmessage,   2,   numerror,   varoperation,   varerror);
--
--  exception
--  when others then
--    numrecordsets := 0;
--    numerror := sqlcode;
--    varerror := sqlerrm || ' - ' || varerror;
--    errordata := gconst.fncreturnerror('getdictionary',   varmessage,   0,   numerror,   varoperation,   varerror);
--end prcGetDictionary;

procedure prcGetDictionary
    ( paramdata in gconst.gclobtype%type,
      errordata out nocopy gconst.gclobtype%type,
      processdata out nocopy gconst.gclobtype%type,
      gencursor out gconst.datacursor,
      nextcursor out gconst.datacursor) is
--  created on 08/05/2007
    numerror number;
    numrecords number;
    numrecordsets number;
    varoperation gconst.gvaroperation%type;
    varmessage gconst.gvarmessage%type;
    varerror gconst.gvarerror%type;
    xmldoc xmltype;
    varUserID varchar(50);
    begin
    GLOG.log_write(' Entered Inside prcGetDictionary Params '  ); 

      numerror := 0;
      varmessage := 'getting cursors for dictionary';
      xmldoc:= xmltype(ParamData);
      varUserID:=Gconst.fncxmlextract(xmldoc,'UserCode',VarUserID);

      numerror := 1;
      varoperation := 'extracting pick group for dictionary';

    open gencursor for
    select pick_key_value keyvalue,
        to_char(pick_key_value) keystring,
        pick_short_description shortdescription,
        pick_long_description longdescription,
        pick_key_group keytype
      from pickupmaster
      where pick_key_number > 0
      and pick_key_group !=301
      and pick_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
      and pick_company_code in(select usco_company_code from trsystem022a
                                   where usco_user_id =varUserId
                               union
                               select 30199999 from dual)
      --order by pick_key_value
   union all
    select pick_key_value keyvalue,
        to_char(pick_key_value) keystring,
        pick_short_description shortdescription,
        pick_long_description longdescription,
        pick_key_group keytype
      from pickupmaster
      where pick_key_number > 0
      and pick_key_group =301
      and pick_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
      and pick_key_value  in( select usco_company_code from trsystem022a
                                   where usco_user_id =varUserId);
      --order by pick_key_value


    numerror := 2;
    varoperation := 'extracting relations for dictionary';


    open nextcursor for
    select erel_main_entity mainentity,
      to_char(pick_key_value) keystring,
      erel_entity_relation keyvalue,
      pick_short_description shortdescription,
      pick_long_description longdescription,
      pick_key_group keytype
      from relationtable,
      pickupmaster
      where erel_entity_relation = pick_key_value
      order by erel_main_entity,
      erel_entity_relation;

    processdata := paramdata;
    numerror := 0;
    varerror := ' : successful operation';
    errordata := gconst.fncreturnerror('retcursor',   varmessage,   2,   numerror,   varoperation,   varerror);

  exception
  when others then
    numrecordsets := 0;
    numerror := sqlcode;
    varerror := sqlerrm || ' - ' || varerror;
    errordata := gconst.fncreturnerror('getdictionary',   varmessage,   0,   numerror,   varoperation,   varerror);
    Glog.Log_error(varError,'PKGRETURNCURSOR.prcGetDictionary'); 
end prcGetDictionary;

function fncDealProfile(DealNumber varchar2)
         return number
   is
   PRAGMA AUTONOMOUS_TRANSACTION;
   vardealnumber  varchar2(25 byte);
   numbuysell     number;
   numhedtrad     number;
   numswapout     number;
   numdealtype    number;
   numcounter     number;
   numbasecur     number;
   numothrcur     number;
   numMcode       number;
   numPcomplt     number;
   varTref        varchar2(25 byte);
   datComplete    date;
   datdefault     date:='' ;
   vardefault     varchar2(25 byte):='';
   numdefault     number:=0;
   numError       number:=0;
   varOperation   GConst.gvarOperation%Type;
   varMessage     GConst.gvarMessage%Type;
   varError       GConst.gvarError%Type;
  begin

     delete  from trsystem991;
     commit;

        --step 1
          select DEAL_DEAL_NUMBER,DEAL_HEDGE_TRADE ,DEAL_BUY_SELL,DEAL_SWAP_OUTRIGHT,DEAL_DEAL_TYPE,
                 DEAL_COUNTER_PARTY,DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,
                 DEAL_MATURITY_CODE,DEAL_PROCESS_COMPLETE,DEAL_COMPLETE_DATE,HEDG_TRADE_REFERENCE into
                 vardealnumber,numhedtrad,numbuysell,numswapout,numdealtype,
                 numcounter,numbasecur,numothrcur,
                 numMcode,numPcomplt,datComplete,varTref
            from trtran001,trtran004
            where DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER(+)
              and DEAL_SERIAL_NUMBER =HEDG_DEAL_SERIAL(+)
              and DEAL_DEAL_NUMBER = DealNumber;

        --entered
         insert into trsystem991
                (DP_DEAL_NUMBER,DP_ECR_DATE,DP_BUY_SELL,DP_SWAP_OUTRIGHT,
                 DP_DEAL_TYPE,DP_COUNTER_PARTY,DP_BASE_CURRENCY,DP_OTHER_CURRENCY,
                 DP_ECR_RATE,DP_ECRLOCAL_RATE,DP_ECRBASE_AMOUNT,DP_ECROTHER_AMOUNT,
                 DP_ECRAMOUNT_LOCAL,DP_MATURITY_CODE,DP_ERMATURITY_FROM,DP_ERMATURITY_DATE,
                 DP_ERMATURITY_MONTH,DP_ECRUSER_ID,DP_CONFIRM_DATE,DP_ECREXECUTE_TIME,
                 DP_PROCESS_COMPLETE,DP_COMPLETE_DATE,DP_TRADE_REFERENCE,DP_CANCEL_TYPE,
                 DP_CRPROFIT_LOSS,DP_CRPL_VOUCHER,DP_STATUS,DP_STATUS_NO,DP_DELIVERED_STATUS)
          select DEAL_DEAL_NUMBER,DEAL_EXECUTE_DATE,DEAL_BUY_SELL,DEAL_SWAP_OUTRIGHT,
                 DEAL_DEAL_TYPE,DEAL_COUNTER_PARTY,DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,
                 DEAL_EXCHANGE_RATE,DEAL_LOCAL_RATE,DEAL_BASE_AMOUNT,DEAL_OTHER_AMOUNT,
                 DEAL_AMOUNT_LOCAL,DEAL_MATURITY_CODE,DEAL_MATURITY_FROM,DEAL_MATURITY_DATE,
                 DEAL_MATURITY_MONTH,DEAL_USER_ID,datdefault ,DEAL_EXECUTE_TIME ,
                 DEAL_PROCESS_COMPLETE,datdefault ,HEDG_TRADE_REFERENCE,0,
                 numdefault ,vardefault,'Entered',numdefault,numdefault
            from trtran001,trtran004
           where DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER(+)
             and DEAL_SERIAL_NUMBER =HEDG_DEAL_SERIAL(+)
             and DEAL_DEAL_NUMBER =DealNumber
             and DEAL_RECORD_STATUS not in (10200005,10200006) ;
              --another condition to be added to check the record status
             commit;
        --cancelled
           insert into trsystem991
                 (DP_DEAL_NUMBER,DP_ECR_DATE,DP_BUY_SELL,DP_SWAP_OUTRIGHT,
                  DP_DEAL_TYPE,DP_COUNTER_PARTY,DP_BASE_CURRENCY,DP_OTHER_CURRENCY,
                  DP_ECR_RATE,DP_ECRLOCAL_RATE,DP_ECRBASE_AMOUNT,DP_ECROTHER_AMOUNT,
                  DP_ECRAMOUNT_LOCAL,DP_MATURITY_CODE,DP_ERMATURITY_FROM,DP_ERMATURITY_DATE,
                  DP_ERMATURITY_MONTH,DP_ECRUSER_ID,DP_CONFIRM_DATE,DP_ECREXECUTE_TIME,
                  DP_PROCESS_COMPLETE,DP_COMPLETE_DATE,DP_TRADE_REFERENCE,DP_CANCEL_TYPE,
                  DP_CRPROFIT_LOSS,DP_CRPL_VOUCHER,
                  DP_STATUS,
                  DP_STATUS_NO,DP_DELIVERED_STATUS)
          select  vardealnumber, CDEL_CANCEL_DATE,decode(numbuysell,25300001,25300002,25300002,25300001),numswapout,
                  numdealtype,numcounter,numbasecur,numothrcur,
                  CDEL_CANCEL_RATE,CDEL_LOCAL_RATE,CDEL_CANCEL_AMOUNT,CDEL_OTHER_AMOUNT,
                  CDEL_CANCEL_INR,numMcode,datdefault,datdefault,
                  0,CDEL_USER_ID,datdefault,vardefault,
                  numPcomplt,datcomplete,varTref,CDEL_CANCEL_TYPE,
                  decode(CDEL_CANCEL_TYPE,27000002,0,CDEL_PROFIT_LOSS),CDEL_PL_VOUCHER,
                  decode(CDEL_CANCEL_TYPE,27000002,'Delivered','Cancelled'),
                  (select max(CDEL_REVERSE_SERIAL)
                     from  trtran006 B
                    where B.CDEL_DEAL_NUMBER=DealNumber), numdefault
           from  trtran006
          where  CDEL_DEAL_NUMBER = DealNumber
           -- and  CDEL_DEAL_NUMBER not in (select LMOD_REFERENCE_NUMBER from trtran009)
            and  CDEL_RECORD_STATUS not in (10200005,10200006)
        order by CDEL_REVERSE_SERIAL ;
          --another condition to be added to check the record status
         commit;
        if numhedtrad in(gconst.HEDGEDEAL,GCONST.FTDEAL) then
        ---rolledover
           insert into trsystem991
                 (DP_DEAL_NUMBER,DP_ECR_DATE,DP_BUY_SELL,DP_SWAP_OUTRIGHT,
                  DP_DEAL_TYPE,DP_COUNTER_PARTY,DP_BASE_CURRENCY,DP_OTHER_CURRENCY,
                  DP_ECR_RATE,DP_ECRLOCAL_RATE,DP_ECRBASE_AMOUNT,DP_ECROTHER_AMOUNT,
                  DP_ECRAMOUNT_LOCAL,DP_MATURITY_CODE,DP_ERMATURITY_FROM,DP_ERMATURITY_DATE,
                  DP_ERMATURITY_MONTH,DP_ECRUSER_ID,DP_CONFIRM_DATE,DP_ECREXECUTE_TIME,
                  DP_PROCESS_COMPLETE,DP_COMPLETE_DATE,DP_TRADE_REFERENCE,DP_CANCEL_TYPE,
                  DP_CRPROFIT_LOSS,DP_CRPL_VOUCHER,DP_STATUS,
                  DP_STATUS_NO,DP_DELIVERED_STATUS)
           select vardealnumber, LMOD_CHANGE_DATE , numbuysell,numswapout,
                  numdealtype,numcounter,numbasecur,numothrcur,
                  LMOD_ENHANCED_RATE,LMOD_LOCAL_RATE,LMOD_ENHANCED_FCY,LMOD_OTHER_AMOUNT,
                  LMOD_LOCAL_AMOUNT,numMcode,LMOD_MATURITY_FROM,LMOD_MATURITY_DATE,
                  numdefault,vardefault,datdefault,vardefault,
                  numPcomplt,datcomplete,varTref,numdefault,
                  LMOD_PROFIT_LOSS,LMOD_PL_VOUCHER,'Rolledover',
                  (select max(LMOD_REFERENCE_SERIAL)
                   from  trtran009 B
                   where B.LMOD_REFERENCE_NUMBER=DealNumber), 0
              from trtran009
             where LMOD_REFERENCE_NUMBER = DealNumber
               and LMOD_RECORD_STATUS not in (10200005,10200006)
          order by LMOD_REFERENCE_SERIAL ;
             --another condition to be added to check the record status
         end if ;
             commit;
      return  numError;
Exception
    When others then
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('Rollover(1)', numError, varMessage,
                      varOperation, varError);
 Glog.Log_error(varError,'PKGRETURNCURSOR.fncDealProfile');                        
      raise_application_error(-20101, varError);
      return  numError;
end ;




----Changed the Declaration to get current a/c Voucher Date according to the bank
--Function fncRollover
--        (dealnumber in varchar2,
--         CurrentACDate in number:=0 )
--        return date
--        is
---- Created on 12/05/08
--    numError            number;
--    datDueDate          date;
--    VoucherPass         number;
--    varOperation        GConst.gvarOperation%Type;
--    varMessage          GConst.gvarMessage%Type;
--    varError            GConst.gvarError%Type;
--Begin
--    numError := 0;
--    varMessage := 'Sending rollover Details';
--
--    Begin
--      select lmod_maturity_date
--        into datDueDate
--        from extensionhedgedeal
--        where lmod_reference_number = DealNumber
--        and lmod_serial_number =
--        (select max(lmod_serial_number) from  extensionhedgedeal
--          where lmod_reference_number = dealnumber
--          and lmod_record_status in
--          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED))
--        and lmod_record_status in
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
--    Exception
--      when no_data_found then
--        if CurrentACDate =0 then
--          select deal_maturity_date
--            into datDueDate
--            from hedgedealregister
--            where deal_deal_number = dealnumber;
--        else
--             select lbnk_voucher_pass
--              into VoucherPass
--              from bankmaster
--              where lbnk_pick_code=(select deal_counter_party
--                                     from hedgedealregister
--                                    where deal_deal_number =dealnumber);
--
--
--        end if;
--    End;
--
--
--    Return datDueDate;
--Exception
--    When others then
--      numError := SQLCODE;
--      varError := SQLERRM;
--      varError := GConst.fncReturnError('Rollover(1)', numError, varMessage,
--                      varOperation, varError);
--      raise_application_error(-20101, varError);
--      return datDueDate;
--End fncRollOver;


--Function fncRollover
--        (   dealnumber in varchar2,
--            ReturnType in number)
--        Return number
--        is
---- Created on 09/05/2008
--
--    numError            number;
--    numenhancedFcy      number(15,4);
--    numenhancedrate     number(15,6);
--    numotheramount      number(15,6);
--    numlocalrate        number(15,6);
--    numlocalamount      number(15,6);
--    numAmount           number(15,6);
--    varOperation        GConst.gvarOperation%Type;
--    varMessage          GConst.gvarMessage%Type;
--    varError            GConst.gvarError%Type;
--Begin
--    numError := 0;
--    varMessage := 'Sending rollover Details';
--
--    Begin
--      select lmod_enhanced_fcy,lmod_enhanced_rate,lmod_other_amount,
--             lmod_local_rate, lmod_local_amount
--        into numenhancedFcy, numenhancedrate, numotheramount,
--             numlocalrate,numlocalamount
--        from extensionhedgedeal
--        where lmod_reference_number = dealnumber
--        and lmod_record_status in
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
--    Exception
--      when no_data_found then
--        select deal_base_amount, deal_exchange_rate, deal_other_amount,
--              deal_local_rate,deal_amount_local
--          into  numenhancedFcy, numenhancedrate, numotheramount,
--             numlocalrate,numlocalamount
--          from hedgedealregister
--          where deal_deal_number = dealnumber;
--    End;
--
--    if ReturnType = BASEAMOUNT then
--      numAmount := numenhancedFcy;
--    elsif ReturnType = EXCHANGERATE then
--      numAmount := numenhancedrate;
--    elsif  ReturnType =  OTHERAMOUNT then
--      numAmount := numotheramount;
--    elsif ReturnType = LOCALRATE then
--      numAmount := numlocalrate;
--    elsif  ReturnType =  AMOUNTLOCAL then
--      numAmount := numlocalamount;
--    end if;
--
--    Return numAmount;
--Exception
--    When others then
--      numError := SQLCODE;
--      varError := SQLERRM;
--      varError := GConst.fncReturnError('Rollover', numError, varMessage,
--                      varOperation, varError);
--      raise_application_error(-20101, varError);
--      return numError;
--End fncRollOver;

--Function fncRollover
--        (   dealnumber in varchar2,
--            ReturnType in number)
--        Return number
--        is
---- Created on 09/05/2008
--
--    numError            number;
--    numenhancedFcy      number(15,6);
--    numenhancedrate     number(15,6);
--    numotheramount      number(15,6);
--    numlocalrate        number(15,6);
--    numlocalamount      number(15,6);
--    numAmount           number(15,6);
--    varOperation        GConst.gvarOperation%Type;
--    varMessage          GConst.gvarMessage%Type;
--    varError            GConst.gvarError%Type;
--Begin
--    numError := 0;
--    varMessage := 'Sending rollover Details';
--
--    Begin
--      select lmod_enhanced_fcy,lmod_enhanced_rate,lmod_other_amount,
--             lmod_local_rate, lmod_local_amount
--        into numenhancedFcy, numenhancedrate, numotheramount,
--             numlocalrate,numlocalamount
--        from extensionhedgedeal
--        where lmod_reference_number = dealnumber
--        and lmod_record_status in
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
--    Exception
--      when no_data_found then
--        select deal_base_amount, deal_exchange_rate, deal_other_amount,
--              deal_local_rate,deal_amount_local
--          into  numenhancedFcy, numenhancedrate, numotheramount,
--             numlocalrate,numlocalamount
--          from hedgedealregister
--          where deal_deal_number = dealnumber;
--    End;
--
--    if ReturnType = BASEAMOUNT then
--      numAmount := numenhancedFcy;
--    elsif ReturnType = EXCHANGERATE then
--      numAmount := numenhancedrate;
--    elsif  ReturnType =  OTHERAMOUNT then
--      numAmount := numotheramount;
--    elsif ReturnType = LOCALRATE then
--      numAmount := numlocalrate;
--    elsif  ReturnType =  AMOUNTLOCAL then
--      numAmount := numlocalamount;
--    end if;
--
--    Return numAmount;
--Exception
--    When others then
--      numError := SQLCODE;
--      varError := SQLERRM;
--      varError := GConst.fncReturnError('Rollover', numError, varMessage,
--                      varOperation, varError);
--      raise_application_error(-20101, varError);
--      return numError;
--End fncRollOver;
Function fncRollover
        (   DealNumber in varchar2,
            ReturnType in number)
        Return number
        is
-- Created on 09/05/2008

    numError            number;
    numEnhancedFcy      number(15,2);
    numEnhancedRate     number(15,6);
    numOtherAmount      number(15,2);
    numlocalrate        number(15,6);
    numlocalamount      number(15,2);
    numAmount           number(20,6);
    varOperation        GConst.gvarOperation%Type;
    varMessage          GConst.gvarMessage%Type;
    varError            GConst.gvarError%Type;
Begin
 GLOG.log_write(' Entered Inside fncRollover Params ' || DealNumber ||ReturnType ); 

    numError := 0;
    varMessage := 'Sending rollover Details' || DealNumber;

    Begin
      select lmod_enhanced_fcy,lmod_enhanced_rate,lmod_other_amount,
        lmod_local_rate, lmod_local_amount
        into numEnhancedFcy, numEnhancedRate, numOtherAmount,
             numlocalrate,numlocalamount
        from ExtensionHedgedeal
        where lmod_reference_number = DealNumber
        and lmod_serial_number =
        (select max(lmod_serial_number)
          from  ExtensionHedgedeal
          where lmod_reference_number = DealNumber
          and lmod_record_status in
          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED))
        and lmod_record_status in
        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);

--      select (lmod_enhanced_fcy-b.reversedamount),lmod_enhanced_rate,lmod_other_amount,
--             lmod_local_rate, lmod_local_amount
--        into numenhancedFcy, numenhancedrate, numotheramount,
--             numlocalrate,numlocalamount
--        from extensionhedgedeal,(select nvl(sum
--        (cdel_cancel_amount),0) as reversedAmount from trtran006 where cdel_deal_number =dealnumber )b
--        where lmod_reference_number = dealnumber
--          and lmod_serial_number =(select max(lmod_serial_number) from  extensionhedgedeal
--                                  where lmod_reference_number = dealnumber
--                                  and lmod_record_status in
--                                (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED))
--        and lmod_record_status in
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
    Exception
      when no_data_found then
         select deal_base_amount, deal_exchange_rate, deal_other_amount,
                deal_local_rate,deal_amount_local
           into numEnhancedFcy, numEnhancedRate, numOtherAmount,
                numLocalRate,numlocalAmount
           from HedgeDealregister
          where deal_deal_number = DealNumber
            and deal_serial_number= (select max(deal_serial_number)
                                       from hedgedealregister
                                       where deal_deal_number=dealnumber
                                         and deal_record_status not in (10200005,10200006))
            and deal_record_status not in(10200005,10200006);
     End;

    if ReturnType = BASEAMOUNT then
      numAmount := numenhancedFcy;
    elsif ReturnType = EXCHANGERATE then
      numAmount := numenhancedrate;
    elsif  ReturnType =  OTHERAMOUNT then
      numAmount := numotheramount;
    elsif ReturnType = LOCALRATE then
      numAmount := numlocalrate;
    elsif  ReturnType =  AMOUNTLOCAL then
      numAmount := numlocalamount;
    end if;

    Return numAmount;
Exception
    When others then
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('Rollover', numError, varMessage,
                      varOperation, varError);
Glog.Log_error(varError,'PKGRETURNCURSOR.fncRollOver');                        
      raise_application_error(-20101, varError);
      return numError;
End fncRollOver;

--Function fncGraphCursor
--    (   UserIDs in Varchar2,
--        CurrencyCode in number,
--        AsonDate in Date)
--    Return number
--    is
--    table_not_exists    Exception;
--    PRAGMA EXCEPTION_INIT(table_not_exists, -942);
--    numError            number;
--    numSub              number(2);
--    numTemp             number(3);
--    numTemp1            number(3);
--    numTemp2            number(3);
--    numExchange         number(15,6);
--    numHolding          number(15,6);
--    varTemp             varchar2(50);
--    varQuery            varchar2(4000);
--    varOperation        GConst.gvarOperation%Type;
--    varMessage          GConst.gvarMessage%Type;
--    varError            GConst.gvarError%Type;
--    Type TypeUsers      is table of varchar2(50);
--    typUser             TypeUsers;
--
--    cursor dealRate (DealerName varchar2)
--    is
--    select deal_exchange_rate, deal_dealer_holding
--      from trtran001
--      where deal_user_id = DealerName
--      and deal_base_currency = CurrencyCode
--      and deal_dealer_holding != 0;
--
--Begin
--    varMessage := 'Generating Graphs for Users: ' || UserIDs;
--    numError := 0;
--    numTemp := 0;
--    numTemp := 1;
--    numTemp1 := 0;
--    numTemp2 := 1;
--    typUser := TypeUsers();
--
--      varOperation := 'Checking table exists to drop';
--      Begin
--        varQuery := 'Select count(*) from trtemp';
--        execute immediate varQuery;
--         varQuery := 'truncate table trtemp';
--         execute immediate varQuery;
--         varQuery := 'Drop table trtemp';
--         execute immediate varQuery;
--       Exception
--       When table_not_exists then
--          NULL;
--      End;
--
--    varOperation := 'Creating table dynamically';
--    varQuery := 'Create global temporary table trtemp(';
--
--    while numTemp > 0
--    Loop
--      numTemp1 := numTemp1 + 1;
--      numTemp := instr(UserIDs, ',', 1, numTemp1);
--
--      if numTemp = 0 then
--        varTemp := substr(UserIds, numTemp2);
--      else
--        varTemp := substr(UserIds, numTemp2, numTemp - numTemp2);
--      end if;
--
--      varQuery := varQuery || varTemp || '_er' || ' number(15,6),';
--      varQuery := varQuery || varTemp || '_hr' || ' number(15,6),';
--      typUser.Extend(1);
--      typUser(numTemp1) := varTemp;
--      numTemp2 := numTemp + 1;
--    End Loop;
--
--    varQuery := varQuery || ' srlno number(3,0))';
--    varQuery := varQuery || ' on commit preserve rows';
--    execute immediate varQuery;
--
--    varOperation := 'Inserting / Updating Exchange Rates';
--   	for numSub in 1..numTemp1
--    loop
--      numTemp := 0;
--
--      open DealRate(typUser(numSub));
--      Loop
--        fetch DealRate into numExchange, numHolding;
--        exit when DealRate%NOTFOUND;
--
--        numTemp := numTemp + 1;
--        varQuery := 'select nvl(srlno,0) from trtemp where srlno = ' || numTemp;
--
--        begin
--          execute immediate varQuery into numTemp2;
--        Exception
--          when no_data_found then
--          numTemp2 := 0;
--        end;
--
--        if numTemp2 > 0 then
--          varQuery := 'update trtemp set ' || typUser(numSub) || '_er' || ' = ' || numExchange;
--          varQuery := varQuery || ',' || typUser(numSub) || '_hr' || ' = ' || numHolding;
--          varQuery := varQuery || ' where srlno = ' || numTemp;
--        else
--          varQuery := 'insert into trtemp (' || typUser(numSub) || '_er,';
--          varQuery := varQuery || typUser(numSub) || '_hr ,srlno) values(';
--          varQuery := varQuery || numExchange || ',' || numHolding || ',' || numTemp || ')';
--        End if;
--
--        execute immediate varQuery;
--      End Loop;
--
--      Close DealRate;
--
--    End loop;
--
--    commit;
--    return numError;
--
--Exception
--    When others then
--      numError := SQLCODE;
--      varError := SQLERRM || varQuery;
--      varError := GConst.fncReturnError('Graphc', numError, varMessage,
--                      varOperation, varError);
--      raise_application_error(-20101, varError);
--      return numError;
--End fncGraphCursor;

--Function fncMTMRate
--    (   DealNumber  in varchar2,
--        DealType in number,
--        MTMType in number,
--        AskRate in number := 0,
--        BidRate in number := 0,
--        WashRate in number := 0)
--    return number
--    is
----  Created by T M Manjunath on 18/11/11
--    numError            number;
--    numBuySale          number(8);
--    numBaseCurrency     number(8);
--    numOtherCurrency    number(8);
--    numCounterParty     number(8);
--    numAsk              number(15,4);
--    numBid              number(15,4);
--    numRate             number(15,4);
--    numRate1            number(15,4);
--    numRate2            number(15,4);
--    datMaturity         date;
--    varOperation        GConst.gvarOperation%Type;
--    varMessage          GConst.gvarMessage%Type;
--    varError            GConst.gvarError%Type;
--Begin
--    numError := 0;
--    varMessage := 'Getting MTM Rate of ' || DealNumber;
--
--    select max(hday_calendar_date)
--      into GConst.gdatToday
--      from trsystem001
--      where hday_location_code = 30299999
--      and  hday_day_status = 26400002;
--
--    varOperation := 'Getting Deal Details';
--    if  DealType = 32200003 then
--      select copt_expiry_date, cosu_buy_sell, copt_base_currency, copt_other_currency,
--        copt_counter_party
--        into datMaturity, numBuySale, numBaseCurrency, numOtherCurrency,  numCounterParty
--        from trtran071, trtran072
--        where copt_deal_number = cosu_deal_number
--        and cosu_buy_sell in (25300001,25300002)
--        and rownum = 1
--        and copt_deal_number = DealNumber;
--    elsif DealType = 32200002 then
--      select cfut_maturity_date, cfut_buy_sell, cfut_base_currency, cfut_other_currency,
--        cfut_counter_party
--        into datMaturity, numBuySale, numBaseCurrency, numOtherCurrency, numCounterParty
--        from trtran061
--        where cfut_deal_number = DealNumber;
--    else
--      select deal_maturity_date, deal_buy_sell, deal_base_currency, deal_other_currency,
--        deal_counter_party
--        into datMaturity, numBuySale, numBaseCurrency, numOtherCurrency, numCounterParty
--        from trtran001
--        where deal_deal_number = DealNumber;
--    end if;
--
--    if WashRate > 0 then
--
--      if numOtherCurrency = 30400003 then
--        numRate := 1;
--      else
--        numRate := pkgforexprocess.fncgetrate(numOtherCurrency, 30400003,
--          GConst.gdatToday,numBuySale,pkgforexprocess.fncAllotMonth(numCounterParty,
--          GConst.gdatToday, datMaturity),null, 1);
--      End if;
--
--      return numRate;
--    End if;
--
----  User Defined Rates
--    if MTMType = 62400003 then
--      if numBuySale = GConst.PURCHASEDEAL then
--        numRate := BidRate;
--      else
--        numRate := AskRate;
--      end if;
--    End if;
--
----  Spot Rates
--    if MTMType = 62400001 then
--      varOperation := 'Getting Spot Rates for ' || GConst.gdatToday;
--      numRate := pkgforexprocess.fncgetrate(numBaseCurrency, numOtherCurrency,
--          GConst.gdatToday,  numBuySale, 0, datMaturity, 1);
--    End if;
--
----  MTM Rates
--    if MTMType = 62400002 then
--      varOperation := 'Getting MTM Rates';
--      numRate := pkgforexprocess.fncgetrate(numBaseCurrency, numOtherCurrency,
--        GConst.gdatToday, numBuySale, pkgforexprocess.fncAllotMonth(numCounterParty,
--        GConst.gdatToday, datMaturity),datMaturity, 1);
--    End if;
--
--    return numRate;
--Exception
--    When others then
--        numError := SQLCODE;
--        varError := SQLERRM;
--        varError := 'MTMRate: ' || varMessage || varOperation || varError;
--        return 0;
----        raise_application_error(-20101, varError);
--        rollback;
--        Return numError;
--End fncMTMRate;

Function fncSendPassword
    (userId in varchar2,
     PasswordKey in varchar2,
     PasswordCode in varchar2,
     PasswordView in varchar2)
      Return Number
      is
      mail_Id  varchar2(200 byte);
      frmMailId varchar2(30 byte);
      numError number ;
--  Created on 23/04/08


    varOperation  gconst.gvaroperation%type;
    varMessage    gconst.gvarmessage%type;
    varError      gconst.gvarerror%type;

 begin

    GLOG.log_write(' Entered Inside fncSendPassword Params ' || userId || PasswordKey || PasswordCode || PasswordView ); 


  SELECT USER_EMAIL_ID INTO mail_Id
    FROM USERMASTER WHERE UPPER(USER_USER_ID) = UPPER(userId)
     AND User_Record_Status NOT IN(10200005,10200006);

 SELECT PRMC_MAIL_USERID INTO frmMailId FROM TRSYSTEM051;                                                      

  UPDATE trsystem023
  SET --PSWD_PASSWORD_KEY       = PasswordKey,
  PSWD_PASSWORD_CODE        = PasswordCode
  WHERE PSWD_USER_ID          = userId
  AND PSWD_RECORD_STATUS NOT IN(10200005,10200006);



--   UTL_MAIL.SEND(SENDER    => frmMailId ,
--                RECIPIENTS => mail_Id,
--                CC         => '',
--                BCC        => '',
--                SUBJECT    => 'New Password' ,
--                MESSAGE    => 'New Password :-  ' || PasswordView ) ; 

    return numError;
 Exception
    When others then
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('fncSendPassword', numError, varMessage, 
                      varOperation, varError);
Glog.Log_error(varError,'PKGRETURNCURSOR.fncSendPassword');   
--Exception
--    When others then
--      raise         
--      return numError;
End fncSendPassword; 

procedure prcreturncursor
    ( ParamData in gconst.gclobtype%type,
      ErrorData out nocopy gconst.gclobtype%type,
      ProcessData out nocopy gconst.gclobtype%type,
      GenCursor out gconst.datacursor)
      is

    --|--------------------------------------------------------------|
    --|name of function   prcreturncursor                            |
    --|author             t m manjunath                              |
    --|package            pkgreturncursor                            |
    --|type               procedure                                  |
    --|date of creation   11-mar-2007                                |
    --|last modified on   13-mar-2007                                |
    --|exception number   -20707                                     |
    --|input parameters   1.input details in clob                    |
    --|output parameters  1.error message in clob                    |
    --|output parameters  2.process output in clob                   |
    --|return, if any     none                                       |
    --|brief discription                                             |
    --| the function                                                 |
    --|--------------------------------------------------------------|

    numrecords number(5);
    numflag number(1);
    numFlag1 number(1);
    numrecordsets number(1);
    numInfoType number(4);
    numerror number(5);
    numaction number(4);
    numtemp number(6);
    numcode number(8);
    numcode1 number(8);
    numcode2 number(8);
    numcode3 number(8);
    numcode4 number(8);
    numCode5 number(8);
    numCode6 number(8);
    numCode7 number(8);
    numCode8 number(8);
    numCode9 number(8);
    numCode10 number(8);
    numCode11 number(8);
    numdetail number(12);
    numrate number(15,6);
    numRate1            number(15,4);
    numRate2    number(15,6);
    numcustom number(15,6);
    numspot number(15,6);
    numfcy number(15,2);
    numfcy1 number(15,2);
    numinr number(15,2);
    numinr1 number(15,2);
    numtemp1 number(15,6);
    varaction varchar2(30);
    varentity varchar2(30);
    vartemp varchar2(1000);
    vartemp1 varchar2(1000);
    varReference varchar(25);

    ExecutionDate  date;
    BaseCurrency number(8);
    OtherCurrency number(8);
    DelivaryType number(8);
    DelivaryOption number(8);
    DelivaryDays number(8);
    DelivaryDate date;



    vartemp2 varchar2(3000);
    varTemp3 varchar2(4000);
    vartemp4 varchar2(4000);
    vartemp5 VarChar(4000);
    vartemp6 VarChar(4000);
    vartemp7 VarChar(4000);
    vartemp8 VarChar(4000);

    sqlQuery varchar(4000);
    datworkdate date;
    dattemp date;
    dattemp1 date;
    dattemp2 date;
    dattemp3 date;
    varuserid varchar2(30);
    varoperation gconst.gvaroperation%type;
    varmessage gconst.gvarmessage%type;
    varerror gconst.gvarerror%type;
    varquery varchar2(8000);
    varkey varchar2(1000);
    varvalue varchar2(200);
    vardummy varchar2(2048);
    xmldoc gconst.gxmltype%type;
    elmtemp xmldom.domelement;
    doctemp xmldom.domdocument;
    noltemp xmldom.domnodelist;
    nodtemp xmldom.domnode;
    error_occurred exception;
    --recEntity           EntityInfo%ROWTYPE;
    varCompany          varchar2(30);
    varStatus           varchar2(30);
    varLocation         varchar2(30);
    varCondition        varchar2(1000);
    numUserActionType   number(5);
    numCompanyCode	number(8);
    numLocationCode     number(8);
    clbTemp             clob;   -- siva modifn
    sqlQuery2           varchar(4000);
    varweblogin    varchar2(1);
    varusergroup   number(8);

    tempDate       Date;
    tempvar        varchar(50);
    varcom varchar2(200) := '';
    varloc varchar2(200) := '';
    varbank varchar2(200) := '';
    vardoctype varchar2(200) := '';
     vardocentity varchar2(200) := '';
    varQuery1 varchar2(4000);
    varQuery2 varchar2(4000);
    varSelect varchar2(4000);
    varAuditTable  varchar2(50);
    varEntryDet_col varchar2(50);
    varCreateDate_col varchar2(50);
    varAddDate_col varchar2(50);

    CompanyColumn  varchar(50);
    RecordStatusColumn varchar(50);
    LocationColumn varchar(50);
    UGroup number(8);
    UserID varchar(50);
    ConfirmSQL varchar(4000);
    ViewSQL varchar(4000);  
    EditSQL varchar(4000); 
    UnConfirmSQL varchar(4000); 
    INActiveSQL varchar(4000); 
    DeleteSQL  varchar(4000);
    GeneralSQL varchar(4000);
    varSQLTemp varchar(4000);
  begin
    numerror := 0;
    numrecords := 0;
    xmldoc := xmltype(paramdata);
    --delete from testhari;commit;
    --insert into testhari values('after xmldoc','inside cursor');commit;
    numerror := 1;
    varoperation := 'extracting parameters';
    numInfoType := gconst.fncxmlextract(xmldoc,'Type',numinfotype);
    datworkdate := gconst.fncxmlextract(xmldoc,'WorkDate',datworkdate);
    varUserID := UPPER(gconst.fncxmlextract(xmldoc,'UserCode',varuserid));
    numaction := nvl(gconst.fncxmlextract(xmldoc,'Action',numaction),0);
    varEntity := gconst.fncxmlextract(xmldoc,'Entity',varentity);
    -- added by manjunath Reddy on 24/09/2019-- to get the User Selected while fetching the Records
    begin
        numUserActionType:= nvl(gconst.fncxmlextract(xmldoc,'UserActionType',numUserActionType),0);
    exception 
      when others then
        numUserActionType:=101;
    end;
    GLOG.Log_write('After User Action Type Extraction' || ' : ' || numinfotype);
   -- numCompanyCode:= gconst.fncxmlextract(xmldoc,'CompanyID',numCompanyCode);
   -- numLocationCode:=gconst.fncxmlextract(xmldoc,'LocationID',numLocationCode);

    GLOG.Log_write(VarOperation || ' : ' || numinfotype);
    --added by shrihari on 21/06/19 to identify login from web or windows
    --  varweblogin:=gconst.fncxmlextract(xmldoc,'WEBLogin',numLocationCode);

    varmessage := 'cursor requested: ' || numinfotype;
   --  insert into testhari values(varmessage,'varmessage');commit;
    numerror := numinfotype;

    if numinfotype is null then
      varerror := 'information type is not furnished';
      raise error_occurred;
    end if;

    if numinfotype = REFPICKUPLIST then
      numrecords := 0;

--clouddb_global.logwrite.Log_write('iNSIDE REFPICKUPLIST');
      varoperation := 'Checking the Add load if yes return by not selecting any data ';
      begin 
      --insert into temp values ('1','REFPICKUPLIST NXT');
            -- THis Should not Change in Windows 
        numCode7 := gconst.fncxmlextract(xmldoc,'Param/UserAction',numCode7);
      --   insert into temp values ('2',numCode7);
      exception 
        when others then
       --  insert into temp values ('3','REFPICKUPLIST Exception');
         numCode7 := numaction;
      --    insert into temp values ('4',numCode7);
      end;

      if ((numCode7 =Gconst.ADDLOAD) or (numCode7 =Gconst.BROWSERLOAD)) then 
     -- insert into temp values ('5',numCode7);
            goto dummy_cursor;
      end if;
      Glog.log_write(varoperation || ' ' || varEntity);

    -- Changed by Manjunath Reddy 31-03-2008
--      if varEntity = 'HOLIDAYTABLE' then
--        varOperation := 'Extracting browser fields for HOLIDAY TABLE';
--
--        select count(*) into numRecords
--          from trsystem001
--          where hday_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--        Open GenCursor for
--        select distinct hday_location_code as "LocationCode", 
--          fncGetDescription(hday_location_code, 1) "LocationCode_Desc",
--          (TO_CHAR(HDAY_CALENDAR_DATE,'DD/MM/YY')) "CalendarDate",--to_char(HDAY_CALENDAR_DATE,'yyyy') as "CalendarDate"
--          --to_char(sysdate,'yyyy') as CalendarDate
--      --    hday_record_status RecordStatus
--            --HDAY_DAY_STATUS "DayStatus", 
--            fncGetDescription(HDAY_DAY_STATUS, 1) "Status"
--          from holidaytable
--          where hday_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)
--          and HDAY_CALENDAR_DATE > sysdate;
--
--        Goto Process_End;
--      end if;

       ----ADDED BY SUPRIYA ON 04/05/2020
--       if varEntity = 'CASHFLOWBUDGET' then
--            varOperation := 'Extracting browser fields for CASHFLOWBUDGET';
--            select count(*) into numRecords
--            from TRTRAN150
--            where CBUS_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--            
--           if numRecords = 0 then
--              Goto Dummy_Cursor;
--           end if;
--                
--            Open GenCursor for 
--                Select CBUS_SYSTEM_REFERENCE "SystemReference", pkgReturnCursor.fncGetDescription(CBUS_CASHFLOW_TYPE,1)"CashFlowType",
--                       CBUS_EFFECTIVE_DATE "EffectiveDate", CBUS_VERSION_NUMBER "VersionNumber", CBUS_APPROVAL_DATE "ApprovalDate",
--                       decode( CBUS_APPROVAL_STATUS ,12400001,'Approved','Not Approved')"ApprovalStatus",
--                       CBUS_APPROVAL_STATUS "ApprovalStatusCode", CBUS_CASHFLOW_TYPE "CashFlowTypeCode"
--                FROM TRTRAN150 
--                WHERE CBUS_RECORD_STATUS not in (10200005,10200006) 
--                ORDER BY CBUS_EFFECTIVE_DATE;    
--            Goto Process_End;
--       end if;

--       if varEntity = 'DAILYRATETABLENEW' then
--        varOperation := 'Extracting browser fields for DAILYRATETABLENEW ';
--        select count(*) into numRecords
--          from TRTRAN013
--          where DRAT_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--        Open GenCursor for
--            select to_char(DRAT_EFFECTIVE_DATE,'dd-MM-YYYY') "EffectiveDate",
--             DRAT_SERIAL_NUMBER "SerialNumber",
--             DRAT_RATE_DESCRIPTION "RateDescription",
--             DRAT_RATE_TIME "RateTme",
--             fncGetDescription(DRAT_RATE_TYPE,1) "RateType"
--             from TRTRAN013
--             where DRAT_RECORD_STATUS  not in (10200005,10200006)
--             group by DRAT_EFFECTIVE_DATE, DRAT_SERIAL_NUMBER,DRAT_RATE_DESCRIPTION,DRAT_RATE_TIME,DRAT_RATE_TYPE;
--        Goto Process_End;
--      end if;

--if varEntity = 'HOLIDAYTABLE' then
--        varOperation := 'Extracting browser fields for HOLIDAYTABLE ';
--        select count(*) into numRecords
--          from TRSYSTEM001
--          where HDAY_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--        Open GenCursor for
--             select to_char(HDAY_CALENDAR_DATE,'dd-MM-YYYY') "CalendarDate",
----              HDAY_LOCATION_CODE "Location",
--             fncGetDescription(hday_location_code, 1) "Location",
----             HDAY_DAY_STATUS "Status",
--             fncGetDescription(HDAY_DAY_STATUS, 1) "Status",
--             HDAY_DAY_REMARKS "Remarks"
--             from TRSYSTEM001
--             where HDAY_RECORD_STATUS  not in (10200005,10200006)
--             group by HDAY_CALENDAR_DATE, HDAY_LOCATION_CODE,HDAY_DAY_STATUS,HDAY_DAY_REMARKS;
--        Goto Process_End;
--      end if;

--if varEntity = 'PERIODOPEN' then
--        varOperation := 'Extracting browser fields for PERIODOPEN ';
--        select count(*) into numRecords
--          from TRSYSTEM001A
--          where PERD_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--        Open GenCursor for
--             select 
--             to_char(PERD_DATE_FROM,'dd-MM-YYYY') "DateFrom",
--             to_char(PERD_DATE_TO,'dd-MM-YYYY') "DateTo",
--             PKGRETURNCURSOR.fncGetDescription(PERD_DAY_STATUS, 1) "DayStatus",
--             PERD_DAY_REMARKS "DayRemarks"
--             from TRSYSTEM001A
--             where PERD_RECORD_STATUS  not in (10200005,10200006)
--             group by PERD_DATE_FROM,PERD_DATE_TO, PERD_DAY_STATUS,PERD_DAY_REMARKS;
--        Goto Process_End;
--      end if;
--      
--   if varEntity = 'PERIODCLOSE' then
--        varOperation := 'Extracting browser fields for PERIODOPEN ';
--        select count(*) into numRecords
--          from TRSYSTEM001A
--          where PERD_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--        Open GenCursor for
--             select 
--             to_char(PERD_DATE_FROM,'dd-MM-YYYY') "DateFrom",
--             to_char(PERD_DATE_TO,'dd-MM-YYYY') "DateTo",
--             PKGRETURNCURSOR.fncGetDescription(PERD_DAY_STATUS, 1) "DayStatus",
--             PERD_DAY_REMARKS "DayRemarks"
--             from TRSYSTEM001A
--             where PERD_RECORD_STATUS  not in (10200005,10200006)
--             group by PERD_DATE_FROM,PERD_DATE_TO, PERD_DAY_STATUS,PERD_DAY_REMARKS;
--        Goto Process_End;
--      end if;   

--        if varEntity = 'IRSINTERESTRATE' then
--        varOperation := 'Extracting browser fields for IRSINTERESTRATE ';
--        select count(*) into numRecords
--          from TRTRAN094
--          where IRAT_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--        Open GenCursor for
--             select to_char(IRAT_EFFECTIVE_DATE,'dd-MM-YYYY') "EffectiveDate",
--             to_char(IRAT_SETTLEMENT_DATE,'dd-MM-YYYY') "SettlementDate",
--             IRAT_INTEREST_TYPE "InterestType",
--             IRAT_SERIAL_NUMBER "SerialNumber",
--             IRAT_CURRENCY_CODE "CurrencyCode",
--             IRAT_FORWARD_MONTH "ForwardMonth",
--             IRAT_RATE_TYPE	"RateType",
--             IRAT_RATE_TIME	"RateTime",
--             IRAT_TIME_STAMP	"TimeStamp",
--             IRAT_RATE_DESCRIPTION	"RateDescription",
--             IRAT_INSTRUMENT	"Instrument",
--             IRAT_UNDERLYING	"Underlying",
--             IRAT_SETTLEMENT_PRICE	"SettlementPrice",
--             IRAT_BID_PRICE	"BIDPrice"
--             from TRTRAN094
--             where IRAT_RECORD_STATUS  not in (10200005,10200006)
--             group by IRAT_EFFECTIVE_DATE,IRAT_SETTLEMENT_DATE,IRAT_INTEREST_TYPE,
--             IRAT_SERIAL_NUMBER,IRAT_CURRENCY_CODE,IRAT_FORWARD_MONTH,IRAT_RATE_TYPE,
--             IRAT_RATE_TIME,IRAT_TIME_STAMP,IRAT_RATE_DESCRIPTION,IRAT_INSTRUMENT,IRAT_UNDERLYING,
--             IRAT_SETTLEMENT_PRICE,IRAT_BID_PRICE;
--        Goto Process_End;
--      end if;

--      if varEntity = 'EXPOSURESETTLEMENTNEW' then
--        varOperation := 'Extracting browser fields for Exposure Edit';
--        select count(*) into numRecords
--          from TRTRAN004
--          where HEDG_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)
--          AND HEDG_BATCH_NUMBER IS NOT NULL;
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--        
--        Open GenCursor for
--         SELECT DISTINCT  BREL_ENTRY_DATE "EntryDate",
--              BREL_BATCH_NUMBER "BatchNumber",
--              SUM(BREL_REVERSAL_FCY)"Hedge Fcy",
--              fncGetDescription(BREL_COMPANY_CODE,2)Company,
--              BREL_COMPANY_CODE "CompanyCode",
--              1 as "ReverseSerial"
--            FROM TRTRAN003
--            where BREL_BATCH_NUMBER IS NOT NULL
--            AND BREL_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)
--            GROUP BY BREL_ENTRY_DATE,BREL_BATCH_NUMBER,BREL_COMPANY_CODE;
--        Goto Process_End;
--      end if;      
--      
--      if varEntity = 'BANKBALANCEENTRY' then
--        varOperation := 'Extracting browser fields for BANKBALANCEENTRY';
--      
--        select count(*) into numRecords
--          from trmaster306a
--          where (((( numCode7 =Gconst.VIEWLOAD) or ( numCode7 =Gconst.EDITLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)))
--                 or ((( numCode7 =Gconst.ADDLOAD) or ( numCode7 =Gconst.CONFIRMLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,Gconst.STATUSAUTHORIZED))));
--
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--        
--        
--        -- 
--        
--      --if ((numCode7 !=108) and (recEntity.einf_sql_condition is not null)) then
--      
--        Open GenCursor for
--        select distinct lbbl_effective_date as "EffectiveDate", 
--          fncGetDescription(lbbl_Company_code, 1) "Company"
--          from BANKBALANCEENTRY
--          where (((( numCode7 =Gconst.VIEWLOAD) or ( numCode7 =Gconst.EDITLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)))
--                 or ((( numCode7 =Gconst.ADDLOAD) or ( numCode7 =Gconst.CONFIRMLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,Gconst.STATUSAUTHORIZED))));
--        
--        Goto Process_End;
--      end if;

     ---//added by kumar.h on 06-06-09
   ---//purpose:- to show the relation table details in mode other than add mode/it's not possible to show
   --//           this in usualway

--      if ((varEntity='OPTIONHEDGEDEAL') or(  varEntity='OPTIONTRADEDEAL')) then
--      
--        varOperation := 'Extracting browser fields for Option Trades';
--      
--        select count(*) into numRecords
--          from trtran071
--          where copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--
--
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--
--        Open GenCursor for
--            select  copt_execute_date "ExecuteDate",copt_deal_number "DealNumber",
--                 fncgetdescription(copt_counter_party,2) "CounterParty", 
--                 copt_base_amount "BaseAmount",fncgetdescription(copt_contract_type,2) "DealType", 
--                round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall),4) "BC",
--               round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut),4) "BP",
--               round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut),4) "SP",
--               round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall),4) "SC",
--                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
--                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
--                 fncgetdescription(copt_base_currency,2) "BaseCurrency", fncgetdescription(copt_other_currency,2) "OtherCurrency",
--                 copt_other_amount "OtherAmount",
--                 copt_maturity_date "MaturityDate",
--                 fncgetdescription(copt_hedge_trade,1) "HedgeTrade",
--                 copt_time_stamp "DealTimeStamp",
--                 (select user_user_name 
--                   from usermaster 
--                  where user_user_id=copt_user_id) "UserName",
--                  copt_lot_numbers "Lot Numbers",copt_lot_price "Lot Price",
--                  copt_dealer_remark "Remarks",
--                  COPT_COMPANY_CODE "CompanyCode",cOPT_SERIAL_NUMBER "SerialNumber"
--             from trtran071 
--              where copt_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED);
--              
--      Goto Process_End;
--      
--      end if;

   --//kumar.h ends here    

--    if ((varEntity = 'DEALCANCELLATION') and (numaction=gconst.ADDLOAD))  then
--        varOperation := 'Extracting browser fields for deal Cancelation';
--      
--        select count(*) into numRecords
--          from trtran001
--          where deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL,gconst.STATUSAUTHORIZED);
--
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--        insert into temp values (numRecords,varEntity);
--        commit;
--        Open GenCursor for
--        select deal_deal_number dealnumber,deal_execute_date executedate,deal_hedge_trade hedgetrade,
--               deal_buy_sell buysell,deal_swap_outright swapoutright,deal_counter_party counterparty,
--               deal_base_currency basecurrency,deal_other_currency othercurrency,deal_exchange_rate exchangerate,deal_base_amount baseamount,deal_maturity_date maturitydate
--          from trtran001
--          where deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL,gconst.STATUSAUTHORIZED);
--        
--        Goto Process_End;
--     end if;

--     begin 
--        select * 
--        into recEntity
--        from EntityInfo
--        where einf_entity_name = varEntity
--         and einf_user_group in (select user_group_code 
--                                  from USERMASTER
--                                 where user_user_id= varuserid
--                                 and user_record_status not in (10200005,10200006));
--      exception
--       when no_data_found then 
--          select * 
--          into recEntity
--          from EntityInfo
--          where einf_entity_name = varEntity
--          and einf_user_group=14299999;
--      end;
        varOperation := 'Checking whether user have any specific access ';

      Glog.log_write(varOperation);
      begin        
            select user_group_code  into varusergroup
                  from USERMASTER
                 where UPPER(user_user_id)= UPPER(varuserid)
                 and user_record_status not in (10200005,10200006);

--        select * 
--        into recEntity
--        from EntityInfo
--        where einf_entity_name = varEntity
--         and einf_user_group =(case when (select count(*) from entityinfo 
--                                            where einf_entity_name=varEntity
--                                            and einf_user_group=varusergroup)>0 then varusergroup
--                                            else 14299999 end)
--         AND EINF_USER_ID = (case when(select count(*) from entityinfo 
--                                  where einf_entity_name=varEntity
--                                  and EINF_USER_ID=varuserid)>0 then varuserid
--                                  else '.' end)  ;   

        select EINF_COMPANY_FIELD CompanyColumn,EINF_STATUS_FIELD RecordStatusColumn,
               EINF_LOCATION_FIELD LocationColumn, EDET_USER_GROUP UGroup, EDET_USER_ID UserID,
               EDET_CONFIRMSQL_CONDITION ConfirmSQL, EDET_VIEWSQL_CONDITION ViewSQL,  EDET_EDITSQL_CONDITION EditSQL,
               EDET_UNCONFIRMSQL_CONDITION UnConfirmSQL, EDET_INACTIVESQL_CONDITION INActiveSQL, 
               EDET_DELETESQL_CONDITION DeleteSQL, EDET_GENERALSQL_CONDITION GeneralSQL
          into CompanyColumn,RecordStatusColumn ,LocationColumn,
               UGroup ,UserID,
               ConfirmSQL ,ViewSQL , EditSQL ,
               UnConfirmSQL ,INActiveSQL, DeleteSQL,GeneralSQL 
         from trsystem995 inner join trsystem995A
         on EINF_ENTITY_NAME=EDET_ENTITY_NAME
        where einf_entity_name = varEntity
         and EINF_RECORD_STATUS not in (10200005,10200006)
         and EDET_RECORD_STATUS not in (10200005,10200006)
         and EDET_USER_GROUP =(case when (select count(*) from entityinfo 
                                            where einf_entity_name=varEntity
                                            and EDET_USER_GROUP=varusergroup)>0 then varusergroup
                                            else 14299999 end)
         AND EDET_USER_ID = (case when(select count(*) from entityinfo 
                                  where einf_entity_name=varEntity
                                  and EDET_USER_ID=varuserid)>0 then varuserid
                                  else '.' end)  ;   

      exception
       when others then 
--          select * 
--          into recEntity
--          from EntityInfo
--          where einf_entity_name = varEntity
--          and einf_user_group=14299999
--          and EINF_USER_ID='.';  
       begin
            select EINF_COMPANY_FIELD CompanyColumn,EINF_STATUS_FIELD RecordStatusColumn,
                   EINF_LOCATION_FIELD LocationColumn,
                   EDET_USER_GROUP UGroup, EDET_USER_ID UserID,
                   EDET_CONFIRMSQL_CONDITION ConfirmSQL, EDET_VIEWSQL_CONDITION ViewSQL,  EDET_EDITSQL_CONDITION EditSQL,
                   EDET_UNCONFIRMSQL_CONDITION UnConfirmSQL, EDET_INACTIVESQL_CONDITION INActiveSQL, 
                   EDET_DELETESQL_CONDITION DeleteSQL, EDET_GENERALSQL_CONDITION GeneralSQL
              into CompanyColumn,RecordStatusColumn ,LocationColumn,
                   UGroup ,UserID,
                   ConfirmSQL ,ViewSQL , EditSQL ,
                   UnConfirmSQL ,INActiveSQL, DeleteSQL,GeneralSQL 
             from trsystem995 inner join trsystem995A
             on EINF_ENTITY_NAME=EDET_ENTITY_NAME
            where einf_entity_name = varEntity
             and EINF_RECORD_STATUS not in (10200005,10200006)
             and EDET_RECORD_STATUS not in (10200005,10200006)
             and EDET_USER_GROUP =14299999
             AND EDET_USER_ID ='.' ;   
        exception 
           when others then 
              select EINF_COMPANY_FIELD CompanyColumn,EINF_STATUS_FIELD RecordStatusColumn,
                   EINF_LOCATION_FIELD LocationColumn
              into CompanyColumn,RecordStatusColumn ,LocationColumn
                 from trsystem995 
                where einf_entity_name = varEntity
                 and EINF_RECORD_STATUS not in (10200005,10200006); 
           end ;

      end;

      varOperation := 'Checking whether records exists';
      Glog.log_write(varOperation);
      numFlag := 0;
      varDummy := 'select count(*) ';
      varDummy := varDummy || ' from ' || varEntity ;


      if CompanyColumn is not null then
        varCondition := varCondition || CompanyColumn ||' in (select usco_company_code
                          from trsystem022a where UPPER(usco_user_id) =' || '''' ||  varUserID ||'''' || '
                            and usco_record_Status not in (10200005,10200006))';
        numFlag := 1;
      end if;        

      varTemp := '';
      if LocationColumn is not null then
        if numFlag = 1 then
          varTemp := ' and ';
        end if;       
         varCondition := varCondition || varTemp || LocationColumn ||' in (select USLO_ENTITY
                       from TRSYSTEM022D 
                       where UPPER(USLO_USER_ID) =' || '''' ||  varUserID ||'''' || '
                        and USLO_RECORD_STATUS not in (10200005,10200006))';
--        varCondition := varCondition || varTemp;
--        varCondition := varCondition || LocationColumn || ' = ' || numLocationCode;
        numFlag := 1;
      end if;        

      varTemp := '';
      if numFlag = 1 then
        varTemp := ' and ';
      end if;      

--      varCondition := varCondition || varTemp;
--      varCondition := varCondition || RecordStatusColumn || ' not in (';
--      varCondition := varCondition || GConst.STATUSINACTIVE || ',' || GConst.STATUSDELETED || ')';



      VarOperation:= 'Checking the whether action is View';
      if RecordStatusColumn is not null then
        if (varCondition is not null ) then
            varCondition:=varCondition || ' and ';
        end if;
          if (numCode7 =Gconst.EDITLOAD) then
               varCondition :=  varCondition || RecordStatusColumn || ' not in (10200005,10200006,10200003) ';
          elsif (numCode7 =Gconst.CONFIRMLOAD) then
               varCondition :=  varCondition ||  RecordStatusColumn || ' not in (10200005,10200006,10200003,10200007) ';
          elsif (numCode7 =Gconst.UNCONFIRMLOAD) then
               varCondition :=  varCondition  || RecordStatusColumn || ' =10200003 ';
          elsif (numCode7 =Gconst.DELETELOAD) then
               varCondition :=  varCondition  ||  RecordStatusColumn || ' not in (10200005,10200006,10200003) ';
          elsif (numCode7 =Gconst.VIEWLOAD) then
               varCondition :=  varCondition  || RecordStatusColumn || ' not in (10200005,10200006)';
          elsif (numcode7=Gconst.INACTIVELOAD) then
              varCondition :=  varCondition  || RecordStatusColumn || ' not in (10200005,10200006,10200003) ';
    --      if (numCode7=Gconst.UNCONFIRMLOAD) then
    --         varCondition :=  varCondition || ' and ' || RecordStatusColumn || ' =10200003 ';
          end if;
      end if;
     -- numCode7 := gconst.fncxmlextract(xmldoc,'KeyValues/Action',numCode7);
    Glog.log_write('Record Status '||numCode7);

      if ((numCode7 =Gconst.EDITLOAD) and (EditSQL is not null)) then
          varSQLTemp:= EditSQL;  
      elsif ((numCode7 =Gconst.CONFIRMLOAD) and (ConfirmSQL is not null)) then
          varSQLTemp:= ConfirmSQL; 
      elsif ((numCode7 =Gconst.UNCONFIRMLOAD) and (UnConfirmSQL is not null)) then
          varSQLTemp:= UnConfirmSQL;
       -- varCondition := varCondition || GConst.STATUSINACTIVE || ',' || GConst.STATUSDELETED || ', )';
      elsif ((numCode7 =Gconst.DELETELOAD) and (DeleteSQL is not null)) then
         varSQLTemp:= DeleteSQL;
      elsif ((numCode7 =Gconst.VIEWLOAD) and (ViewSQL is not null)) then
        varSQLTemp:= ViewSQL;  
      elsif ((numcode7=Gconst.INACTIVELOAD) and (INActiveSQL is not null)) then
        varSQLTemp:= INActiveSQL; 
      elsif (GeneralSQL is not null) then
        varSQLTemp:= GeneralSQL;
      end if;  

      if varSQLTemp is not null then  
        if varCondition is null then 
           varCondition:= varSQLTemp;
        else 
           varCondition:= varCondition || ' and ' || varSQLTemp;
        end if;
      end if;



      varOperation:=' Incase of Entity Name is UserMaster then Additional COntiona has been added';
      if (varEntity='USERMASTER') then
          varCondition:= varCondition || ' and USER_LICENSE_REFERENCE in 
            ( select USER_LICENSE_REFERENCE from usermaster
               where UPPER(User_user_id) =' || '''' || varUserId || '''' || '
               and user_record_Status not in (10200005,10200006))';
       end if;     

     if varCondition is null then 
            varDummy := varDummy ;
      else
            varDummy := varDummy ||' where ' ||  varCondition;
      end if;
      
       Glog.Log_write('Condation ' || ' : ' || varCondition);
--    delete from temp;
--    insert into temp values (varDummy,varDummy);
--    commit;
   Glog.Log_write('iNSIDE REFPICKUPLIST2' || ' : ' || varDummy);
    execute immediate varDummy
        into numrecords;

    if numrecords = 0 then
       goto dummy_cursor;
    end if;
--
--        if ((varEntity='OPTIONHEDGEDEAL') or(  varEntity='OPTIONTRADEDEAL') or (varEntity='OPTIONDEALCONFIRMATION') or (varEntity='OPTIONDEALSFOREDIT')) then
--
--        varOperation := 'Extracting browser fields for Option Trades';
--
--        sqlQuery:= 'select copt_deal_number "DealNumber",copt_execute_date "ExecuteDate",
--                 copt_counter_party "CounterParty", 
--                 pkgReturnCursor.fncgetdescription(copt_counter_party,2) "CounterPartyDes", 
--                 copt_base_amount "BaseAmount",pkgReturnCursor.fncgetdescription(copt_contract_type,2) "DealTypeDes", copt_contract_type "DealType",
--                round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell='||Gconst.PURCHASEDEAL||'
--                   and cosu_option_type='||GCONST.OptionCall||'),4) "BuyCall",
--               round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell='||Gconst.PURCHASEDEAL||'
--                   and cosu_option_type='||GCONST.OptionPut||'),4) "BuyPut",
--               round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell='||Gconst.SALEDEAL||'
--                   and cosu_option_type='||GCONST.OptionPut||'),4) "SellPut",
--               round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell='||Gconst.SALEDEAL||'
--                   and cosu_option_type='||GCONST.OptionCall||'),4) "SellCall",
--                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
--                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
--                 copt_base_currency "BaseCurrency",
--                 pkgReturnCursor.fncgetdescription(copt_base_currency,2) "BaseCurrencyDes",
--                 copt_other_currency "OtherCurrency",
--                 pkgReturnCursor.fncgetdescription(copt_other_currency,2) "OtherCurrencyDes",
--                 copt_other_amount "OtherAmount",
--                 copt_maturity_date "MaturityDate",
--                 copt_hedge_trade "HedgeTrade",
--                 pkgReturnCursor.fncgetdescription(copt_hedge_trade,2) "HedgeTradeDes",
--                 copt_Backup_deal "Initiator",
--                 pkgReturnCursor.fncgetdescription(copt_Backup_deal,2) "InitiatorDes",
--                 copt_init_code "Trader",
--                 pkgReturnCursor.fncgetdescription(copt_init_code,2) "TraderDes",
--                 copt_lot_numbers "LotNumbers",copt_lot_price "LotPrice",
--                 copt_dealer_remark "Remarks",
--                 COPT_COMPANY_CODE "CompanyCode",cOPT_SERIAL_NUMBER "SerialNumber"
--             from trtran071 where copt_record_status not in(10200005,10200006)
--                              and  COPT_COMPANY_CODE in (select usco_company_code
--                          from trsystem022a where UPPER(usco_user_id) =' || '''' ||  varUserID ||'''' || ')'; 
--
--             Open GenCursor for sqlQuery || ' and ' ||  varCondition;
--
--      Goto Process_End;
--      end if;
--
-- if ((varEntity='OPTIONHEDGEDEAL') or(  varEntity='OPTIONTRADEDEAL') or (varEntity='OPTIONDEALCONFIRMATION') or (varEntity='OPTIONDEALSFOREDIT')) then
--
--        varOperation := 'Extracting browser fields for Option Trades';
--
--        sqlQuery:= 'select copt_deal_number "DealNumber",copt_execute_date "ExecuteDate",
--                 pkgReturnCursor.fncgetdescription(copt_counter_party,2) "CounterParty", 
--                 copt_base_amount "BaseAmount",pkgReturnCursor.fncgetdescription(copt_contract_type,2) "ContractType", 
----                 round((select avg(cosu_strike_rate) from trtran072 
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell='||Gconst.PURCHASEDEAL||'
----                   and cosu_option_type='||GCONST.OptionCall||'),4) "BuyCall",
----               round((select avg(cosu_strike_rate) from trtran072 
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell='||Gconst.PURCHASEDEAL||'
----                   and cosu_option_type='||GCONST.OptionPut||'),4) "BuyPut",
----               round((select avg(cosu_strike_rate) from trtran072 
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell='||Gconst.SALEDEAL||'
----                   and cosu_option_type='||GCONST.OptionPut||'),4) "SellPut",
----               round((select avg(cosu_strike_rate) from trtran072 
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell='||Gconst.SALEDEAL||'
----                   and cosu_option_type='||GCONST.OptionCall||'),4) "SellCall",
--                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumSuAmount",
--                 copt_Premium_Exrate "PremiumExrate",copt_premium_Local "PremiumLocal",
--                 pkgReturnCursor.fncgetdescription(copt_base_currency,2) "BaseCurrency",
--                 pkgReturnCursor.fncgetdescription(copt_other_currency,2) "OtherCurrency",
--                 copt_other_amount "OtherAmount",
--                 copt_maturity_date "MaturityDate",
--                 pkgReturnCursor.fncgetdescription(copt_hedge_trade,2) "HedgeTrade",
--                 pkgReturnCursor.fncgetdescription(copt_Backup_deal,2) "BackupDeal",
--                 pkgReturnCursor.fncgetdescription(copt_init_code,2) "InitCode",
--                 copt_lot_numbers "LotNumbers",copt_lot_price "LotPrice",
--                 copt_dealer_remark "DealerRemark",
--                 cOPT_SERIAL_NUMBER "SerialNumber"
--             from trtran071 where copt_record_status not in(10200005,10200006)
--                              and  COPT_COMPANY_CODE in (select usco_company_code
--                          from trsystem022a where UPPER(usco_user_id) =' || '''' ||  varUserID ||'''' || ')'; 
--
--             Open GenCursor for sqlQuery || ' and ' ||  varCondition;
--
--      Goto Process_End;
--      end if;

--    if varEntity = 'RELATIONTABLE' then
--        varOperation := 'Extracting browser fields for RELATION TABLE';
--
--        select count(*) into numRecords
--          from trsystem008
--          where erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--      --  insert into temp values('numRecords',numRecords);commit;
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--         sqlQuery:='select distinct pkgreturncursor.fncgetdescription(a.erel_company_code,2) "CompanyCode_Desc",
--               pkgreturncursor.fncgetdescription(to_number(to_char(a.erel_entity_type)||''00000''),2) "EntityName",
--               pkgreturncursor.fncgetdescription(erel_main_entity,2) "MainEntityName",
--               pkgreturncursor.fncgetdescription(to_number(to_char(erel_relation_type)||''00000''),2) "RelationTypeName",
--               erel_main_entity as "MainEntity",
--               erel_company_code as "CompanyCode",erel_entity_type as "EntityType",
--               EREL_ENTITY_RELATION as "EntityRelation"
--          from trsystem008 a, trmaster001
--         where a.erel_main_entity = pick_key_value
--           and a.erel_entity_type = pick_key_group
--            and pick_key_type in (10100002,10100003)
--           and a.erel_record_status not in (10200005,10200006)';
--            Open GenCursor for sqlQuery || ' and ' ||  varCondition; 
--        Goto Process_End;
--      end if;
    if varEntity = 'RELATIONTABLE' then
        varOperation := 'Extracting browser fields for RELATION TABLE';

        select count(*) into numRecords
          from trsystem008
          where erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
      --  insert into temp values('numRecords',numRecords);commit;
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

         sqlQuery:='select distinct pkgreturncursor.fncgetdescription(a.erel_company_code,2) "CompanyCode_Desc",
               pkgreturncursor.fncgetdescription(to_number(to_char(a.erel_entity_type)||''00000''),2) "MappingHeaderFrom",
               pkgreturncursor.fncgetdescription(to_number(to_char(erel_relation_type)||''00000''),2) "MappingHeaderTo",
               pkgreturncursor.fncgetdescription(erel_main_entity,2) "MappingFrom",
               pkgreturncursor.fncgetdescription(EREL_ENTITY_RELATION,2) "MappingTo",
               erel_entity_type as "EntityType",erel_relation_type "RelationType",
               erel_main_entity as "MainEntity",
               EREL_ENTITY_RELATION as "EntityRelation",
               EREL_SERIAL_NUMBER "SerialNumber",
               erel_company_code as "CompanyCode"
          from trsystem008 a, trmaster001
         where a.EREL_ENTITY_RELATION = pick_key_value
           and a.erel_relation_type = pick_key_group
            and pick_key_type in (10100002,10100003)
           and a.erel_record_status not in (10200005,10200006)';
            Open GenCursor for sqlQuery || ' and ' ||  varCondition; 
        Goto Process_End;
      end if;

--    if varEntity = 'BANKSTATEMENTEXTRACTIONRULES' then
--    varoperation := 'extracting browser fields for RULES';
--    
--        select count(*) into numrecords
--        from TRSYSTEM952
--        where CATG_RECORD_STATUS not in(10200005, 10200006);
--        
--        if numrecords = 0 then
--        goto dummy_cursor;
--        end if;
--        
--        sqlQuery:='select CATG_RULE_REFERENCE "RuleReference",
--                       PKGRETURNCURSOR.fncGetDescription(CATG_COMPANY_CODE,1) "CompanyCode_Desc",
--                       PKGRETURNCURSOR.fncGetDescription(CATG_LOCATION_CODE,1) "LocationCode_Desc",
--                       PKGRETURNCURSOR.fncGetDescription(CATG_BANK_CODE,2) "BankCode_Desc",
--                       PKGRETURNCURSOR.fncGetDescription(CATG_ACCOUNT_TYPE,1) "AccountType_Desc",
--                        CATG_ACCOUNT_NUMBER "AccountNumber", CategoryCode "CategoryCode", 
--                       PKGRETURNCURSOR.fncGetDescriptionMulti(CategoryCode,1) "CategoryCode_Desc",
--                       CATG_COMPANY_CODE "CompanyCode", CATG_LOCATION_CODE "LocationCode",
--                       CATG_BANK_CODE "BankCode", CATG_ACCOUNT_TYPE "AccountType"
--                   from trsystem952 left outer join (SELECT LISTAGG(distinct(CATD_CATEGORY_CODE),'||''''||','||''''||' ) 
--                                                     within group (order by CATD_RECORD_STATUS) CategoryCode, CATD_RULE_REFERENCE
--                                                     from trsystem952a
--                                                     where CATD_RECORD_STATUS not in(10200005, 10200006)
--                                                     and rownum < 11
--                                                     GROUP BY CATD_RULE_REFERENCE) subtable
--                   on CATG_RULE_REFERENCE = subtable.CATD_RULE_REFERENCE 
--                   where CATG_RECORD_STATUS not in(10200005, 10200006)';
--        Open GenCursor for sqlQuery;    
--        goto process_end;    
--    end if;
--    

if varEntity = 'BANKSTATEMENTEXTRACTIONRULES' then
    varoperation := 'extracting browser fields for RULES';
    
        select count(*) into numrecords
        from TRSYSTEM952
        where CATG_RECORD_STATUS not in(10200005, 10200006);
        
        if numrecords = 0 then
        goto dummy_cursor;
        end if;
        
        sqlQuery:='select CATG_RULE_REFERENCE "RuleReference",
                       PKGRETURNCURSOR.fncGetDescription(CATG_COMPANY_CODE,1) "CompanyCode_Desc",
                       PKGRETURNCURSOR.fncGetDescription(CATG_LOCATION_CODE,1) "LocationCode_Desc",
                       PKGRETURNCURSOR.fncGetDescription(CATG_BANK_CODE,2) "BankCode_Desc",
                       PKGRETURNCURSOR.fncGetDescription(CATG_ACCOUNT_TYPE,1) "AccountType_Desc",
                        CATG_ACCOUNT_NUMBER "AccountNumber", CategoryCode "CategoryCode", 
                       PKGRETURNCURSOR.fncGetDescriptionMulti(CategoryCode,1) "CategoryCode_Desc",
                       CATG_COMPANY_CODE "CompanyCode", CATG_LOCATION_CODE "LocationCode",
                       CATG_BANK_CODE "BankCode", CATG_ACCOUNT_TYPE "AccountType"
                   from trsystem952 left outer join  (select CATD_RULE_REFERENCE, LISTAGG(distinct(CATD_CATEGORY_CODE),'||''''||','||''''||' ) 
                                                     within group (order by CATD_RECORD_STATUS) CategoryCode
                        from (SELECT row_number() over (partition by CATD_RULE_REFERENCE order by CATD_RULE_REFERENCE) row_number
                                                      , CATD_RULE_REFERENCE,CATD_RECORD_STATUS,CATD_CATEGORY_CODE
                                                     from trsystem952a
                                                     where CATD_RECORD_STATUS not in(10200005, 10200006))
                                                    --- and rownum < 11
                                                    where row_number<=10
                                                     GROUP BY CATD_RULE_REFERENCE) subtable 
                   on CATG_RULE_REFERENCE = subtable.CATD_RULE_REFERENCE 
                   where CATG_RECORD_STATUS not in(10200005, 10200006)';
        Open GenCursor for sqlQuery;    
        goto process_end;    
    end if;
    
    if varEntity = 'ACCESSFILE' then
        varoperation := 'extracting browser fields for access control';


        select count(*)
          into numrecords
          from accessfile
          where actl_record_status 
          not in(gconst.statusinactive,  gconst.statusdeleted);

        if numrecords = 0 then
          goto dummy_cursor;
        end if;

        sqlQuery:='select distinct (case when actl_user_id = ''.'' then ''ALL'' else actl_user_id end) "UserId",
          pkgreturncursor.fncgetdescription(actl_company_code,1) "CompanyCode_Desc",
          pkgreturncursor.fncgetdescription(actl_group_code,1) "GroupCode_Desc", 
          actl_company_code as "CompanyCode",''ACCESSFILE'' "ProgramUnit",
          actl_group_code as "GroupCode", 1 "SerialNumber"
          from accessfile 
          where actl_record_status not in(10200005,10200006)';
        Open GenCursor for sqlQuery || ' and ' ||  varCondition;    
         goto process_end;

      end if;
      if varEntity = 'REPORTCONFIGURATION' then
        varOperation := 'Extracting browser fields for REPORTCONFIGURATION';

        select count(*) into numRecords
          from trsystem999H
          where REPO_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
    --    insert into temp values('numRecords',numRecords);commit;
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

         sqlQuery:='select distinct REPO_PROGRAM_UNIT "Synonym" 
          from trsystem999h
         where  REPO_RECORD_STATUS not in (10200005,10200006)';

            Open GenCursor for sqlQuery || ' and ' ||  varCondition; 
        Goto Process_End;
      end if;

       if varEntity = 'GRIDCONFIGURATIONS' then
        varOperation := 'Extracting browser fields for GRIDCONFIGURATIONS';

        select count(*) into numRecords
          from trsystem999C
          where GRID_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
      --  insert into temp values('numRecords',numRecords);commit;
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

         sqlQuery:='select distinct GRID_CURSOR_NUMBER "CursorNumber",
                    GRID_CURSOR_NAME "CursorName"
                from trsystem999C WHERE grid_record_Status not in (10200005,10200006) ';

            Open GenCursor for sqlQuery || ' and ' ||  varCondition; 
        Goto Process_End;
      end if;

      --Added by supriya on 23/02/2021
      if varEntity = 'ENTITYINFO' then
        varoperation := 'extracting browser fields for ENTITY INFO';

            select count(*)
            into numrecords
            from ENTITYINFO
            where EINF_RECORD_STATUS 
            not in(10200005,10200006);

            if numrecords = 0 then
                goto dummy_cursor;
            end if;

            sqlQuery:='select EINF_ENTITY_NAME	"EntityName", 
                    pkgreturncursor.fncgetdescription(nvl(EINF_RISK_VALIDATION,12400002),1) "RiskValidation_Desc",
                    pkgreturncursor.fncgetdescription(nvl(EINF_COPY_VISIBLE,12400002),1) "CopyVisible_Desc",
                    pkgreturncursor.fncgetdescription(nvl(EINF_NEWRECORD_VISIBLE,12400002),1) "NewRecordVisible_Desc",
                    pkgreturncursor.fncgetdescription(nvl(EINF_STAYONSAME_VISIBLE,12400002),1) "StayOnSameVisible_Desc",
                    pkgreturncursor.fncgetdescription(nvl(EINF_OKAY_VISIBLE,12400002),1) "OkayVisible_Desc",
                    EINF_RISK_VALIDATION "RiskValidation",
                    EINF_COPY_VISIBLE "CopyVisible", EINF_STAYONSAME_VISIBLE "StayOnSameVisible",
                    EINF_NEWRECORD_VISIBLE "NewRecordVisible", EINF_OKAY_VISIBLE	"OkayVisible"
                from ENTITYINFO 
                where EINF_RECORD_STATUS not in (10200005,10200006)
                and EINF_ENTITY_NAME in (select actl_program_unit 
                                  from trsystem006
                                  where actl_record_status not in (10200005,10200006)
                                  and (case when actl_user_id = ''.'' then ''' || varUserid || ''' else actl_user_id end) = ''' || varUserid ||
                                  ''' and actl_group_code =(select user_group_code from USERMASTER
                                                          where UPPER(user_user_id) = ''' || varUserid || 
                                                          ''' and USER_RECORD_STATUS not in  (10200005,10200006)))  
             and exists 
              (select ''x'' from  clouddb_master.Trlicense002a 
                 inner join clouddb_master.trlicense001a
                 on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
              where nvl(EINF_ENTITY_NAME,''NA'') = Lmdd_Program_Unit 
              and lmdd_record_Status not in (10200005,10200006)
              and lmdu_record_status not in (10200005,10200006)
              and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051))';    
            Open GenCursor for sqlQuery || ' and ' ||  varCondition;    
            goto process_end;
        end if;
      -- ADDED BY SUPRIYA 08/06/2020
      if varEntity = 'IRSSETTLEMENT' then
        varOperation := 'Extracting browser fields for IRSSETTLEMENT';

        select count(*) into numRecords
          from TRTRAN091B
          where IIRS_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);

        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

       sqlQuery:='SELECT IIRS_IRS_NUMBER "IrsNumber", IIRS_SERIAL_NUMBER "SerialNumber", 0 "LegSerial"
             FROM TRTRAN091B 
             WHERE IIRS_RECORD_STATUS not in (10200005,10200006) 
             AND IIRS_IRS_NUMBER IN (SELECT IIRS_IRS_NUMBER 
                                     FROM TRTRAN091 
                                     WHERE IIRS_DEAL_TYPE IN (80800001,80800002,80800003)
                                     AND IIRS_RECORD_STATUS not in (10200005,10200006))';
        Open GenCursor for sqlQuery || ' and ' ||  varCondition ||   
            ' GROUP BY IIRS_IRS_NUMBER,IIRS_SERIAL_NUMBER';                 
        Goto Process_End;
      end if;

      -- ADDED BY SUPRIYA 08/06/2020
      if varEntity = 'CCSSETTLEMENT' then
        varOperation := 'Extracting browser fields for CCSSETTLEMENT';

        select count(*) into numRecords
          from TRTRAN091B
          where IIRS_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);

        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

        sqlQuery:='SELECT IIRS_IRS_NUMBER "IrsNumber", IIRS_SERIAL_NUMBER "SerialNumber", 0 "LegSerial"
             FROM TRTRAN091B 
             WHERE IIRS_RECORD_STATUS not in (10200005,10200006) 
             AND IIRS_IRS_NUMBER IN (SELECT IIRS_IRS_NUMBER 
                                     FROM TRTRAN091 
                                     WHERE IIRS_DEAL_TYPE IN (80800004,80800005,80800006)
                                     AND IIRS_RECORD_STATUS not in (10200005,10200006))';
        Open GenCursor for sqlQuery || ' and ' ||  varCondition ||                          
            ' GROUP BY IIRS_IRS_NUMBER,IIRS_SERIAL_NUMBER';       
        Goto Process_End;
      end if;

      -- ADDED BY SUPRIYA 17/06/2020
      if varEntity = 'IRSPRINCIPAL' then
        varOperation := 'Extracting browser fields for IRSPRINCIPAL';

        select count(*) into numRecords
          from TRTRAN091C
          where IIRN_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);

        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

       sqlQuery:='SELECT DISTINCT(IIRN_IRS_NUMBER) "IrsNumber", 1 "SerialNumber"
            FROM TRTRAN091C
            WHERE IIRN_RECORD_STATUS NOT IN (10200005,10200006)
            AND IIRN_IRS_NUMBER IN (SELECT IIRS_IRS_NUMBER 
                                     FROM TRTRAN091 
                                     WHERE IIRS_DEAL_TYPE IN (80800001,80800002,80800003)
                                     AND IIRS_RECORD_STATUS not in (10200005,10200006))'; 
        Open GenCursor for sqlQuery || ' and ' ||  varCondition;
        Goto Process_End;
      end if;

      -- ADDED BY SUPRIYA 17/06/2020
      if varEntity = 'CCSPRINCIPAL' then
        varOperation := 'Extracting browser fields for IRSPRINCIPAL';

        select count(*) into numRecords
          from TRTRAN091C
          where IIRN_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);

        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

        sqlQuery:='SELECT DISTINCT(IIRN_IRS_NUMBER) "IrsNumber", 1 "SerialNumber"
            FROM TRTRAN091C
            WHERE IIRN_RECORD_STATUS NOT IN (10200005,10200006)
            AND IIRN_IRS_NUMBER IN (SELECT IIRS_IRS_NUMBER 
                                     FROM TRTRAN091 
                                     WHERE IIRS_DEAL_TYPE IN (80800004,80800005,80800006)
                                     AND IIRS_RECORD_STATUS not in (10200005,10200006))'; 
        Open GenCursor for sqlQuery || ' and ' ||  varCondition;
        Goto Process_End;
      end if;

      if varEntity = 'EXPOSUREUPLOAD' then
        varOperation := 'Extracting browser fields for Exposure Edit';
        select count(*) into numRecords
          from TRTRAN002
          where TRAD_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

       sqlQuery:='SELECT DISTINCT  TRAD_ENTRY_DATE "Entry Date",
            fncGetDescription(TRAD_COMPANY_CODE,2)Company,
            fncGetDescription(TRAD_LOCATION_CODE,2)Location,
            fncGetDescription(TRAD_PRODUCT_CATEGORY,2) "PortFolio",
            fncGetDescription(TRAD_SUBPRODUCT_CODE,2)SubPortfolio,
            TRAD_COMPANY_CODE "Company Code",
            TRAD_LOCATION_CODE "Location Code",
            TRAD_PRODUCT_CATEGORY ProductCode,
            TRAD_SUBPRODUCT_CODE SubproductCode
          FROM TRTRAN002
          WHERE TRAD_RECORD_STATUS NOT IN(10200005,10200006)';

        Open GenCursor for sqlQuery || ' and ' ||  varCondition;   
        Goto Process_End;
      end if;

      if varEntity = 'CASHINHAND' then
        varOperation := 'Extracting browser fields for CASHINHAND Confirm and View';
        select count(*) into numRecords
          from TRTRAN151
          where LBBL_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

        sqlQuery:='select LBBL_ASON_DATE "AsonDate",
                    pkgreturncursor.fncgetdescription(LBBL_COMPANY_CODE,2) "CompanyCode_Desc",
                    pkgreturncursor.fncgetdescription(LBBL_LOCATION_CODE,2) "LocationCode_Desc",
                    pkgreturncursor.fncgetdescription(LBBL_CURRENCY_CODE,2) "CurrencyCode_Desc",
                    LBBL_COMPANY_CODE "CompanyCode", LBBL_LOCATION_CODE "LocationCode", 
                    LBBL_CURRENCY_CODE "CurrencyCode", LBBL_SERIAL_NUMBER "SerialNumber",
                    max(LBBL_ACCOUNT_NUMBER) "AccountNumber"
             from TRTRAN151
             where LBBL_RECORD_STATUS  not in (10200005,10200006)';

        Open GenCursor for sqlQuery || ' and ' ||  varCondition ||     
             ' group by LBBL_ASON_DATE, LBBL_COMPANY_CODE, LBBL_LOCATION_CODE, 
             LBBL_CURRENCY_CODE, LBBL_SERIAL_NUMBER';
        Goto Process_End;
      end if;

       if varEntity = 'CASHFUNDREQUIRED' then
        varOperation := 'Extracting browser fields for CASHFUNDREQUIRED Confirm and View';
        select count(*) into numRecords
          from TRTRAN151
          where LBBL_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

        sqlQuery:='select LBBL_ASON_DATE "AsonDate",
                    pkgreturncursor.fncgetdescription(LBBL_COMPANY_CODE,2) "CompanyCode_Desc",
                    pkgreturncursor.fncgetdescription(LBBL_LOCATION_CODE,2) "LocationCode_Desc",
                    pkgreturncursor.fncgetdescription(LBBL_CURRENCY_CODE,2) "CurrencyCode_Desc",
                    LBBL_COMPANY_CODE "CompanyCode", LBBL_LOCATION_CODE "LocationCode", 
                    LBBL_CURRENCY_CODE "CurrencyCode", LBBL_SERIAL_NUMBER "SerialNumber",
                    max(LBBL_ACCOUNT_NUMBER) "AccountNumber"
             from TRTRAN151
             where LBBL_RECORD_STATUS  not in (10200005,10200006)
             AND nvl(LBBL_OVERRIDE_REQUAMOUNT,0) > 0';

        Open GenCursor for sqlQuery || ' and ' ||  varCondition ||     
             ' group by LBBL_ASON_DATE, LBBL_COMPANY_CODE, LBBL_LOCATION_CODE, 
             LBBL_CURRENCY_CODE, LBBL_SERIAL_NUMBER';

        Goto Process_End;
      end if;

      if varEntity = 'CASHPOOLDETAILS' then
        varOperation := 'Extracting browser fields for CASHINHAND Confirm and View';
        select count(*) into numRecords
          from TRTRAN151A
          where POOL_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

        sqlQuery:='select distinct POOL_ASON_DATE "AsonDate", min(POOL_SERIAL_NUMBER) "SerialNumber",
          max(POOL_FROM_ACCOUNT) "FromAccount", max(POOL_TO_ACCOUNT) "ToAccount"
          from TRTRAN151A
          where POOL_RECORD_STATUS not in (10200005,10200006)';
        Open GenCursor for sqlQuery || ' and ' ||  varCondition ||
                ' group by POOL_ASON_DATE';
        Goto Process_End;
      end if;

      if varEntity = 'EXPOSURESETTLEMENTNEW' then
        varOperation := 'Extracting browser fields for Exposure Edit';
        select count(*) into numRecords
          from TRTRAN003A
          where BEXP_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

        sqlQuery:='SELECT BEXP_TRANSACTION_DATE "TransactionDate", BEXP_DELIVERY_BATCH "DeliveryBatch",       
                       BEXP_SERIAL_NUMBER "SerialNumber", SUM(BREL_REVERSAL_FCY) "ReversalFcy",
                       BEXP_LIVE_REERENCERATE "ReferenceRate", pkgReturnCursor.fncGetDescription(BEXP_BOOKING_RATE,1) "BookingRate",
                       BEXP_REMARKS	"Remarks"
                FROM TRTRAN003A INNER JOIN TRTRAN003
                ON BREL_DELIVERY_BATCH = BEXP_DELIVERY_BATCH
                where BEXP_RECORD_STATUS not in (10200005,10200006)';

        Open GenCursor for sqlQuery || ' and ' ||  varCondition ||
                ' GROUP BY BEXP_TRANSACTION_DATE,BEXP_DELIVERY_BATCH,BEXP_SERIAL_NUMBER,BREL_COMPANY_CODE,
                BEXP_LIVE_REERENCERATE,BEXP_BOOKING_RATE,BEXP_REMARKS';
        Goto Process_End;
      end if;

      if varEntity = 'INFLOWOUTFLOWPAYMENTS' then
        varOperation := 'Extracting browser fields for INFLOWOUTFLOWPAYMENTS';
        select count(*) into numRecords
          from TRTRAN003
          where BREL_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)
          AND BREL_BATCH_NUMBER IS NOT NULL;
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

        --Open GenCursor for
          sqlQuery:='SELECT BREL_ENTRY_DATE "EntryDate", BREL_BATCH_NUMBER "TradeReference", 
                           BREL_BATCH_NUMBER "BatchNumber", BREL_MATURITY_DATE "MaturityDate",
                           pkgReturnCursor.fncGetDescription(BREL_COMPANY_CODE,2)"CompanyCode_Desc",
                           pkgReturnCursor.fncGetDescription(BREL_LOCATION_CODE,2)"LocationCode",
                           pkgReturnCursor.fncGetDescription(BREL_PRODUCT_CATEGORY,2)"Book",
                           pkgReturnCursor.fncGetDescription(BREL_SUB_PORTFOLIO,2)"Strategy",
                           pkgReturnCursor.fncGetDescription(BREL_IMPORT_EXPORT,2)"ImportExport",
                           pkgReturnCursor.fncGetDescription(BREL_LOCAL_CURRENCY,2)"LocalCurrency",
                           pkgReturnCursor.fncGetDescription(BREL_TRADE_CURRENCY,2)"TradeCurrency",
                           pkgReturnCursor.fncGetDescription(BREL_LOCAL_BANK,2)"LocalBank",
                           SUM(BREL_REVERSAL_FCY)"ReversalFcy",
                           min(BREL_REVERSE_SERIAL) "ReverseSerial",
                           BREL_COMPANY_CODE "CompanyCode"
                    FROM TRTRAN003
                    where BREL_BATCH_NUMBER IS NOT NULL
                    AND BREL_BATCH_NUMBER != ''NA''
                    and BREL_DELIVERY_BATCH IS NULL
                    AND BREL_RECORD_STATUS not in (10200005,10200006)
                    and not exists (select * from trtran006
                                    where CDEL_TRADE_REFERENCE=BREL_TRADE_REFERENCE
                                    and CDEL_REVERSE_SERIAL=BREL_REVERSE_SERIAL
                                    and Cdel_record_status not in (10200005,10200006))' ;

            Open GenCursor for sqlQuery || ' and ' ||  varCondition ||
            ' GROUP BY BREL_ENTRY_DATE,BREL_BATCH_NUMBER,BREL_COMPANY_CODE,BREL_LOCATION_CODE,BREL_LOCAL_CURRENCY,
              BREL_TRADE_CURRENCY,BREL_LOCAL_BANK,BREL_IMPORT_EXPORT,BREL_PRODUCT_CATEGORY,BREL_SUB_PORTFOLIO,BREL_MATURITY_DATE';

        Goto Process_End;
      end if;   

    if varEntity = 'ACCOUNTINGVOUCHERS' then
        varOperation := 'Extracting browser fields for Voucher Edit';
        select count(*) into numRecords
          from TRTRAN008
          where BCAC_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

        if (numCode7 =Gconst.EDITLOAD) THEN
        sqlQuery:= 'SELECT SUM(BCAC_VOUCHER_INR) "VoucherInr",
        BCAC_COMPANY_CODE "CompanyCode", 
        pkgreturncursor.fncgetdescription(BCAC_COMPANY_CODE,2) "CompanyCode_Desc",
        BCAC_LOCATION_CODE "LocationCode", 
        pkgreturncursor.fncgetdescription(BCAC_LOCATION_CODE,2) "LocationCode_Desc",
       -- BCAC_LOCAL_BANK "LocalBank", 
       -- pkgreturncursor.fncgetdescription(BCAC_LOCAL_BANK,2) "LocalBank_Desc",
        BCAC_VOUCHER_REFERENCE "VoucherReference", 
        --BCAC_ACCOUNT_NUMBER "AccountNumber", 
        --BCAC_CRDR_CODE "CrDrCode", 
        --pkgreturncursor.fncgetdescription(BCAC_CRDR_CODE,2) "CrDrCode_Desc",
        --BCAC_ACCOUNT_HEAD "AccountHead",
       -- pkgreturncursor.fncgetdescription(BCAC_ACCOUNT_HEAD,2) "AccountHead_Desc",
       BCAC_VOUCHER_TYPE "VoucherType",
       pkgreturncursor.fncgetdescription(BCAC_VOUCHER_TYPE,2) "VoucherType_Desc",
        BCAC_REFERENCE_SERIAL "ReferenceSerial",
        BCAC_VOUCHER_DATE "VoucherDate"
                    FROM TRTRAN008 
                    WHERE BCAC_RECORD_STATUS NOT IN (10200005, 10200006)';                       

        Open GenCursor for sqlQuery || ' and ' ||  varCondition ||
                ' GROUP BY BCAC_COMPANY_CODE, BCAC_LOCATION_CODE,BCAC_VOUCHER_TYPE,BCAC_VOUCHER_DATE,BCAC_VOUCHER_REFERENCE,
                BCAC_REFERENCE_SERIAL';
        Goto Process_End;

--        ELSIF ((numCode7 =Gconst.CONFIRMLOAD)) THEN
--        sqlQuery:= 'SELECT SUM(BCAC_VOUCHER_INR) "VoucherInr",
--        BCAC_COMPANY_CODE "CompanyCode", 
--        pkgreturncursor.fncgetdescription(BCAC_COMPANY_CODE,2) "CompanyCode_Desc",
--        BCAC_LOCATION_CODE "LocationCode", 
--        pkgreturncursor.fncgetdescription(BCAC_LOCATION_CODE,2) "LocationCode_Desc",      
--        BCAC_VOUCHER_REFERENCE "VoucherReference",        
--       BCAC_VOUCHER_TYPE "VoucherType",
--       pkgreturncursor.fncgetdescription(BCAC_VOUCHER_TYPE,2) "VoucherType_Desc",
--        BCAC_REFERENCE_SERIAL "ReferenceSerial",
--        BCAC_VOUCHER_DATE "VoucherDate"
--                    FROM TRTRAN008 
--                    WHERE BCAC_RECORD_STATUS NOT IN (10200005, 10200006)';                       
--                        
--        Open GenCursor for sqlQuery || ' and ' ||  varCondition ||
--                ' GROUP BY BCAC_COMPANY_CODE, BCAC_LOCATION_CODE,BCAC_VOUCHER_TYPE,BCAC_VOUCHER_DATE,BCAC_VOUCHER_REFERENCE,
--                BCAC_REFERENCE_SERIAL';
--        Goto Process_End;
        END IF;
      end if;

    if varEntity = 'ACCOUNTINGVOUCHERSBULKCONFIRM' then
        varOperation := 'Extracting browser fields for Voucher Confirm';
        select count(*) into numRecords
          from TRTRAN008
          where BCAC_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;

        --Open GenCursor for
          sqlQuery:='SELECT 
          --SUM(BCAC_VOUCHER_INR) "VoucherInr",
        BCAC_COMPANY_CODE "CompanyCode", 
        pkgreturncursor.fncgetdescription(BCAC_COMPANY_CODE,2) "CompanyCode_Desc",
        BCAC_LOCATION_CODE "LocationCode", 
        pkgreturncursor.fncgetdescription(BCAC_LOCATION_CODE,2) "LocationCode_Desc",
        BCAC_PORTFOLIO_CODE "Book", 
        pkgreturncursor.fncgetdescription(BCAC_PORTFOLIO_CODE,2) "Book_Desc",
        BCAC_SUBPORTFOLIO_CODE "Strategy", 
        pkgreturncursor.fncgetdescription(BCAC_SUBPORTFOLIO_CODE,2) "Strategy_Desc",
       -- BCAC_LOCAL_BANK "LocalBank",        
        BCAC_VOUCHER_DATE "VoucherDate"
                    FROM TRTRAN008 
                    WHERE BCAC_RECORD_STATUS NOT IN (10200005, 10200006)' ;

            Open GenCursor for sqlQuery || ' and ' ||  varCondition ||
            ' GROUP BY BCAC_COMPANY_CODE, BCAC_LOCATION_CODE,BCAC_PORTFOLIO_CODE,BCAC_SUBPORTFOLIO_CODE,BCAC_VOUCHER_DATE';

        Goto Process_End;
      end if; 

--      if varEntity = 'BENCHMARKCONFIGURATION' then
--        varOperation := 'Extracting browser fields for Benchmarkconfig Edit';
--        select count(*) into numRecords
--          from TRMASTER256A
--          where CNBR_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--        if (numCode7 !=Gconst.ADDLOAD) THEN
--        sqlQuery:= 'select CNBR_COMPANY_CODE "CompanyCode",
--                    pkgreturncursor.fncgetdescription(CNBR_COMPANY_CODE,2) "CompanyCode_Desc",
--                    CNBR_LOCATION_CODE "LocationCode",
--                     pkgreturncursor.fncgetdescription(CNBR_LOCATION_CODE,2) "LocationCode_Desc",
--                    CNBR_EFFECTIVE_DATE "EffectiveDate" from TRMASTER256A 
--                    WHERE CNBR_RECORD_STATUS NOT IN (10200005, 10200006)';                       
--                        
--        Open GenCursor for sqlQuery || ' and ' ||  varCondition ||
--                ' GROUP BY CNBR_COMPANY_CODE,CNBR_LOCATION_CODE,CNBR_EFFECTIVE_DATE';
--        Goto Process_End;
--        END IF;
--      end if;

      if varEntity = 'DISTINCTSYNONYMS' then
              varOperation := 'Extracting browser fields for DISTINCTSYNONYMS';
              select count(*) into numRecords
                from trsystem999
                where FLDP_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
              if numRecords = 0 then
                Goto Dummy_Cursor;
              end if;            

               sqlQuery:='Select distinct(FLDP_TABLE_SYNONYM) "Synonym", MENU_DESCRIPTION "DescriptionType",
               max(FLDP_COLUMN_NAME) "ColumnName"
              FROM TRSYSTEM999 inner join MenuFile
              on FLDP_TABLE_SYNONYM = MENU_PROGRAM_UNIT
              WHERE FLDP_RECORD_STATUS not in (10200005,10200006) 
              and FLDP_TABLE_SYNONYM in (select actl_program_unit 
                                  from trsystem006
                                  where actl_record_status not in (10200005,10200006)
                                  and (case when actl_user_id = ''.'' then ''' || varUserid || ''' else actl_user_id end) = ''' || varUserid ||
                                  ''' and actl_group_code =(select user_group_code from USERMASTER
                                                          where UPPER(user_user_id) = ''' || varUserid || 
                                                          ''' and USER_RECORD_STATUS not in  (10200005,10200006)))  
             and exists 
              (select ''x'' from  clouddb_master.Trlicense002a 
                 inner join clouddb_master.trlicense001a
                 on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
              where nvl(Menu_Program_Unit,''NA'') = Lmdd_Program_Unit 
              and lmdd_record_Status not in (10200005,10200006)
              and lmdu_record_status not in (10200005,10200006)
              and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051))';       

                Open GenCursor for sqlQuery || ' and ' ||  varCondition ||
            ' GROUP BY FLDP_TABLE_SYNONYM,MENU_DESCRIPTION
              order by MENU_DESCRIPTION';

              Goto Process_End;
            end if;

        --added by supriya on 31/08/2021
        if varEntity = 'USERLEVELSCREENCONFIG' then
        varoperation := 'extracting browser fields for access control';

            select count(*)
            into numrecords
            from USERLEVELSCREENCONFIG
            where uscf_record_status 
            not in(gconst.statusinactive,  gconst.statusdeleted);

            if numrecords = 0 then
                goto dummy_cursor;
            end if;

            sqlQuery:='select USCF_PROGRAM_UNIT "SynonymName", MENU_DESCRIPTION "Menu",
                   USCF_USER_ID "UserId", USCF_SERIAL_NUMBER "SerialNumber",
                   USCF_GROUP_CODE "GroupCode", 
                   pkgreturncursor.fncgetdescription(USCF_GROUP_CODE,1) "GroupCode_Desc",
                   (case when USCF_USER_ID = ''.'' then ''ALL'' else USER_USER_NAME end) "UserName"
                from USERLEVELSCREENCONFIG left outer join menufile
                on USCF_PROGRAM_UNIT = menu_program_unit
                left outer join usermaster
                on USCF_USER_ID = user_user_id
                where uscf_record_status not in(10200005,10200006)';
            clouddb_global.logwrite.Log_write('USERLEVELSCREENCONFIG -' || sqlQuery);
            Open GenCursor for sqlQuery || ' and ' ||  varCondition;    
            goto process_end;
        end if;

--        if varEntity = 'BANKCHARGECONFIG' then
--        varOperation := 'Extracting browser fields for Account Voucher config';
--        select count(*) into numRecords
--          from TRCONFIG002
--          where ACCT_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--          
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;    
--     sqlQuery:='select distinct pkgreturncursor.fncgetdescription(ACCT_COMPANY_CODE,2) "CompanyCode_Desc",
--                    ACCT_COMPANY_CODE "CompanyCode",
--                   pkgreturncursor.fncgetdescription(ACCT_LOCATION_CODE,2) "LocationCode_Desc",
--                   ACCT_LOCATION_CODE  "LocationCode",
--                   pkgreturncursor.fncgetdescription(ACCT_EVENT_TYPE,2) "EventType_Desc",
--                   ACCT_EVENT_TYPE  "EventType",                   
--                   ACCT_SYNONYM_NAME "SynonymName",
--                   ACCT_SERIAL_NUMBER "SerialNumber"
--              from TRCONFIG002
--             where ACCT_RECORD_STATUS not in (10200005,10200006)';
--            Open GenCursor for sqlQuery || ' and ' ||  varCondition; 
--        Goto Process_End; 
--       end if;  
--      if varEntity = 'BANKBALANCEENTRY' then
--        varOperation := 'Extracting browser fields for BANKBALANCEENTRY';
--      
--        select count(*) into numRecords
--          from trmaster306a
--          where (((( numCode7 =Gconst.VIEWLOAD) or ( numCode7 =Gconst.EDITLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)))
--                 or ((( numCode7 =Gconst.ADDLOAD) or ( numCode7 =Gconst.CONFIRMLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,Gconst.STATUSAUTHORIZED))));
--
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--        
--        
--        -- 
--        
--      --if ((numCode7 !=108) and (recEntity.einf_sql_condition is not null)) then
--      
--        Open GenCursor for
--        select distinct lbbl_effective_date as "EffectiveDate", 
--          fncGetDescription(lbbl_Company_code, 1) "Company"
--          from BANKBALANCEENTRY
--          where (((( numCode7 =Gconst.VIEWLOAD) or ( numCode7 =Gconst.EDITLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)))
--                 or ((( numCode7 =Gconst.ADDLOAD) or ( numCode7 =Gconst.CONFIRMLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,Gconst.STATUSAUTHORIZED))));
--        
--        Goto Process_End;
--      end if;
--      
     ---//added by kumar.h on 06-06-09
   ---//purpose:- to show the relation table details in mode other than add mode/it's not possible to show
   --//           this in usualway
--     if varEntity = 'RELATIONTABLE' then
--        varOperation := 'Extracting browser fields for RELATION TABLE';
--
--        select count(*) into numRecords
--          from trsystem008
--          where erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--       Open GenCursor for
--        select distinct pkgreturncursor.fncgetdescription(a.erel_company_code,2) "CompanyName",
--               pkgreturncursor.fncgetdescription(to_number(to_char(a.erel_entity_type)||'00000'),2) "EntityName",
--               pkgreturncursor.fncgetdescription(erel_main_entity,2) "MainEntityName",
--               pkgreturncursor.fncgetdescription(to_number(to_char(erel_relation_type)||'00000'),2) "RelationTypeName",
--               erel_main_entity as "MainEntity",
--               erel_company_code as "CompanyCode",erel_entity_type as "EntityType",erel_relation_type as "EntityRelation"
--          from trsystem008 a, trmaster001
--         where a.erel_main_entity = pick_key_value
--           and a.erel_entity_type = pick_key_group
--            and pick_key_type in (10100002,10100003)
--           and a.erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--        Goto Process_End;
--      end if;

    numrecords := 0;

    varquery := 'select ';
    varoperation := 'extracting browser fields for : ' || varentity;
    -- we have changed from FLDP_SELECT_YN to Fldp_Display_YN
    for curfields in(
    select fldp_column_name, fldp_xml_field, fldp_pick_group,
       fldp_key_no, Fldp_Column_Displayname,
      fldp_dropdown_selector,FLDP_DESCRIPTION_TYPE ,FLDP_TAB_NUMBER,
      FLDP_FIELD_SORT,FLDP_DATA_TYPE,FLDP_TEXT_FORMAT_CODE
    from (
            select fldp_column_name, fldp_xml_field, nvl(fldp_pick_group,0) fldp_pick_group,
               nvl(fldp_key_no,    0) fldp_key_no,
              nvl(Fldp_Column_Displayname,fldp_xml_field) Fldp_Column_Displayname,
              nvl(fldp_dropdown_selector,90999999) fldp_dropdown_selector,
              FLDP_DESCRIPTION_TYPE ,nvl(FLDP_TAB_NUMBER,1) FLDP_TAB_NUMBER,
              nvl(FLDP_FIELD_SORT,1) FLDP_FIELD_SORT,
              FLDP_DATA_TYPE,FLDP_TEXT_FORMAT_CODE
              from trsystem999
              where fldp_table_synonym = varentity
              and FLDP_DISPLAY_YN=12400001
              union 
              select fldp_column_name, fldp_xml_field, nvl(fldp_pick_group,0) fldp_pick_group,
               nvl(fldp_key_no,    0) fldp_key_no,
              nvl(Fldp_Column_Displayname,fldp_xml_field) Fldp_Column_Displayname,
              nvl(fldp_dropdown_selector,90999999) fldp_dropdown_selector,
              FLDP_DESCRIPTION_TYPE ,nvl(FLDP_TAB_NUMBER,1) FLDP_TAB_NUMBER,
              nvl(FLDP_FIELD_SORT,1) FLDP_FIELD_SORT,
              FLDP_DATA_TYPE,FLDP_TEXT_FORMAT_CODE
              from trsystem999
              where fldp_table_synonym = varentity
              and FLDP_DISPLAY_YN=12400002
              and FLDP_KEY_NO>0)
              --- To Cover the Code Master Key Values Commenting Pick Key Group  
              --and FLDP_PICK_GROUP>0)
         order by FLDP_TAB_NUMBER,FLDP_FIELD_SORT)

       Loop
          if numRecords > 0 then
            varQuery := varQuery || ',';
          end if;

          numFlag1 := 0;
--          
--          if curFields.fldp_pick_group = 0 or 
--              curFields.fldp_xml_field = 'RecordStatus' or
--              curFields.fldP_key_no > 0 or
--              curFields.fldp_dropdown_selector !=90900005
--              then
--            varQuery := varQuery || curFields.fldp_Column_name || ' as ';
----  The Following logic added on 16/05/08 to display description instead of codes
--
--            if curFields.fldp_pick_group > 0 then
--              varQuery := varQuery || '"' || curFields.fldp_xml_field || '",';
--              varQuery := varQuery || 'pkgReturnCursor.fncGetDescription(' ||  curFields.fldp_column_name;
--              varQuery := varQuery || ', Decode(' ||curFields.FLDP_DESCRIPTION_TYPE || ',92100001,1,92100002,2) ) as ';
--              numFlag1 := 1;
--            End if;
--            varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD || '" ';
--          
----            
--          else            
--            varQuery := varQuery || 'pkgReturnCursor.fncGetDescription(' ||  curFields.fldp_column_name;
--            varQuery := varQuery || ', Decode(' ||curFields.FLDP_DESCRIPTION_TYPE || ',92100001,1,92100002,2) ) as ';
--            numFlag1 := 1;    
--            varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD || 'desc' || '"';
--          
--          end if;

           if ((curFields.fldp_pick_group > 0) and (curFields.fldp_key_no>0)) then
              --varQuery := varQuery || '"' || curFields.fldp_xml_field || '",';
              varQuery := varQuery || 'pkgReturnCursor.fncGetDescription(' ||  curFields.fldp_column_name;
              varQuery := varQuery || ', Decode(' ||curFields.FLDP_DESCRIPTION_TYPE || ',92100001,1,92100002,2) ) as ';
              varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD ||  '_Desc" , ';

              varQuery := varQuery || curFields.fldp_Column_name || ' as ';
              varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD ||  '" ';

              numFlag1 := 1;
          elsif (curFields.fldp_pick_group > 0) then
              varQuery := varQuery || 'pkgReturnCursor.fncGetDescription(' ||  curFields.fldp_column_name;
              varQuery := varQuery || ', Decode(' ||curFields.FLDP_DESCRIPTION_TYPE || ',92100001,1,92100002,2) ) as ';
              varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD ||  '" ';            
--          elsif (curFields.FLDP_DATA_TYPE ='DATE') then
--            varOperation:='Extracting user Format';
--              select nvl(USER_FORMAT_CODE,91499999)
--                into numcode5
--              from usermaster 
--              where Upper(user_user_id)=varUserID
--              and User_record_status not in (10200005,10200006);
--            varOperation:='Extracting user Format String';
--              select FORMAT_FORMAT_STRING
--                into varTemp3
--              from trglobalmas914
--              where FORMAT_PICK_CODE=numcode5
--                and FORMAT_DATA_TYPE=curfields.FLDP_TEXT_FORMAT_CODE
--                and format_record_status not in (10200005,10200006);
--                
--              
--              
--              varQuery := varQuery || 'To_char(' ||  curFields.fldp_column_name;
--             -- varQuery := varQuery || ', varTemp3 ) as ';
--              varQuery := varQuery || ', '||''''|| 'dd-Mon-YYYY'|| ''''|| ' ) as ';
--              varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD ||  '" ';            
          else
            varQuery := varQuery || curFields.fldp_Column_name || ' as ';
--  The Following logic added on 16/05/08 to display description instead of codes


            varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD || '" ';
--          
----            
--          else            
--            varQuery := varQuery || 'pkgReturnCursor.fncGetDescription(' ||  curFields.fldp_column_name;
--            varQuery := varQuery || ', Decode(' ||curFields.FLDP_DESCRIPTION_TYPE || ',92100001,1,92100002,2) ) as ';
--            numFlag1 := 1;    


          end if;

--          if numFlag1 = 1 then
--            varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD || 'Desc' || '"';
--          else            
--            varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD || '" ';
--          end if;

          numRecords := numRecords + 1;
          --insert into temp values (varQuery,numRecords); commit;
        End Loop;
       --  varQuery := varQuery || ''' Actioncommand ''' || ' as "' ||  'command' || '"' ;
      varQuery := varQuery || ' from ' || varEntity || ' where ' || varCondition;
      clouddb_global.logwrite.Log_write('iNSIDE REFPICKUPLIST2' || ' : ' || varQuery);
      GLOG.Log_write(VarOperation || ' : ' || varQuery);
        --insert into temp values (varQuery,numRecords); commit;

      open gencursor for varquery;
      goto process_end;

    end if;

    if numinfotype = REFpickupform then
        numerror := 1;
        varoperation := 'extracting pick group for the form';

        open gencursor for
        select pick_key_value KeyValue,
               pick_Short_description ShortDescription,
               pick_long_description LongDescription,
               pick_key_group KeyGroup,
               pick_record_status RecordStatus
          from pickupmaster
          where pick_key_number > 0
          and ((pick_key_group in
          (select fldp_pick_group
            from trsystem999
            where fldp_table_synonym = varentity
            and fldp_pick_group > 0
            and fldp_record_status not in (10200005,10200006)
            union 
            select GPIC_PICK_GROUP
            from trsystem999B
            where GPIC_SYNONYM_NAME = varentity
            and GPIC_PICK_GROUP > 0
            and GPIC_RECORD_STATUS not in (10200005,10200006)))
            or (pick_key_group in (901)))
          -- this was commented however it is getting commneted because Company code and Location code 
          -- Should not come in Dorpdown 
          and ((pick_key_group = 301 and varentity != 'USERMASTER' 
              and Pick_key_value in
                (select USCO_COMPANY_CODE from trsystem022a 
                  where Upper(USCO_USER_ID)=varUserID
                   and USCO_RECORD_STATUS not in (10200005,10200006)))
                    or ((varentity = 'USERMASTER') and (pick_key_group=301))
                    or (pick_key_group != 301))
          and ((pick_key_group = 302 and varentity != 'USERMASTER' 
                 and Pick_key_value in
                (select USLO_ENTITY from trsystem022D
                   where Upper(USLO_USER_ID)=varUserID
                     and USLO_RECORD_STATUS not in (10200005,10200006)))
             or ((pick_key_group = 302) and (varentity = 'USERMASTER'))
             or (pick_key_group!=302))
          and pick_record_status not in (10200006)
            order by pick_key_value;

        goto process_end;
    end if;

if numinfotype = REFGENPICKUP then
        numerror := 1;
        varoperation := 'extracting pick group for the form';
       select NVL(PRMC_CASCADE_REQUIRED, 12400002) into numCode from trsystem051;

    if numCode = 12400002 then 
        open gencursor for
              select pick_key_value KeyValue,
                     DECODE(GPIC_DESC_TYPE,1,pick_Short_description ,2,pick_long_description)Description,  
                     pick_key_group KeyGroup, pick_key_number KeyNumber,
                     decode(pick_key_number,0,GPIC_DISPLAY_NAME,'')DisplayName,
               decode(pick_key_number,0,GPIC_PARAMETER_NAME,'')ParamName
             from pickupmaster LEFT OUTER JOIN trsystem999B 
          ON pick_key_group=GPIC_PICK_GROUP
          --AND pick_key_number > 0          
          AND GPIC_SYNONYM_NAME=varentity
          and GPIC_PICK_GROUP > 0
          WHERE GPIC_RECORD_STATUS NOT IN(10200005,10200006)
          and pick_record_status not in (10200005,10200006)
          -- Added By Manjunath Reddy on 06-Apr-2021 
          --
          and ((pick_key_group=301 and varentity != 'USERMASTER' 
              and Pick_key_value in
                (select USCO_COMPANY_CODE from trsystem022a 
                  where Upper(USCO_USER_ID)=varUserID
                   and USCO_RECORD_STATUS not in (10200005,10200006)
                 union select 30100000 from dual))
                 or (pick_key_group!=301))
          and ((pick_key_group=302 and varentity != 'USERMASTER' 
                 and Pick_key_value in
                (select USLO_ENTITY from trsystem022D
                   where Upper(USLO_USER_ID)=varUserID
                     and USLO_RECORD_STATUS not in (10200005,10200006)
                 union 
                 select 30200000 from dual
                 ))or (pick_key_group!=302))             
          order by pick_key_value;
          goto process_end;
          else
          open gencursor for
          select pick_key_value KeyValue,
               DECODE(GPIC_DESC_TYPE,1,pick_Short_description ,2,pick_long_description)Description,  
               pick_key_group KeyGroup, pick_key_number KeyNumber,
                erel_main_entity MainEntity,
                EREL_RELATION_TYPE  RelationType,
               decode(pick_key_number,0,GPIC_DISPLAY_NAME,'')DisplayName,
               decode(pick_key_number,0,GPIC_PARAMETER_NAME,'')ParamName
              -- NVL(GPIC_CASCADE_FROM,'') CascadeFrom
             from pickupmaster LEFT OUTER JOIN relationtable 
          ON pick_key_value  = erel_entity_relation 
          and erel_record_Status not in (10200005,10200006)
             LEFT OUTER JOIN trsystem999B 
          ON pick_key_group=GPIC_PICK_GROUP
          --AND pick_key_number > 0          
          AND GPIC_SYNONYM_NAME=varentity
          and GPIC_PICK_GROUP > 0
--          INNER JOIN relationtable 
--          ON erel_entity_relation = pick_key_value
          WHERE GPIC_RECORD_STATUS NOT IN(10200005,10200006)
          and pick_record_status not in (10200005,10200006)
                    -- Added By Manjunath Reddy on 06-Apr-2021 
          --
          and ((pick_key_group=301 and varentity != 'USERMASTER' 
              and Pick_key_value in
                (select USCO_COMPANY_CODE from trsystem022a 
                  where Upper(USCO_USER_ID)=varUserID
                   and USCO_RECORD_STATUS not in (10200005,10200006)
                 union select 30100000 from dual))
                 or (pick_key_group!=301))
          and ((pick_key_group=302 and varentity != 'USERMASTER' 
                 and Pick_key_value in
                (select USLO_ENTITY from trsystem022D
                   where Upper(USLO_USER_ID)=varUserID
                     and USLO_RECORD_STATUS not in (10200005,10200006)
                 union 
                 select 30200000 from dual
                 ))or (pick_key_group!=302)) 
        --  and erel_record_Status not in (10200005,10200006)
        -- AND erel_main_entity = '30200001' AND EREL_RELATION_TYPE = '333'
          order by pick_key_value;          

        goto process_end;
      end if;
    end if;

    if numinfotype = REFGENPICKUPPARAMETER then
        numerror := 1;
        varoperation := 'extracting parameter details';
        select NVL(PRMC_CASCADE_REQUIRED, 12400002) into numCode from trsystem051;
        open gencursor for
--            select  GPIC_DISPLAY_NAME "DisplayName", GPIC_PARAMETER_NAME "ParameterName",
--                    GPIC_DATA_TYPE "DataType", GPIC_DEFAULT_VALUE "DefaultValue", GPIC_PICK_GROUP "PickKeyGroup"
--                    --GPIC_DROPDOWN_SELECTOR "DropDownSelector", GPIC_DROPDOWN_CURSOR "DropDownCursor"
--            from trsystem999B   
--            where GPIC_SYNONYM_NAME = varentity and GPIC_RECORD_STATUS NOT IN(10200005,10200006)
--            order by GPIC_FIELD_SORT;
              select  GPIC_DISPLAY_NAME "DisplayName", GPIC_PARAMETER_NAME "ParameterName",
                    GPIC_DATA_TYPE "DataType", GPIC_DEFAULT_VALUE "DefaultValue", GPIC_PICK_GROUP "PickKeyGroup",
                    GPIA_CASCADE_FROM "CascadeFrom", 
                    to_char(case when numCode = 12400001 then nvl(GPIA_CASCADE_TYPE,90899999) else 
                    (case when (numCode = 12400002 and GPIA_CASCADE_TYPE = 90899998) then GPIA_CASCADE_TYPE
                    else 90899999 end) end) "CascadeType",
                    GPIA_DROPDOWN_SELECTOR "DropDownSelector", GPIA_DROPDOWN_CURSOR "DropDownCursor",
                    (case when numCode = 12400002 then '' else NVL(GPIC_CASCADE_FROM,'') end) "TreeViewCascadeFrom",
                    to_char(nvl(GPIA_RELATION_KEY,0)) "RelationKey", 
                    to_char(nvl(GPIC_DESC_TYPE,2)) "DescriptionType"
            from trsystem999B left outer join TRSYSTEM999BA
            on GPIC_SYNONYM_NAME = GPIA_SYNONYM_NAME and GPIC_PARAMETER_NAME = GPIA_PARAMETER_NAME
            where GPIC_SYNONYM_NAME = varentity 
            and GPIC_RECORD_STATUS NOT IN(10200005,10200006)          
            order by GPIC_FIELD_SORT;
        goto process_end;
    end if;

--added by supriya on 08/01/2021 to get trsystem999b and trsystem999a informations
if numinfotype = REFGETFILTERPARAMS then
    numerror := 2;
    varoperation := 'Extracting table fields for the parameter fields';
    begin
        vartemp1 := gconst.fncxmlextract(xmldoc,'Param/Synonym', vartemp1);
    exception
    when others then
        vartemp1 := varentity;
    end;
    open gencursor for
        select GPIC_SYNONYM_NAME "EntityName", GPIC_DATA_TYPE "DataType",
               GPIC_PARAMETER_NAME "ParamterName", GPIC_DISPLAY_NAME "DisplayName",
               GPIC_PICK_GROUP "PickGroup", GPIC_DESC_TYPE "DescriptionType",         
               GPIC_DEFAULT_VALUE "DefaultValue", GPIC_FIELD_SORT "FieldSort",      
               GPIA_DROPDOWN_SELECTOR "DropDownSelector", GPIA_DROPDOWN_CURSOR "DropDowncursor",
               GPIA_CASCADE_FROM "CasCadeFrom", GPIA_CASCADE_TYPE "CasCadeType",
               GPIC_ALL_REQUIRED "PickUpAllRequired",
               GPIC_DISABLE_PARAMETER "DisableParameter",
               to_char(nvl(GPIA_RELATION_KEY,0)) "DropDownRelationKey"
        from TRSYSTEM999B left outer join TRSYSTEM999BA
        on GPIC_SYNONYM_NAME = GPIA_SYNONYM_NAME
        and GPIC_PARAMETER_NAME = GPIA_PARAMETER_NAME
        where GPIC_SYNONYM_NAME = vartemp1
        and GPIC_RECORD_STATUS not in (10200005,10200006)
        order by nvl(GPIC_FIELD_SORT,999);
    goto process_end;
end if;

--added by supriya on 15/01/2021 to get Cascade Required info from TRSYSTEM051
if numinfotype = REFGETCASCADEDETAILS then
    numerror := 2;
    varoperation := 'Extracting table fields for the parameter fields';
    open gencursor for
        select Decode(nvl(PRMC_CASCADE_REQUIRED,12400002),12400001,'True','False') "CascadeRequired"
        from TRSYSTEM051 
        where PRMC_RECORD_STATUS not in (10200005,10200006);
    goto process_end;
end if;

 if numinfotype = REFxmlfields then
        numerror := 2;
        varoperation := 'extracting table fields for the form';
        GLOG.LOG_Write('numUserActionType - ' || numUserActionType);
--        open gencursor for
--        select fldp_xml_field xmlfield,
--               fldp_column_name columnname,
--               fldp_table_synonym tablesynonym,
--               fldp_data_type datatype,
--               -- following 3 lines added on 09/12/2007
--               to_char(nvl(fldp_key_no,   '-1')) KeyNo, 
--               to_char(nvl(fldp_pick_group,   99999)) pickgroup,
--               nvl(fldp_text_case,   '99999') textcase,
--               nvl(fldp_text_length,   '99999') textlength,
--               nvl(FORMAT_FORMAT_STRING,fldp_text_format) textformat,
--               --nvl(fldp_text_format,) textformat,
--               nvl(fldp_tooltip_text,   '99999') tooltiptext,
--               nvl(fldp_default_value,   '99999') defaultvalue,
--               nvl(fldp_date_range,   '99999') daterange,
--               nvl(fldp_description_type, '0') descriptionType,
--               nvl(fldp_display_yn, 'N') "DisplayYn",
--               nvl(fldp_select_yn, 'N') "SelectYn",
--               nvl(fldp_Show_yn,'Y') ShowYN,
--               nvl(fldp_label_text,fldp_xml_field) LabelText,
--               to_char(nvl(fldp_enable_disable,'12400002')) EnableDisable,
--               nvl(FLDP_MANDATORY_FIELD,'N') MandatoryField,
--               FLDP_TAB_NUMBER "TabNumber" , 
--               FLDP_FIELD_SORT "FieldSort", FLDP_DISPLAY_NAME "DisplayName",
--               fldp_tab_number "TabNumber",
--               FLDP_CASCADE_FROM "CascadeFromField", FLDP_CASCADE_TYPE "CascadeType",
--               FLDP_DROPDOWN_SELECTOR "DropdownSelectorType", 
--               FLDP_DROPDOWN_CURSOR "DropdownCursorNumber",
--               FLDP_BIND_TIME "BindTime",
--               nvl(FLDP_COLUMN_DISPLAYNAME,FLDP_XML_FIELD)ColumnDisplayName,
--               nvl(FLDP_DROPDOWN_RELATIONKEY,0) "DropDownRelationKey",
--               nvl(FLDP_HOLIDAY_CHECK,to_number(12400002)) "HolidayCheck",
--               FORMAT_DECIMAL_SCALE "DecimalScale"
--        from trsystem999 left outer join TRGLOBALMAS914
--          on FORMAT_DATA_TYPE =fldp_text_format
--          and FORMAT_record_status not in (10200005,10200006)
--        where fldp_table_synonym = varentity
--        order by nvl(FLDP_FIELD_SORT,999);
      select NVL(PRMC_CASCADE_REQUIRED, 12400001) into numCode from trsystem051;

      select USER_GROUP_CODE into numCode1 from clouddb_global.TRSYSTEM022
        where upper(USER_USER_ID) = upper(varUserID)
        and USER_RECORD_STATUS NOT IN (10200005,10200006);

      open gencursor for
           select fldp_xml_field xmlfield,
               fldp_column_name columnname,
               fldp_table_synonym tablesynonym,
               fldp_data_type datatype,
               -- following 3 lines added on 09/12/2007
               to_char(nvl(fldp_key_no,   '-1')) KeyNo, 
               to_char(nvl(fldp_pick_group,   0)) pickgroup,
               nvl(pkgreturncursor.fncgetdescription(fldp_text_case,2),   'NA') textcase,
               nvl(fldp_text_length,   '99999') textlength,
               FORMAT_FORMAT_STRING textformat,
               --nvl(fldp_text_format,) textformat,
               nvl(fldp_tooltip_text,   '99999') tooltiptext,
               (case when numUserActionType = Gconst.VIEWLOAD then 
               nvl(fldp_default_value, '99999')
               else
               nvl(nvl(USCF_DEFAULT_VALUE, fldp_default_value),'99999')
               end) defaultvalue,
               nvl(fldp_date_range,'99999') daterange,
               nvl(pkgreturncursor.fncgetdescription(fldp_description_type,2),2) descriptionType,
               (case when numUserActionType = Gconst.VIEWLOAD then 
               nvl(pkgreturncursor.fncgetdescription(FLDP_SHOW_YN,2), 'Y')
               else
               nvl(pkgreturncursor.fncgetdescription(nvl(USCF_SHOW_YN,FLDP_SHOW_YN),2), 'Y')
               end) ShowYN,
               nvl(pkgreturncursor.fncgetdescription(FLDP_DISPLAY_YN,2),'Y') DisplayYN,
               nvl(fldp_label_text,fldp_xml_field) LabelText,
               to_char(nvl(pkgreturncursor.fncgetdescription(nvl(USCF_EDITABLEADD_YN,fldp_enable_disable),2),'N')) EnableDisable,
               to_char(nvl(pkgreturncursor.fncgetdescription(nvl(USCF_EDITABLE_YN,FLDP_ENABLE_DISABLE_EDIT),2),'N')) "EditableInEditMode",
               nvl(pkgreturncursor.fncgetdescription(FLDP_MANDATORY_FIELD,2),'N') MandatoryField,
               to_char(nvl(FLDP_TAB_NUMBER,0)) "TabNumber" , 
               to_char(FLDP_FIELD_SORT) "FieldSort",  
               --fldp_tab_number "TabNumber",
             --  (case when 12400001 = 12400001 then FLDP_CASCADE_FROM else '' end) "CascadeFromField",
              FLDP_CASCADE_FROM "CascadeFromField", 
              to_char(case when numCode = 12400001 then nvl(FLDP_CASCADE_TYPE,90899999) else 
              (case when (numCode = 12400002 and FLDP_CASCADE_TYPE = 90899998) then FLDP_CASCADE_TYPE
               else 90899999 end) end) "CascadeType",
--               (case when numCode = 12400001 then to_char(FLDP_CASCADE_TYPE) else '90899999' end) "CascadeType",
               FLDP_DROPDOWN_SELECTOR "DropdownSelectorType", 
               FLDP_DROPDOWN_CURSOR "DropdownCursorNumber",
               FLDP_BIND_TIME "BindTime",
               nvl(FLDP_COLUMN_DISPLAYNAME,FLDP_XML_FIELD)ColumnDisplayName,
               nvl(FLDP_DROPDOWN_RELATIONKEY,0) "DropDownRelationKey",
               pkgreturncursor.fncgetdescription(nvl(FLDP_HOLIDAY_CHECK,12400002),2) "HolidayCheck",
               to_char(nvl(FORMAT_DECIMAL_SCALE,0)) "DecimalScale",
               nvl(FLDP_PICK_ALLREQUIRED,'12400001') "PickUpAllRequired",
               to_char(nvl(fldp_ALLOW_NEGATIVEVALUE,12400002)) "AllowNegativeValues",
               to_char(nvl(FLDP_PROCESS_YN,12400002)) "ProcessYn",
               to_char(12400001) "CascadeRequired",
               to_char(nvl(FLDP_PERIOD_CHECK,12400002)) "PeriodCheck"
        from trsystem999 left outer join TRGLOBALMAS914
          on FORMAT_DATA_TYPE =FLDP_TEXT_FORMAT_CODE
           and format_pick_code =Glog.LanguageCode
          and FORMAT_record_status not in (10200005,10200006)
        LEFT OUTER JOIN (select USCF_XML_FIELD, USCF_SHOW_YN, USCF_DEFAULT_VALUE, 
                                   USCF_EDITABLEADD_YN, USCF_EDITABLE_YN
                            from trsystem999i He inner join trsystem999IA Chi
                            on he.uscf_user_id=chi.uscf_user_id and he.uscf_group_code=chi.uscf_group_code
                            and he.uscf_program_unit =chi.uscf_program_unit
                            where upper(he.uscf_user_id) = upper(varuserid)
                            and he.uscf_group_code = numCode1
                            and he.uscf_program_unit = varentity
                            and he.uscf_record_Status not in (10200005,10200006)
                            and chi.uscf_record_status not in (10200005,10200006) 
                        union all
                        select USCF_XML_FIELD, USCF_SHOW_YN, USCF_DEFAULT_VALUE, 
                                   USCF_EDITABLEADD_YN, USCF_EDITABLE_YN
                            from trsystem999i He inner join trsystem999IA Chi
                            on he.uscf_user_id=chi.uscf_user_id and he.uscf_group_code=chi.uscf_group_code
                            and he.uscf_program_unit =chi.uscf_program_unit
                            where he.uscf_user_id = '.'
                            and he.uscf_group_code = numcode1
                            and he.uscf_program_unit = varentity
                            and he.uscf_record_Status not in (10200005,10200006)
                            and chi.uscf_record_status not in (10200005,10200006)
                            and not exists (select * from trsystem999i He inner join trsystem999IA Chi
                            on he.uscf_user_id=chi.uscf_user_id and he.uscf_group_code=chi.uscf_group_code
                            and he.uscf_program_unit =chi.uscf_program_unit
                            where upper(he.uscf_user_id) = upper(varuserid)
                            and he.uscf_group_code = numcode1
                            and he.uscf_program_unit = varentity)) UserSpecific
        ON UserSpecific.uscf_xml_field=fldp_xml_field
        where fldp_table_synonym = varentity
        and fldp_record_status not in (10200005,10200006)
        order by nvl(FLDP_FIELD_SORT,999);


        goto process_end;

    end if;

--   if numinfotype = REFxmlfields then
--        numerror := 2;
--        varoperation := 'extracting table fields for the form';
--        GLOG.LOG_Write('numUserActionType - ' || numUserActionType);
----        open gencursor for
----        select fldp_xml_field xmlfield,
----               fldp_column_name columnname,
----               fldp_table_synonym tablesynonym,
----               fldp_data_type datatype,
----               -- following 3 lines added on 09/12/2007
----               to_char(nvl(fldp_key_no,   '-1')) KeyNo, 
----               to_char(nvl(fldp_pick_group,   99999)) pickgroup,
----               nvl(fldp_text_case,   '99999') textcase,
----               nvl(fldp_text_length,   '99999') textlength,
----               nvl(FORMAT_FORMAT_STRING,fldp_text_format) textformat,
----               --nvl(fldp_text_format,) textformat,
----               nvl(fldp_tooltip_text,   '99999') tooltiptext,
----               nvl(fldp_default_value,   '99999') defaultvalue,
----               nvl(fldp_date_range,   '99999') daterange,
----               nvl(fldp_description_type, '0') descriptionType,
----               nvl(fldp_display_yn, 'N') "DisplayYn",
----               nvl(fldp_select_yn, 'N') "SelectYn",
----               nvl(fldp_Show_yn,'Y') ShowYN,
----               nvl(fldp_label_text,fldp_xml_field) LabelText,
----               to_char(nvl(fldp_enable_disable,'12400002')) EnableDisable,
----               nvl(FLDP_MANDATORY_FIELD,'N') MandatoryField,
----               FLDP_TAB_NUMBER "TabNumber" , 
----               FLDP_FIELD_SORT "FieldSort", FLDP_DISPLAY_NAME "DisplayName",
----               fldp_tab_number "TabNumber",
----               FLDP_CASCADE_FROM "CascadeFromField", FLDP_CASCADE_TYPE "CascadeType",
----               FLDP_DROPDOWN_SELECTOR "DropdownSelectorType", 
----               FLDP_DROPDOWN_CURSOR "DropdownCursorNumber",
----               FLDP_BIND_TIME "BindTime",
----               nvl(FLDP_COLUMN_DISPLAYNAME,FLDP_XML_FIELD)ColumnDisplayName,
----               nvl(FLDP_DROPDOWN_RELATIONKEY,0) "DropDownRelationKey",
----               nvl(FLDP_HOLIDAY_CHECK,to_number(12400002)) "HolidayCheck",
----               FORMAT_DECIMAL_SCALE "DecimalScale"
----        from trsystem999 left outer join TRGLOBALMAS914
----          on FORMAT_DATA_TYPE =fldp_text_format
----          and FORMAT_record_status not in (10200005,10200006)
----        where fldp_table_synonym = varentity
----        order by nvl(FLDP_FIELD_SORT,999);
--      select NVL(PRMC_CASCADE_REQUIRED, 12400001) into numCode from trsystem051;
--      
--      select USER_GROUP_CODE into numCode1 from clouddb_global.TRSYSTEM022
--        where upper(USER_USER_ID) = upper(varUserID)
--        and USER_RECORD_STATUS NOT IN (10200005,10200006);
--
--      open gencursor for
--           select fldp_xml_field xmlfield,
--               fldp_column_name columnname,
--               fldp_table_synonym tablesynonym,
--               fldp_data_type datatype,
--               -- following 3 lines added on 09/12/2007
--               to_char(nvl(fldp_key_no,   '-1')) KeyNo, 
--               to_char(nvl(fldp_pick_group,   0)) pickgroup,
--               nvl(pkgreturncursor.fncgetdescription(fldp_text_case,2),   'NA') textcase,
--               nvl(fldp_text_length,   '99999') textlength,
--               FORMAT_FORMAT_STRING textformat,
--               --nvl(fldp_text_format,) textformat,
--               nvl(fldp_tooltip_text,   '99999') tooltiptext,
--               (case when numUserActionType = Gconst.VIEWLOAD then 
--               nvl(fldp_default_value, '99999')
--               else
--               nvl(nvl(USCF_DEFAULT_VALUE, fldp_default_value),'99999')
--               end) defaultvalue,
--               nvl(fldp_date_range,'99999') daterange,
--               nvl(pkgreturncursor.fncgetdescription(fldp_description_type,2),2) descriptionType,
--               (case when numUserActionType = Gconst.VIEWLOAD then 
--               nvl(pkgreturncursor.fncgetdescription(FLDP_SHOW_YN,2), 'Y')
--               else
--               nvl(pkgreturncursor.fncgetdescription(nvl(USCF_SHOW_YN,FLDP_SHOW_YN),2), 'Y')
--               end) ShowYN,
--               nvl(pkgreturncursor.fncgetdescription(FLDP_DISPLAY_YN,2),'Y') DisplayYN,
--               nvl(fldp_label_text,fldp_xml_field) LabelText,
--               to_char(nvl(pkgreturncursor.fncgetdescription(nvl(USCF_EDITABLEADD_YN,fldp_enable_disable),2),'N')) EnableDisable,
--               to_char(nvl(pkgreturncursor.fncgetdescription(nvl(USCF_EDITABLE_YN,FLDP_ENABLE_DISABLE_EDIT),2),'N')) "EditableInEditMode",
--               nvl(pkgreturncursor.fncgetdescription(FLDP_MANDATORY_FIELD,2),'N') MandatoryField,
--               to_char(nvl(FLDP_TAB_NUMBER,0)) "TabNumber" , 
--               to_char(FLDP_FIELD_SORT) "FieldSort",  
--               --fldp_tab_number "TabNumber",
--             --  (case when 12400001 = 12400001 then FLDP_CASCADE_FROM else '' end) "CascadeFromField",
--              FLDP_CASCADE_FROM "CascadeFromField", 
--              to_char(case when numCode = 12400001 then nvl(FLDP_CASCADE_TYPE,90899999) else 
--              (case when (numCode = 12400002 and FLDP_CASCADE_TYPE = 90899998) then FLDP_CASCADE_TYPE
--               else 90899999 end) end) "CascadeType",
----               (case when numCode = 12400001 then to_char(FLDP_CASCADE_TYPE) else '90899999' end) "CascadeType",
--               FLDP_DROPDOWN_SELECTOR "DropdownSelectorType", 
--               FLDP_DROPDOWN_CURSOR "DropdownCursorNumber",
--               FLDP_BIND_TIME "BindTime",
--               nvl(FLDP_COLUMN_DISPLAYNAME,FLDP_XML_FIELD)ColumnDisplayName,
--               nvl(FLDP_DROPDOWN_RELATIONKEY,0) "DropDownRelationKey",
--               pkgreturncursor.fncgetdescription(nvl(FLDP_HOLIDAY_CHECK,12400002),2) "HolidayCheck",
--               to_char(nvl(FORMAT_DECIMAL_SCALE,0)) "DecimalScale",
--               nvl(FLDP_PICK_ALLREQUIRED,'12400001') "PickUpAllRequired",
--               to_char(nvl(fldp_ALLOW_NEGATIVEVALUE,12400002)) "AllowNegativeValues",
--               to_char(12400001) "CascadeRequired",
--               to_char(nvl(FLDP_PERIOD_CHECK,12400002)) "PeriodCheck"
--        from trsystem999 left outer join TRGLOBALMAS914
--          on FORMAT_DATA_TYPE =FLDP_TEXT_FORMAT_CODE
--          and FORMAT_record_status not in (10200005,10200006)
--        LEFT OUTER JOIN (select USCF_XML_FIELD, USCF_SHOW_YN, USCF_DEFAULT_VALUE, 
--                                   USCF_EDITABLEADD_YN, USCF_EDITABLE_YN
--                            from trsystem999i He inner join trsystem999IA Chi
--                            on he.uscf_user_id=chi.uscf_user_id and he.uscf_group_code=chi.uscf_group_code
--                            and he.uscf_program_unit =chi.uscf_program_unit
--                            where upper(he.uscf_user_id) = upper(varuserid)
--                            and he.uscf_group_code = numCode1
--                            and he.uscf_program_unit = varentity
--                            and he.uscf_record_Status not in (10200005,10200006)
--                            and chi.uscf_record_status not in (10200005,10200006) 
--                        union all
--                        select USCF_XML_FIELD, USCF_SHOW_YN, USCF_DEFAULT_VALUE, 
--                                   USCF_EDITABLEADD_YN, USCF_EDITABLE_YN
--                            from trsystem999i He inner join trsystem999IA Chi
--                            on he.uscf_user_id=chi.uscf_user_id and he.uscf_group_code=chi.uscf_group_code
--                            and he.uscf_program_unit =chi.uscf_program_unit
--                            where he.uscf_user_id = '.'
--                            and he.uscf_group_code = numcode1
--                            and he.uscf_program_unit = varentity
--                            and he.uscf_record_Status not in (10200005,10200006)
--                            and chi.uscf_record_status not in (10200005,10200006)
--                            and not exists (select * from trsystem999i He inner join trsystem999IA Chi
--                            on he.uscf_user_id=chi.uscf_user_id and he.uscf_group_code=chi.uscf_group_code
--                            and he.uscf_program_unit =chi.uscf_program_unit
--                            where upper(he.uscf_user_id) = upper(varuserid)
--                            and he.uscf_group_code = numcode1
--                            and he.uscf_program_unit = varentity)) UserSpecific
--        ON UserSpecific.uscf_xml_field=fldp_xml_field
--        where fldp_table_synonym = varentity
--        and fldp_record_status not in (10200005,10200006)
--        order by nvl(FLDP_FIELD_SORT,999);
--
--
--        goto process_end;
--
--    end if;

-- if numinfotype = REFxmlfieldsBrowser then
--        numerror := 2;
--        varoperation := 'extracting table fields for the form';
--        select NVL(PRMC_CASCADE_REQUIRED, 12400001) into numCode from trsystem051;
--      open gencursor for
--    select xmlfield,columnname,tablesynonym,
--               datatype, KeyNo,  pickgroup,textcase,
--               textlength, textformat,tooltiptext,
--               defaultvalue, daterange, descriptionType,
--               ShowYN, DisplayYN, LabelText,
--               EnableDisable,EditableInEditMode, MandatoryField,
--               FieldSort "FieldSort", 
--               CascadeFromField "CascadeFromField", to_char(CascadeType) "CascadeType",
--               to_char(DropdownSelectorType) "DropdownSelectorType", DropdownCursorNumber "DropdownCursorNumber",
--               BindTime "BindTime",ColumnDisplayName,DropDownRelationKey "DropDownRelationKey",
--               HolidayCheck "HolidayCheck",to_char(DecimalScale) "DecimalScale",
--               PickUpAllRequired "PickUpAllRequired"
--          from (select fldp_xml_field xmlfield,
--               fldp_column_name columnname,
--               fldp_table_synonym tablesynonym,
--               fldp_data_type datatype,
--               -- following 3 lines added on 09/12/2007
--               to_char(nvl(fldp_key_no,   '-1')) KeyNo, 
--               to_char(nvl(fldp_pick_group,   0)) pickgroup,
--               nvl(pkgreturncursor.fncgetdescription(fldp_text_case,2),   'NA') textcase,
--               nvl(fldp_text_length,   '99999') textlength,
--               --FORMAT_FORMAT_STRING textformat,
--               (case when FLDP_TEXT_FORMAT_CODE = 90400011 then 
--               (select FORMAT_FORMAT_STRING from TRGLOBALMAS914
--               where FORMAT_record_status not in (10200005,10200006)
--               and FORMAT_DATA_TYPE = 90400003) else
--               (select FORMAT_FORMAT_STRING from TRGLOBALMAS914
--               where FORMAT_record_status not in (10200005,10200006)
--               and FORMAT_DATA_TYPE= FLDP_TEXT_FORMAT_CODE) end) textformat,
--               --nvl(fldp_text_format,) textformat,
--               nvl(fldp_tooltip_text,   '99999') tooltiptext,
--               nvl(fldp_date_range,   '99999') daterange,
--               nvl(fldp_default_value,   '99999') defaultvalue, 
--               nvl(pkgreturncursor.fncgetdescription(FLDP_SHOW_YN,2),'Y') ShowYN,
--               nvl(pkgreturncursor.fncgetdescription(fldp_description_type,2),2) descriptionType,
--            --pkgreturncursor.fncgetdescription(nvl(UFLD_DISPLAY_YN,FLDP_DISPLAY_YN),2) DisplayYN,
--               (case when (SELECT count(*) FROM TRSYSTEM999U
--                                      where UFLD_TABLE_SYNONYM = fldp_table_synonym 
--                                      and UFLD_COLUMN_NAME = fldp_xml_field
--                                      and upper(UFLD_USER_ID) = varUserid
--                                      and UFLD_RECORD_STATUS not in (10200005,10200006)) = 0 
--                             then nvl(pkgreturncursor.fncgetdescription(FLDP_DISPLAY_YN,2),'Y') 
--                             else (SELECT pkgreturncursor.fncgetdescription(nvl(UFLD_DISPLAY_YN,12400001), 2) FROM TRSYSTEM999U
--                                      where UFLD_TABLE_SYNONYM =fldp_table_synonym 
--                                      and UFLD_COLUMN_NAME = fldp_xml_field
--                                      and upper(UFLD_USER_ID) = varUserid
--                                      and UFLD_RECORD_STATUS not in (10200005,10200006)) end) DisplayYN,
--               nvl(fldp_label_text,fldp_xml_field) LabelText,
--               to_char(nvl(pkgreturncursor.fncgetdescription(fldp_enable_disable,2),'N')) EnableDisable,
--               to_char(nvl(pkgreturncursor.fncgetdescription(FLDP_ENABLE_DISABLE_EDIT,2),'N')) EditableInEditMode,
--               nvl(pkgreturncursor.fncgetdescription(FLDP_MANDATORY_FIELD,2),'N') MandatoryField,
--               FLDP_TAB_NUMBER TabNumber , 
--               --added by supriya on08/12/2020 to pick user defined configs for browser grid fields
--               to_char(case when (SELECT count(*) FROM TRSYSTEM999U
--                              where UFLD_TABLE_SYNONYM = fldp_table_synonym 
--                              and UFLD_COLUMN_NAME = fldp_xml_field
--                              and upper(UFLD_USER_ID) = varUserid
--                              and UFLD_RECORD_STATUS not in (10200005,10200006)) = 0 
--                     then FLDP_FIELD_SORT
--                     else (SELECT UFLD_DISPLAY_ORDER FROM TRSYSTEM999U
--                              where UFLD_TABLE_SYNONYM = fldp_table_synonym 
--                              and UFLD_COLUMN_NAME = fldp_xml_field
--                              and upper(UFLD_USER_ID) = varUserid
--                              and UFLD_RECORD_STATUS not in (10200005,10200006)) end) FieldSort,
--               --to_char(FLDP_FIELD_SORT,UFLD_DISPLAY_ORDER) FieldSort,
--               fldp_tab_number TabNumber,
--               --nvl(pkgreturncursor.fncgetdescription(FLDP_DISPLAY_YN,2),'Y') DisplayYN,  --commented by supriya
--               --FLDP_FIELD_SORT FieldSort,  --commented by supriya
--               (case when numCode = 12400001 then FLDP_CASCADE_FROM else '' end) CascadeFromField,
--               --FLDP_CASCADE_FROM CascadeFromField,
--               FLDP_CASCADE_TYPE CascadeType,
--               FLDP_DROPDOWN_SELECTOR DropdownSelectorType, 
--               FLDP_DROPDOWN_CURSOR DropdownCursorNumber,
--               FLDP_BIND_TIME BindTime,
--               nvl(FLDP_COLUMN_DISPLAYNAME,FLDP_XML_FIELD)ColumnDisplayName,
--               nvl(FLDP_DROPDOWN_RELATIONKEY,0) DropDownRelationKey,
--               pkgreturncursor.fncgetdescription(nvl(FLDP_HOLIDAY_CHECK,12400002),2) HolidayCheck,
--               nvl((select FORMAT_DECIMAL_SCALE from TRGLOBALMAS914
--               where FORMAT_record_status not in (10200005,10200006)
--               and FORMAT_DATA_TYPE = FLDP_TEXT_FORMAT_CODE),0) DecimalScale,
--               nvl(FLDP_PICK_ALLREQUIRED,'12400001') PickUpAllRequired,
--               nvl(fldp_ALLOW_NEGATIVEVALUE,12400002) "AllowNegativeValues",
--               nvl(FLDP_PERIOD_CHECK,12400002) "PeriodCheck"
--        from trsystem999 left outer join trsystem999u 
--           on UFLD_TABLE_SYNONYM = fldp_table_synonym 
--          and UFLD_COLUMN_NAME = fldp_xml_field
--          and upper(UFLD_USER_ID) = varUserid
--          and UFLD_RECORD_STATUS not in (10200005,10200006)           
--        -- left outer join TRGLOBALMAS914
----          on FORMAT_DATA_TYPE =FLDP_TEXT_FORMAT_CODE
----          and FORMAT_record_status not in (10200005,10200006)
--        where fldp_table_synonym = varentity 
--                -- added by Manjunath Reddy on 06/10/2020 to get only the Columns allow ao add / edit  
--          and(( FLDP_DISPLAY_YN=12400001) or 
--              (FLDP_SHOW_YN=12400001))          
----          and nvl(fldp_tab_number,0)!=0
----          and nvl(FLDP_FIELD_SORT,0)!=0
----        union 
----          select fldp_xml_field || '_Desc' xmlfield,
----               fldp_column_name columnname,
----               fldp_table_synonym tablesynonym,
----               fldp_data_type datatype,
----               -- following 3 lines added on 09/12/2007
----               to_char(nvl(fldp_key_no,   '-1')) KeyNo, 
----               to_char(nvl(fldp_pick_group,   0)) pickgroup,
----               nvl(pkgreturncursor.fncgetdescription(fldp_text_case,2),   'L') textcase,
----               nvl(fldp_text_length,   '99999') textlength,
----               FORMAT_FORMAT_STRING textformat,
----               --nvl(fldp_text_format,) textformat,
----               nvl(fldp_tooltip_text,   '99999') tooltiptext,
----               nvl(fldp_default_value,   '99999') defaultvalue,
----               nvl(fldp_date_range,   '99999') daterange,
----               nvl(pkgreturncursor.fncgetdescription(fldp_description_type,2),2) descriptionType,
----               'N' ShowYN, -- no need to Display on Screen 
----               nvl(pkgreturncursor.fncgetdescription(FLDP_DISPLAY_YN,2),'Y') DisplayYN,
----               nvl(fldp_label_text,fldp_xml_field) LabelText,
----               to_char(nvl(pkgreturncursor.fncgetdescription(fldp_enable_disable,2),'N')) EnableDisable,
----               to_char(nvl(pkgreturncursor.fncgetdescription(FLDP_ENABLE_DISABLE_EDIT,2),'N')) EditableInEditMode,
----               nvl(pkgreturncursor.fncgetdescription(FLDP_MANDATORY_FIELD,2),'N') MandatoryField,
----               FLDP_TAB_NUMBER TabNumber , 
----               FLDP_FIELD_SORT FieldSort,  fldp_tab_number TabNumber,
----               FLDP_CASCADE_FROM CascadeFromField, FLDP_CASCADE_TYPE CascadeType,
----               FLDP_DROPDOWN_SELECTOR DropdownSelectorType, 
----               FLDP_DROPDOWN_CURSOR DropdownCursorNumber,
----               FLDP_BIND_TIME BindTime,
----               nvl(FLDP_COLUMN_DISPLAYNAME,FLDP_XML_FIELD) || '_Desc' ColumnDisplayName ,
----               nvl(FLDP_DROPDOWN_RELATIONKEY,0) DropDownRelationKey,
----               pkgreturncursor.fncgetdescription(nvl(FLDP_HOLIDAY_CHECK,12400002),2) HolidayCheck,
----               FORMAT_DECIMAL_SCALE DecimalScale,
----               nvl(FLDP_PICK_ALLREQUIRED,'12400001') PickUpAllRequired
----        from trsystem999 left outer join TRGLOBALMAS914
----          on FORMAT_DATA_TYPE =FLDP_TEXT_FORMAT_CODE
----          and FORMAT_record_status not in (10200005,10200006)
----        where fldp_table_synonym = varentity
----         and fldp_pick_group !=0
----         and nvl(pkgreturncursor.fncgetdescription(FLDP_DISPLAY_YN,2),'Y') ='Y'
--        union
--           select GRID_COLUMN_NAME xmlfield,
--               GRID_COLUMN_NAME columnname,
--               GRID_CURSOR_NAME tablesynonym,
--               'varchar' datatype,'0' KeyNo, '0' pickgroup,'L' textcase,
--               nvl(GRID_TEXT_LENGTH,'99999') textlength, FORMAT_FORMAT_STRING textformat,'99999' tooltiptext,
--               '99999' defaultvalue,  '99999' daterange,'' descriptionType,
--               'N' ShowYN,
--               --'Y' DisplayYN,
--               nvl(pkgreturncursor.fncgetdescription(GRID_DISPLAY_YN,2), 'Y') DisplayYN,
--               GRID_DISPLAY_NAME LabelText,'N' EnableDisable,
--               'N' EditableInEditMode,'N' MandatoryField,
--               0 TabNumber , to_char(GRID_DISPLAY_ORDER) FieldSort,  0 TabNumber,
--               '0' CascadeFromField, 0 CascadeType,
--               0 DropdownSelectorType, 
--               0 DropdownCursorNumber,
--               null BindTime,GRID_DISPLAY_NAME ColumnDisplayName ,
--               0 DropDownRelationKey,'2' HolidayCheck,
--               0 DecimalScale,
--               12400001 PickUpAllRequired,
--                12400002 "AllowNegativeValues",
--                12400002 "PeriodCheck"
--        from TRSYSTEM999C left outer join TRGLOBALMAS914
--          on FORMAT_DATA_TYPE =GRID_COLUMN_TYPE
--        where GRID_CURSOR_NAME = varentity)
--        order by nvl(FieldSort,999) asc;
--
--
--        goto process_end;
--
--    end if;

if numinfotype = REFxmlfieldsBrowser then
    numerror := 2;
    varoperation := 'extracting table fields for the form';

    select NVL(PRMC_CASCADE_REQUIRED, 12400001) 
    into numCode from trsystem051;

    open gencursor for
        select xmlfield,columnname,tablesynonym,
            datatype, KeyNo,  pickgroup,textcase,
            textlength, textformat,tooltiptext,
            defaultvalue, daterange, descriptionType,
            ShowYN, DisplayYN, fncGetMultiLangText(LabelText) LabelText,
            EnableDisable,EditableInEditMode, MandatoryField,
            FieldSort "FieldSort", 
            CascadeFromField "CascadeFromField", to_char(CascadeType) "CascadeType",
            to_char(DropdownSelectorType) "DropdownSelectorType", DropdownCursorNumber "DropdownCursorNumber",
            BindTime "BindTime",fncGetMultiLangText(ColumnDisplayName) ColumnDisplayName,DropDownRelationKey "DropDownRelationKey",
            HolidayCheck "HolidayCheck",to_char(DecimalScale) "DecimalScale",
            PickUpAllRequired "PickUpAllRequired"
            from (select fldp_xml_field xmlfield,
            fldp_column_name columnname,
            fldp_table_synonym tablesynonym,
            fldp_data_type datatype,
            -- following 3 lines added on 09/12/2007
            to_char(nvl(fldp_key_no,   '-1')) KeyNo, 
            to_char(nvl(fldp_pick_group,   0)) pickgroup,
            nvl(pkgreturncursor.fncgetdescription(fldp_text_case,2),   'NA') textcase,
            nvl(fldp_text_length,   '99999') textlength,
            --FORMAT_FORMAT_STRING textformat,
            (case when FLDP_TEXT_FORMAT_CODE = 90400011 then 
            (select FORMAT_FORMAT_STRING from TRGLOBALMAS914
            where FORMAT_record_status not in (10200005,10200006)
           --  and format_pick_code =Glog.LanguageCode
            and FORMAT_DATA_TYPE = 90400003) else
            (select FORMAT_FORMAT_STRING from TRGLOBALMAS914
            where FORMAT_record_status not in (10200005,10200006)
            -- and format_pick_code =Glog.LanguageCode
            and FORMAT_DATA_TYPE= FLDP_TEXT_FORMAT_CODE) end) textformat,
            --nvl(fldp_text_format,) textformat,
            nvl(fldp_tooltip_text,   '99999') tooltiptext,
            nvl(fldp_date_range,   '99999') daterange,
            nvl(fldp_default_value,   '99999') defaultvalue, 
            nvl(pkgreturncursor.fncgetdescription(FLDP_SHOW_YN,2),'Y') ShowYN,
            nvl(pkgreturncursor.fncgetdescription(fldp_description_type,2),2) descriptionType,
            pkgreturncursor.fncgetdescription(nvl(UFLD_DISPLAY_YN,FLDP_DISPLAY_YN),2) DisplayYN,
            nvl(fldp_label_text,fldp_xml_field) LabelText,
            to_char(nvl(pkgreturncursor.fncgetdescription(fldp_enable_disable,2),'N')) EnableDisable,
            to_char(nvl(pkgreturncursor.fncgetdescription(FLDP_ENABLE_DISABLE_EDIT,2),'N')) EditableInEditMode,
            nvl(pkgreturncursor.fncgetdescription(FLDP_MANDATORY_FIELD,2),'N') MandatoryField,
            FLDP_TAB_NUMBER TabNumber , 
            --added by supriya on08/12/2020 to pick user defined configs for browser grid fields
            to_char(nvl(UFLD_DISPLAY_ORDER,FLDP_FIELD_SORT)) FieldSort,
            fldp_tab_number TabNumber,
            --nvl(pkgreturncursor.fncgetdescription(FLDP_DISPLAY_YN,2),'Y') DisplayYN,  --commented by supriya
            --FLDP_FIELD_SORT FieldSort,  --commented by supriya
            (case when numCode = 12400001 then FLDP_CASCADE_FROM else '' end) CascadeFromField,
            --FLDP_CASCADE_FROM CascadeFromField,
            FLDP_CASCADE_TYPE CascadeType,
            FLDP_DROPDOWN_SELECTOR DropdownSelectorType, 
            FLDP_DROPDOWN_CURSOR DropdownCursorNumber,
            FLDP_BIND_TIME BindTime,
            nvl(FLDP_COLUMN_DISPLAYNAME,FLDP_XML_FIELD)ColumnDisplayName,
            nvl(FLDP_DROPDOWN_RELATIONKEY,0) DropDownRelationKey,
            pkgreturncursor.fncgetdescription(nvl(FLDP_HOLIDAY_CHECK,12400002),2) HolidayCheck,
            nvl((select FORMAT_DECIMAL_SCALE from TRGLOBALMAS914
            where FORMAT_record_status not in (10200005,10200006)
             and format_pick_code =Glog.LanguageCode
            and FORMAT_DATA_TYPE = FLDP_TEXT_FORMAT_CODE),0) DecimalScale,
            nvl(FLDP_PICK_ALLREQUIRED,'12400001') PickUpAllRequired,
            nvl(fldp_ALLOW_NEGATIVEVALUE,12400002) "AllowNegativeValues",
            nvl(FLDP_PERIOD_CHECK,12400002) "PeriodCheck"
        from trsystem999 left outer join trsystem999u 
        on UFLD_TABLE_SYNONYM = fldp_table_synonym 
        and UFLD_COLUMN_NAME = fldp_xml_field
        and upper(UFLD_USER_ID) = varUserid
        and UFLD_RECORD_STATUS not in (10200005,10200006)
        where fldp_table_synonym = varentity 
        -- added by Manjunath Reddy on 06/10/2020 to get only the Columns allow ao add / edit  
        and(( FLDP_DISPLAY_YN=12400001) or 
        (FLDP_SHOW_YN=12400001))  
    union
        select GRID_COLUMN_NAME xmlfield,
            GRID_COLUMN_NAME columnname,
            GRID_CURSOR_NAME tablesynonym,
            'varchar' datatype,'0' KeyNo, '0' pickgroup,'L' textcase,
            nvl(GRID_TEXT_LENGTH,'99999') textlength, FORMAT_FORMAT_STRING textformat,'99999' tooltiptext,
            '99999' defaultvalue,  '99999' daterange,
            'N' ShowYN,
            pkgreturncursor.fncgetdescription(92100002,2) descriptionType,
            --'Y' DisplayYN,
            nvl(pkgreturncursor.fncgetdescription(GRID_DISPLAY_YN,2), 'Y') DisplayYN,
            GRID_DISPLAY_NAME LabelText,'N' EnableDisable,
            'N' EditableInEditMode,'N' MandatoryField,
            0 TabNumber , to_char(GRID_DISPLAY_ORDER) FieldSort,  0 TabNumber,
            '0' CascadeFromField, 0 CascadeType,
            0 DropdownSelectorType, 
            0 DropdownCursorNumber,
            null BindTime,GRID_DISPLAY_NAME ColumnDisplayName ,
            0 DropDownRelationKey,'2' HolidayCheck,
            0 DecimalScale,
            12400001 PickUpAllRequired,
            12400002 "AllowNegativeValues",
            12400002 "PeriodCheck"
        from TRSYSTEM999C left outer join TRGLOBALMAS914
        on FORMAT_DATA_TYPE =GRID_COLUMN_TYPE
         and format_pick_code =Glog.LanguageCode
        where GRID_CURSOR_NAME = varentity)
        order by nvl(FieldSort,999) asc;
    goto process_end;
end if;

--Commented below lines
--    if numinfotype = REFmenuitems then
--        numerror := 3;
--        varoperation := 'extracting menu items';
--        numerror := fncgeneratemenu(varuserid);

 --       open gencursor for
 --       select distinct tmnu_menu_id "menu id",
 --         tmnu_menu_description "menu description",
 --         tmnu_program_unit "program unit",
 --         tmnu_program_acl "program acl",
 --         tmnu_child_level "child level",
 --         tmnu_parent_id "parent id",
 --         tmnu_runs_program "Runs Program",
 --         punt_control_name "control name",
 --         nvl(tmnu_short_cut,0) Shortcut,
 --         nvl(tmnu_short_number,0) ShortCutNo
 --         from trsystem998,
 --         programfile
 --         where tmnu_program_unit = punt_program_unit(+)
 --         and tmnu_user_id = varuserid
 --         order by tmnu_menu_id,tmnu_child_level;
 --
 --       goto process_end;
 --   end if;
 --upto here new added for web appalication

  if numinfotype = REFmenuitems then
        numerror := 3;
        varoperation := 'extracting menu items';
        numerror := fncgeneratemenu(varuserid);
        open gencursor for
        select distinct tmnu_menu_id "menuid",
          tmnu_menu_description "menudescription",
          tmnu_menu_description "ScreenHeader",
          tmnu_program_unit "programunit",
          tmnu_program_acl "programacl",
          tmnu_child_level "childlevel",
          tmnu_parent_id "parentid",
          tmnu_runs_program "RunsProgram",
          PUNT_WEBCONTROL_NAME "Webcontrolname",
          PUNT_CONTROL_NAME "controlname",
          nvl(PUNT_VIEW_INWEB,12400001) "ViewInWeb",
          nvl(tmnu_short_cut,0) Shortcut,
          nvl(tmnu_short_number,0) ShortCutNo,
         MENU_MENU_ICON "MenuIcon",
         pkgreturncursor.fncGetMenuPath(tmnu_menu_id) "MenuPath"
          from trsystem998,
          PROGRAMFILE,MENUFILE
          where tmnu_program_unit = punt_program_unit(+)
          and TMNU_MENU_DESCRIPTION=MENU_DESCRIPTION(+)
          and tmnu_user_id = varuserid  
          union 
         select distinct MENU_MENU_ID "menuid", MENU_DESCRIPTION "menudescription",
          MENU_DESCRIPTION "ScreenHeader", MENU_PROGRAM_UNIT "programunit",
          'view' "programacl",MENU_CHILD_LEVEL "childlevel",MENU_PARENT_ID "parentid",
          MENU_RUNS_PROGRAM "RunsProgram", '' "Webcontrolname",
          '' "controlname", 12400001 "ViewInWeb",   0 Shortcut,   0 ShortCutNo,
         MENU_MENU_ICON "MenuIcon",'' "MenuPath"
          from MENUFILE
          where menu_record_status not in (10200005,10200006)
          and menu_child_level=7
         order by 1,6;
       goto process_end;
    end if;

    if numinfotype = REFrelation then
        --numerror := 7;k
        varoperation := 'extracting relation for entities';



        open gencursor for
        select erel_main_entity MainEntity,
          pick_key_group KeyGroup,
          erel_entity_relation KeyValue ,
          pick_short_description ShortDescription,
          pick_long_description LongDescription,
          EREL_RELATION_TYPE  RelationType
          from relationtable, pickupmaster
          where erel_entity_relation = pick_key_value
          and erel_record_Status not in (10200005,10200006)
          and pick_record_status not in (10200005,10200006)
          -- Added By Manjunath Reddy on 06-Apr-2021 
          --
          and ((pick_key_group=301 and varentity != 'USERMASTER' 
              and Pick_key_value in
                (select USCO_COMPANY_CODE from trsystem022a 
                  where Upper(USCO_USER_ID)=varUserID
                   and USCO_RECORD_STATUS not in (10200005,10200006)))
                    or (pick_key_group!=301))
          and ((pick_key_group=302 and varentity != 'USERMASTER' 
                 and Pick_key_value in
                (select USLO_ENTITY from trsystem022D
                   where Upper(USLO_USER_ID)=varUserID
                     and USLO_RECORD_STATUS not in (10200005,10200006)))
             or (pick_key_group!=302))
          order by erel_main_entity, erel_entity_relation;

        goto process_end;
    end if;

   if numinfotype = REFaccessgroup then
     varoperation := '1';

        numcode := gconst.fncxmlextract(xmldoc,   'Param/CompanyCode',   numcode);
        numcode1 := gconst.fncxmlextract(xmldoc,   'Param/GroupCode',   numcode1);
        vartemp1  := gconst.fncxmlextract(xmldoc,   'Param/Userid',   vartemp1);
        varoperation := 'extracting access control list for ' || numcode1;
        vartemp:='.';
        if vartemp1='ALL' then
           vartemp1:='.';
        end if;

        ---insert into temp values (numcode,numcode1 || '  ' || vartemp); commit;

--    select decode(prmc_treasury_module,gconst.optionyes,gconst.CurrencyModule,Gconst.OptionNo,0),
--          Decode(prmc_money_module,Gconst.Optionyes,gconst.MoneyModule,Gconst.OptionNo,0),
--          Decode(prmc_Commodity_Currency,Gconst.Optionyes,gconst.CommdityModule,Gconst.OptionNo,0),
--          Decode(prmc_currency_futures,Gconst.Optionyes,gconst.CurrencyFuturesModule,Gconst.OptionNo,0),
--          Decode(prmc_derivatives_Module,Gconst.Optionyes,gconst.CurrencyOptionsModule,Gconst.OptionNo,0)
--          into numcode2,numcode3,numcode4,numcode5,numcode6
--          from trsystem051 ;       
    GLOG.LOG_Write('vartemp1 - ' || vartemp1 || ' vartemp - ' ||vartemp);
    open gencursor for
        select to_char(rownum) "Rownum", menu_description "MenuDescription", 
          punt_program_unit programunit, pkgreturncursor.fncgetdescription(MENU_MODULE_ID,1) ModuleName,
          pkgreturncursor.fncGetMenuPath(menu_menu_id) MenuPath,
          Decode(punt_access_insert,12400001,'True','False') insertaccess,
          Decode(punt_access_edit,12400001,'True','False') editaccess,
          Decode(punt_access_delete,12400001,'True','False') deleteaccess,
          Decode(punt_access_confirm,12400001,'True','False') confirmaccess,
          Decode(punt_access_view,12400001,'True','False') viewaccess,
          Decode(punt_access_print,12400001,'True','False') printaccess,
          Decode(punt_access_save,12400001,'True','False') saveaccess,
          Decode(PUNT_ACCESS_UNCONFIRM,12400001,'True','False') UnConfirmaccess,
          Decode(PUNT_ACCESS_INACTIVE,12400001,'True','False') Inactiveaccess,
          Decode(Userinsertaccess,12400001,'True','False') Userinsertaccess,
          Decode(Usereditaccess,12400001,'True','False') Usereditaccess,
          Decode(Userdeleteaccess,12400001,'True','False') Userdeleteaccess,
          Decode(Userconfirmaccess,12400001,'True','False') Userconfirmaccess,
          Decode(Userviewaccess,12400001,'True','False') Userviewaccess,
          Decode(Userprintaccess,12400001,'True','False') Userprintaccess,
          Decode(Usersaveaccess,12400001,'True','False') Usersaveaccess,
          Decode(UserUnConfirm,12400001,'True','False') UserUnConfirmaccess,
          Decode(UserInActive,12400001,'True','False') UserInActiveaccess,
          (case when UserConfig.UserSerialNumber is null then 
                   (case when MaxRecord.UserSerialNumber is null then '1' else to_char(MaxRecord.UserSerialNumber+1) end)
                when to_char(MaxRecord.UserSerialNumber) is not null then
                    to_char(MaxRecord.UserSerialNumber)
                else '1' end) SerialNumber,
--          (case  when UserConfig.UserSerialNumber is not null then '2'
--                else '1' end) RecordStatus
          (case when UserConfig.UserSerialNumber is null then '1'
                when vartemp1 != '.' and userrecordcount = 1 then '2'
                when vartemp1 != '.' and userrecordcount = 2 then '1'
                when vartemp1 = '.' then '2' end) RecordStatus
          from programfile inner join menufile          
          on punt_program_unit=menu_program_unit          
           --Added by lakshmi, for showing menus based on modules added for license.   
        and exists 
          (select 'x' from  clouddb_master.Trlicense002a 
             inner join clouddb_master.trlicense001a
             on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
          where nvl(Menu_Program_Unit,'NA') = Lmdd_Program_Unit 
          and lmdd_record_Status not in (10200005,10200006)
          and lmdu_record_status not in (10200005,10200006)
          and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051))          
          left outer join (
                     select actl_program_unit ProgramUnit,
                        actl_access_insert Userinsertaccess,  actl_access_edit Usereditaccess,  actl_access_delete Userdeleteaccess,
                        actl_access_confirm Userconfirmaccess,    actl_access_view Userviewaccess,     actl_access_print Userprintaccess,
                        actl_access_save Usersaveaccess,ACTL_ACCESS_UNCONFIRM UserUnConfirm, ACTL_ACCESS_INACTIVE UserInActive,
                        ACTL_RECORD_STATUS UserRecordStatus, max(ACTL_SERIAL_NUMBER) UserSerialNumber,
                        1 userrecordcount
                        from accessfile a
                        where actl_company_code = numcode
                        and actl_group_code = numcode1
                        and upper(ACTL_USER_ID)  =upper(vartemp1)  -- pick Specific To User ID 
                        and actl_record_status not in (10200005,10200006)
                        group by actl_program_unit , actl_access_insert ,  actl_access_edit ,  
                        actl_access_delete ,actl_access_confirm ,    actl_access_view ,     actl_access_print ,
                        actl_access_save ,ACTL_ACCESS_UNCONFIRM ,ACTL_ACCESS_INACTIVE, ACTL_RECORD_STATUS           
                     union all 
                     select actl_program_unit ProgramUnit,
                        actl_access_insert Userinsertaccess,  actl_access_edit Usereditaccess,  actl_access_delete Userdeleteaccess,
                        actl_access_confirm Userconfirmaccess,    actl_access_view Userviewaccess,     actl_access_print Userprintaccess,
                        actl_access_save Usersaveaccess,ACTL_ACCESS_UNCONFIRM UserUnConfirm, ACTL_ACCESS_INACTIVE UserInActive,
                        ACTL_RECORD_STATUS UserRecordStatus, max(ACTL_SERIAL_NUMBER) UserSerialNumber,
                        2 userrecordcount
                        from accessfile Ma
                        where actl_company_code = numcode
                        and actl_group_code = numcode1
                        and upper(ACTL_USER_ID)  =upper(vartemp)
                        and actl_record_status not in (10200005,10200006)
                        and not exists (select * from accessfile Sub
                          where ma.Actl_Company_code = sub.actl_company_code
                            and ma.actl_group_code= sub.actl_group_code
                            and ma.actl_program_unit = sub.actl_program_unit
                            and upper(sub.actl_user_id) =upper(varTemp1)
                            and ma.actl_record_Status not in (10200005,10200006))
                        group by actl_program_unit , actl_access_insert ,  actl_access_edit ,  
                        actl_access_delete ,actl_access_confirm ,    actl_access_view ,     actl_access_print ,
                        actl_access_save ,ACTL_ACCESS_UNCONFIRM ,ACTL_ACCESS_INACTIVE, ACTL_RECORD_STATUS ) UserConfig
           on UserConfig.ProgramUnit=punt_program_unit
          left outer join (select actl_program_unit ProgramUnit,
                        max(ACTL_SERIAL_NUMBER) UserSerialNumber,ACTL_RECORD_STATUS UserRecordStatus
                        from accessfile a
                        where actl_company_code = numcode
                        and actl_group_code = numcode1
                        and upper(ACTL_USER_ID)  =upper(vartemp)
                        group by actl_program_unit,ACTL_RECORD_STATUS) MaxRecord
          on MaxRecord.ProgramUnit=punt_program_unit
          where punt_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
          and menu_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
          ---Below of lines of code commented by supriya on 10/02/2021, reason is 
        ---Screen Level Access is maintained at user level and not at the company level
--            and MENU_COMPANY_CODE in( select usco_company_code from trsystem022a
--                    where UPPER(usco_user_id) = varUserid
--              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
--          and PUNT_COMPANY_CODE in( select usco_company_code from trsystem022a
--                    where UPPER(usco_user_id) = varUserid
--              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
          order by menu_description;
        goto process_end;
    end if;

 if numinfotype = REFACCESSGROUPDELETE then
     varoperation := '1';

       numcode := gconst.fncxmlextract(xmldoc,   'Param/CompanyCode',   numcode);
        numcode1 := gconst.fncxmlextract(xmldoc,   'Param/GroupCode',   numcode1);
        vartemp  := gconst.fncxmlextract(xmldoc,   'Param/Userid',   vartemp);
        varoperation := 'extracting access control list for ' || numcode1;
        if vartemp='ALL' then
           vartemp:='.';
        end if;

    open gencursor for
        select to_char(rownum) "Rownum", menu_description "MenuDescription", 
          punt_program_unit programunit, pkgreturncursor.fncgetdescription(MENU_MODULE_ID,1) "ModuleName",
          pkgreturncursor.fncGetMenuPath(menu_menu_id) "MenuPath",
          Decode(ACTL_ACCESS_INSERT,12400001,'true','false') insertaccess, 
          Decode(ACTL_ACCESS_EDIT,12400001,'true','false') editaccess,
          Decode(ACTL_ACCESS_DELETE,12400001,'true','false') deleteaccess, 
          Decode(ACTL_ACCESS_CONFIRM,12400001,'true','false') confirmaccess,
          Decode(ACTL_ACCESS_VIEW,12400001,'true','false') viewaccess, 
          Decode(ACTL_ACCESS_PRINT,12400001,'true','false') printaccess,
          Decode(ACTL_ACCESS_SAVE,12400001,'true','false') saveaccess, 
          Decode(ACTL_ACCESS_UNCONFIRM,12400001,'true','false') UnConfirmaccess,
           Decode(ACTL_ACCESS_INACTIVE,12400001,'True','False') Inactiveaccess,
          ACTL_SERIAL_NUMBER SerialNumber,
          ACTL_RECORD_STATUS RecordStatus
          from programfile inner join menufile          
          on punt_program_unit=menu_program_unit    
         -- Added by lakshmi, for showing menus based on modules added for license.   
         and exists 
          (select 'x' from  clouddb_master.Trlicense002a 
             inner join clouddb_master.trlicense001a
             on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
          where nvl(Menu_Program_Unit,'NA') = Lmdd_Program_Unit 
          and lmdd_record_Status not in (10200005,10200006)
          and lmdu_record_status not in (10200005,10200006)
          and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051))          
          left outer join accessfile 
          on ACTL_PROGRAM_UNIT=punt_program_unit
          where menu_record_status not in(10200005,10200006)
          and actl_record_status not in(10200005,10200006)
          and actl_company_code = numcode
                        and actl_group_code = numcode1
                        and ACTL_USER_ID = vartemp
        ---Below of lines of code commented by supriya on 10/02/2021, reason is 
        ---Screen Level Access is maintained at user level and not at the company level
--          and MENU_COMPANY_CODE in( select usco_company_code from trsystem022a
--                    where UPPER(usco_user_id) = varUserid
--              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
--          and PUNT_COMPANY_CODE in( select usco_company_code from trsystem022a
--                    where UPPER(usco_user_id) = varUserid
--              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )     
          order by menu_description;
        goto process_end;
    end if;
--    if numinfotype = REFaccessgroup then
--        numerror := 12;
--
--        numcode := gconst.fncxmlextract(xmldoc,   'Param/CompanyCode',   numcode);
--        numcode1 := gconst.fncxmlextract(xmldoc,   'Param/GroupCode',   numcode1);
--        vartemp  := gconst.fncxmlextract(xmldoc,   'Param/Userid',   vartemp);
--        varoperation := 'extracting access control list for ' || numcode1;
--        if vartemp='All' then
--           vartemp:='.';
--        end if;
--        open gencursor for
--        select actl_program_unit ProgramUnit,
--        (select menu_description
--           from MenuFile
--           where menu_program_unit=actl_program_unit) "Menu Description",
--          actl_access_insert insertaccess,
--          actl_access_edit editaccess,
--          actl_access_delete deleteaccess,
--          actl_access_confirm confirmaccess,
--          actl_access_view viewaccess,
--          actl_access_print printaccess,
--          actl_access_save saveaccess,
--          actl_create_date createdate,
--          actl_add_date adddate,
--          a.actl_entry_detail.getstringval() entrydetail,
--          actl_record_status recordstatus,
--          actl_serial_number serialnumber,
--          (select menu_description
--           from MenuFile
--           where menu_program_unit=actl_program_unit) "Menu Description"
--          from accessfile a
--          where actl_company_code = numcode
--          and actl_group_code = numcode1
--          and ACTL_USER_ID  =vartemp
-- --         and actl_record_status not in(gconst.statusinactive, gconst.statusdeleted)
--          order by actl_program_unit;
--
--        goto process_end;
--    end if;

  if numInfoType = REFLOGININFO then
    GLOG.LOG_Write('Before Extract' );
    varOperation := 'Extracting Login Information for: ' || varUserID;

    varTemp1 := gconst.fncxmlextract(xmldoc,   'Param/UserID',   varTemp1);
    varTemp2 := gconst.fncxmlextract(xmldoc,   'Param/UserPassword',   varTemp2);

        GLOG.LOG_Write('Before' || varTemp1 );
    GLOG.LOG_Write('Password ' || varTemp2 );
      GLOG.LOG_Write('Result ' || varTemp3 );
    begin 
        vartemp4 := gconst.fncxmlextract(xmldoc,   'API_Client_Key',   vartemp4);
        vartemp5 := gconst.fncxmlextract(xmldoc,   'API_License_Reference',   varTemp5);

        select UAPI_USER_ID into varTemp1
        from trsystem022e
        where UAPI_CLIENT_ID = vartemp4 and UAPI_RECORD_STATUS not in (10200005,10200006);
    exception 
        when others then
        vartemp5 := null;
    end; 

   select fncUserLoginCheck(varTemp1,varTemp2) into varTemp3 
    from dual;
    GLOG.LOG_Write('User ID' || varTemp1 );
    GLOG.LOG_Write('Password ' || varTemp2 );
      GLOG.LOG_Write('Result ' || varTemp3 );
    if varTemp3 is not null then 
         open GenCursor for
           select  varTemp3 "LoginCheckRemarks"
           from dual;
        Goto Process_End;
    else
        open GenCursor for
        select
            USER_COMPANY_CODE CompanyId,  user_user_id "UserId", user_user_name "UserName", 
            user_terminal_id "TerminalId", 
            user_status_code "UserStatus", user_last_login  "LastLogin",
            user_email_id "EmailId", user_mobile_phone "MobilePhone", 
            user_user_designation "UserDesignation", user_group_code "GroupCode",
            null LoginCheckRemarks, SPLC_LOGIN_LOGOFFPERIOD LogoffPeriod,
            USER_LANGUAGE_CODE LanguageCode
          from UserMaster inner join DummyFile
           on user_user_id = pswd_user_id
           inner join trsystem021 on
           SPLC_POLICY_GROUP=USER_GROUP_CODE
          where pswd_serial_number =
          nvl((select max(pswd_serial_number)
            from DummyFile
            where UPPER(pswd_user_id) = varUserID
            and pswd_record_status between 10200001 and 10200004),1)
          and UPPER(user_user_id) = varUserID
          and SPLC_record_status not in (10200005,10200006)
          and user_record_status not in (10200005,10200006)
          and user_serial_number = 
          nvl((select max(user_serial_number)
            from UserMaster
            where UPPER(user_user_id) = varUserID
            and user_record_status between 10200001 and 10200004),1);

    Goto Process_End;
    end if;
  end if;  
    --end aakash/ishwar
 if numInfoType = REFRATESTICKER then
    varOperation := 'Extraction of Currency Rates for the Ticker';
    	varQuery := '';
	numFlag := 0;


--	for curRates in
--	(select a.pick_short_description || '/' || b.pick_short_description || ':' || drad_bid_rate CurrencyPair
--		from trtran013A, trmaster001 a, trmaster001 b
--		where drad_forward_monthno = 0
--		and drad_ratesr_number = '4102018003'
--		and a.pick_key_value = drad_currency_code 
--		and b.pick_key_value = drad_for_currency)
--	loop
--		if numFlag = 0 then
--			varQuery := 'Spot Rates, courtesy Thomson Reuters: ' || curRates.CurrencyPair;
--			numFlag := 1;
--		else
--			varQuery := varQuery || ';' || curRates.CurrencyPair;
--		End if;
--
--	End Loop;

--for curRates in
--	(select a.pick_short_description || '/' || b.pick_short_description || 
--         ' Bid : ' || DRAT_SPOT_BID || ' Ask : ' || DRAT_SPOT_ASK CurrencyPair,
--         DRAT_RATE_TIME RateTime
--		from trtran012, trmaster001 a, trmaster001 b
--		where DRAT_EFFECTIVE_DATE = trunc(datWorkDate)
--		and a.pick_key_value = DRAT_CURRENCY_CODE 
--		and b.pick_key_value = DRAT_FOR_CURRENCY
--        and drat_Record_status not in (10200005,10200006)
--        and DRAT_SERIAL_NUMBER= (select max(DRAT_SERIAL_NUMBER) from trtran012
--                                 where DRAT_EFFECTIVE_DATE = trunc(datWorkDate)
--                                 and drat_Record_status not in (10200005,10200006)))
--        
--
--	loop
--		if numFlag = 0 then
--			varQuery := 'Spot Rates, courtesy Thomson Reuters.  Latest Updated on ' || curRates.RateTime  || ' ' || curRates.CurrencyPair;
--			numFlag := 1;
--		else
--			varQuery := varQuery || ';' || curRates.CurrencyPair;
--		End if;
--
--	End Loop;
--    Open GenCursor for
--        select varQuery from dual;
    begin 
       select count(*) 
         into numTemp
            from trtran013A inner join trtran013
             on drat_effective_date=drad_effective_date
             and drat_serial_number= drad_serial_number
            where drad_effective_date =trunc(datWorkDate)
            and drat_Record_status not in (10200005,10200006)
            and drad_forward_monthno=0
            and drad_record_status not in (10200005,10200006);
    exception 
       when no_data_found then
        numTemp:=0;
    end ;
 if (nvl(numTemp,0)!=0) then
         Open GenCursor for
            select CurrentRate.CurrencyPair, CurrentRate.Bid CurrentBid,CurrentRate.Ask CurrentAsk,CurrentRate.RateTime,
                   to_char(CurrentRate.EffectiveDate) EffectiveDate, 
                   Previous.Bid PreviousBid,Previous.Ask PreviousAsk
              from (select pkgreturncursor.fncgetdescription(drad_currency_code,2) || '/' ||
                           pkgreturncursor.fncgetdescription(drad_for_currency,2)   CurrencyPair,
                           drad_bid_rate  Bid, drad_ask_rate Ask , DRAT_RATE_TIME RateTime,
                     drad_effective_date EffectiveDate
                    from trtran013A inner join trtran013
                     on drat_effective_date=drad_effective_date
                     and drat_serial_number= drad_serial_number
                    where drad_effective_date =trunc(datWorkDate)
                    and drat_Record_status not in (10200005,10200006)
                    and drad_forward_monthno=0
                    and drad_record_status not in (10200005,10200006)
                    and DRAD_SERIAL_NUMBER= (select max(DRAD_SERIAL_NUMBER) from trtran013A
                                             where DRAD_EFFECTIVE_DATE = trunc(datWorkDate)
                                             and drad_Record_status not in (10200005,10200006))) CurrentRate
              left outer join
              (select pkgreturncursor.fncgetdescription(drad_currency_code,2) || '/' ||
                           pkgreturncursor.fncgetdescription(drad_for_currency,2)   CurrencyPair,
                           drad_bid_rate  Bid, drad_ask_rate Ask , DRAT_RATE_TIME RateTime,
                     drad_effective_date EffectiveDate
                    from trtran013A inner join trtran013
                     on drat_effective_date=drad_effective_date
                     and drat_serial_number= drad_serial_number
                    where drad_effective_date =trunc(datWorkDate)
                    and drat_Record_status not in (10200005,10200006)
                    and drad_forward_monthno=0
                    and drad_record_status not in (10200005,10200006)
                    and DRAD_SERIAL_NUMBER= (select max(DRAD_SERIAL_NUMBER)-1 from trtran013A
                                             where DRAD_EFFECTIVE_DATE = trunc(datWorkDate)
                                             and drad_Record_status not in (10200005,10200006))) Previous
               on CurrentRate.CurrencyPair= Previous.CurrencyPair
               order by CurrentRate.CurrencyPair;
   else 

    -- begin 
       select max(drad_effective_date)
         into datTemp
            from Clouddb_master.trtran013A inner join Clouddb_master.trtran013
             on drat_effective_date=drad_effective_date
             and drat_serial_number= drad_serial_number
            where drad_effective_date <=trunc(datWorkDate)
            and drat_Record_status not in (10200005,10200006)
            and drad_forward_monthno=0
            and drad_record_status not in (10200005,10200006);
--    exception 
--       when no_data_found then
--        numTemp:=0;
--    end ;

            Open GenCursor for
            select CurrentRate.CurrencyPair, CurrentRate.Bid CurrentBid,CurrentRate.Ask CurrentAsk,CurrentRate.RateTime,
                   CurrentRate.EffectiveDate EffectiveDate, 
                   Previous.Bid PreviousBid,Previous.Ask PreviousAsk
              from (select pkgreturncursor.fncgetdescription(drad_currency_code,2) || '/' ||
                           pkgreturncursor.fncgetdescription(drad_for_currency,2)   CurrencyPair,
                           drad_bid_rate  Bid, drad_ask_rate Ask , DRAT_RATE_TIME RateTime,
                     drad_effective_date EffectiveDate
                    from Clouddb_master.trtran013A inner join Clouddb_master.trtran013
                     on drat_effective_date=drad_effective_date
                     and drat_serial_number= drad_serial_number
                    where drad_effective_date =trunc(datTemp)
                    and drat_Record_status not in (10200005,10200006)
                    and drad_forward_monthno=0
                    and drad_record_status not in (10200005,10200006)
                    and DRAD_SERIAL_NUMBER= (select max(DRAD_SERIAL_NUMBER) from Clouddb_master.trtran013A
                                             where DRAD_EFFECTIVE_DATE = trunc(datTemp)
                                             and drad_Record_status not in (10200005,10200006))) CurrentRate
              left outer join
              (select pkgreturncursor.fncgetdescription(drad_currency_code,2) || '/' ||
                           pkgreturncursor.fncgetdescription(drad_for_currency,2)   CurrencyPair,
                           drad_bid_rate  Bid, drad_ask_rate Ask , DRAT_RATE_TIME RateTime,
                     drad_effective_date EffectiveDate
                    from Clouddb_master.trtran013A inner join Clouddb_master.trtran013
                     on drat_effective_date=drad_effective_date
                     and drat_serial_number= drad_serial_number
                    where drad_effective_date =trunc(datTemp)
                    and drat_Record_status not in (10200005,10200006)
                    and drad_forward_monthno=0
                    and drad_record_status not in (10200005,10200006)
                    and DRAD_SERIAL_NUMBER= (select max(DRAD_SERIAL_NUMBER)-1 
                                               from Clouddb_master.trtran013A
                                             where DRAD_EFFECTIVE_DATE = trunc(datTemp)
                                             and drad_Record_status not in (10200005,10200006))) Previous
               on CurrentRate.CurrencyPair= Previous.CurrencyPair
               order by CurrentRate.CurrencyPair;
    end if;



    Goto Process_End;
  End if;  
    if numinfotype = REFallusers then
        varoperation := 'extracting all users:';
        begin 
            numcode := gconst.fncxmlextract(xmldoc,   'Param/CompanyCode',   numcode);
        exception 
          when others then
           numcode :=30199999;
        end;

        begin -- for Risk Master
            numcode1 := gconst.fncxmlextract(xmldoc,   'Param/GroupCode',   numcode);
        exception 
          when others then
            numCode1:=14299999;
        end;

        open gencursor for
--        select user_user_name,
--          user_user_id,user_email_id,user_mobile_phone,user_group_code
--        from usermaster;
        select rownum "Rownum", user_user_id "ID", user_user_name "Name", user_email_id "Email", 
          user_mobile_phone "Contact_Number"
--          , user_group_code "Group_Code"
        from usermaster
        where user_company_code=Decode(numcode,30199999, user_company_code, numcode)
        and user_license_reference=
                (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051) 
        and user_group_code=Decode(numCode1,14299999,user_group_code,numCode1)
        and user_Record_Status not in (10200005,10200006)
          AND USER_COMPANY_CODE in( select usco_company_code from trsystem022a
                    -- UPPER(usco_user_id) = upper(varUserid)
              where USCO_RECORD_STATUS NOT IN (10200005,10200006) );

        goto process_end;
     end if;
 if numinfotype = REFLOGUSERS then
        varoperation := 'extracting all users:';  
open gencursor for
  select rownum "Rownum",  user_user_id "ID", user_user_name "Name", user_email_id "Email"
from      clouddb_global.trsystem022 inner join TRSYSTEM051
                 on USER_LICENSE_REFERENCE=PRMC_LICENSE_REFERENCE
              and USER_RECORD_STATUS not in (10200005,10200006)
              and PRMC_RECORD_STATUS not in (10200005,10200006);

   goto process_end;
     end if;  

 if numinfotype = REFLOGUSERMENUS then
        varoperation := 'extracting all MENUS:';  
  open gencursor for 
Select distinct TRAC_ENTITY "ID", MENU_DESCRIPTION "Name"
          FROM clouddb_global.log_tracerequest inner join clouddb_master.trsystem002
          on TRAC_ENTITY=MENU_PROGRAM_UNIT
          WHERE menu_record_status not in (10200005,10200006);
   goto process_end;
     end if;    


 if numinfotype = REFGETUSERLOGMENU then   
   begin
    varTemp4 := gconst.fncxmlextract(xmldoc,'Param/UserID',varTemp4);
  exception 
  when others then
    varTemp4:= null;
  end;
   begin
      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/MenuName',varTemp1); 
  exception 
  when others then
    varTemp1:= null;
  end;
     begin
      varTemp2 := gconst.fncxmlextract(xmldoc,'Param/FromDate',varTemp2 );
  exception 
  when others then
    varTemp2:= null;
  end;
     begin
     varTemp3 := gconst.fncxmlextract(xmldoc,'Param/ToDate',varTemp3 ); 
  exception 
  when others then
    varTemp3:= null;
  end;
--  if varTemp4 is null then 
--      varTemp2 := gconst.fncxmlextract(xmldoc,'Param/FromDate',varTemp2 );
--      varTemp3 := gconst.fncxmlextract(xmldoc,'Param/ToDate',varTemp3 );
--      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/MenuName',varTemp1); 
--  end if;
  OPEN Gencursor FOR 

select TRAC_USER_ID "UserID",max(TO_TIMESTAMP(TRAC_TIME_STAMP)) "LogInTime"
From CLOUDDB_GLOBAL.log_tracerequest
where TRAC_ENTITY = decode(varTemp1,null,TRAC_ENTITY,varTemp1) 
            and to_char(TO_TIMESTAMP(TRAC_TIME_STAMP),'DD-MON-YYYY') between to_timestamp(varTemp2) 
            and to_timestamp(varTemp3)
            and TRAC_USER_ID=decode(varTemp4,null,TRAC_USER_ID,varTemp4)
            group by TRAC_USER_ID ;
 Goto Process_End; 
  end if; 


if numinfotype = REFGETUSERLOGTRACE then  
 begin
    varTemp4 := gconst.fncxmlextract(xmldoc,'Param/UserID',varTemp4);
  exception 
  when others then
    varTemp4:= null;
  end;
   begin
      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/MenuName',varTemp1); 
  exception 
  when others then
    varTemp1:= null;
  end;
      begin
      varTemp2 := gconst.fncxmlextract(xmldoc,'Param/FromDate',varTemp2 );
  exception 
  when others then
    varTemp2:= null;
  end;
     begin
     varTemp3 := gconst.fncxmlextract(xmldoc,'Param/ToDate',varTemp3 ); 
  exception 
  when others then
    varTemp3:= null;
  end;
  OPEN Gencursor FOR   
            select TRAC_USER_ID "UserID",to_timestamp(TRAC_TIME_STAMP)  "LogTime",menu_description "MenuName",TRAC_REQUEST_GUID "GUID",
          PKGRETURNCURSOR.FNCGETDESCRIPTION(TRAC_ACTION,1) "Action",TRAC_TYPE "Type"
          from CLOUDDB_GLOBAL.Log_Tracerequest inner join clouddb_master.trsystem002
          on TRAC_ENTITY=menu_program_unit
          and menu_record_status not in (10200005,10200006)
          where TRAC_REQUEST_TYPE ='I'
          and TRAC_USER_ID=decode(varTemp4,null,TRAC_USER_ID,varTemp4)
          and TRAC_ENTITY = decode(varTemp1,null,TRAC_ENTITY,varTemp1)
          and to_char(TO_TIMESTAMP(TRAC_TIME_STAMP),'DD-MON-YYYY') between to_timestamp(varTemp2) 
            and to_timestamp(varTemp3);
  Goto Process_End; 
  end if; 

     if numinfotype = REFGETLOGREQUESTRESPONSE then  
  varTemp1 := gconst.fncxmlextract(xmldoc,'Param/GUID',varTemp1);
   varTemp2 := gconst.fncxmlextract(xmldoc,'Param/SerialNumber',varTemp2);
  OPEN Gencursor FOR 
      select TRAC_REQUEST_RESPONSE "RequestResponse"
        from CLOUDDB_GLOBAL.Log_Tracerequest 
      where TRAC_REQUEST_GUID = varTemp1 and TRAC_SERIAL_NUMBER= varTemp2;
   Goto Process_End; 
  end if;


   if numinfotype = REFGETLICENSEDCOMPANIES then    
  OPEN Gencursor FOR 
     select LICM_SHORT_DESCRIPTION "Name", LICM_REFERENCE_NUMBER "ID" 
     from CLOUDDB_MASTER.Trlicense001 where LICM_REFERENCE_NUMBER IN 
     (select USER_LICENSE_REFERENCE from CLOUDDB_GLOBAL.Trsystem022 
     where USER_RECORD_STATUS not in (10200005, 10200006))
     AND LICM_RECORD_STATUS NOT IN (10200005, 10200006);
   Goto Process_End; 
  end if;


  if numinfotype = REFGETERRORLOGTRACE then  
  varTemp1 := gconst.fncxmlextract(xmldoc,'Param/Guid',varTemp1);
  OPEN Gencursor FOR 
      select TRAC_REQUEST_GUID "Guid", TRAC_USER_ID "User", TRAC_SERIAL_NUMBER "SerialNo", 
              TRAC_TIME_STAMP "Time", TRAC_REQUEST_TYPE "RequestType", TRAC_MESSAGE "Message", TRAC_ENTITY "Synonym", 
              PKGRETURNCURSOR.FNCGETDESCRIPTION(TRAC_ACTION,1) "Action", TRAC_TYPE "CursorType"
             -- TRAC_REQUEST_RESPONSE "RequestResponse"
        from CLOUDDB_GLOBAL.Log_Tracerequest inner join clouddb_global.trsystem022
        on TRAC_USER_ID=USER_USER_ID
        inner join TRSYSTEM051
        on USER_LICENSE_REFERENCE=PRMC_LICENSE_REFERENCE        
              where USER_RECORD_STATUS not in (10200005,10200006)
              and PRMC_RECORD_STATUS not in (10200005,10200006)
      AND TRAC_REQUEST_GUID = varTemp1;
   Goto Process_End; 
  end if;


  if numinfotype = REFGETTRANCTIONBULKCONFIRM then  
 --   varTemp1 := gconst.fncxmlextract(xmldoc,'Param/CompanyName',varTemp1);
--  varTemp1 := gconst.fncxmlextract(xmldoc,'Param/Guid',varTemp1);
 -- GLOG.Log_write('REFGETTRANCTIONBULKCONFIRM Started ');
  OPEN Gencursor FOR    

        Select 'Forward Deal Booking' Transactiontype, Pkgreturncursor.Fncgetdescription(Deal_Record_Status,1) Status,
               Count(*) Noofrecords From Trtran001
                 Where Deal_Record_Status  In (10200001,10200002)
                 And Deal_Deal_Type!=25400001
                 Group By Deal_Record_Status
          Union 
        Select 'Deal Cancellation' Transactiontype, Pkgreturncursor.Fncgetdescription(Cdel_Record_Status,1) Status,
               Count(*) Noofrecords 
                 From Trtran006 Inner Join Trtran001
                 On Deal_Deal_Number= Cdel_Deal_Number
                 And Deal_Record_Status Not In (10200005,10200006)
                 Where  Cdel_Record_Status  In (10200001,10200002)
                 And Deal_Deal_Type!=25400001
                 Group By Cdel_Record_Status;
   Goto Process_End; 
  end if;


 if numinfotype = REFGETTRANCTIONBULKCONFIRMLIST then  
   varTemp1 := gconst.fncxmlextract(xmldoc,'Param/TranctionType',varTemp1);
--  varTemp1 := gconst.fncxmlextract(xmldoc,'Param/Guid',varTemp1);
 -- GLOG.Log_write('REFGETTRANCTIONBULKCONFIRM Started ');
  OPEN Gencursor FOR    
--        IF varTemp1= 'Forward Deal Booking' then
-- 
              select DEAL_DEAL_NUMBER DealNumber From Trtran001
                 Where Deal_Record_Status  In (10200001,10200002)
                 And Deal_Deal_Type!=25400001;
               --  Group By Deal_Record_Status
--         END IF
--        IF (varTemp1='Deal Cancellation') then
-- 
--                Select* From Trtran006  
--                 Where  Cdel_Record_Status  In (10200001,10200002)
--               
--                -- Group By Cdel_Record_Status;
--        end if; 
  Goto Process_End; 
 end if;


 if numinfotype = REFGETLOGDETAILS then  
  varTemp1 := gconst.fncxmlextract(xmldoc,'Param/Guid',varTemp1);
  OPEN Gencursor FOR 
      select LOG_REQUESTGUID "Guid", LOG_USERID "User", LOG_SERIAL_NUMBER "SerialNumber", LOG_TIMESTAMP "Time", 
      LOG_MESSAGE "Message"
      from CLOUDDB_GLOBAL.Log_Db  inner join clouddb_global.trsystem022
        on LOG_USERID=USER_USER_ID
        inner join TRSYSTEM051
        on USER_LICENSE_REFERENCE=PRMC_LICENSE_REFERENCE        
              where USER_RECORD_STATUS not in (10200005,10200006)
              and PRMC_RECORD_STATUS not in (10200005,10200006)
              and Log_Requestguid = varTemp1;
   Goto Process_End; 
  end if;


  if numinfotype = REFGETLOGTRACEREQUEST then

begin
    varTemp5 := gconst.fncxmlextract(xmldoc,'Param/UserID',varTemp5);
  exception 
  when others then
    varTemp5:= null;
  end;
 begin
    varTemp4 := gconst.fncxmlextract(xmldoc,'Param/GUID',varTemp4);
  exception 
  when others then
    varTemp4:= null;
  end;
   begin
      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/MenuName',varTemp1); 
  exception 
  when others then
    varTemp1:= null;
  end;
  if varTemp4 is null then -- incase if no GUID provided then only considering other filter paramters 
      varTemp2 := gconst.fncxmlextract(xmldoc,'Param/FromDate',varTemp2 );
      varTemp3 := gconst.fncxmlextract(xmldoc,'Param/ToDate',varTemp3 );

  end if;

  OPEN Gencursor FOR 


     select TRAC_REQUEST_GUID "Guid", TRAC_USER_ID "User", TRAC_SERIAL_NUMBER "SerialNo", 
              TRAC_TIME_STAMP "Time", TRAC_REQUEST_TYPE "RequestType", TRAC_MESSAGE "Message", TRAC_ENTITY "Synonym", 
              PKGRETURNCURSOR.FNCGETDESCRIPTION(TRAC_ACTION,1) "Action", TRAC_TYPE "CursorType"
          from CLOUDDB_GLOBAL.Log_Tracerequest inner join CLOUDDB_GLOBAL.Trsystem022 
           ON TRAC_USER_ID = USER_USER_ID
      Inner Join CLOUDDB_MASTER.Trlicense001
      ON USER_LICENSE_REFERENCE = LICM_REFERENCE_NUMBER 
      inner join TRSYSTEM051
        on USER_LICENSE_REFERENCE=PRMC_LICENSE_REFERENCE        
              and USER_RECORD_STATUS not in (10200005,10200006)
              and PRMC_RECORD_STATUS not in (10200005,10200006)
    where ((varTemp4 is null             
--         and  LICM_REFERENCE_NUMBER = varTemp1
          and TRAC_ENTITY = decode(varTemp1,null,TRAC_ENTITY,varTemp1) 
          and  TRAC_USER_ID=decode(varTemp5,null,TRAC_USER_ID,varTemp5)
         and to_char(TO_TIMESTAMP(TRAC_TIME_STAMP),'DD-MON-YYYY') between to_timestamp(varTemp2) 
         and to_timestamp(varTemp3))OR 
            (varTemp4 is not null and TRAC_REQUEST_GUID like '%' || varTemp4 || '%'));


   Goto Process_End; 
  end if;   


   if numinfotype = REFGETERRORRESPONSE then  
  varTemp1 := gconst.fncxmlextract(xmldoc,'Param/Guid',varTemp1);
   varTemp2 := gconst.fncxmlextract(xmldoc,'Param/SerialNo',varTemp2);
  OPEN Gencursor FOR 
      select TRAC_REQUEST_RESPONSE "RequestResponse"
        from CLOUDDB_GLOBAL.Log_Tracerequest  inner join clouddb_global.trsystem022
        on TRAC_USER_ID=USER_USER_ID
        inner join TRSYSTEM051
        on USER_LICENSE_REFERENCE=PRMC_LICENSE_REFERENCE        
              and USER_RECORD_STATUS not in (10200005,10200006)
              and PRMC_RECORD_STATUS not in (10200005,10200006)
      where TRAC_REQUEST_GUID = varTemp1 and TRAC_SERIAL_NUMBER= varTemp2;
   Goto Process_End; 
  end if;


 if numinfotype = REFGETERRORLOG then   
  begin
    varTemp4 := gconst.fncxmlextract(xmldoc,'Param/GUID',varTemp4);
  exception 
  when others then
    varTemp4:= null;
  end;
  begin
   varTemp2 := gconst.fncxmlextract(xmldoc,'Param/FromDate',varTemp2 );
  exception 
  when others then
    varTemp2:= null;
  end;
  begin
    varTemp3 := gconst.fncxmlextract(xmldoc,'Param/ToDate',varTemp3 );
  exception 
  when others then
    varTemp3:= null;
  end;
--  if varTemp4 is null then -- incase if no GUID provided then only considering other filter paramters 
--      varTemp2 := gconst.fncxmlextract(xmldoc,'Param/FromDate',varTemp2 );
--      varTemp3 := gconst.fncxmlextract(xmldoc,'Param/ToDate',varTemp3 );
----      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/CompanyName',varTemp1); -- License Reference Number
--  end if;

  OPEN Gencursor FOR 
      select ERR_REQUESTGUID "Guid", ERR_USERID "User", ERR_SERIAL_NUMBER "SerialNumber", ERR_TIMESTAMP "Time",
             ERR_ENTITY "Synonym", PKGRETURNCURSOR.FNCGETDESCRIPTION(ERR_ACTION,1) "Action", ERR_TYPE "Cursors", ERR_PROGRAM "Program", ERR_MESSAGE "Message"
      From CLOUDDB_GLOBAL.Log_Error 
              inner join CLOUDDB_GLOBAL.Trsystem022 
              ON ERR_USERID = USER_USER_ID 
              Inner Join clouddb_master.Trlicense001 
              ON USER_LICENSE_REFERENCE = LICM_REFERENCE_NUMBER 
              inner join TRSYSTEM051
              ON USER_LICENSE_REFERENCE=PRMC_LICENSE_REFERENCE        
              and USER_RECORD_STATUS not in (10200005,10200006)
              and PRMC_RECORD_STATUS not in (10200005,10200006)  
      where  to_char(TO_TIMESTAMP(ERR_TIMESTAMP),'DD-MON-YYYY') between to_timestamp(varTemp2) 
            and to_timestamp(varTemp3);
--            OR 
--            (varTemp4 is not null and ERR_REQUESTGUID like '%' || varTemp4 || '%'));
       -- and ERR_TIMESTAMP Between varTemp2 and varTemp3;   

   Goto Process_End; 
  end if; 


--ADDED BY SUPRIYA ON 02/08/2021
if numinfotype = REFGETACCESSGROUPUSERS then
varoperation := 'extracting all users:';
    begin 
        numcode := gconst.fncxmlextract(xmldoc,   'Param/CompanyCode',   numcode);
    exception 
    when others then
        numcode :=30199999;
    end;

    begin 
        numcode1 := gconst.fncxmlextract(xmldoc,   'Param/GroupCode',   numcode);
    exception 
    when others then
        numCode1:=14299999;
    end;

    open gencursor for
        select rownum "Rownum", user_user_id "ID", user_user_name "Name"
        from usermaster
        where user_company_code=Decode(numcode,30199999, user_company_code, numcode)
        and user_license_reference= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051) 
                                    and user_group_code=Decode(numCode1,14299999,user_group_code,numCode1)
                                    and user_Record_Status not in (10200005,10200006)
                                    AND USER_COMPANY_CODE in( select usco_company_code from trsystem022a
                                    where USCO_RECORD_STATUS NOT IN (10200005,10200006))
        UNION
        SELECT rownum "Rownum", 'ALL' "ID", 'ALL' "Name"
        from dual;

    goto process_end;
end if;

if numinfoType = REFCHECKUSERSCREENCONFIGEXISTS then      
varOperation := 'Check User Level Screen Config Details already exists';     
    varTemp := gconst.fncxmlextract(xmldoc,'SynonymName',varTemp);
    varTemp1 := gconst.fncxmlextract(xmldoc,'UserId',varTemp1);
    numcode := gconst.fncxmlextract(xmldoc,'GroupCode',numcode);

    if varTemp1 = 'ALL' then
        varTemp1 := '.';
    end if;

    open gencursor for 
        select * from TRSYSTEM999I
        where USCF_PROGRAM_UNIT = varTemp and USCF_USER_ID = varTemp1
        and USCF_GROUP_CODE = numcode
        and USCF_RECORD_STATUS not in (10200005,10200006);
    GOTO PROCESS_END;
END IF;

--added by supriya on 27/08/2021
if numinfoType = REFGETUSERSCREENCONFIGDETAILS then      
varOperation := 'Get User Level Screen Config Details'; 

    varTemp := gconst.fncxmlextract(xmldoc,'SynonymName',varTemp);
    numcode := gconst.fncxmlextract(xmldoc,'GroupCode',numcode);
    varTemp1 := gconst.fncxmlextract(xmldoc,'UserId',varTemp1);

    if varTemp1 = 'ALL' then
        varTemp1 := '.';
    end if;

    GLOG.Log_write('numUserActionType' || ' : ' || numUserActionType || ' varTemp1 :' || varTemp1);
    if numUserActionType in (GCONST.ADDLOAD) Then
        open gencursor for 
            select to_char(rownum) "Rownum", FLDP_XML_FIELD "XMLField", 
                FLDP_SHOW_YN "ShowYN", FLDP_TABLE_SYNONYM "Synonym",
                pkgreturncursor.fncgetdescription(FLDP_SHOW_YN,1) "ShowYNDesc", 
                FLDP_LABEL_TEXT "LabelText", FLDP_DEFAULT_VALUE "DefaultValue",
                FLDP_PICK_GROUP "PickGroup", FLDP_MANDATORY_FIELD "MandatoryYN",
                pkgreturncursor.fncgetdescription(FLDP_MANDATORY_FIELD,1) "MandatoryYNDesc",
                FLDP_ENABLE_DISABLE "EditableADDLOADYN", FLDP_ENABLE_DISABLE_EDIT "EditableOTHERYN",
                pkgreturncursor.fncgetdescription(FLDP_ENABLE_DISABLE,1) "EditableADDLOADYNDesc",
                pkgreturncursor.fncgetdescription(FLDP_ENABLE_DISABLE_EDIT,1) "EditableOTHERYNDesc",
                (case when FLDP_PICK_GROUP > 0 then 
                pkgreturncursor.fncgetdescription(FLDP_DEFAULT_VALUE,1)
                else null end) "DefaultValueDesc", '1' "SerialNumber", 
                FLDP_ALLOW_DEAFAULTS "AllowDefaults", '1' "RecordStatus",                
                pkgreturncursor.fncgetdescription(FLDP_ALLOW_DEAFAULTS,1) "AllowDefaultsDesc",
                (case when (FLDP_DROPDOWN_SELECTOR = 90900003) 
                then to_char(FLDP_DROPDOWN_CURSOR) else null end) "CursorNo"
            from TRSYSTEM999
            where FLDP_TABLE_SYNONYM = varTemp
            and nvl(FLDP_TAB_NUMBER,0) > 0 and FLDP_SHOW_YN = 12400001
            order by FLDP_FIELD_SORT;  
        GOTO PROCESS_END;
    else
        open gencursor for 
            select to_char(rownum) "Rownum", USCF_XML_FIELD "XMLField", 
                USCF_PROGRAM_UNIT "Synonym", USCF_SHOW_YN "ShowYN", 
                pkgreturncursor.fncgetdescription(USCF_SHOW_YN,1) "ShowYNDesc", 
                FLDP_LABEL_TEXT "LabelText", USCF_DEFAULT_VALUE "DefaultValue",
                FLDP_PICK_GROUP "PickGroup", to_char(USCF_SERIAL_NUMBER) "SerialNumber", 
                (case when FLDP_PICK_GROUP > 0 then 
                pkgreturncursor.fncgetdescription(USCF_DEFAULT_VALUE,1)
                else null end) "DefaultValueDesc", FLDP_MANDATORY_FIELD "MandatoryYN",
                pkgreturncursor.fncgetdescription(FLDP_MANDATORY_FIELD,1) "MandatoryYNDesc",
                FLDP_ALLOW_DEAFAULTS "AllowDefaults", '2' "RecordStatus",      
                USCF_EDITABLEADD_YN "EditableADDLOADYN", USCF_EDITABLE_YN "EditableOTHERYN",
                pkgreturncursor.fncgetdescription(USCF_EDITABLEADD_YN,1) "EditableADDLOADYNDesc",
                pkgreturncursor.fncgetdescription(USCF_EDITABLE_YN,1) "EditableOTHERYNDesc",
                pkgreturncursor.fncgetdescription(FLDP_ALLOW_DEAFAULTS,1) "AllowDefaultsDesc",   
                (case when (FLDP_DROPDOWN_SELECTOR = 90900003 and FLDP_CASCADE_TYPE = null) 
                then FLDP_DROPDOWN_CURSOR else null end) "CursorNo"
            from TRSYSTEM999IA inner join TRSYSTEM999 
            on FLDP_TABLE_SYNONYM = USCF_PROGRAM_UNIT
            and FLDP_XML_FIELD = USCF_XML_FIELD
            where USCF_PROGRAM_UNIT = varTemp 
            and USCF_GROUP_CODE = numcode
            and USCF_USER_ID = varTemp1
            and USCF_RECORD_STATUS not in (10200005,10200006)
            order by FLDP_FIELD_SORT;
        GOTO PROCESS_END;
    end if;
end if;

--added by supriya on 16/09/2021
if numinfoType = REFGETDEALINTEGRATIONDETAILS then      
varOperation := 'Get Deal Integartion Details'; 

    open gencursor for 
        select DEAL_INTEGRATION_TYPE "IntegrationType", DEAL_SERIAL_NUMBER "SerialNumber",
            DEAL_USER_ID "UserID", DEAL_PASSWORD "Password", 
            DEAL_SFTP_FILEPATH "SFTPFilePath", DEAL_SFTP_FILELINK "SDTPFileLink",
            DEAL_LICENSE_NUMBER "LicenseNumber", DEAL_SFTP_FOLDER "SFTPFolder"
        from clouddb_master.TRCONFIG008
        where DEAL_RECORD_STATUS not in (10200005,10200006);  
    GOTO PROCESS_END;
end if;

 if numinfoType = REFGETSYNONYMWITHID then
    clouddb_global.logwrite.Log_write('REFGETSYNONYMWITHID ' || varUserid);
      open gencursor for 
      select Distinct(FLDP_TABLE_SYNONYM) "Desc",MENU_PROGRAM_UNIT "ID", MENU_DESCRIPTION "Name"
          FROM TRSYSTEM999, MenuFile
          WHERE FLDP_TABLE_SYNONYM = MENU_PROGRAM_UNIT
            AND MENU_COMPANY_CODE  in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = upper(varUserid)
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
          and FLDP_TABLE_SYNONYM in (select actl_program_unit 
                                      from trsystem006
                                      where actl_record_status not in (10200005,10200006)
                                      and UPPER((case when actl_user_id = '.' then varUserid else actl_user_id end)) = varUserid
                                      and actl_group_code =(select user_group_code from USERMASTER
                                                              where UPPER(user_user_id) = upper(varUserid)
                                                              and USER_RECORD_STATUS not in  (10200005,10200006)))
          and FLDP_TABLE_SYNONYM not in ('DISTINCTSYNONYMS','EMAILCONFIGURATION','DOCUMENTTYPES','PARAMETERSCONFIGURATION')
           --Added by lakshmi, for showing menus based on modules added for license.   
          and exists 
          (select 'x' from  clouddb_master.Trlicense002a 
             inner join clouddb_master.trlicense001a
             on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
          where nvl(Menu_Program_Unit,'NA') = Lmdd_Program_Unit 
          and lmdd_record_Status not in (10200005,10200006)
          and lmdu_record_status not in (10200005,10200006)
          and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051))          
          order by MENU_DESCRIPTION;            

  GOTO PROCESS_END;
 end if;

 if numinfoType = REFGETDEFAULTDASHBOARD then
      open gencursor for 

      select menu_program_unit "ID",
      MENU_DESCRIPTION "Name"
      from clouddb_master.trsystem002
      where menu_menu_id between 900 and 950
      and menu_record_status not in (10200005,10200006)
      and menu_program_unit !='null'
      AND MENU_COMPANY_CODE  in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
      and exists
          (select 'x' from  clouddb_master.Trlicense002a
             inner join clouddb_master.trlicense001a
             on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
          where nvl(Menu_Program_Unit,'NA') = Lmdd_Program_Unit
          and lmdd_record_Status not in (10200005,10200006)
          and lmdu_record_status not in (10200005,10200006)
          and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051))          
          order by MENU_DESCRIPTION;     

       GOTO PROCESS_END;
 end if;

   if numinfotype =REFGETCURRENCYPAIR then
numcode := gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',numcode);
numcode1 := gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',numcode1);
OPEN Gencursor FOR 
        SELECT CNDI_PICK_CODE "CurrencyPair",
             CNDI_BASE_CURRENCY "BaseCurrency",
             CNDI_OTHER_CURRENCY "OtherCurrency",
             pkgreturncursor.fncgetdescription(CNDI_PICK_CODE,1) "CurrencyPairDesc"
                from TRMASTER256 
                where CNDI_BASE_CURRENCY=numcode
                AND CNDI_OTHER_CURRENCY=numcode1
                and CNDI_RECORD_STATUS not in (10200005,10200006) ;
 Goto Process_End; 
end if;

if numinfotype=REFGETREPORTGRIDDETAILS then        
varTemp := gconst.fncxmlextract(xmldoc,'Param/Synonym',varTemp);
OPEN Gencursor FOR 
       SELECT  to_char(rownum) "Rownum",
         REPO_COLUMN_NAME "ColumnName",
         REPO_DISPLAY_ORDER "DisplayOrder",
         REPO_DISPLAY_NAME "DisplayName",
         TO_CHAR(NVL(REPT_AGGREGATE_FUNCTION,90599999)) "AggregateFunction",
         PKGRETURNCURSOR.FNCGETDESCRIPTION(NVL(REPT_AGGREGATE_FUNCTION,90599999),1) "AggregateFunctionDesc",
         TO_CHAR(NVL(REPO_EDITABLE_YN,12400002)) "EditableYN",
         PKGRETURNCURSOR.FNCGETDESCRIPTION(NVL(REPO_EDITABLE_YN,12400002),1) "EditableYNDesc",
         TO_CHAR(NVL(REPO_GROUP_BY,12400002)) "GroupBy",
         PKGRETURNCURSOR.FNCGETDESCRIPTION(NVL(REPO_GROUP_BY,12400002),1) "GroupByDesc",
         TO_CHAR(NVL(REPO_COLUMN_TYPE,90499999)) "ColumnType",
         PKGRETURNCURSOR.FNCGETDESCRIPTION(NVL(REPO_COLUMN_TYPE,90499999),1) "ColumnTypeDesc",
         TO_CHAR(NVL(REPO_DISPLAY_YN,12400002)) "DisplayYN",
         PKGRETURNCURSOR.FNCGETDESCRIPTION(NVL(REPO_DISPLAY_YN,12400002),1) "DisplayYNDesc",
         REPO_SERIAL_NUMBER "SerialNumber"
        from trsystem999h left outer join trsystem999g
        on rept_program_unit=repo_program_unit
        and rept_column_name=repo_column_name
        where REPO_PROGRAM_UNIT=varTemp
        and REPO_RECORD_STATUS not in (10200005,10200006)
        and NVL(rept_record_status,10200001) not in (10200005,10200006)
        ORDER BY REPO_DISPLAY_ORDER;
Goto Process_End; 
 end if;


if numinfotype =REFGETCURRENCY then
numcode := gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',numcode);
numcode1 := gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',numcode1);
OPEN Gencursor FOR 
        SELECT  OCON_BASE_CURRENCY "BaseCurrency",
             OCON_OTHER_CURRENCY "OtherCurrency"
                from TRSYSTEM997I_CONF 
                where OCON_BASE_CURRENCY=numcode
                AND OCON_OTHER_CURRENCY=numcode1
                and OCON_RECORD_STATUS not in (10200005,10200006) ;
 Goto Process_End; 
end if;

if numinfotype = REFGETFILTEREDCURRENCYPAIRS then
numcode := gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',numcode);
numcode1 := gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',numcode1);

SELECT CNDI_REMITTANCE_DIRIND -- CNDI_DIRECT_INDIRECT
             into numCode2
      FROM TRMASTER256
      WHERE CNDI_BASE_CURRENCY=numcode
      and CNDI_OTHER_CURRENCY=numcode1
      and  CNDI_RECORD_STATUS NOT IN(10200005,10200006);

if numCode2 = 12400001 then
    OPEN Gencursor FOR 
     SELECT CNDI_PICK_CODE "CurrencyPair",
              CNDI_BASE_CURRENCY "BaseCurrency",
             CNDI_OTHER_CURRENCY "OtherCurrency",
             CNDI_SHORT_DESCRIPTION "CurrencyPairDesc"
                from TRMASTER256 
                where CNDI_BASE_CURRENCY = numcode                
                and CNDI_RECORD_STATUS not in (10200005,10200006) ;

else 
      OPEN Gencursor FOR     
        SELECT CNDI_PICK_CODE "CurrencyPair",
             CNDI_BASE_CURRENCY "BaseCurrency",
             CNDI_OTHER_CURRENCY "OtherCurrency",
             CNDI_SHORT_DESCRIPTION "CurrencyPairDesc"
                from TRMASTER256 
                where 
                CNDI_BASE_CURRENCY = numcode
                or CNDI_OTHER_CURRENCY = numcode
                and CNDI_RECORD_STATUS not in (10200005,10200006) ;  
end if;
 Goto Process_End; 
end if;

 if numinfotype =REFGETDEALWRITINGIN then
numcode := gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',numcode);
numcode1 := gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',numcode1);
OPEN Gencursor FOR 
        SELECT 
             CNDI_OUTSTANDING_TRACKING "DealWritingIn"
                from TRMASTER256 
                where CNDI_BASE_CURRENCY=numcode
                AND CNDI_OTHER_CURRENCY=numcode1
                and CNDI_RECORD_STATUS not in (10200005,10200006) ;
 Goto Process_End; 
end if;
if numinfotype =REFGETDAILYRATES then
dattemp1 := gconst.fncxmlextract(xmldoc,'Param/EffectiveDate',dattemp1);
numcode1 := gconst.fncxmlextract(xmldoc,'Param/SerialNumber',numcode1);
OPEN Gencursor FOR 
       SELECT 
             DRAD_ASK_RATE "ASKRate",
             DRAD_BID_RATE "BIDRate",
             DRAD_CONTRACT_MONTH "ContractMonth",
             DRAD_CURRENCY_CODE "BaseCurrency",
             pkgreturncursor.fncgetdescription(DRAD_CURRENCY_CODE,2) "BaseCurrencyDesc",
             DRAD_FOR_CURRENCY "OtherCurrency",
             pkgreturncursor.fncgetdescription(DRAD_FOR_CURRENCY,2) "OtherCurrencyDesc",
             DRAD_FORWARD_MONTHNO "ForwardMonth"
                from TRTRAN013A 
                where DRAD_EFFECTIVE_DATE= dattemp1
                and DRAD_SERIAL_NUMBER=numcode1
                and DRAD_RECORD_STATUS not in (10200005,10200006);
 Goto Process_End; 
end if;

--added by supriya on 04/10/2021 to get exposure types according to inflow/outflow for categoryconfiguration screen
if numinfotype = REFGETEXPOSURERTYPES then
    numCode := gconst.fncxmlextract(xmldoc,'Param/CategoryCode', numCode);

    select CASM_INFLOW_OUTFLOW into numCode2
    from trmaster150  
    where casm_pick_code = numCode
    and CASM_RECORD_STATUS not in (10200005,10200006);

    OPEN Gencursor FOR 
        select Pick_short_description "Desc", pick_long_description "Name", pick_key_value "ID" 
        from trmaster001 inner join trmaster259
        on pick_key_value= EXTY_PICK_CODE
        where pick_record_status not in (10200005,10200006)
        and exty_record_Status not in (10200005,10200006)
        and EXTY_INFLOW_OUTFLOW=numCode2
        --and EXTY_EXPOSURE_TYPE in (
        and EXTY_CONSIDER_EXPOSURE=12400001;
--        
--        
--        and EREL_RECORD_STATUS not in (10200005,10200006)
--        and EREL_MAIN_ENTITY = decode (numCode2, 17300001, 91900003, 17300002,91900001)
--        and PICK_COMPANY_CODE in ( select usco_company_code from trsystem022a
--                                    where upper(usco_user_id) = varUserid
--                                    AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--        and PICK_LOCATION_CODE in ( select USLO_ENTITY from trsystem022d
--                                    where UPPER(USLO_USER_ID) = varUserid
--                                    and USLO_RECORD_STATUS NOT IN (10200005,10200006));   
    Goto Process_End; 
end if;

 if numinfotype =REFGETCATEGORY then
numCode := gconst.fncxmlextract(xmldoc,'Param/CategoryCode',numCode);

 select CASM_INFLOW_OUTFLOW
   into numCode2
  from trmaster150  
 where casm_pick_code =numCode
 and CASM_RECORD_STATUS not in (10200005,10200006);

OPEN Gencursor FOR 
         select Pick_short_description "Desc",pick_long_description "Name",pick_key_value "ID" 
          from trmaster001 
          where pick_record_status not in (10200005,10200006)
          and pick_key_group = decode(numCode2,17300001,389,17300002,388)
           and PICK_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
          and PICK_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));   

 Goto Process_End; 
end if;

if numinfoType = REFGETDATANAME then

      open gencursor for 
      select Distinct(LOCL_DATA_NAME) "ID",LOAD_DATA_NAME "Name"
          FROM TRSYSTEM969, TRSYSTEM968
          WHERE LOCL_DATA_NAME = LOAD_DATA_NAME         
          and LOCL_DATA_NAME not in ('CASHFLOWMAPPING')
          AND LOAD_RECORD_STATUS  NOT IN (10200005,10200006);

  GOTO PROCESS_END;
 end if;

 if numinfoType = REFGETDATANAMELOAD then

      open gencursor for 
      select Distinct(LOCL_DATA_NAME) "ID",LOAD_DATA_NAME "Name"
          FROM TRSYSTEM969, TRSYSTEM968
          WHERE LOCL_DATA_NAME = LOAD_DATA_NAME 
          AND LOAD_RECORD_STATUS  NOT IN (10200005,10200006);

  GOTO PROCESS_END;
 end if;

if numinfoType = REFGETEMAILPICKCODE then
      open gencursor for 
select Distinct(PKGRETURNCURSOR.FNCGETDESCRIPTION(INTC_PICK_CODE,2)) "ID",PKGRETURNCURSOR.FNCGETDESCRIPTION(INTC_PICK_CODE,1) "Name"
          FROM TRMASTER135
          WHERE INTC_RECORD_STATUS NOT IN (10200005,10200006);

GOTO PROCESS_END;
 end if;

if  numInfoType = RefEffectivenessProsp then
   varOperation := 'hedge effectiveness Data Extract';
       BEGIN
           varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp1 :='ALL';
       End; 
           BEGIN
           varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp2 := 'ALL';
       End; 
           BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/BaseCurrency',varTemp3,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp3 := 'ALL';
       End; 
           BEGIN
           varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp4 := 'ALL';
       End; 
           BEGIN
           varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp5 := 'ALL';
       End; 
        BEGIN
           vartemp6:= GConst.fncXMLExtract(xmlDoc,'//Param/OtherCurrency',varTemp6,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp6 := 'ALL';
       End; 
        BEGIN
           vartemp7:= GConst.fncXMLExtract(xmlDoc,'//Param/LocalBank',varTemp7,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp7 := 'ALL';
       End; 
        BEGIN
       Dattemp:= gconst.fncxmlextract(xmldoc,'//Param/EffectiveDate',Dattemp,GConst.TYPENODEPATH);
       Exception
           when others then
           Dattemp := datWorkDate;
       End; 

       BEGIN
           vartemp8:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp8,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp8 := 'ALL';
       End; 
--        BEGIN
           numCode:= GConst.fncXMLExtract(xmlDoc,'//Param/BuySell',numCode,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           vartemp9 := 'ALL';
--       End; 

  select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
   open gencursor for                         
  select Deals.MaturityMonth,Deals.CurrencyPair,
         exposure.ExposureAmount,
         DEALS.MaturityOrder ,
         HedgeInstrumentFwdcovers,  HedgeItemHypotheticalderivative,
         AvgSpotRate,AvgFWDRate, AvgMTMSPOTRATE,AvgMTMFORWARDRATE,GainLossonHedgeItem,
         GainLossonHedgeInstrument, Ratio,Effective
   from
     (select CASH_EFFECTIVE_DATE,to_char(cash_due_date,'MON-YYYY') MaturityMonth,
       to_CHAR(cash_due_date,'YYYYMM') MaturityOrder ,
       ROUND(NVL(sum(CASH_OUTSTANDING_FCY)/numdetail,0),2) HedgeInstrumentFwdcovers,
       ROUND(NVL(sum(CASH_OUTSTANDING_FCY)/numdetail,0),2) HedgeItemHypotheticalderivative,
       round(sum(CASH_OUTSTANDING_FCY*CASH_SPOT_RATE)/sum(CASH_OUTSTANDING_FCY),6) AvgSpotRate,
       round(sum(CASH_OUTSTANDING_FCY* cash_exchange_rate)/sum(CASH_OUTSTANDING_FCY),6) AvgFWDRate,
       round(sum(CASH_OUTSTANDING_FCY* CASH_MTM_SPOTRATE)/sum(CASH_OUTSTANDING_FCY),6) AvgMTMSPOTRATE,
       round(sum(CASH_OUTSTANDING_FCY* CASH_MTM_RATE)/sum(CASH_OUTSTANDING_FCY),6) AvgMTMFORWARDRATE,
       ROUND(NVL(SUM(CASH_MTM_AMOUNT)/numdetail,0),2) GainLossonHedgeItem,
       -1 * ROUND(NVL(SUM(CASH_MTM_AMOUNT)/numdetail,0),2) GainLossonHedgeInstrument,
       round(SUM(CASH_MTM_AMOUNT)/SUM(nullif(CASH_MTM_AMOUNT,0)),0)*100 Ratio,
       (case when round(sum(CASH_MTM_AMOUNT)/sum(nullif(CASH_MTM_AMOUNT,0)),0)*100 =100 then 'Yes' else 'No' end )Effective,
       PKGRETURNCURSOR.FNCGETDESCRIPTION(CASH_CURRENCY_PAIR,2) CurrencyPair
       from trtran111_detail
       where CASH_EFFECTIVE_DATE=Dattemp
        AND (CASH_COMPANY_CODE = DECODE(varTemp1,'ALL' ,CASH_COMPANY_CODE) OR
                INSTR(varTemp1 ,CASH_COMPANY_CODE) >0)
        AND (CASH_LOCATION_CODE = DECODE(varTemp2,'ALL' ,CASH_LOCATION_CODE) OR
                INSTR(varTemp2 ,CASH_LOCATION_CODE) >0)
         AND (CASH_CURRENCY_PAIR = DECODE(vartemp8,'ALL' ,CASH_CURRENCY_PAIR) OR
                INSTR(vartemp8 ,CASH_CURRENCY_PAIR) >0)
        AND (CASH_PORTOFOLIO_CODE = DECODE(varTemp4,'ALL' ,CASH_PORTOFOLIO_CODE) OR
            INSTR(varTemp4 ,CASH_PORTOFOLIO_CODE) >0)
        AND (CASH_SUBPORTFOLIO_CODE = DECODE(varTemp5,'ALL' ,CASH_SUBPORTFOLIO_CODE) OR
         INSTR(varTemp5 ,CASH_SUBPORTFOLIO_CODE) >0)
--         AND(CASH_BUY_SELL = DECODE(varTemp9,'ALL' ,CASH_BUY_SELL) OR
--                INSTR(varTemp9 ,CASH_BUY_SELL) >0) 
        AND CASH_BUY_SELL =numCode
       and cash_record_status not in  (10200005,10200006)      
       group by CASH_EFFECTIVE_DATE,to_char(cash_due_date,'MON-YYYY'),
       to_CHAR(cash_due_date,'YYYYMM'),CASH_CURRENCY_PAIR) Deals
       left outer join
      (select PKGRETURNCURSOR.FNCGETDESCRIPTION(CNDI_PICK_CODE,2) CurrencyPair,to_char(trad_maturity_date,'MON-YYYY')  MaturityDate,
             to_CHAR(trad_maturity_date,'YYYYMM') MaturityOrder,
            round(sum((pkgForexProcess.fncGetOutstanding(trad_trade_reference,0,6,1, Dattemp))/numdetail),2)  ExposureAmount
            from trtran002 m inner join trmaster259
            on TRAD_IMPORT_EXPORT=EXTY_PICK_CODE
            and exty_record_Status not in (10200005,1020006)
            left outer join trmaster256
            on CNDI_BASE_CURRENCY=trad_trade_currency
           and CNDI_OTHER_CURRENCY= TRAD_LOCAL_CURRENCY
           and CNDI_RECORD_STATUS not in (10200005,10200006)
          where (trad_complete_date is null or trad_complete_date > datWorkDate)
            and (TRAD_COMPANY_CODE = DECODE(varTemp1,'ALL' ,TRAD_COMPANY_CODE) OR
                INSTR(varTemp1 ,TRAD_COMPANY_CODE) >0)
            and ((vartemp8 = 'ALL') or
             (instr(vartemp8,CNDI_PICK_CODE )>0))
          and  Decode(EXTY_INFLOW_OUTFLOW,17300001,25300001,17300002,25300002) =numCode
           and EXTY_CONSIDER_EXPOSURE= 12400001  
          AND   (NVL(TRAD_product_category,0) = DECODE(varTemp4,'ALL' ,NVL(TRAD_product_category,0)) OR
                INSTR(varTemp4 ,NVL(TRAD_PRODUCT_CATEGORY,0)) >0)
          AND   (NVL(TRAD_subproduct_CODE,0) = DECODE(varTemp5,'ALL' ,NVL(TRAD_subproduct_CODE,0)) OR
                INSTR(varTemp5 ,NVL(TRAD_subproduct_CODE,0)) >0)
          AND   (NVL(TRAD_Location_CODE,0) = DECODE(varTemp2,'ALL' ,NVL(TRAD_Location_CODE,0)) OR
                INSTR(varTemp2 ,NVL(TRAD_Location_CODE,0)) >0)
--          and ((IncludeExpiredContract=12400001) or
--               ((IncludeExpiredContract=12400002) and (trad_maturity_date >=Dattemp)))
          and trad_record_status not in (10200005,10200006)
          and pkgForexProcess.fncGetOutstanding(trad_trade_reference,0,6,
                  1, Dattemp)>0
          group by CNDI_PICK_CODE,to_char(trad_maturity_date,'MON-YYYY'),to_CHAR(trad_maturity_date,'YYYYMM')) Exposure
          on Deals.MaturityOrder=Exposure.MaturityOrder
          and Deals.CurrencyPair=Exposure.CurrencyPair
           ORDER BY Deals.CurrencyPair,DEALS.MaturityOrder;



--          select CASH_EFFECTIVE_DATE,to_char(cash_due_date,'MON-YYYY') "MaturityMonth",
--       to_CHAR(cash_due_date,'YYYYMM') , sum(cash_crystal_amount) "BudGetCashFlow",
--       sum(CASH_OUTSTANDING_FCY) "HedgeInstrumentFwdcovers", 
--       sum(CASH_OUTSTANDING_FCY) "HedgeItemHypotheticalderivative",
--       round(sum(CASH_OUTSTANDING_FCY*CASH_SPOT_RATE)/sum(CASH_OUTSTANDING_FCY),6) "AvgSpotRate",
----       round(sum(CASH_OUTSTANDING_FCY* (cash_exchange_rate-CASH_SPOT_RATE))/sum(CASH_OUTSTANDING_FCY),6) "AvgFWDRate",
--       0 "AvgFWDRate",
--       0 "SpotRate",
--       round(sum(CASH_OUTSTANDING_FCY* CASH_MTM_RATE)/sum(CASH_OUTSTANDING_FCY),6) "AvgMTMRATE",
--       SUM(CASH_MTM_AMOUNT) "GainLossonHedgeItem",
--       SUM(CASH_MTM_AMOUNT*(-1)) "GainLossonHedgeInstrument",
--       round(SUM(CASH_MTM_AMOUNT)/SUM(nullif(CASH_MTM_AMOUNT,0)),0)*100 "Ratio",
--       (case when round(sum(CASH_MTM_AMOUNT)/sum(nullif(CASH_MTM_AMOUNT,0)),0)*100 =100 then 'Yes' else 'No' end )"Effective",
----       CASH_COMPANY_CODE,CASH_LOCATION_CODE,
--       CASH_CURRENCY_PAIR
----       CASH_PORTOFOLIO_CODE,CASH_SUBPORTFOLIO_CODE
--       from trtran111_detail
--       where CASH_EFFECTIVE_DATE=Dattemp
--        AND (CASH_COMPANY_CODE = DECODE(varTemp1,'ALL' ,CASH_COMPANY_CODE) OR
--                INSTR(varTemp1 ,CASH_COMPANY_CODE) >0)
--        AND (CASH_LOCATION_CODE = DECODE(varTemp2,'ALL' ,CASH_LOCATION_CODE) OR
--                INSTR(varTemp2 ,CASH_LOCATION_CODE) >0)
--         AND (CASH_CURRENCY_PAIR = DECODE(vartemp8,'ALL' ,CASH_CURRENCY_PAIR) OR
--                INSTR(vartemp8 ,CASH_CURRENCY_PAIR) >0)
--        AND (CASH_PORTOFOLIO_CODE = DECODE(varTemp4,'ALL' ,CASH_PORTOFOLIO_CODE) OR
--            INSTR(varTemp4 ,CASH_PORTOFOLIO_CODE) >0)
--        AND (CASH_SUBPORTFOLIO_CODE = DECODE(varTemp5,'ALL' ,CASH_SUBPORTFOLIO_CODE) OR
--         INSTR(varTemp5 ,CASH_SUBPORTFOLIO_CODE) >0)
--       and cash_record_status not in  (10200005,10200006)       
--       group by CASH_EFFECTIVE_DATE,to_char(cash_due_date,'MON-YYYY'),
--       to_CHAR(cash_due_date,'YYYYMM'),
--       CASH_CURRENCY_PAIR;  
--SELECT CASH_MATURITY_MONTH "MaturityMonth",CASH_OUTSTANDING_FCY "ForwardOutstanding",CASH_OUTSTANDING_FCY "FwdOutstanding",
--       CASH_SPOT_RATE "Spot", CASH_FOWARD_RATE "ForwardRate",
--       CASH_EFFECTIVE_PL "EffectivePL",CASH_INEFFECTIVE_PL "InEffectivePL",
--       nvl(CASH_EFFECTIVE_RATIO,0) "EffectiveRatio",nvl(HEDG_HEDGED_FCY,1) "Amount"
-- from trtran111_detail left outer join trtran004
--     on HEDG_DEAL_NUMBER=CASH_DEAL_NUMBER
--     WHERE CASH_RECORD_STATUS NOT in (10200005,10200006)
--     AND HEDG_RECORD_STATUS NOT IN (10200005,10200006)
--       AND (CASH_COMPANY_CODE = DECODE(varTemp1,'ALL' ,CASH_COMPANY_CODE) OR
--                INSTR(varTemp1 ,CASH_COMPANY_CODE) >0)
--    -- AND CASH_LOCATION_CODE in (varTemp2)
--  AND (CASH_LOCATION_CODE = DECODE(varTemp2,'ALL' ,CASH_LOCATION_CODE) OR
--                INSTR(varTemp2 ,CASH_LOCATION_CODE) >0)
----     AND CASH_COUNTER_PARTY=vartemp7
----     AND CASH_BASE_CURRENCY=vartemp3
----     AND CASH_OTHER_CURRENCY=vartemp6
-- AND (CASH_CURRENCY_PAIR = DECODE(vartemp8,'ALL' ,CASH_CURRENCY_PAIR) OR
--                INSTR(vartemp8 ,CASH_CURRENCY_PAIR) >0)
--     AND (CASH_PORTOFOLIO_CODE = DECODE(varTemp4,'ALL' ,CASH_PORTOFOLIO_CODE) OR
--    INSTR(varTemp4 ,CASH_PORTOFOLIO_CODE) >0)
--     AND (CASH_SUBPORTFOLIO_CODE = DECODE(varTemp5,'ALL' ,CASH_SUBPORTFOLIO_CODE) OR
--    INSTR(varTemp5 ,CASH_SUBPORTFOLIO_CODE) >0)
----     AND CASH_CURRENCY_PAIR in (vartemp8)
----     AND CASH_PORTOFOLIO_CODE in (varTemp4)
----     AND CASH_SUBPORTFOLIO_CODE in (varTemp5)
--     AND CASH_EFFECTIVE_DATE=Dattemp
--       group by CASH_MATURITY_MONTH,CASH_OUTSTANDING_FCY,CASH_SPOT_RATE,
--       CASH_FOWARD_RATE,CASH_EFFECTIVE_PL,CASH_INEFFECTIVE_PL,CASH_EFFECTIVE_RATIO,HEDG_HEDGED_FCY;

Goto Process_End;
  end if;       





     if  numInfoType = RefEffectivenessRetro then
   varOperation := 'hedge effectiveness  Data Extract';
       BEGIN
           varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp1 :='ALL';
       End;
           BEGIN
           varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp2 := 'ALL';
       End;
           BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/BaseCurrency',varTemp3,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp3 := 'ALL';
       End;
           BEGIN
           varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp4 := 'ALL';
       End;
           BEGIN
           varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp5 := 'ALL';
       End;
        BEGIN
           vartemp6:= GConst.fncXMLExtract(xmlDoc,'//Param/OtherCurrency',varTemp6,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp6 := 'ALL';
       End;
        BEGIN
           vartemp7:= GConst.fncXMLExtract(xmlDoc,'//Param/LocalBank',varTemp7,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp7 := 'ALL';
       End;
        BEGIN
       Dattemp:= gconst.fncxmlextract(xmldoc,'//Param/EffectiveDate',Dattemp,GConst.TYPENODEPATH);
       Exception
           when others then
           Dattemp := datWorkDate;
       End;

        BEGIN
           vartemp8:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp8,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp8 := 'ALL';
       End;
--    BEGIN
           numCode:= GConst.fncXMLExtract(xmlDoc,'//Param/BuySell',numCode,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           vartemp9 := 'ALL';
--       End;

 select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
     open gencursor for      

     select CASH_EFFECTIVE_DATE, MaturityMonth,
       ROUND(NVL(sum(CASH_OUTSTANDING_FCY)/numdetail,0),2) HedgeInstrumentFwdcovers,
       ROUND(NVL(sum(CASH_OUTSTANDING_FCY)/numdetail,0),2) HedgeItemHypotheticalderivative,
       round(sum(CASH_OUTSTANDING_FCY*CASH_SPOT_RATE)/sum(CASH_OUTSTANDING_FCY),6) AvgSpotRate,
       round(sum(CASH_OUTSTANDING_FCY* (cash_exchange_rate))/sum(CASH_OUTSTANDING_FCY),6) AvgFWDRate,
       round(sum(CASH_OUTSTANDING_FCY* MTMSpotRate)/sum(CASH_OUTSTANDING_FCY),6) AvgMTMSPOTRATE,
       round(sum(CASH_OUTSTANDING_FCY* MTMForwardRate)/sum(CASH_OUTSTANDING_FCY),6) AvgMTMFORWARDRATE,
       ROUND(NVL(SUM( pkgforexprocess.fncgetprofitloss(CASH_OUTSTANDING_FCY,CASH_MTM_RATE,CASH_EXCHANGE_RATE,CASH_BUY_SELL))/numdetail,0),2) GainLossonHedgeItem,
    --    SUM(CASH_EFFECTIVE_PL + CASH_INEFFECTIVE_PL) GainLossonHedgeItem,
       -1 * ROUND(NVL(SUM( pkgforexprocess.fncgetprofitloss(CASH_OUTSTANDING_FCY,CASH_MTM_RATE,CASH_EXCHANGE_RATE,CASH_BUY_SELL))/numdetail,0),2) GainLossonHedgeInstrument,
       round(SUM( pkgforexprocess.fncgetprofitloss(CASH_OUTSTANDING_FCY,CASH_MTM_RATE,CASH_EXCHANGE_RATE,CASH_BUY_SELL))/
            SUM(nullif( pkgforexprocess.fncgetprofitloss(CASH_OUTSTANDING_FCY,CASH_MTM_RATE,CASH_EXCHANGE_RATE,CASH_BUY_SELL),0)),0)*100 Ratio,
            'Yes' Effective,
       --(case when round(sum(CASH_MTM_AMOUNT)/sum(nullif(CASH_MTM_AMOUNT,0)),0)*100 =100 then 'Yes' else 'No' end )Effective,
       PKGRETURNCURSOR.FNCGETDESCRIPTION(CASH_CURRENCY_PAIR,2) CurrencyPair,
       round(sum((Exposure.ExposureAmount)/numdetail),2) ExposureAmount,Exposure.MaturityOrder
    from    (select CASH_EFFECTIVE_DATE,to_char(cash_due_date,'MON-YYYY') MaturityMonth,
           to_CHAR(cash_due_date,'YYYYMM') MaturityOrder ,CASH_OUTSTANDING_FCY,
           CASH_SPOT_RATE,cash_exchange_rate,CASH_CURRENCY_PAIR,CASH_BUY_SELL,CASH_MTM_RATE,
           (pkgforexprocess.fncGetRate(CASH_BASE_CURRENCY,CASH_OTHER_CURRENCY,LAST_DAY(ADD_MONTHS(Dattemp,-3)),CASH_BUY_SELL,0,null,1,AMTM_RATE_TYPE)) MTMSpotRate,
           (pkgforexprocess.fncGetRate(CASH_BASE_CURRENCY,CASH_OTHER_CURRENCY,LAST_DAY(ADD_MONTHS(Dattemp,-3)),CASH_BUY_SELL,0,cash_due_date,1,AMTM_RATE_TYPE)) MTMForwardRate
           from trtran111_detail LEFT OUTER JOIN TRSYSTEM958
             ON CASH_AMTM_REFERENCE=AMTM_REFERENCE_NUMBER
             AND AMTM_RECORD_STATUS NOT IN (10200005,10200006)
           where CASH_EFFECTIVE_DATE=Dattemp
            AND (CASH_COMPANY_CODE = DECODE(varTemp1,'ALL' ,CASH_COMPANY_CODE) OR
                    INSTR(varTemp1 ,CASH_COMPANY_CODE) >0)
            AND (CASH_LOCATION_CODE = DECODE(varTemp2,'ALL' ,CASH_LOCATION_CODE) OR
                    INSTR(varTemp2 ,CASH_LOCATION_CODE) >0)
             AND (CASH_CURRENCY_PAIR = DECODE(vartemp8,'ALL' ,CASH_CURRENCY_PAIR) OR
                    INSTR(vartemp8 ,CASH_CURRENCY_PAIR) >0)
            AND (CASH_PORTOFOLIO_CODE = DECODE(varTemp4,'ALL' ,CASH_PORTOFOLIO_CODE) OR
                INSTR(varTemp4 ,CASH_PORTOFOLIO_CODE) >0)
            AND (CASH_SUBPORTFOLIO_CODE = DECODE(varTemp5,'ALL' ,CASH_SUBPORTFOLIO_CODE) OR
             INSTR(varTemp5 ,CASH_SUBPORTFOLIO_CODE) >0)
    --           AND(CASH_BUY_SELL = DECODE(varTemp9,'ALL' ,CASH_BUY_SELL) OR
    --                INSTR(varTemp9 ,CASH_BUY_SELL) >0)
            AND CASH_BUY_SELL =numCode
           and cash_record_status not in  (10200005,10200006)    
            AND CASH_REFERENCE_DATE<= LAST_DAY(ADD_MONTHS(Dattemp,-3)) )DEALS

 left outer join
      ( select PKGRETURNCURSOR.FNCGETDESCRIPTION(CNDI_PICK_CODE,2) CurrencyPair,to_char(trad_maturity_date,'MON-YYYY')  MaturityDate,
             to_CHAR(trad_maturity_date,'YYYYMM') MaturityOrder,CNDI_PICK_CODE,
           round(sum((pkgForexProcess.fncGetOutstanding(trad_trade_reference,0,6,
                  1, Dattemp))/numdetail),2) ExposureAmount
            from trtran002 m inner join trmaster259
            on TRAD_IMPORT_EXPORT=EXTY_PICK_CODE
            and exty_record_Status not in (10200005,1020006)
            left outer join trmaster256
            on CNDI_BASE_CURRENCY=trad_trade_currency
           and CNDI_OTHER_CURRENCY= TRAD_LOCAL_CURRENCY
           and CNDI_RECORD_STATUS not in (10200005,10200006)
          where (trad_complete_date is null or trad_complete_date > datWorkDate)
            and (TRAD_COMPANY_CODE = DECODE(varTemp1,'ALL' ,TRAD_COMPANY_CODE) OR
                INSTR(varTemp1 ,TRAD_COMPANY_CODE) >0)
            and ((vartemp8 = 'ALL') or
             (instr(vartemp8,CNDI_PICK_CODE )>0))
          and  Decode(EXTY_INFLOW_OUTFLOW,17300001,25300001,17300002,25300002) =numCode
           and EXTY_CONSIDER_EXPOSURE= 12400001  
          AND   (NVL(TRAD_product_category,0) = DECODE(varTemp4,'ALL' ,NVL(TRAD_product_category,0)) OR
                INSTR(varTemp4 ,NVL(TRAD_PRODUCT_CATEGORY,0)) >0)
          AND   (NVL(TRAD_subproduct_CODE,0) = DECODE(varTemp5,'ALL' ,NVL(TRAD_subproduct_CODE,0)) OR
                INSTR(varTemp5 ,NVL(TRAD_subproduct_CODE,0)) >0)
          AND   (NVL(TRAD_Location_CODE,0) = DECODE(varTemp2,'ALL' ,NVL(TRAD_Location_CODE,0)) OR
                INSTR(varTemp2 ,NVL(TRAD_Location_CODE,0)) >0)
          and trad_record_status not in (10200005,10200006)
          and pkgForexProcess.fncGetOutstanding(trad_trade_reference,0,6, 1, Dattemp)>0
          group by CNDI_PICK_CODE,to_char(trad_maturity_date,'MON-YYYY'),to_CHAR(trad_maturity_date,'YYYYMM'))Exposure
           on Deals.MaturityOrder=Exposure.MaturityOrder
          and Deals.CASH_CURRENCY_PAIR=Exposure.CNDI_PICK_CODE    
       group by CASH_EFFECTIVE_DATE, MaturityMonth,Exposure.MaturityOrder ,CASH_CURRENCY_PAIR
      ORDER BY cash_currency_pair ,Exposure.MaturityOrder;

--  select Deals.MaturityMonth,Deals.CurrencyPair,
--         exposure.ExposureAmount, exposure.MaturityOrder ,
--         HedgeInstrumentFwdcovers,  HedgeItemHypotheticalderivative,
--         AvgSpotRate,AvgFWDRate, AvgMTMSPOTRATE,AvgMTMFORWARDRATE,GainLossonHedgeItem,
--         GainLossonHedgeInstrument, Ratio,Effective
--   from
--     (select CASH_EFFECTIVE_DATE,to_char(cash_due_date,'MON-YYYY') MaturityMonth,
--       to_CHAR(cash_due_date,'YYYYMM') MaturityOrder ,
--       ROUND(NVL(sum(CASH_OUTSTANDING_FCY)/numdetail,0),2) HedgeInstrumentFwdcovers,
--       ROUND(NVL(sum(CASH_OUTSTANDING_FCY)/numdetail,0),2) HedgeItemHypotheticalderivative,
--       round(sum(CASH_OUTSTANDING_FCY*CASH_SPOT_RATE)/sum(CASH_OUTSTANDING_FCY),6) AvgSpotRate,
--       round(sum(CASH_OUTSTANDING_FCY* cash_exchange_rate)/sum(CASH_OUTSTANDING_FCY),6) AvgFWDRate,
--       round(sum(CASH_OUTSTANDING_FCY* CASH_MTM_SPOTRATE)/sum(CASH_OUTSTANDING_FCY),6) AvgMTMSPOTRATE,
--       round(sum(CASH_OUTSTANDING_FCY* CASH_MTM_RATE)/sum(CASH_OUTSTANDING_FCY),6) AvgMTMFORWARDRATE,
--       ROUND(NVL(SUM(CASH_MTM_AMOUNT)/numdetail,0),2) GainLossonHedgeItem,
--       -1 * ROUND(NVL(SUM(CASH_MTM_AMOUNT)/numdetail,0),2) GainLossonHedgeInstrument,
--       round(SUM(CASH_MTM_AMOUNT)/SUM(nullif(CASH_MTM_AMOUNT,0)),0)*100 Ratio,
--       (case when round(sum(CASH_MTM_AMOUNT)/sum(nullif(CASH_MTM_AMOUNT,0)),0)*100 =100 then 'Yes' else 'No' end )Effective,
--       PKGRETURNCURSOR.FNCGETDESCRIPTION(CASH_CURRENCY_PAIR,2) CurrencyPair
--       from trtran111_detail LEFT OUTER JOIN TRSYSTEM958
--         ON CASH_AMTM_REFERENCE=AMTM_REFERENCE_NUMBER
--         AND AMTM_RECORD_STATUS NOT IN (10200005,10200006)
--       where CASH_EFFECTIVE_DATE=Dattemp
--        AND (CASH_COMPANY_CODE = DECODE(varTemp1,'ALL' ,CASH_COMPANY_CODE) OR
--                INSTR(varTemp1 ,CASH_COMPANY_CODE) >0)
--        AND (CASH_LOCATION_CODE = DECODE(varTemp2,'ALL' ,CASH_LOCATION_CODE) OR
--                INSTR(varTemp2 ,CASH_LOCATION_CODE) >0)
--         AND (CASH_CURRENCY_PAIR = DECODE(vartemp8,'ALL' ,CASH_CURRENCY_PAIR) OR
--                INSTR(vartemp8 ,CASH_CURRENCY_PAIR) >0)
--        AND (CASH_PORTOFOLIO_CODE = DECODE(varTemp4,'ALL' ,CASH_PORTOFOLIO_CODE) OR
--            INSTR(varTemp4 ,CASH_PORTOFOLIO_CODE) >0)
--        AND (CASH_SUBPORTFOLIO_CODE = DECODE(varTemp5,'ALL' ,CASH_SUBPORTFOLIO_CODE) OR
--         INSTR(varTemp5 ,CASH_SUBPORTFOLIO_CODE) >0)
----           AND(CASH_BUY_SELL = DECODE(varTemp9,'ALL' ,CASH_BUY_SELL) OR
----                INSTR(varTemp9 ,CASH_BUY_SELL) >0)
--        AND CASH_BUY_SELL =numCode
--       and cash_record_status not in  (10200005,10200006)    
--        AND CASH_REFERENCE_DATE<= (CASE WHEN AMTM_PERIOD_TYPE=80400003 THEN LAST_DAY(ADD_MONTHS(Dattemp,-3))
--                                  WHEN AMTM_PERIOD_TYPE=80400002 THEN LAST_DAY(ADD_MONTHS(Dattemp,-1)) ELSE TO_DATE(Dattemp) END)
--       group by CASH_EFFECTIVE_DATE,to_char(cash_due_date,'MON-YYYY'),
--       to_CHAR(cash_due_date,'YYYYMM'),CASH_CURRENCY_PAIR) Deals
--       left outer join
--      (select PKGRETURNCURSOR.FNCGETDESCRIPTION(CNDI_PICK_CODE,2) CurrencyPair,to_char(trad_maturity_date,'MON-YYYY')  MaturityDate,
--             to_CHAR(trad_maturity_date,'YYYYMM') MaturityOrder,
--           round(sum((pkgForexProcess.fncGetOutstanding(trad_trade_reference,0,6,
--                  1, Dattemp))/numdetail),2) ExposureAmount
--            from trtran002 m inner join trmaster259
--            on TRAD_IMPORT_EXPORT=EXTY_PICK_CODE
--            and exty_record_Status not in (10200005,1020006)
--            left outer join trmaster256
--            on CNDI_BASE_CURRENCY=trad_trade_currency
--           and CNDI_OTHER_CURRENCY= TRAD_LOCAL_CURRENCY
--           and CNDI_RECORD_STATUS not in (10200005,10200006)
--          where (trad_complete_date is null or trad_complete_date > datWorkDate)
--            and (TRAD_COMPANY_CODE = DECODE(varTemp1,'ALL' ,TRAD_COMPANY_CODE) OR
--                INSTR(varTemp1 ,TRAD_COMPANY_CODE) >0)
--            and ((vartemp8 = 'ALL') or
--             (instr(vartemp8,CNDI_PICK_CODE )>0))
--          and  Decode(EXTY_INFLOW_OUTFLOW,17300001,25300001,17300002,25300002) =numCode
----            AND(CASH_BUY_SELL = DECODE(varTemp9,'ALL' ,CASH_BUY_SELL) OR
----                INSTR(varTemp9 ,CASH_BUY_SELL) >0)
--           and EXTY_CONSIDER_EXPOSURE= 12400001  
--          AND   (NVL(TRAD_product_category,0) = DECODE(varTemp4,'ALL' ,NVL(TRAD_product_category,0)) OR
--                INSTR(varTemp4 ,NVL(TRAD_PRODUCT_CATEGORY,0)) >0)
--          AND   (NVL(TRAD_subproduct_CODE,0) = DECODE(varTemp5,'ALL' ,NVL(TRAD_subproduct_CODE,0)) OR
--                INSTR(varTemp5 ,NVL(TRAD_subproduct_CODE,0)) >0)
--          AND   (NVL(TRAD_Location_CODE,0) = DECODE(varTemp2,'ALL' ,NVL(TRAD_Location_CODE,0)) OR
--                INSTR(varTemp2 ,NVL(TRAD_Location_CODE,0)) >0)
----          and ((IncludeExpiredContract=12400001) or
----               ((IncludeExpiredContract=12400002) and (trad_maturity_date >=Dattemp)))
--          and trad_record_status not in (10200005,10200006)
--          and pkgForexProcess.fncGetOutstanding(trad_trade_reference,0,6,
--                  1, Dattemp)>0
--          group by CNDI_PICK_CODE,to_char(trad_maturity_date,'MON-YYYY'),to_CHAR(trad_maturity_date,'YYYYMM')) Exposure
--          on Deals.MaturityOrder=Exposure.MaturityOrder
--          and Deals.CurrencyPair=Exposure.CurrencyPair
--          ORDER BY Deals.CurrencyPair,DEALS.MaturityOrder;

--   select CASH_EFFECTIVE_DATE,to_char(cash_due_date,'MON-YYYY') "MaturityMonth",
--       to_CHAR(cash_due_date,'YYYYMM') , sum(cash_crystal_amount) "BudGetCashFlow",
--       sum(CASH_OUTSTANDING_FCY) "HedgeInstrumentFwdcovers",
--       sum(CASH_OUTSTANDING_FCY) "HedgeItemHypotheticalderivative",
--       round(sum(CASH_OUTSTANDING_FCY*CASH_SPOT_RATE)/sum(CASH_OUTSTANDING_FCY),6) "AvgSpotRate",
--       round(sum(CASH_OUTSTANDING_FCY* (cash_exchange_rate-CASH_SPOT_RATE))/sum(CASH_OUTSTANDING_FCY),6) "AvgFWDRate",
--       round(sum(CASH_OUTSTANDING_FCY* CASH_MTM_RATE)/sum(CASH_OUTSTANDING_FCY),6) "AvgMTMRATE",
--       SUM(CASH_MTM_AMOUNT) "GainLossonHedgeItem",
--       SUM(CASH_MTM_AMOUNT) "GainLossonHedgeInstrument",
--       round(SUM(CASH_MTM_AMOUNT)/SUM(nullif(CASH_MTM_AMOUNT,0)),0)*100 "Ratio",
--       (case when round(SUM(CASH_MTM_AMOUNT)/SUM(nullif(CASH_MTM_AMOUNT,0)),0)*100 =100 then 'Yes' else 'No' end )"Effective",
--       CASH_COMPANY_CODE,CASH_LOCATION_CODE,
--       CASH_CURRENCY_PAIR,CASH_PORTOFOLIO_CODE,CASH_SUBPORTFOLIO_CODE
--       from trtran111_detail LEFT OUTER JOIN TRSYSTEM958
--         ON CASH_AMTM_REFERENCE=AMTM_REFERENCE_NUMBER
--         AND AMTM_RECORD_STATUS NOT IN (10200005,10200006)
--       where CASH_EFFECTIVE_DATE=Dattemp
--        AND (CASH_COMPANY_CODE = DECODE(varTemp1,'ALL' ,CASH_COMPANY_CODE) OR
--                INSTR(varTemp1 ,CASH_COMPANY_CODE) >0)
--        AND (CASH_LOCATION_CODE = DECODE(varTemp2,'ALL' ,CASH_LOCATION_CODE) OR
--                INSTR(varTemp2 ,CASH_LOCATION_CODE) >0)
--         AND (CASH_CURRENCY_PAIR = DECODE(vartemp8,'ALL' ,CASH_CURRENCY_PAIR) OR
--                INSTR(vartemp8 ,CASH_CURRENCY_PAIR) >0)
--        AND (CASH_PORTOFOLIO_CODE = DECODE(varTemp4,'ALL' ,CASH_PORTOFOLIO_CODE) OR
--            INSTR(varTemp4 ,CASH_PORTOFOLIO_CODE) >0)
--        AND (CASH_SUBPORTFOLIO_CODE = DECODE(varTemp5,'ALL' ,CASH_SUBPORTFOLIO_CODE) OR
--         INSTR(varTemp5 ,CASH_SUBPORTFOLIO_CODE) >0)
--       and cash_record_status not in  (10200005,10200006)
--       AND CASH_REFERENCE_DATE= (CASE WHEN AMTM_PERIOD_TYPE=80400003 THEN LAST_DAY(ADD_MONTHS(Dattemp,-3))
--                                  WHEN AMTM_PERIOD_TYPE=80400002 THEN LAST_DAY(ADD_MONTHS(Dattemp,-1)) ELSE TO_DATE(Dattemp) END)
--       group by CASH_EFFECTIVE_DATE,to_char(cash_due_date,'MON-YYYY'),
--       to_CHAR(cash_due_date,'YYYYMM'),CASH_COMPANY_CODE,CASH_LOCATION_CODE,
--       CASH_CURRENCY_PAIR,CASH_PORTOFOLIO_CODE,CASH_SUBPORTFOLIO_CODE;        
--SELECT CASH_MATURITY_MONTH "MaturityMonth",CASH_OUTSTANDING_FCY "ForwardOutstanding",CASH_OUTSTANDING_FCY "FwdOutstanding",
--       CASH_SPOT_RATE "Spot", CASH_FOWARD_RATE "ForwardRate",
--       CASH_EFFECTIVE_PL "EffectivePL",CASH_INEFFECTIVE_PL "InEffectivePL",
--       nvl(CASH_EFFECTIVE_RATIO,0) "EffectiveRatio",nvl(HEDG_HEDGED_FCY,1) "Amount"
-- from trtran111_detail left outer join trtran004
--     on HEDG_DEAL_NUMBER=CASH_DEAL_NUMBER
--     AND HEDG_RECORD_STATUS NOT IN (10200005,10200006)
--     LEFT OUTER JOIN TRSYSTEM958
--     ON CASH_AMTM_REFERENCE=AMTM_REFERENCE_NUMBER
--     AND AMTM_RECORD_STATUS NOT IN (10200005,10200006)
--     WHERE CASH_RECORD_STATUS NOT IN (10200005,10200006)
--       AND (CASH_COMPANY_CODE = DECODE(varTemp1,'ALL' ,CASH_COMPANY_CODE) OR
--                INSTR(varTemp1 ,CASH_COMPANY_CODE) >0)
--    -- AND CASH_LOCATION_CODE in (varTemp2)
--  AND (CASH_LOCATION_CODE = DECODE(varTemp2,'ALL' ,CASH_LOCATION_CODE) OR
--                INSTR(varTemp2 ,CASH_LOCATION_CODE) >0)
----     AND CASH_COUNTER_PARTY=vartemp7
----     AND CASH_BASE_CURRENCY=vartemp3
----     AND CASH_OTHER_CURRENCY=vartemp6
-- AND (CASH_CURRENCY_PAIR = DECODE(vartemp8,'ALL' ,CASH_CURRENCY_PAIR) OR
--                INSTR(vartemp8 ,CASH_CURRENCY_PAIR) >0)
--     AND (CASH_PORTOFOLIO_CODE = DECODE(varTemp4,'ALL' ,CASH_PORTOFOLIO_CODE) OR
--    INSTR(varTemp4 ,CASH_PORTOFOLIO_CODE) >0)
--     AND (CASH_SUBPORTFOLIO_CODE = DECODE(varTemp5,'ALL' ,CASH_SUBPORTFOLIO_CODE) OR
--    INSTR(varTemp5 ,CASH_SUBPORTFOLIO_CODE) >0)
--     AND CASH_EFFECTIVE_DATE= (CASE WHEN AMTM_PERIOD_TYPE=80400003 THEN LAST_DAY(ADD_MONTHS(Dattemp,-3))
--                                    WHEN AMTM_PERIOD_TYPE=80400002 THEN LAST_DAY(ADD_MONTHS(Dattemp,-1)) ELSE Dattemp END)
--       group by CASH_MATURITY_MONTH,CASH_OUTSTANDING_FCY,CASH_SPOT_RATE,
--       CASH_FOWARD_RATE,CASH_EFFECTIVE_PL,CASH_INEFFECTIVE_PL,CASH_EFFECTIVE_RATIO,HEDG_HEDGED_FCY;

Goto Process_End;
  end if;          


     if  numInfoType = RefDollarWorking then
   varOperation := 'DollarWorking Data Extract';
       BEGIN
           varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp1 :='ALL';
       End; 
           BEGIN
           varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp2 := 'ALL';
       End; 
           BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/BaseCurrency',varTemp3,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp3 := 'ALL';
       End; 
           BEGIN
           varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp4 := 'ALL';
       End; 
           BEGIN
           varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp5 := 'ALL';
       End; 
        BEGIN
           vartemp6:= GConst.fncXMLExtract(xmlDoc,'//Param/OtherCurrency',varTemp6,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp6 := 'ALL';
       End; 
        BEGIN
           vartemp7:= GConst.fncXMLExtract(xmlDoc,'//Param/LocalBank',varTemp7,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp7 := 'ALL';
       End; 
        BEGIN
       Dattemp:= gconst.fncxmlextract(xmldoc,'//Param/EffectiveDate',Dattemp,GConst.TYPENODEPATH);
       Exception
           when others then
           Dattemp := datWorkDate;
       End; 
        BEGIN
           vartemp8:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp8,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp8 := 'ALL';
       End; 
--        BEGIN
           numCode:= GConst.fncXMLExtract(xmlDoc,'//Param/BuySell',numCode,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           vartemp9 := 'ALL';
--       End; 
 select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
 open gencursor for

SELECT rownum "Rownum",pkgreturncursor.fncgetdescription(CASH_LOCATION_CODE,2) "Sector",
        'Forward' "Instrument",pkgreturncursor.fncgetdescription(CASH_COUNTER_PARTY,2) "Bank",
        ROUND(NVL((CASH_OUTSTANDING_FCY)/numdetail,0),2) "Amount",pkgreturncursor.fncgetdescription(cash_currency_pair,2) "SellCurrency",CASH_REFERENCE_DATE "ContractDate",
        CASH_DUE_DATE "ValueDate",cash_exchange_rate "ForwardRate",
        round((CASH_OUTSTANDING_FCY* CASH_MTM_RATE)/(CASH_OUTSTANDING_FCY),6) "ForwardRateAsOnDate",
        ROUND(NVL((cash_mtm_amount)/numdetail,0),2) "MTMInMio"
        from trtran111_detail
        where cash_record_status not in (10200005,10200006)
         AND (CASH_COMPANY_CODE = DECODE(varTemp1,'ALL' ,CASH_COMPANY_CODE) OR
                INSTR(varTemp1 ,CASH_COMPANY_CODE) >0)
    -- AND CASH_LOCATION_CODE in (varTemp2)
  AND (CASH_LOCATION_CODE = DECODE(varTemp2,'ALL' ,CASH_LOCATION_CODE) OR
                INSTR(varTemp2 ,CASH_LOCATION_CODE) >0)
--     AND CASH_COUNTER_PARTY=vartemp7
--     AND CASH_BASE_CURRENCY=vartemp3
--     AND CASH_OTHER_CURRENCY=vartemp6
 AND (CASH_CURRENCY_PAIR = DECODE(vartemp8,'ALL' ,CASH_CURRENCY_PAIR) OR
                INSTR(vartemp8 ,CASH_CURRENCY_PAIR) >0)
     AND (CASH_PORTOFOLIO_CODE = DECODE(varTemp4,'ALL' ,CASH_PORTOFOLIO_CODE) OR
    INSTR(varTemp4 ,CASH_PORTOFOLIO_CODE) >0)
     AND (CASH_SUBPORTFOLIO_CODE = DECODE(varTemp5,'ALL' ,CASH_SUBPORTFOLIO_CODE) OR
    INSTR(varTemp5 ,CASH_SUBPORTFOLIO_CODE) >0)
         AND CASH_EFFECTIVE_DATE=Dattemp
         AND CASH_BUY_SELL =numCode;
--           AND(CASH_BUY_SELL = DECODE(varTemp9,'ALL' ,CASH_BUY_SELL) OR
--                INSTR(varTemp9 ,CASH_BUY_SELL) >0) ;

Goto Process_End;
  end if;    



     if  numInfoType = RefDollarOffsetWorking then
   varOperation := 'DollarWorking Data Extract';
       BEGIN
           varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp1 :='ALL';
       End; 
           BEGIN
           varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp2 := 'ALL';
       End; 
           BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/BaseCurrency',varTemp3,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp3 := 'ALL';
       End; 
           BEGIN
           varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp4 := 'ALL';
       End; 
           BEGIN
           varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp5 := 'ALL';
       End; 
        BEGIN
           vartemp6:= GConst.fncXMLExtract(xmlDoc,'//Param/OtherCurrency',varTemp6,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp6 := 'ALL';
       End; 
        BEGIN
           vartemp7:= GConst.fncXMLExtract(xmlDoc,'//Param/LocalBank',varTemp7,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp7 := 'ALL';
       End; 
        BEGIN
       Dattemp:= gconst.fncxmlextract(xmldoc,'//Param/EffectiveDate',Dattemp,GConst.TYPENODEPATH);
       Exception
           when others then
           Dattemp := datWorkDate;
       End; 
        BEGIN
           vartemp8:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp8,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp8 := 'ALL';
       End; 
--        BEGIN
           numCode:= GConst.fncXMLExtract(xmlDoc,'//Param/BuySell',numCode,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           vartemp9 := 'ALL';
--       End; 
 select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
 open gencursor for

SELECT rownum "Rownum",pkgreturncursor.fncgetdescription(CASH_LOCATION_CODE,2) "Sector",
        'Forward' "Instrument",pkgreturncursor.fncgetdescription(CASH_COUNTER_PARTY,2) "Bank",
        ROUND(NVL((CASH_OUTSTANDING_FCY)/numdetail,0),2) "Amount",pkgreturncursor.fncgetdescription(cash_currency_pair,2) "SellCurrency",CASH_REFERENCE_DATE "ContractDate",
        CASH_DUE_DATE "ValueDate",cash_exchange_rate "ForwardRate",
        round((CASH_OUTSTANDING_FCY* CASH_MTM_RATE)/(CASH_OUTSTANDING_FCY),6) "ForwardRateAsOnDate",
        ROUND(NVL((cash_mtm_amount)/numdetail,0),2)*(-1) "MTMInMio"
        from trtran111_detail
        where cash_record_status not in (10200005,10200006)
         AND (CASH_COMPANY_CODE = DECODE(varTemp1,'ALL' ,CASH_COMPANY_CODE) OR
                INSTR(varTemp1 ,CASH_COMPANY_CODE) >0)
  AND (CASH_LOCATION_CODE = DECODE(varTemp2,'ALL' ,CASH_LOCATION_CODE) OR
                INSTR(varTemp2 ,CASH_LOCATION_CODE) >0)
 AND (CASH_CURRENCY_PAIR = DECODE(vartemp8,'ALL' ,CASH_CURRENCY_PAIR) OR
                INSTR(vartemp8 ,CASH_CURRENCY_PAIR) >0)
     AND (CASH_PORTOFOLIO_CODE = DECODE(varTemp4,'ALL' ,CASH_PORTOFOLIO_CODE) OR
    INSTR(varTemp4 ,CASH_PORTOFOLIO_CODE) >0)
     AND (CASH_SUBPORTFOLIO_CODE = DECODE(varTemp5,'ALL' ,CASH_SUBPORTFOLIO_CODE) OR
    INSTR(varTemp5 ,CASH_SUBPORTFOLIO_CODE) >0)
         AND CASH_EFFECTIVE_DATE=Dattemp
         AND CASH_BUY_SELL =numCode;
--          AND(CASH_BUY_SELL = DECODE(varTemp9,'ALL' ,CASH_BUY_SELL) OR
--                INSTR(varTemp9 ,CASH_BUY_SELL) >0) ;
--       
Goto Process_End;
  end if;  

  if  numInfoType = RefDollarSummary then
   varOperation := 'DollarSummary Data Extract';
       BEGIN
           varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp1 :='ALL';
       End; 
           BEGIN
           varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp2 := 'ALL';
       End; 
           BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/BaseCurrency',varTemp3,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp3 := 'ALL';
       End; 
           BEGIN
           varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp4 := 'ALL';
       End; 
           BEGIN
           varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp5 := 'ALL';
       End; 
        BEGIN
           vartemp6:= GConst.fncXMLExtract(xmlDoc,'//Param/OtherCurrency',varTemp6,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp6 := 'ALL';
       End; 
        BEGIN
           vartemp7:= GConst.fncXMLExtract(xmlDoc,'//Param/LocalBank',varTemp7,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp7 := 'ALL';
       End; 
        BEGIN
       Dattemp:= gconst.fncxmlextract(xmldoc,'EffectiveDate',Dattemp);
       Exception
           when others then
           Dattemp := datWorkDate;
       End; 
        BEGIN
           vartemp8:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp8,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp8 := 'ALL';
       End; 
--        BEGIN
           numCode:= GConst.fncXMLExtract(xmlDoc,'//Param/BuySell',numCode,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           vartemp9 := 'ALL';
--       End; 
 select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
 open gencursor for

SELECT rownum "Rownum",pkgreturncursor.fncgetdescription(CASH_COUNTER_PARTY,2) "Bank",
        ROUND(NVL((CASH_OUTSTANDING_FCY)/numdetail,0),2) "Amount",pkgreturncursor.fncgetdescription(cash_currency_pair,2) "SellCurrency",
        ROUND(NVL((cash_mtm_amount)/numdetail,0),2) "HedgeInstrumentMio",ROUND(NVL((cash_mtm_amount)/numdetail,0),2)*(-1) "HypotheticalDerivativeMio",
        CASH_EXCHANGE_RATE "Strike",CASH_DUE_DATE "Expiry",ROUND(NVL((CASH_OUTSTANDING_FCY)/numdetail,0),2) "NotionalUSDMio",
        round((CASH_MTM_AMOUNT)/(nullif(CASH_MTM_AMOUNT,0)),0)*100  "HedgeEffective"
--        round((cash_mtm_rate/cash_mtm_amount),0) "HedgeEffective"      
        from trtran111_detail
        where cash_record_status not in (10200005,10200006)
         AND (CASH_COMPANY_CODE = DECODE(varTemp1,'ALL' ,CASH_COMPANY_CODE) OR
                INSTR(varTemp1 ,CASH_COMPANY_CODE) >0)
    -- AND CASH_LOCATION_CODE in (varTemp2)
  AND (CASH_LOCATION_CODE = DECODE(varTemp2,'ALL' ,CASH_LOCATION_CODE) OR
                INSTR(varTemp2 ,CASH_LOCATION_CODE) >0)
--     AND CASH_COUNTER_PARTY=vartemp7
--     AND CASH_BASE_CURRENCY=vartemp3
--     AND CASH_OTHER_CURRENCY=vartemp6
 AND (CASH_CURRENCY_PAIR = DECODE(vartemp8,'ALL' ,CASH_CURRENCY_PAIR) OR
                INSTR(vartemp8 ,CASH_CURRENCY_PAIR) >0)
     AND (CASH_PORTOFOLIO_CODE = DECODE(varTemp4,'ALL' ,CASH_PORTOFOLIO_CODE) OR
    INSTR(varTemp4 ,CASH_PORTOFOLIO_CODE) >0)
     AND (CASH_SUBPORTFOLIO_CODE = DECODE(varTemp5,'ALL' ,CASH_SUBPORTFOLIO_CODE) OR
    INSTR(varTemp5 ,CASH_SUBPORTFOLIO_CODE) >0)
         AND CASH_EFFECTIVE_DATE=Dattemp
         AND CASH_BUY_SELL =numCode;
--          AND(CASH_BUY_SELL = DECODE(varTemp9,'ALL' ,CASH_BUY_SELL) OR
--                INSTR(varTemp9 ,CASH_BUY_SELL) >0) ;

Goto Process_End;
  end if; 


 if numinfoType = REFGETUSERPREFERENCE then      
      open gencursor for 
  --    UPPER(user_user_id) = varUserID
--      select MENU_PROGRAM_UNIT "ID",MENU_PROGRAM_UNIT "Name", MENU_DESCRIPTION "MENUDESCRIPTION"
--          FROM  MenuFile
--          inner join trsystem006 on menu_program_unit = actl_program_unit
--            where Menu_Menu_Id between 900 and 950
--            and actl_user_id in ('.','Demo')
--            and actl_group_code = (select USER_GROUP_CODE from USERMASTER
--           where User_record_status not in (10200005,10200006)
--           and USER_USER_ID='Demo')
--            and menu_record_status not in (10200005,10200006)
--            and actl_record_status not in (10200005,10200006);

             select menu_program_unit "ID",
             menu_program_unit "Name",
            (case when uspf_dashboard_programunit is null then '102' else '104' end) "ActionMode",
            uspf_dashboard_programunit "DefaultValue"
          from MenuFile
          inner join trsystem006 on menu_program_unit = actl_program_unit
          left outer join (select uspf_dashboard_programunit ,USPF_USer_id
               from trsystem022C
               where USPF_record_Status not in (10200005,10200006)
               and Upper(USPF_USer_id)=varUserID) -- Assuming allways only one row for the User 
          on USPF_USer_id =USPF_USer_id -- Assuming allways only one row for the User 
          where Menu_Menu_Id between 900 and 950
          and UPPER(actl_user_id) in ('.',varUserID)
          and actl_group_code = (select USER_GROUP_CODE from USERMASTER
                         where User_record_status not in (10200005,10200006)
                         and UPPER(USER_USER_ID) = varUserID)
          and menu_record_status not in (10200005,10200006)
          and actl_record_status not in (10200005,10200006)
            and MENU_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
                and ACTL_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) );
  GOTO PROCESS_END;
 end if;


if numinfotype =REFGETDATES then
varTemp := gconst.fncxmlextract(xmldoc,'Param/AlertProgramUnit',varTemp);
--OPEN Gencursor FOR 
----        SELECT   FLDP_XML_FIELD "ID",
----        FLDP_LABEL_TEXT "Name"
----        from trsystem999 
----        where FLDP_DATA_TYPE='DATE'
----        and FLDP_TABLE_SYNONYM=varTemp
----        and FLDP_RECORD_STATUS not in (10200005,10200006);
--    select Column_Name ID,
--    Column_Name "Name"
--    from user_tab_cols 
--    where table_name =upper(varTemp)
--    and data_type ='DATE';
-- Goto Process_End; 

  open gencursor for       
       select 
       FLDP_COLUMN_NAME ID,
       FLDP_LABEL_TEXT "Name"      
        from trsystem999             
          where FLDP_TABLE_SYNONYM IN (varTemp)
          and FLDP_SHOW_YN='12400001'
           and nvl(FLDP_TAB_NUMBER,0) > 0           
           AND FLDP_DATA_TYPE = 'DATE'

        UNION
         select 
         VIEW_COLUMN_NAME ID,
       VIEW_DISPLAY_NAME "Name"        
        from trsystem999V              
          where VIEW_VIEW_NAME IN (varTemp)
          and VIEW_DATA_TYPE = 'DATE'
          and VIEW_SHOW_YN='12400001'

        UNION
        select 
        LOCL_DESTINATION_COLUMN ID,
        LOCL_DISPLAY_NAME "Name"         
        from trsystem968           
          where LOCL_DATA_NAME IN (varTemp)
          and LOCL_SHOW_YN='12400001'   
          AND LOCL_DATA_TYPE = 90400003
          order by 2;  

    Goto Process_End; 

end if;

----ADDED BY SUPRIYA ON 25/08/2020-----------------
if numinfotype =REFGETCOLUMNNAMES then
varTemp := gconst.fncxmlextract(xmldoc,'Param/SynonymName',varTemp);
OPEN Gencursor FOR 
        select fldp_xml_field xmlfield, fldp_column_name columnname,
               FLDP_LABEL_TEXT "LabelText", FLDP_COLUMN_DISPLAYNAME "ColumnDisplayName",
               to_char(nvl(fldp_key_no,   '-1')) KeyNo
        from trsystem999 
        where fldp_table_synonym = varTemp
        and fldp_record_status not in (10200005,10200006)
        and FLDP_SHOW_YN = 12400001;
 Goto Process_End; 
end if;

if numinfotype =REFGETMENUS then
OPEN Gencursor FOR 
        SELECT MENU_PROGRAM_UNIT "ID",
        MENU_DESCRIPTION "Name"
        from MenuFile
        where MENU_MENU_ID>1000
        and MENU_RECORD_STATUS not in (10200005,10200006)
        and MENU_PROGRAM_UNIT !='null'
        AND MENU_COMPANY_CODE  in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
         --Added by lakshmi, for showing menus based on modules added for license.   
        and exists 
          (select 'x' from  clouddb_master.Trlicense002a 
             inner join clouddb_master.trlicense001a
             on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
          where nvl(Menu_Program_Unit,'NA') = Lmdd_Program_Unit 
          and lmdd_record_Status not in (10200005,10200006)
          and lmdu_record_status not in (10200005,10200006)
          and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051));

 Goto Process_End; 
end if;

if numinfotype =REFGETCURSORDATES then
varTemp := gconst.fncxmlextract(xmldoc,'Param/ReportName',varTemp);
OPEN Gencursor FOR 
        SELECT REPO_COLUMN_NAME "ID",
        REPO_DISPLAY_NAME "Name"
        from trsystem999h
        where REPO_PROGRAM_UNIT=varTemp
        and REPO_COLUMN_TYPE=90400003
        and REPO_RECORD_STATUS not in (10200005,10200006);
Goto Process_End; 
end if;


if numinfotype = REFGETPICKUPCODES then
    varoperation := 'Extracting table fields for the parameter fields';
    vartemp1 := gconst.fncxmlextract(xmldoc,'Param/SynonymName', vartemp1); 
     begin
           numCode := gconst.fncxmlextract(xmldoc,'Param/PickGroup',numCode);
      exception
        when others then
        numCode:=0;
      end;



 OPEN GENCURSOR FOR
 select pick_key_value KeyValue,
                     DECODE(GPIC_DESC_TYPE,1,pick_Short_description ,2,pick_long_description)Description,  
                     pick_key_group KeyGroup, pick_key_number KeyNumber,
                     decode(pick_key_number,0,GPIC_DISPLAY_NAME,'')DisplayName,
               decode(pick_key_number,0,GPIC_PARAMETER_NAME,'')ParamName
             from pickupmaster LEFT OUTER JOIN trsystem999B 
          ON pick_key_group=GPIC_PICK_GROUP 
          AND GPIC_SYNONYM_NAME=vartemp1
          AND GPIC_PICK_GROUP = numCode
          and GPIC_PICK_GROUP > 0
          WHERE GPIC_RECORD_STATUS NOT IN(10200005,10200006)
          and pick_record_status not in (10200005,10200006)
          and ((pick_key_group=301 and vartemp1 != 'USERMASTER' 
              and Pick_key_value in
                (select USCO_COMPANY_CODE from trsystem022a 
                  where Upper(USCO_USER_ID)=varUserID
                   and USCO_RECORD_STATUS not in (10200005,10200006)
                 union select 30100000 from dual))
                 or (pick_key_group!=301))
          and ((pick_key_group=302 and vartemp1 != 'USERMASTER' 
                 and Pick_key_value in
                (select USLO_ENTITY from trsystem022D
                   where Upper(USLO_USER_ID)=varUserID
                     and USLO_RECORD_STATUS not in (10200005,10200006)
                 union 
                 select 30200000 from dual
                 ))or (pick_key_group!=302))             
          order by pick_key_value;
 Goto Process_End; 
 end if;        

if numinfotype=REFGETPICKCODES then        
numCode := gconst.fncxmlextract(xmldoc,'Param/AlertCode',numCode);
--OPEN Gencursor FOR 
--         SELECT  rownum "Rownum",FLDP_LABEL_TEXT "LabelText",FLDP_FIELD_SORT "OrderBy"
--         from trsystem999 inner join trmaster147
--         on fldp_table_synonym=ALRT_PROGRAM_UNIT
--         and ALRT_PICK_CODE=varTemp
--         where FLDP_RECORD_STATUS not in (10200005,10200006)
--         AND ALRT_RECORD_STATUS NOT IN (10200005,10200006);
--        select Column_ID "Rownum",
--            Column_Name "ColumnName", Column_ID "OrderBy",Column_Name "LabelText"
--        from user_tab_cols  inner join trmaster147
--        on table_name=ALRT_PROGRAM_UNIT
--        and  ALRT_RECORD_STATUS NOT IN (10200005,10200006)
--        where ALRT_PICK_CODE=varTemp
--        order by Column_ID;



      SELECT ALRT_PROGRAM_UNIT
      into varTemp
      FROM trmaster147 WHERE ALRT_PICK_CODE = numCode
      and ALRT_RECORD_STATUS NOT IN (10200005, 10200006);

  --    if numCode1 = 39900001 then
      open gencursor for       
       select 
       rownum "Rownum", 
       FLDP_TABLE_SYNONYM "Synonym", 
       FLDP_XML_FIELD "XMLField",
       FLDP_LABEL_TEXT "ColumnDisplayName",
       MENU_DESCRIPTION "ScreenName",
       FLDP_PICK_GROUP "PickGroup",
       FLDP_DATA_TYPE "DataType",
       FLDP_FIELD_SORT "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem999  LEFT OUTER JOIN MENUFILE ON 
             FLDP_TABLE_SYNONYM = MENU_PROGRAM_UNIT            
          where FLDP_TABLE_SYNONYM IN (varTemp)
          and FLDP_SHOW_YN='12400001'
           and nvl(FLDP_TAB_NUMBER,0) > 0           

        UNION
         select 
         rownum "Rownum", 
       VIEW_VIEW_NAME "Synonym", 
       VIEW_COLUMN_NAME "XMLField",
       VIEW_DISPLAY_NAME "ColumnDisplayName",
       NVL(MENU_DESCRIPTION,VIEW_VIEW_NAME) "ScreenName",
       VIEW_PICK_CODE "PickGroup",
       VIEW_DATA_TYPE "DataType",
       VIEW_OREDER_BY "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem999V  LEFT OUTER JOIN MENUFILE ON 
             VIEW_VIEW_NAME = MENU_PROGRAM_UNIT            
          where VIEW_VIEW_NAME IN (varTemp)
          and VIEW_SHOW_YN='12400001'

        UNION
        select 
        rownum "Rownum", 
       LOCL_DATA_NAME "Synonym", 
       LOCL_DESTINATION_COLUMN "XMLField",
       LOCL_DISPLAY_NAME "ColumnDisplayName",
       NVL(MENU_DESCRIPTION,LOCL_DATA_NAME) "ScreenName",
       LOCL_PICK_GROUP "PickGroup",
       --LOCL_DATA_TYPE "DataType"
       pkgreturncursor.fncgetdescription(NVL(LOCL_DATA_TYPE, 90499999), 1) "DataType",
       LOCL_COLUMN_ID "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem968  LEFT OUTER JOIN MENUFILE ON 
             LOCL_DATA_NAME = MENU_PROGRAM_UNIT            
          where LOCL_DATA_NAME IN (varTemp)
          and LOCL_SHOW_YN='12400001'         
          order by 8;  

    Goto Process_End; 
 end if;

 if numinfoType = REFGETLABELTEXT then
      varOperation := 'Extracting 961A Table Details';
      varTemp := gconst.fncXMLExtract(xmldoc,'SystemReference', varTemp); 
      open gencursor for 
        select rownum "Rownum", DUED_XML_FIELD "ColumnName",DUED_LABEL_NAME "LabelName",
        DUED_WHERE_CONDITION "Condition"
        from trsystem961a left outer join trsystem961
        on DUEM_SYSTEM_REFERENCE=DUEC_SYSTEM_REFERECE        
        AND DUED_RECORD_STATUS NOT IN (10200005,10200006)
        WHERE DUEC_SYSTEM_REFERECE=varTemp
        AND DUEM_RECORD_STATUS NOT IN (10200005,10200006);
 GOTO PROCESS_END;
 end if;

if numinfotype=REFGETCURRENCYPAIRS then        
varTemp := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',varTemp);
varTemp1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode',varTemp1);
OPEN Gencursor FOR 
        SELECT  to_char(rownum) "Rownum",
         to_char(CNDI_PICK_CODE) "CurrencyPairCode",
         pkgreturncursor.fncgetdescription(CNDI_PICK_CODE,2) "CurrencyPair",
         to_char(nvl(CNBR_ABSOLUTE_PERCENTAGE,34700001)) "AbsolutePercentage",
         pkgreturncursor.fncgetdescription(nvl(CNBR_ABSOLUTE_PERCENTAGE,34700001),2) "AbsolutePercentageDesc",
         nvl(CNBR_BENCHMARK_RATE,0) "BenchMarkRate"
         from trmaster256 left outer join 
         ( select CNBR_CURRENCY_PAIR, CNBR_BENCHMARK_RATE, CNBR_ABSOLUTE_PERCENTAGE
             from TRMASTER256A
            where CNBR_EFFECTIVE_DATE = 
                (select max(CNBR_EFFECTIVE_DATE) from TRMASTER256A
                   where CNBR_record_Status not in (10200005,10200006)
                   and CNBR_LOCATION_CODE=varTemp1
                   and CNBR_COMPANY_CODE =varTemp
--                   and CNBR_CURRENCY_PAIR=25600021
                   )
             and CNBR_LOCATION_CODE=varTemp1
             and CNBR_COMPANY_CODE =varTemp
--             and CNBR_CURRENCY_PAIR=25600021
             and CNBR_record_Status not in (10200005,10200006))
         on CNDI_PICK_CODE=CNBR_CURRENCY_PAIR
         WHERE CNDI_LOCATION_CODE=decode (CNDI_LOCATION_CODE,30299999,CNDI_LOCATION_CODE,varTemp1)
             and CNDI_COMPANY_CODE =decode (CNDI_COMPANY_CODE,30199999,CNDI_COMPANY_CODE,varTemp)
            and CNDI_RECORD_STATUS not in (10200005,10200006);
Goto Process_End; 
 end if;

 if numinfotype =REFGETCOMPANYLOCATION then
numcode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',numcode);
numcode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode',numcode1);
OPEN Gencursor FOR 
        SELECT 
             CNBR_COMPANY_CODE "CompanyCode",
             CNBR_LOCATION_CODE "LocationCode"
                from TRMASTER256A 
                where CNBR_COMPANY_CODE=numcode
                AND CNBR_LOCATION_CODE=numcode1
                and CNBR_RECORD_STATUS not in (10200005,10200006) ;
 Goto Process_End; 
end if;

if numinfotype=REFGETCURRENCYDETAILS then       
varTemp := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',varTemp);
varTemp1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode',varTemp1);
varTemp2 := gconst.fncxmlextract(xmldoc,'Param/CurrencyPair',varTemp2);
OPEN Gencursor FOR 
SELECT  to_char(rownum) "Rownum",
         to_char(CNBR_CURRENCY_PAIR) "CurrencyPairCode",
         pkgreturncursor.fncgetdescription(CNBR_CURRENCY_PAIR,2) "CurrencyPair",
         CNBR_ABSOLUTE_PERCENTAGE "AbsolutePercentage",
         pkgreturncursor.fncgetdescription(CNBR_ABSOLUTE_PERCENTAGE,2) "AbsolutePercentageDesc",
         CNBR_BENCHMARK_RATE "BenchMarkRate"
         from TRMASTER256A
         WHERE CNBR_LOCATION_CODE=varTemp1
         and CNBR_COMPANY_CODE =varTemp
         and CNBR_CURRENCY_PAIR=varTemp2
         AND CNBR_RECORD_STATUS not in (10200005,10200006);        
--          SELECT  to_char(rownum) "Rownum",
--         to_char(CNDI_PICK_CODE) "CurrencyPairCode",
--         pkgreturncursor.fncgetdescription(CNDI_PICK_CODE,2) "CurrencyPair",
--         to_char(nvl(CNBR_ABSOLUTE_PERCENTAGE,34700001)) "AbsolutePercentage",
--         pkgreturncursor.fncgetdescription(nvl(CNBR_ABSOLUTE_PERCENTAGE,34700001),2) "AbsolutePercentageDesc",
--         nvl(CNBR_BENCHMARK_RATE,0) "BenchMarkRate"
--         from trmaster256 left outer join 
--         ( select CNBR_CURRENCY_PAIR, CNBR_BENCHMARK_RATE, CNBR_ABSOLUTE_PERCENTAGE
--             from TRMASTER256A
--            where CNBR_EFFECTIVE_DATE = 
--                (select max(CNBR_EFFECTIVE_DATE) from TRMASTER256A
--                   where CNBR_record_Status not in (10200005,10200006)
--                   and CNBR_LOCATION_CODE=varTemp1
--                   and CNBR_COMPANY_CODE =varTemp
--                   and CNBR_CURRENCY_PAIR=varTemp2
--                   )
--             and CNBR_LOCATION_CODE=varTemp1
--             and CNBR_COMPANY_CODE =varTemp
--             and CNBR_CURRENCY_PAIR=varTemp2
--             and CNBR_record_Status not in (10200005,10200006))
--         on CNDI_PICK_CODE=CNBR_CURRENCY_PAIR
--         WHERE CNDI_RECORD_STATUS not in (10200005,10200006);
Goto Process_End; 
 end if;

if numinfotype =REFGETALERT then
OPEN Gencursor FOR 
SELECT ALRT_PICK_CODE "ID",
       ALRT_NATUREOF_ALERT NATUREOFALERT,
       ALRT_SHORT_DESCRIPTION "Desc", ALRT_LONG_DESCRIPTION "Name" 
    from trmaster147
    where ALRT_RECORD_STATUS not in (10200005,10200006);
Goto Process_End; 
 end if;

-- if numinfotype=REFGETALERTCODE then        
--varTemp := gconst.fncxmlextract(xmldoc,'Param/AlertCode',varTemp);     
--OPEN GENCURSOR FOR
--         SELECT rownum "Rownum",REPO_DISPLAY_NAME "ColumnName"
--         from trsystem999h inner join trmaster148
--         on REPO_PROGRAM_UNIT=CMPL_REPORT_NAME
--         and CMPL_PICK_CODE=varTemp
--         where REPO_RECORD_STATUS not in (10200005,10200006)
--         AND CMPL_RECORD_STATUS NOT IN (10200005,10200006);
--Goto Process_End; 
-- end if;

-- if numinfoType = REFGETREPORTLIST then
--      varOperation := 'Extracting 962A Table Details';
--      varTemp := gconst.fncXMLExtract(xmldoc,'SystemRef', varTemp); 
--      open gencursor for 
--        select rownum "Rownum", CMPD_XML_FIELD "ColumnName"
--        from trsystem962a left outer join trsystem962
--        on CMPM_SYSTEM_REFERENCE=CMPD_SYSTEM_REFERECE        
--        AND CMPM_RECORD_STATUS NOT IN (10200005,10200006)
--        WHERE CMPD_SYSTEM_REFERECE=varTemp
--        AND CMPD_RECORD_STATUS NOT IN (10200005,10200006);
-- GOTO PROCESS_END;
-- end if;
 if numinfotype =REFGETDATANAMES then
OPEN Gencursor FOR 
    select LOAD_DATA_NAME "ID",LOAD_DATA_NAME "Name" 
    from trsystem969 
    where LOAD_RECORD_STATUS not in (10200005,10200006);
Goto Process_End; 
end if;

if numinfotype =REFGETDATADETAILS then
varTemp := gconst.fncxmlextract(xmldoc,'Param/DataName',varTemp);
OPEN Gencursor FOR 
        SELECT LOAD_PROCESS_WHILE_ERR "ProcessWhileErr",
        LOAD_STAGING_TABLE "StagingTable",
        LOAD_STAGING_TABLE_ARCHIVE "StagingTableArc",
        LOAD_STAGING_TABLE_TWO "StagingTableTwo" 
        from trsystem969
        where LOAD_DATA_NAME=varTemp
        AND LOAD_RECORD_STATUS not in (10200005,10200006);
Goto Process_End; 
end if;

if numinfotype =REFGETDATAUPLOAD then
    varTemp := gconst.fncxmlextract(xmldoc,'Param/DataName',varTemp);
    OPEN Gencursor FOR 
        SELECT to_char(rownum) "Rownum", LOCL_DISPLAY_NAME "DisplayName", LOCL_SHOW_YN "ShowYN", 
               LOCL_TOOL_TIP "ToolTip", LOCL_COLUMN_ID "ColumnID", to_char(nvl(LOCL_PICK_GROUP,0)) "PickGroup",
               LOCL_SOURCE_COLUMN "SourceColumn", LOCL_DESTINATION_COLUMN "DestinationColumn",
               LOCL_MANDATORY_YN "MandatoryYN", LOCL_DEFAULT_YN "DefaultYN", 
               LOCL_DEFAULT_VALUE "DefaultValue", LOCL_DESCRIPTION_TYPE "DescriptionType"
        from trsystem968 left outer join trsystem969
        on LOAD_DATA_NAMe=LOCL_DATA_NAME
        where LOAD_DATA_NAME=varTemp
        and LOAD_RECORD_STATUS not in (10200005,10200006)
        and LOCL_RECORD_STATUS not in (10200005,10200006)
        order by LOCL_COLUMN_ID;
    Goto Process_End; 
end if;

--added by supriya on 03/11/2020
if numinfotype =REFGETSYNONYMSPICKCODES then
    varTemp := gconst.fncxmlextract(xmldoc,'Param/DataName',varTemp);

    if varentity = 'DATAUPLOADCONFIG' and varTemp != 'DATAUPLOADSUBDETAILS' then
        OPEN Gencursor FOR 

            select pick_key_value "KeyValue", pick_long_description "LongDescription", 
                   pick_Short_description "ShortDescription", pick_key_group "KeyGroup"
            from pickupmaster 
            WHERE PICK_KEY_GROUP IN (SELECT distinct(LOCL_PICK_GROUP)
                                     FROM trsystem968
                                     WHERE LOCL_DATA_NAME=varTemp AND nvl(LOCL_PICK_GROUP,0) > 0
                                     and LOCL_RECORD_STATUS not in (10200005,10200006))
            AND PICK_RECORD_STATUS NOT IN (10200005,10200006)
            and pick_key_number !=0
            -- the Below Company and Location Filter was Commneted un commented on 06-Apr-2021 by Manjunath Reddy 
            and PICK_COMPANY_CODE in( select usco_company_code from trsystem022a
                                               where upper(usco_user_id) = upper(varUserid)
                                               AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
            and PICK_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                               where UPPER(USLO_USER_ID) = upper(varUserid)
                                               and USLO_RECORD_STATUS NOT IN (10200005,10200006));
    --        union all
    --        select pick_key_value "KeyValue", pick_long_description "LongDescription", 
    --               pick_Short_description "ShortDescription", pick_key_group "KeyGroup"
    --        from pickupmaster
    --        WHERE PICK_KEY_GROUP = 124
    --        and pick_key_number !=0;
        Goto Process_End; 
    else
        OPEN Gencursor FOR 
        select pick_key_value "KeyValue", pick_long_description "LongDescription", 
               pick_Short_description "ShortDescription", pick_key_group "KeyGroup"
        from pickupmaster 
        WHERE PICK_KEY_GROUP IN (SELECT distinct(FLDP_PICK_GROUP)
                                 FROM trsystem999
                                 WHERE FLDP_TABLE_SYNONYM = varTemp AND nvl(FLDP_PICK_GROUP,0) > 0
                                 and FLDP_RECORD_STATUS not in (10200005,10200006))
        -- the Below Company and Location Filter was Commneted un commented on 06-Apr-2021 by Manjunath Reddy 
            and PICK_COMPANY_CODE in( select usco_company_code from trsystem022a
                                               where upper(usco_user_id) = varUserid
                                               AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
            and PICK_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                               where UPPER(USLO_USER_ID) = varUserid
                                               and USLO_RECORD_STATUS NOT IN (10200005,10200006))
        AND PICK_RECORD_STATUS NOT IN (10200005,10200006)
        and pick_key_number !=0;
    Goto Process_End; 
    end if;
end if;

if numinfotype =REFGETOPTIONTYPE then
varTemp := gconst.fncxmlextract(xmldoc,'Param/PickCode',varTemp);
OPEN Gencursor FOR 
        SELECT 
--        rownum "Rownum",
        OPTI_BUY_SELL "BuySell",
        pkgreturncursor.fncgetdescription(OPTI_BUY_SELL,2) "BuySellDesc",
        OPTI_OPTION_TYPE "CallPut",
        pkgreturncursor.fncgetdescription(OPTI_OPTION_TYPE,2) "CallPutDesc"
                from TRMASTER323A left outer join TRMASTER323
                on OPTI_PICK_CODE=OPIC_PICK_CODE
                where OPIC_PICK_CODE=varTemp;
--                and OPTI_RECORD_STATUS not in (10200005,10200006)
--                and OPTI_RECORD_STATUS not in (10200005,10200006);
 Goto Process_End; 
end if;

if numinfotype=REFGETBUYSELL then 
OPEN Gencursor FOR 
         SELECT  to_char(rownum) "Rownum",
         pkgreturncursor.fncgetdescription(25300001,2) "BuySellDesc",
         '25300001' "BuySell",
         pkgreturncursor.fncgetdescription(32400001,2) "CallPutDesc",
         '32400001' "CallPut"
         from dual;
--         WHERE OPTI_RECORD_STATUS not in (10200005,10200006);
Goto Process_End; 
 end if;
 if numinfotype =REFGETMTMDATA then
OPEN Gencursor FOR 
        SELECT 
             '0' "ASKRate",
             '0' "BIDRate",
             SYSDATE "ContractMonth",
             '30400001' "BaseCurrency",
             pkgreturncursor.fncgetdescription(30400001,2) "BaseCurrencyDesc",
             '30400001' "OtherCurrency",
             pkgreturncursor.fncgetdescription(30400001,2) "OtherCurrencyDesc",
              '0' "ForwardMonth"
                from DUAL ;
 Goto Process_End; 
end if;
if numinfotype = REFGETDAYSTATUS then
--        varTemp := gconst.fncxmlextract(xmldoc,'Param/DayStatus', varTemp);
open gencursor for
        select count(*) "count" from trsystem001A
                where perd_record_status not in (10200005,10200006)
                and perd_day_status in (26400002);
 Goto Process_End; 
end if;


if numinfotype =REFGETPERIODOPENLIST then
  varTemp2 := gconst.fncxmlextract(xmldoc,'Param/FromDate',varTemp2 );
      varTemp3 := gconst.fncxmlextract(xmldoc,'Param/ToDate',varTemp3 ); 
DAYOPENDAYEND.prcDayOpen(varTemp3,30299999,30199999);
OPEN Gencursor FOR

     SELECT DAYO_PROCESS_DATE "ProcessDate",DAYO_BATCH_NUMBER "BatchNumber",DAYO_SERIAL_NUMBER "SerialNumber", DAYO_JOB_MESSAGE "Remarks"
        FROM TRSYSTEM031 WHERE dayo_process_date  BETWEEN varTemp2 AND varTemp3 ;
     --and DAYO_record_status not in (10200005,10200006);
 Goto Process_End;  

end if;

if numinfotype =REFGETPERIODCLOSELIST then
OPEN Gencursor FOR 
        SELECT DAYO_PROCESS_DATE "Process Date",DAYO_BATCH_NUMBER "Batch Number",DAYO_SERIAL_NUMBER "Serial Number"
        FROM TRSYSTEM031 WHERE dayo_process_date  BETWEEN varTemp2 AND varTemp3 ;
        --and DAYO_record_status not in (10200005,10200006);
 Goto Process_End;  

end if;

if numinfotype =REFGETPERIODOPEN then
OPEN Gencursor FOR 
        SELECT 
             PRMC_PERIOD_OPEN "PeriodOpen"
                from TRSYSTEM051 
                where PRMC_RECORD_STATUS not in (10200005,10200006) ;
 Goto Process_End; 
end if;

if numinfotype =REFGETPERIODOPENDATES then
dattemp1 := gconst.fncxmlextract(xmldoc,'Param/DateFrom',dattemp1);
dattemp2 := gconst.fncxmlextract(xmldoc,'Param/DateTo',dattemp2);
OPEN Gencursor FOR 
        SELECT   PERD_DATE_FROM "DateFrom",
        PERD_DATE_TO "DateTo",
        PERD_DAY_STATUS "DayStatus"
        from TRSYSTEM001A 
        where PERD_DATE_FROM=dattemp1
        and PERD_DATE_TO=dattemp2
        AND PERD_SERIAL_NUMBER =(SELECT MAX(PERD_SERIAL_NUMBER) FROM 
            TRSYSTEM001A WHERE PERD_DATE_FROM=dattemp1 and PERD_DATE_TO=dattemp2)      
        and PERD_RECORD_STATUS not in (10200005,10200006);
 Goto Process_End; 
end if;

if numinfotype = REFCHECKPERIODOPEN then

dattemp1 := gconst.fncxmlextract(xmldoc,'Param/InputDate',dattemp1);

OPEN Gencursor FOR 
    select *
    --into numcode
    from trsystem001A
    where perd_day_status in (26400002)
      and dattemp1 between Perd_date_from and perd_date_to
      and perd_record_status not in (10200005,10200006);       
 Goto Process_End; 
end if;

    if numinfotype = REFsecuritypolicy then
--        numcode := gconst.fncxmlextract(xmldoc,'KeyValues/CompanyCode', numcode);
--        numcode1 := gconst.fncxmlextract(xmldoc,'KeyValues/GroupCode',   numcode1);
--    numcode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numcode);
--        numcode1 := gconst.fncxmlextract(xmldoc,'Param/GroupCode',   numcode1);


        varoperation := 'Extracting access control list for ' || numcode1;

        open gencursor for
        select 
--          splc_userid_type useridtype,
--          splc_userid_minimum useridminimum,
--          splc_userid_maximum useridmaximum,
--          splc_userid_content useridcontent,
--          splc_access_terminal accessterminal,
--          splc_access_time accesstime,
--          splc_access_timefrom accesstimefrom,
--          splc_access_timeto accesstimeto,
--          splc_access_dayyn accessdayyn,
--          splc_access_days accessdays,
--          splc_access_weeklyoff accessweeklyoff,
--          splc_access_holiday accessholiday,
--          splc_suspend_type suspendtype,
--          splc_suspend_self suspendself,
--          splc_login_logoffperiod loginlogoffperiod,
--          splc_login_attempts loginattempts,
--          splc_login_timedelay logintimedelay,
--          splc_login_allowtime loginallowtime,
          splc_password_type passwordtype,
          splc_password_change passwordchange,
          splc_password_frequency passwordreuse,
          splc_password_minimum passwordminimum,
          splc_password_maximum passwordmaximum,
          splc_password_content passwordcontent,
          splc_password_alpha passwordalpha,
          splc_password_numeric passwordnumeric,
          splc_password_others passwordothers,
          splc_password_dictionary passworddictionary,
          SPLC_PASSWORD_FREQUENCY passwordfrequency,
          splc_password_reuse passwordreuseattempts
          from securitypolicymaster
          where splc_policy_group in
             (select USER_GROUP_CODE from usermaster  
               where UPPER(user_user_id)=varUserid 
               and user_record_status not in (10200005,10200006))
          and splc_Record_status not in (10200005,10200006);

        goto process_end;
    end if;

    --added by supriya
    if numinfotype = REFGETMATCHINGPASSWORDKEYS then
        varoperation := 'Extracting password key details';
        vartemp := gconst.fncxmlextract(xmldoc,'Param/UserId', vartemp);
        vartemp1 := gconst.fncxmlextract(xmldoc,'Param/PasswordKey', vartemp1);
        numcode := gconst.fncxmlextract(xmldoc,'Param/PasswordFrequency', numcode);
        GLOG.LOG_Write('Extracting password key details ' ||  vartemp || 'pwd ' ||vartemp1 );
        if numcode = 13100001 then 
            open gencursor for
                select PSWD_USER_ID "UserId", PSWD_SERIAL_NUMBER "SerialNumber",
                       PSWD_PASSWORD_KEY "PasswordKey"
                from TRSYSTEM023
                where PSWD_PASSWORD_KEY = vartemp1
                and PSWD_USER_ID = vartemp
                order by PSWD_CREATE_DATE;
            goto process_end;
        else
            open gencursor for
                select PSWD_USER_ID "UserId", PSWD_SERIAL_NUMBER "SerialNumber",
                       PSWD_PASSWORD_KEY "PasswordKey", PSWD_CREATE_DATE "CreateDate"
                from TRSYSTEM023
                where PSWD_USER_ID = vartemp;
            goto process_end;
        end if;
    end if;

    if numinfotype = REFRiskDetails then
        numcode :=gconst.fncxmlextract(xmldoc,'Param/RiskType',numcode);
        varoperation := 'extracting particular risk details';
        open gencursor for
           select 
           pkgreturncursor.fncgetdescription(RISK_COMPANY_CODE,1)  "Company", pkgreturncursor.fncgetdescription(RISK_LOCATION_CODE,1)  "Location",
           pkgreturncursor.fncgetdescription(RISK_MODULE_CODE,1)  "Module", pkgreturncursor.fncgetdescription(RISK_RISK_TYPE,1)  "RiskTypeDesc",
           RISK_RISK_REFERENCE "RiskReference", RISK_EFFECTIVE_DATE "EffectiveDate",
           pkgreturncursor.fncgetdescription(RISK_PRODUCT_CODE,1)  "Portfolio", pkgreturncursor.fncgetdescription(RISK_SUBPRODUCT_CODE,1) "SubPortfolio",
           pkgreturncursor.fncgetdescription(RISK_COUNTER_PARTY,1)  "CounterPartyDesc", pkgreturncursor.fncgetdescription(RISK_CURRENCY_CODE,1)  "Currency",
           pkgreturncursor.fncgetdescription(RISK_CURRENCY_PRODUCT,1)  "CurrencyProductDesc", pkgreturncursor.fncgetdescription(RISK_HEDGE_TRADE,1)  "HedgeTradeDesc",
           pkgreturncursor.fncgetdescription(RISK_SWAP_OUTRIGHT,1)  "SwapOutrightDesc", pkgreturncursor.fncgetdescription(RISK_BUY_SELL,1)  "BuySellDesc",
           pkgreturncursor.fncgetdescription(RISK_DEAL_TYPE,1)  "DealTypeDesc", pkgreturncursor.fncgetdescription(RISK_CROSS_CURRENCY,1)  "CrossCurrencyDesc",
           pkgreturncursor.fncgetdescription(RISK_GAP_FREQUENCY,1)  "GAPFrequencyDesc", pkgreturncursor.fncgetdescription(RISK_LOCKIN_RATETYPE,1)  "LockinRatetypeDesc",
           pkgreturncursor.fncgetdescription(RISK_LOCKINRATE,1)  "LockinrateDesc", pkgreturncursor.fncgetdescription(RISK_ACTION_TAKEN,1)  "ActionTakenDesc",
           pkgreturncursor.fncgetdescription(RISK_SCHEME_CODE,1)  "SchemeCodeDesc", pkgreturncursor.fncgetdescription(RISK_INVESTMENT_CODE,1)  "InvestmentCodeDesc",
           pkgreturncursor.fncgetdescription(RISK_AMC_CODE,1)  "AmcCodeDesc", pkgreturncursor.fncgetdescription(RISK_PLAN_CODE,1)  "PlanCodeDesc",
           pkgreturncursor.fncgetdescription(RISK_OPTION_CODE,1)  "OptionCodeDesc", pkgreturncursor.fncgetdescription(RISK_BROKER_CODE,1)  "BrokerCodeDesc",
           pkgreturncursor.fncgetdescription(RISK_SCHEME_CATEGORY,1)  "SchemeCategoryDesc",
           RISK_COMPANY_CODE "Companycode", RISK_LOCATION_CODE "LocationCode", RISK_MODULE_CODE "ModuleCode",
            RISK_RISK_TYPE "RiskType", RISK_HEDGE_TRADE "HedgeTrade", RISK_BUY_SELL "BuySell", RISK_SWAP_OUTRIGHT "SwapOutright",
            RISK_DEAL_TYPE "DealType", RISK_COUNTER_PARTY "CounterParty", RISK_CURRENCY_CODE "CurrencyCode", RISK_DEALER_ID "DealerId",
            RISK_CROSS_CURRENCY "CrossCurrency", RISK_EMAIL_IDS "EmailIDs",
            RISK_MIN_LIMIT "MinLimit",RISK_MAX_LIMIT "MaxLimit",
            pkgreturncursor.fncgetdescription(RISK_LIMIT_IN,1) "LimitIn",
            RISK_EXPOSURE_TYPE "ExposureType",
            pkgreturncursor.fncgetdescription(RISK_LIMITCALC_EVENT,1) "LimitCalculationEvent",
            pkgreturncursor.fncgetdescription(RISK_RISK_LEVEL,1) "RiskLevel",
            --RISK_LIMIT_USD "LimitUSD", RISK_LIMIT_LOCAL "LimitLocal", RISK_LIMIT_PERCENT "LimitPercent",
            RISK_ACTION_TAKEN "ActionTaken", RISK_STAKE_HOLDER "StakeHolder", 
            RISK_NOOF_DAYS "NoOfDays", RISK_PRODUCT_CODE "ProductCode", RISK_SUBPRODUCT_CODE "SubproductCode",
            RISK_AMC_CODE "AMCCode", RISK_SCHEME_CODE "SchemeCode", RISK_INVESTMENT_CODE "InvestmentCode", RISK_PLAN_CODE "PlanCode",
            RISK_OPTION_CODE "OptionCode", RISK_BROKER_CODE "BrokerCode", RISK_SCHEME_CATEGORY "SchemeCategory", RISK_MAX_LIMIT "LimitFCY",
            RISK_GAP_FREQUENCY "GAPFrequency", RISK_CURRENCY_PRODUCT "CurrencyProduct", RISK_LOCKIN_BENTCHMARK "LockInBenchmark",
            RISK_LOCKIN_RATETYPE "LockInRateType", RISK_LOCKINRATE "LockInRate", RISK_USER_REAMRKS "UserRemarks"
            from riskmaster
            where risk_risk_type=numcode
            and RISK_RECORD_STATUS not in (10200005,10200006)
             and  RISK_COMPANY_CODE in (select usco_company_code from trsystem022a
                       where UPPER(usco_user_id) =varUserid
                        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
          and  RISK_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
         goto process_end;
       end if;

       --modified by ramya on 08/02/2008 to report
    if numinfotype = REFReportMenu then
        varoperation := 'extracting report menu:';

        open gencursor for
        select * from reporttable;
        goto process_end;
     end if;

  -- modified by by manjunath reddy on 05/03/2008 for geting risk params
--    if numinfotype= REFRiskParam then
--
--       varoperation := 'extracting Risk Parameters';
--       numcode :=gconst.fncxmlextract(xmldoc,'KeyValues/RiskType',numcode);
--       vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/DelarId',vartemp);
--       if vartemp !='0' then
--          vartemp1:='and rprm_dealer_id' || vartemp;
--       end if;
--
--       sqlQuery :='select rprm_company_code as companycode,rprm_risk_type as risktype,
--                          rprm_hedge_trade as hedgetrade, rprm_buy_sell as buysell,
--                          rprm_swap_outright as swapoutright,rprm_deal_type as dealtype,
--                          rprm_counter_party as counterparty,rprm_currency_code as currencycode,
--                          rprm_dealer_id as dealerid , rprm_cross_currency CrossCurrency,
--                          rprm_gross_net grossnet,rprm_fluct_allowed as fluctallowed,
--                          rprm_fluct_ceo as fluctceo,
--                           RPRM_LIMIT_IN_USD as limitinusd,
--                            RPRM_LIMIT_IN_LOCAL as limitinlocal,
--                             RPRM_LIMIT_IN_PERCENT as limitinpercent,
--                             RPRM_LIMIT_INFCY as limitinFCY
--
--                     from riskparameter
--                    where rprm_risk_type =' || numcode || vartemp1;
--
--       open gencursor for sqlquery;
--       goto process_end;
--    end if;

--ADDED BY SUPRIYA
 if numinfotype= REFRiskParam then
    varOperation := 'Extracting RISKTYPE and EFFECTIVEDATE Information for RiskParameters';    
    numcode := gconst.fncXMLExtract(xmldoc,'Param/RiskType', numcode); 
    DatTemp := gconst.fncxmlextract(xmldoc,'Param/EffectiveDate',  DatTemp);

    if varentity = 'RISKPARAMETER' then
        open gencursor for
            SELECT RPRM_RISK_REFERENCE "RiskReference"
            FROM RISKPARAMETER 
            where RPRM_RISK_TYPE = numcode
            and RPRM_EFFECTIVE_DATE = dattemp;
        goto process_end;
    else
        open gencursor for
            select RPRM_RISK_REFERENCE "RiskReference", rprm_company_code "CompanyCode",
            RPRM_LOCATION_CODE "LocationCode", rprm_risk_type "RiskType",
            rprm_counter_party "CounterParty", RPRM_PRODUCT_CODE	"ProductCode",
            RPRM_SUBPRODUCT_CODE	"SubproductCode", rprm_gross_net "GrossNet",
            rprm_currency_code "CurrencyCode", RPRM_CURRENCY_PRODUCT	"CurrencyProduct", 
            rprm_hedge_trade "HedgeTrade", rprm_swap_outright "SwapOutright", 
            rprm_buy_sell "BuySell", rprm_deal_type "DealType", 
            rprm_dealer_id "DealerId", rprm_cross_currency "CrossCurrency",
            RPRM_RATE_TYPE	"RateType", --RPRM_AMC_CODE	"AmcCode",
            --RPRM_SCHEME_CODE	"SchemeCode", RPRM_INVESTMENT_CODE	"InvestmentCode",
            --RPRM_SCHEME_CATEGORY	"SchemeCategory", RPRM_PLAN_CODE	"PlanCode",
            --RPRM_OPTION_CODE	"OptionCode", 
            RPRM_GAP_FREQUENCY	"GapFrequency", RPRM_EXPOSURE_TYPE "ExposureType",
            RPRM_RISK_LEVEL "RiskLevel", RPRM_LIMITCALC_EVENT "LimitCalcEevent",
            RPRM_LIMIT_IN "LimitIN", RPRM_BROKER_CODE	"BrokerCode",
            RPRM_Min_LIMIT "MINLimit", RPRM_MAX_LIMIT "MAX_Limit",
            RPRM_LOCKIN_BENTCHMARK	"LockinBentchmark",
            RPRM_LOCKIN_RATETYPE "LockinRatetype", RPRM_LOCKINRATE "Lockinrate"
            from RISKPARAMETER where RPRM_RISK_TYPE = numcode 
            and RPRM_RISK_REFERENCE= (select  max(RPRM_RISK_REFERENCE)from RISKPARAMETER
            where RPRM_RISK_TYPE = numcode and RPRM_EFFECTIVE_DATE = 
            (select max(RPRM_EFFECTIVE_DATE) from RISKPARAMETER
            where  RPRM_RISK_TYPE = numcode
            and RPRM_EFFECTIVE_DATE <=DatTemp
            and RPRM_record_status not in (10200005,10200006))
            and RPRM_record_status not in (10200005,10200006))
            and RPRM_record_status not in (10200005,10200006);
            --commented by supriya as we are not saving company code and location code values in risk parameters, 
            --we are maintaining the value for company code and location code as 12400001/2 which signifies 
            --the field is editable or not in risk master
            --             and  RPRM_COMPANY_CODE in (select usco_company_code from trsystem022a
            --                       where UPPER(usco_user_id) =varUserid
            --                        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
            --            and  RPRM_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
            --                                           where UPPER(USLO_USER_ID) = varUserid
            --                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)); 

        goto process_end;
    end if;
 end if;

 if numInfoType = REFTRADEDEALS then
        varOperation := 'Extracting Trade Register for Hedging';

     --


      vartemp  := varQuery ||'//Param/BuySell';
      numcode := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);
      vartemp  := varQuery ||'//Param/CompanyCode';
      numcode1 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      vartemp  := varQuery ||'//Param/LocationCode';
      numcode2 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      vartemp  := varQuery ||'//Param/Portfolio';
      numcode3 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      vartemp  := varQuery ||'//Param/Subportfolio';
      numcode4 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      begin
          vartemp  := varQuery ||'//Param/Bank';
          numcode5 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);
      exception
        when others then
        numcode5:=30699999;
      end;

      vartemp  := varQuery ||'//Param/Currency';
      numcode6 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      vartemp  := varQuery ||'//Param/QuoteCurrency';
      numcode7 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      vartemp  := varQuery ||'//Param/WritingIn';
      numcode8 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      for cur in (select  LINK_CONSIDER_COMPANY , 
                          LINK_CONSIDER_LOCATION , LINK_CONSIDER_PORTFOLIO, 
                          LINK_CONSIDER_SUBPORTOLIO , LINK_CONSIDER_BANK
                          from TRCONFIG001
                          where LINK_PROGRAM_UNIT='HEDGEDEALREGISTER'
                          and link_record_status not in (10200005,10200006))
      loop
         if cur.LINK_CONSIDER_COMPANY=12400002 then
            numcode1:=30199999;
         end if;
         if cur.LINK_CONSIDER_LOCATION=12400002 then
            numcode2:=30299999;
         end if;
         if cur.LINK_CONSIDER_PORTFOLIO=12400002 then
            numcode3:=33399999;
         end if;
         if cur.LINK_CONSIDER_SUBPORTOLIO=12400002 then
            numcode4:=33899999;
         end if;
         if cur.LINK_CONSIDER_BANK=12400002 then
            numcode5:=30699999;
         end if;
      end loop;

    Begin
      varTemp := GConst.fncXMLExtract(xmldoc, '//Param/DealNumber', varTemp,GConst.TYPENODEPATH);
    Exception
      when others then
        varTemp := null;
    End;

    Begin
      dattemp := GConst.fncXMLExtract(xmldoc, '//Param/ExecuteDate', varTemp,GConst.TYPENODEPATH);
    Exception
      when others then
      dattemp := null;
    End;

    select pkgforexprocess.fncExposureCovered('01-Jan-2018',dattemp)
       into numfcy 
       from dual;
--    open gencursor for
--    select rownum "Rownum",  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "ProductDescription", 
--          trad_user_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT, 1) "TransType", 
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
--          NVL((select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference),trad_maturity_date) "ContractMaturity",
--          trad_maturity_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "Currency",
--          trad_trade_fcy  "BillAmount",
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) - 
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_record_status between 10200001 and 10200004)) "UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_deal_number = varTemp
--             and hedg_record_status between 10200001 and 10200004) "HedgingAmount",  
--          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
--          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
--          trad_trade_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as "Company",
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,trad_record_status "RecordStatus",1 "SerialNumber"
--          from TradeRegister a
--          where trad_import_export in
--          (select erel_entity_relation
--             from trsystem008
--             where erel_main_entity =
--             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--             and erel_relation_type = 259)
--          and trad_process_complete = GConst.OPTIONNO
--          and trad_Company_Code in
--          (select usco_company_code from trsystem022a
--           where usco_user_id = varUserid)
--          and trad_record_status not in (10200005,10200006)
--          and trad_company_code = decode(numcode1,30199999,trad_company_code,numcode1)
--          and trad_Location_code = decode(numcode2,30299999,trad_Location_code,numcode2)
--          and TRAD_PRODUCT_CATEGORY = decode(numcode3,33399999,TRAD_PRODUCT_CATEGORY,numcode3)
--          and TRAD_SUBPRODUCT_CODE = decode(numcode4,33899999,TRAD_SUBPRODUCT_CODE,numcode4)
--          and TRAD_LOCAL_BANK = decode(numcode5,30699999,TRAD_LOCAL_BANK,numcode5)
--          and trad_trade_currency=numcode6;
--          --and trad_import_export not in (25900053,25900059)
open gencursor for
 with cte as  (select  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) ProductDescription, 
          trad_user_reference as BillReference,
          pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT, 1) TransType, 
          pkgreturncursor.fncgetdescription(trad_local_bank,2) as BankName,
          NVL((select b.trad_maturity_date
            from TradeRegister b
            where a.trad_reverse_reference = b.trad_trade_reference),trad_maturity_date) ContractMaturity,
          trad_maturity_date BillMaturity,
          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as Currency,
          trad_trade_fcy  BillAmount,
          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) OutStanding,
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_record_status between 10200001 and 10200004) CoveredAmount,
          nvl(pkgReportprograms.fncGetCoverAmount(  TRAD_TRADE_REFERENCE,null),0)CoveredAmount,
          0 HedgingAmount,
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_deal_number = varTemp
--             and hedg_record_status between 10200001 and 10200004) HedgingAmount,  
          trad_trade_rate BenchMarkRate, trad_trade_inr RupeeAmount, 
          trad_trade_reference TradeReference,trad_reference_date as ReferenceDate, 
          trad_trade_remarks BankReference,
          pkgreturncursor.fncgetdescription(trad_company_code,2) as Company,
          trad_local_bank BankCode,trad_company_code CompanyCode,
          trad_trade_currency currencyCode ,trad_record_status RecordStatus,1 SerialNumber
          from TradeRegister a 
          inner join trmaster259
            on TRAD_IMPORT_EXPORT=EXTY_PICK_CODE
            and exty_record_Status not in (10200005,1020006)
          where 
--          trad_import_export in
--          (select erel_entity_relation
--             from trsystem008
--             where erel_main_entity =
--             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--             and erel_relation_type = 259)
            ((numCode = 25300001 and EXTY_INFLOW_OUTFLOW =17300001) or
            (numCode = 25300002 and EXTY_INFLOW_OUTFLOW =17300002) or
            (numCode = 25399999 and EXTY_INFLOW_OUTFLOW = EXTY_INFLOW_OUTFLOW))
          and trad_process_complete = GConst.OPTIONNO
--          and trad_Company_Code in
--          (select usco_company_code from trsystem022a
--           where usco_user_id = varUserid)
          and trad_record_status not in (10200005,10200006)
          and trad_company_code = decode(numcode1,30199999,trad_company_code,numcode1)
          and trad_Location_code = decode(numcode2,30299999,trad_Location_code,numcode2)
          and TRAD_PRODUCT_CATEGORY = decode(numcode3,33399999,TRAD_PRODUCT_CATEGORY,numcode3)
          and TRAD_SUBPRODUCT_CODE = decode(numcode4,33899999,TRAD_SUBPRODUCT_CODE,numcode4)
          and TRAD_LOCAL_BANK = decode(numcode5,30699999,TRAD_LOCAL_BANK,numcode5)
          -- Added By manjunath Reddy for Indirect Quote
          and trad_trade_currency= (case when Numcode8=38300001 then numcode6 else numcode7 end)
          and trad_company_code in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
          and  TRAD_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                       where UPPER(USLO_USER_ID) = varUserid
                       and USLO_RECORD_STATUS NOT IN (10200005,10200006))
          and trad_maturity_date >= dattemp 
          )
          select rownum "Rownum",  ProductDescription "ProductDescription", 
          BillReference as "BillReference",   TransType "TransType",BankName as "BankName",
          ContractMaturity as "ContractMaturity", BillMaturity as "BillMaturity",Currency as "Currency",
          BillAmount as  "BillAmount",OutStanding as "OutStanding",CoveredAmount as "CoveredAmount",
          (case when OutStanding<CoveredAmount then 0
          else (OutStanding - CoveredAmount) end) "UncoveredAmount",
          (case when varTemp is null then 
            (case when OutStanding<CoveredAmount then 0
                  else (OutStanding - CoveredAmount) end)
                else HedgingAmount end )"HedgingAmount",  
          BenchMarkRate "BenchMarkRate", RupeeAmount "RupeeAmount", 
          TradeReference "TradeReference",ReferenceDate as "ReferenceDate", 
          BankReference "BankReference",Company as "Company",
          BankCode ,CompanyCode ,
          currencyCode  ,RecordStatus "RecordStatus",SerialNumber "SerialNumber"
          from cte
          where ((numUserActionType in(101,102)
                 and OutStanding>0
                 and (OutStanding-CoveredAmount)>0) 
                --                 or (numUserActionType in(103,104)
--                 and ((HedgingAmount>0)
--                  or ((OutStanding>0) 
--                     and ((OutStanding-CoveredAmount)>0))) 
--                 )--commented by supriya, according to reddy sir input, we are not allowing to link new deals in edit load, hence need not 
--                   to pick all exposures in eidt load and save action
                 or (numUserActionType not in (101,102) --not in (101,102,103,104)
                 and HedgingAmount>0));

        Goto Process_End;
   End if;         



if numInfoType = REFREPORTGROUPS then
    varOperation := 'Extracting Cursor for Report Groups';
    varTemp :=  GConst.fncXMLExtract(xmlDoc, '//Param/ReportID', varTemp,GConst.TYPENODEPATH);
    Open GenCursor for
             select ExtractValue(value(t), '//GroupType') GroupType,
                    (CASE WHEN ExtractValue(value(t), '//GroupType')<=30700100 THEN
                       pick_long_description 
                       ELSE ExtractValue(value(t), '//FieldName') end) GroupName, fldp_column_name FieldName,
                    ExtractValue(value(t), '//Group') GroupYesNO,
                    ExtractValue(value(t), '//RestrictFrom') RestrictFrom,
                    ExtractValue(value(t), '//RestrictTo') RestrictTo,
                    nvl(REPM_REPORT_TYPE,90700002) ReportType,
                     REPM_REPORT_FILE ReportName
               from Clouddb_master.trsystem003 a,trmaster001, trsystem999,
                    table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
              where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
                and fldp_table_synonym = ExtractValue(value(t), '//TableName')
                and fldp_xml_field = ExtractValue(value(t), '//FieldName')
                and repm_report_id = varTemp;
   Goto Process_end;
  end if;

if numinfotype =REFGETGRIDCONFIGDETAILS then
begin
varTemp1 := gconst.fncxmlextract(xmldoc,'Param/CursorName', varTemp1);
exception   when others then
         varTemp1:=null;
end ;
begin
varTemp2 := gconst.fncxmlextract(xmldoc,'Param/CursorNumber', varTemp2);
exception   when others then
         varTemp2:=null;
end ;
--begin
--varTemp3 := gconst.fncxmlextract(xmldoc,'Param/ColumnName', varTemp3);
--exception   when others then
--         varTemp3:=null;
--end ;
OPEN Gencursor FOR 
        SELECT to_char(rownum) "Rownum",
             GRID_DISPLAY_NAME "DisplayName",
             GRID_DISPLAY_ORDER "DisplayOrder",
             TO_CHAR(NVL(GRID_DISPLAY_YN,12400001)) "DisplayYN",
             PKGRETURNCURSOR.FNCGETDESCRIPTION(NVL(GRID_DISPLAY_YN,12400001),1) "DisplayYNDesc",
             TO_CHAR(NVL(GRID_EDITABLE_YN,12400001)) "EditableYN",
             PKGRETURNCURSOR.FNCGETDESCRIPTION(NVL(GRID_EDITABLE_YN,12400001),1) "EditableYNDesc",
             GRID_PICK_GROUP "PicGroup",
             GRID_COLUMN_NAME "ColumnName",
             GRID_AGGREGATE_FUNCTION "AggregateFunction",
             PKGRETURNCURSOR.FNCGETDESCRIPTION(GRID_AGGREGATE_FUNCTION,2) "AggregateFunctionDesc",
            GRID_AGGREGATE_YN "AggregateYN",
            PKGRETURNCURSOR.FNCGETDESCRIPTION(NVL(GRID_AGGREGATE_YN,12400001),1) "AggregateYNDesc",
            GRID_COLUMN_TYPE "ColumnType", 
            PKGRETURNCURSOR.FNCGETDESCRIPTION(GRID_COLUMN_TYPE,1) "ColumnTypeDesc",
            GRID_COLUMN_WIDTH "ColumnWidth",
            GRID_DECIMAL_SCALE "DecimalScale",
            GRID_DEFAULT_VALUE "DefaultValue",
            GRID_SORT_ORDER "SortOrder",
            GRID_TEXT_LENGTH "TextLength"
            from TRSYSTEM999C
            where GRID_CURSOR_NAME = varTemp1
            AND GRID_CURSOR_NUMBER = varTemp2
--            AND GRID_COLUMN_NAME = varTemp3
            AND GRID_RECORD_STATUS NOT IN (10200005,10200006);
 Goto Process_End; 
end if;

 if numInfoType = REFREPORTCODES then

    varTemp :=  GConst.fncXMLExtract(xmlDoc, '//Param/ReportID', varTemp,GConst.TYPENODEPATH);
    numCode :=  to_number(GConst.fncXMLExtract(xmlDoc, '//Param/GroupType', varTemp,GConst.TYPENODEPATH));
    Glog.log_write('varTemp - ' || varTemp || ' numCode - ' || numCode);
    if (numcode =30700301) then --checking for the Group by Fields
      varOperation := 'Extracting parameters from the file';

        Open Gencursor For
      select fldp_column_name fieldname,
      Pkgreturncursor.Fncgetdescription(B.Grouptype,2) Name,
      FieldName ColumanName
        from trsystem999 a,
             (select ExtractValue(value(t), '//TableName')TableName,
                     ExtractValue(value(t), '//FieldName') FieldName,
                      ExtractValue(value(t), '//GroupType') GroupType
                from trsystem003 a,
                     table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
               where to_number(ExtractValue(value(t), '//Group')) = gconst.optionyes
                 and a.repm_report_id = varTemp
             ) b
       where a.fldp_table_synonym = b.TableName
         And A.Fldp_Xml_Field = B.Fieldname;
    Else
      varOperation := 'Extracting cursor for Report Codes';
      varOperation := 'Extracting parameters from the file';

      select ExtractValue(value(t), '//TableName') TableName,
             ExtractValue(value(t), '//FieldName') FieldName into varValue, varDummy
        from trsystem003 a,
             table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
       where to_number(ExtractValue(value(t), '//GroupType')) = numCode
         and a.repm_report_id = varTemp;
     Glog.log_write('varValue - ' ||varValue|| ' varDummy - ' || varDummy);
      select fldp_column_name into varDummy
        from trsystem999
       where fldp_table_synonym = varValue
         and fldp_xml_field = varDummy;
     Glog.log_write('varDummy - ' ||varDummy);
      varOperation := 'Building Query for the cursor';
      --modified by kumar.h 0n 01-04-09
      if varTemp='COMPLETEDELIVARYOFHEDGE' and numcode =30700008 then
         varQuery := 'select distinct ' || varDummy || ', decode(pick_key_value,25300001,'||'''Import'''||','||'''Export'''||')';
      else
         varQuery := 'select distinct ' || varDummy || ', pick_short_description';
      end if;
      Glog.log_write('varValue - ' ||varValue|| ' varDummy - ' || varDummy);
      Glog.log_write('varQuery - ' || varQuery);
         varQuery := varQuery || ' from trmaster001, ' || varValue;
         varQuery := varQuery || ' where pick_key_value = ' || varDummy;
--                DELETE FROM TEMP;COMMIT;
--     insert into temp values(varQuery,numInfoType);commit;
        Glog.log_write('varQuery - ' ||varQuery);
      open GenCursor for varQuery;
    end if;
      Goto Process_end;
  end if;

if numInfoType = REFDEALS then
   varOperation := 'Extracting Cursor for Holding Rate';

--        Begin
--        vartemp := gconst.fncxmlextract(xmldoc,'Param/DealNumber', vartemp);
--        Exception 
--            when others then 
--            vartemp := '0';        
--        end;
--        
--        Begin
--        numcode := gconst.fncxmlextract(xmldoc,'Param/DealSerial', numcode);
--        Exception 
--            when others then 
--            numcode := 0;        
--        end;

    Open GenCursor for
    SELECT  rownum "Rownum",
            DEAL_DEALER_NAME "DealerId",
            fncgetdescription(deal_Company_code,2) "Company",
            fncgetdescription(DEAL_LOCATION_CODE,2) "Location",
            deal_deal_number "DealNumber",	
            ROUND(NVL(deal_spot_rate,0),4) "SpotRate",
            ROUND(NVL(deal_forward_rate,0),4) "ForwardRate",
            ROUND (NVL(deal_margin_rate,0),4) "MarginRate",
            Deal_exchange_rate "ExchangeRate",
            (case when CNDI_OUTSTANDING_TRACKING=38300001 
                then deal_base_amount else deal_other_amount end) "BaseAmount",
            pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,1, 1, sysdate) "OutStandingAmount",
            ((case when CNDI_OUTSTANDING_TRACKING=38300001 
                then deal_base_amount else deal_other_amount end)-
                NVL((pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,1, 1, sysdate)),0)) "AdjustedAmount",            
            deal_amount_local "AmountLocal",
            (case when CNDI_OUTSTANDING_TRACKING=38300001 
                then deal_other_amount else deal_base_amount end) "OtherAmount",
            Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BusinessUnit",
            Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "ProfitCentre",		
			      fncgetdescription(deal_buy_sell,1) "BuySell",
            fncgetdescription(deal_counter_party,2) "CounterParty",
            DEAL_EXECUTE_DATE "ExecuteDate",
            Deal_maturity_from "ExpiryDate",
            deal_maturity_date "DeliveryDate",
			      fncgetdescription(deal_base_currency,2) "BaseCurrency",
            fncgetdescription(deal_other_currency,2) "OtherCurrency",
            deal_serial_number "SerialNumber",
            Deal_Hedge_Trade "HedgeTrade",
            fncgetdescription(deal_swap_outright,1) "SwapOutright",
            fncgetdescription(deal_deal_type,1) "DealType",
            deal_time_stamp "DealTimeStamp",
            (SELECT user_user_name 
              FROM usermaster 
              WHERE user_user_id=deal_user_id
              and user_record_status not in (10200005,10200006)) "UserName",
              (SELECT user_user_name 
              FROM usermaster 
              WHERE user_user_id=DEAL_DEALER_NAME
              and user_record_status not in (10200005,10200006)) "DealerName",
            deal_other_currency "OtherCurrencyCode",
            deal_dealer_remarks "Remarks",
            deal_record_status "RecordStatus",
            deal_counter_party "Counterpartycode",
            deal_base_currency "BaseCurrencyCode",
            Deal_buy_sell AS "BuySellCode",
            Deal_Bank_Reference "BankReference",
            fncgetdescription(Deal_Hedge_Trade,2) "HedgeTradeDesc",
            deal_Company_code "CompanyCode", DEAL_LOCATION_CODE "LocationCode",
			CNDI_OUTSTANDING_TRACKING "WritingInCode"
          from trtran001 inner Join trmaster306 
          on deal_counter_party = LBNK_PICK_CODE 
          and LBNK_RECORD_STATUS not in (10200005,10200006)
          inner join trmaster256
          on CNDI_OTHER_CURRENCY = deal_other_currency and CNDI_BASE_CURRENCY = deal_base_currency
          where deal_process_complete = GConst.OPTIONNO
          and DEAL_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
         and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--          AND deal_deal_number=decode(vartemp,'0',deal_deal_number,vartemp)
--          AND deal_serial_number=decode(numcode,0,deal_serial_number,numcode)
--          AND deal_Company_Code    IN
--          ( SELECT usco_company_code FROM trsystem022a WHERE usco_user_id =varUserid)
          AND deal_record_status not in (10200005,10200006); ---as per client requirment we are considerd only confirm deal
   Goto Process_End;
  End if;


if numInfoType = REFPARTICULARDEAL then
    varOperation := 'Extracting Cursor for Holding Rate';


     vartemp := Gconst.fncXMLExtract(xmldoc,'Param/DealNumber',vartemp);
    -- Commented By Manjunath reddy 
    -- Particular deal picking should not depending on the Serial Number
    -- numcode := Gconst.fncXMLExtract(xmldoc,'Param/DealSerial',numcode);

      Open GenCursor for
          select rownum "Rownum",DEAL_DEAL_NUMBER "DealNumber",
                 Pkgreturncursor.Fncgetdescription(DEAL_COMPANY_CODE,2) "Company",
                 Pkgreturncursor.fncgetdescription(deal_base_currency,2) "BaseCurrency", 
                 Pkgreturncursor.fncgetdescription(deal_other_currency,2) "OtherCurrency",
                 Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BusinessUnit",
                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "ProfitCentre",
                 Deal_Backup_Deal "BusinessUnitCode",
                 Deal_Init_Code "ProfitCentreCode",
                 Pkgreturncursor.fncgetdescription(deal_counter_party,1) "CounterParty",
                 Pkgreturncursor.fncgetdescription(deal_buy_sell,1) "BuySell",
                 (case when CNDI_OUTSTANDING_TRACKING=38300001 
                    then deal_base_amount else deal_other_amount end) "BaseAmount",
                pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,1, 1, sysdate) "OutStandingAmount",
                ((case when CNDI_OUTSTANDING_TRACKING=38300001 
                    then deal_base_amount else deal_other_amount end)-
                    NVL((pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,1, 1, sysdate)),0)) "AdjustedAmount",            
                deal_amount_local "AmountLocal",
                (case when CNDI_OUTSTANDING_TRACKING=38300001 
                    then deal_other_amount else deal_base_amount end) "OtherAmount",
                 deal_spot_rate "SpotRate",
                 deal_forward_rate "ForwardRate",
                 Deal_margin_rate "MarginRate",
                 deal_exchange_rate "AllinRate",
                 Deal_execute_date "DealExecuteDate",
                 deal_maturity_date "MaturityDate",
                 Deal_maturity_from "MaturityFrom",
                 --Deal_maturity_from "ExpiryDate",
                 --deal_maturity_date "DeliveryDate",
                 deal_time_stamp "DealTimeStamp",deal_hedge_trade "HedgeTrade",
                 fncgetdescription(deal_hedge_trade,1) "HedgeTradeDesc",
                 Pkgreturncursor.fncgetdescription(deal_swap_outright,1) "SwapOutright", 
                 Pkgreturncursor.fncgetdescription(deal_deal_type,1) "DealType",                 
                 --deal_local_rate "LocalRate",  
                 Pkgreturncursor.Fncgetdescription(DEAL_LOCATION_CODE,2) "Location",
                 (select user_user_name from usermaster where user_user_id=deal_user_id
                 and user_record_status not in (10200005,10200006)) "UserName",
                 deal_other_currency "OtherCurrencyCode", deal_buy_sell "BuySellCode",deal_base_currency "BaseCurrencyCode", 
                 deal_serial_number "SerialNumber",
                 --nvl(deal_holding_rate,0) "HoldingRate",deal_holding_rate1 "HoldingRate1",
                 deal_dealer_remarks "Remarks", 
                 deal_record_status "RecordStatus",
                 DEAL_LOCATION_CODE "LocationCode",
                 Deal_Bank_Reference "BankReference",
                 deal_counter_party "CounterpartyCode",
                 CNDI_OUTSTANDING_TRACKING "WritingInCode",
                 LBNK_VOUCHER_PASS "VoucherPass",
                 Pkgreturncursor.fncgetdescription(DEAL_CURRENCY_PAIR,1) "CurrencyPair",
                 DEAL_COMPANY_CODE "CompanyCode"
          from trtran001 inner Join trmaster306 
          on deal_counter_party = LBNK_PICK_CODE 
          and LBNK_RECORD_STATUS not in (10200005,10200006)
          inner join trmaster256
          on CNDI_OTHER_CURRENCY = deal_other_currency and CNDI_BASE_CURRENCY = deal_base_currency
          where deal_deal_number=vartemp
          and deal_Record_status not in (10200005,10200006)
          and DEAL_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
          and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
      --      and deal_serial_number=numcode;
--          deal_record_status in (gconst.STATUSPOSTCANCEL);

      Goto Process_End;
  end if;


if numInfoType = REFPARTICULAREXPOSURES then
    varOperation := 'Extracting Cursor for Holding Rate';
     vartemp := Gconst.fncXMLExtract(xmldoc,'Param/ReferenceNumber',vartemp);
Open GenCursor for
    SELECT rownum "Rownum",Pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) "Company", TRAD_TRADE_REFERENCE, TRAD_REVERSE_REFERENCE, 
         Pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) "ImportExportDesc",TRAD_IMPORT_EXPORT "ImportExport",
         Pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,1) "LocalBankDesc",TRAD_LOCAL_BANK "LocalBank",
         TRAD_REFERENCE_DATE "ReferenceDate",Pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,1) "TradeCurrencyDesc",TRAD_TRADE_CURRENCY "TradeCurrency",
        Pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CODE,1) "ProductCode", TRAD_PRODUCT_DESCRIPTION, TRAD_TRADE_FCY, TRAD_TRADE_RATE,
        TRAD_TRADE_INR, TRAD_PERIOD_CODE, TRAD_TRADE_PERIOD, Pkgreturncursor.fncgetdescription(TRAD_TENOR_CODE,1) "TenorCode", TRAD_TENOR_PERIOD "TenorPeriod",
        TRAD_MATURITY_FROM, TRAD_MATURITY_DATE "MaturityDate",TRAD_PRODUCT_RATE, 
        TRAD_FORWARD_RATE, TRAD_MARGIN_RATE, TRAD_SPOT_RATE,
        Pkgreturncursor.fncgetdescription(TRAD_SUBPRODUCT_CODE,1) "SubProductCode", Pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,1) "ProductCategory",
        Pkgreturncursor.fncgetdescription(TRAD_LOCATION_CODE,1) "Location",
        Pkgreturncursor.fncgetdescription(TRAD_LOCAL_CURRENCY,1) "LocalCurrencyDesc" ,TRAD_LOCAL_CURRENCY "LocalCurrency" ,
        pkgforexprocess.fncGetOutstandingTransaction(TRAD_TRADE_REFERENCE, TRAD_SERIAL_NUMBER,21, 1, sysdate) "OutStandingAmount",
        TRAD_RATE_TYPE "RateType",Pkgreturncursor.fncgetdescription(TRAD_RATE_TYPE,1) "RateTypeDesc"
     FROM TRTRAN002  inner Join trmaster306 
          on TRAD_LOCAL_BANK = LBNK_PICK_CODE 
          and LBNK_RECORD_STATUS not in (10200005,10200006)
          inner join trmaster256
          on CNDI_OTHER_CURRENCY = TRAD_LOCAL_CURRENCY 
          and CNDI_BASE_CURRENCY = TRAD_TRADE_CURRENCY
          where TRAD_TRADE_REFERENCE=vartemp
          and TRAD_RECORD_STATUS not in (10200005,10200006)
          and TRAD_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
          and TRAD_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));

Goto Process_End;
  end if;      



if numInfoType = REFEXPOSURES then
    varOperation := 'Extracting All Exposures';
Open GenCursor for
  SELECT rownum "Rownum",Pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) "Company", TRAD_TRADE_REFERENCE, TRAD_REVERSE_REFERENCE, 
         Pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) "ImportExportDesc",TRAD_IMPORT_EXPORT "ImportExport",
         Pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,1) "LocalBankDesc",TRAD_LOCAL_BANK "LocalBank",
         TRAD_REFERENCE_DATE "ReferenceDate",Pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,1) "TradeCurrencyDesc",TRAD_TRADE_CURRENCY "TradeCurrency",
        Pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CODE,1) "ProductCode", TRAD_PRODUCT_DESCRIPTION, TRAD_TRADE_FCY, TRAD_TRADE_RATE,
        TRAD_TRADE_INR, TRAD_PERIOD_CODE, TRAD_TRADE_PERIOD, Pkgreturncursor.fncgetdescription(TRAD_TENOR_CODE,1) "TenorCode", TRAD_TENOR_PERIOD "TenorPeriod",
        TRAD_MATURITY_FROM, TRAD_MATURITY_DATE "MaturityDate",TRAD_PRODUCT_RATE, 
        TRAD_FORWARD_RATE, TRAD_MARGIN_RATE, TRAD_SPOT_RATE,
        Pkgreturncursor.fncgetdescription(TRAD_SUBPRODUCT_CODE,1) "SubProductCode", Pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,1) "ProductCategory",
        Pkgreturncursor.fncgetdescription(TRAD_LOCATION_CODE,1) "Location",
        Pkgreturncursor.fncgetdescription(TRAD_LOCAL_CURRENCY,1) "LocalCurrencyDesc" ,TRAD_LOCAL_CURRENCY "LocalCurrency" ,
        pkgforexprocess.fncGetOutstandingTransaction(TRAD_TRADE_REFERENCE, TRAD_SERIAL_NUMBER,21, 1, sysdate) "OutStandingAmount",
        TRAD_RATE_TYPE "RateType",Pkgreturncursor.fncgetdescription(TRAD_RATE_TYPE,1) "RateTypeDesc"
     FROM TRTRAN002  inner Join trmaster306 
          on TRAD_LOCAL_BANK = LBNK_PICK_CODE 
          and LBNK_RECORD_STATUS not in (10200005,10200006)
          inner join trmaster256
          on CNDI_OTHER_CURRENCY = TRAD_LOCAL_CURRENCY 
          and CNDI_BASE_CURRENCY = TRAD_TRADE_CURRENCY
             where TRAD_PROCESS_COMPLETE = GConst.OPTIONNO
          and TRAD_RECORD_STATUS not in (10200005,10200006)
          and TRAD_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
          and TRAD_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));

Goto Process_End;
  end if;

    if numinfotype = refdealername then
    varoperation := 'extracting dealer name from users table';    
    Begin
        VarReference := upper(gconst.fncxmlextract(xmldoc,'Param/UserId', VarReference));
    Exception 
    when others then 
        VarReference := '0';        
    end;

    Begin
        numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);
    Exception 
    when others then 
        numCode := 30199999;        
    end;

    Begin
        numCode2 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode2);
    Exception 
    when others then 
        numCode2 := 30299999;        
    end;

    select user_group_code
    into numcode1
    from usermaster
    where user_record_Status not in (10200005,10200006)
    and UPPER(USER_USER_ID) =varuserid;

    Glog.log_write('numCode2 ' || numCode2 || ' numCode' ||  numCode || ' VarReference ' || VarReference);

    if numcode1 in (14200004,14200005) then
        open gencursor for
           select rownum "Rownum", user_user_id "ID", user_user_name "Name", user_email_id "Email", 
            user_mobile_phone "Contact_Number", user_group_code "Group_Code"
            from usermaster  ma
            LEFT OUTER JOIN TRMASTER142 
            ON USER_GROUP_CODE = GRUP_PICK_CODE
            AND GRUP_RECORD_STATUS NOT IN (10200005,10200006)
            WHERE 
            --USER_GROUP_CODE in (14200004,14200005)
             UPPER(USER_USER_ID) =varuserid
            AND nvl(GRUP_IS_DEALER_GROUP,12400002) = 12400001
            and user_license_reference=
            (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051) 
            and user_record_status not in (10200005,10200006);
    else
        open gencursor for
            select rownum "Rownum", user_user_id "ID", user_user_name "Name", user_email_id "Email", 
            user_mobile_phone "Contact_Number", user_group_code "Group_Code"
            from usermaster  ma
            LEFT OUTER JOIN TRMASTER142 
            ON USER_GROUP_CODE = GRUP_PICK_CODE
            AND GRUP_RECORD_STATUS NOT IN (10200005,10200006)
            WHERE 
            --USER_GROUP_CODE in (14200004,14200005)
             nvl(GRUP_IS_DEALER_GROUP,12400002) = 12400001
            and UPPER(USER_USER_ID) = UPPER(decode(VarReference,'0',USER_USER_ID,VarReference))
            and user_license_reference=
            (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051) 

            --          and (numCode in (select regexp_substr(ma.USER_COMPANY_CODES,'[^,]+', 1, level) from dual
            --            connect by regexp_substr(ma.USER_COMPANY_CODES, '[^,]+', 1, level) is not null )
            --          or 30199999 in (select regexp_substr(ma.USER_COMPANY_CODES,'[^,]+', 1, level) from dual
            --            connect by regexp_substr(ma.USER_COMPANY_CODES, '[^,]+', 1, level) is not null ))
            --            
            --          and (numCode2 in (select regexp_substr(ma.USER_ENTITY_CODES,'[^,]+', 1, level) from dual
            --            connect by regexp_substr(ma.USER_ENTITY_CODES, '[^,]+', 1, level) is not null )
            --          or 30299999 in (select regexp_substr(ma.USER_ENTITY_CODES,'[^,]+', 1, level) from dual
            --            connect by regexp_substr(ma.USER_ENTITY_CODES, '[^,]+', 1, level) is not null ))

            --          and numCode in( select usco_company_code from trsystem022a
            --                                    where UPPER(usco_user_id) = varUserid and usco_record_status not in (10200005,10200006))
            --           and numCode2 in ( select uslo_entity from trsystem022d 
            --                                    where UPPER(uslo_user_id) = varUserid and uslo_record_status not in (10200005,10200006))

            and USER_USER_ID in(select usco_user_id from trsystem022a
                                where usco_company_code = decode(numCode,30199999,usco_company_code, numCode) 
                                and usco_record_status not in (10200005,10200006))
            and USER_USER_ID in (select uslo_user_id from trsystem022d 
                                where uslo_entity = decode(numCode2,30299999,uslo_entity, numCode2)  
                                and uslo_record_status not in (10200005,10200006))
            and user_record_status not in (10200005,10200006);
    end if;    
    goto process_end;
    end if; 

    if numInfoType = REFPRODUCTDETAILS then
--       numcode:=  gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
--       numcode2:=  gconst.fncxmlextract(xmldoc,'ProductCode',numcode2);
if varEntity in ('CURRENCYFUTUREHEDGEDEAL','CURRENCYFUTURETRADEDEAL','OPTIONAMENDMENT','FUTUREAMENDMENT') then
-- we need to take care of Exchange Code Later
           numcode := GConst.fncXMLExtract(xmlDoc, '//Param//ExchangeCode',
                numcode, GConst.TYPENODEPATH);       
           numCode2 := GConst.fncXMLExtract(xmlDoc, '//Param//ProductCode',
                numCode2, GConst.TYPENODEPATH); 
           dattemp := GConst.fncXMLExtract(xmlDoc, '//Param//ExecuteDate',
                dattemp, GConst.TYPENODEPATH); 
         elsif  varEntity = 'OPTIONHEDGEDEAL' then
-- we need to take care of Exchange Code Later
           numcode := GConst.fncXMLExtract(xmlDoc, '//Param//ExchangeCode',
                numcode, GConst.TYPENODEPATH);       
           numCode2 := GConst.fncXMLExtract(xmlDoc, '//Param//ProductCode',
                numCode2, GConst.TYPENODEPATH);
           dattemp := GConst.fncXMLExtract(xmlDoc, '//Param//ExecuteDate',
                dattemp, GConst.TYPENODEPATH); 
         elsif  varEntity = 'FUTUREROLLOVER' then
-- we need to take care of Exchange Code Later
           numcode := GConst.fncXMLExtract(xmlDoc, '//Param//ExchangeCode',
                numcode, GConst.TYPENODEPATH);       
           numCode2 := GConst.fncXMLExtract(xmlDoc, '//Param//ProductCode',
                numCode2, GConst.TYPENODEPATH);  
            dattemp := GConst.fncXMLExtract(xmlDoc, '//Param//CancelDate',
                dattemp, GConst.TYPENODEPATH);   
         end if;     

        --COMMENTED BY SUPRIYA
--           select cpro_short_description ||' '||TO_CHAR(CPRM_MATURITY_DATE,'DDMONYYYY') as "Name",cpro_long_description as "NameinLong",
--             CPRM_MATURITY_DATE as "DueDate", 
--             pkgreturncursor.fncGetdescription(cpro_exchange_code,2) as "Exchange",
--             pkgreturncursor.fncGetdescription(cpro_product_category,2) as "ProductCategory",
--             cpro_trade_unit || ' ' ||  pkgreturncursor.fncGetdescription(cpro_trade_uom,2) as "TradeQty",
--             cpro_quote_value || ' ' || pkgreturncursor.fncGetdescription(cpro_quote_uom,2) "Quote", 
--             cpro_tick_size || ' ' || cpro_tick_value || ' ' || pkgreturncursor.fncGetdescription(cpro_tick_uom,2) "Ticker" , 
--             cpro_order_max || ' ' ||pkgreturncursor.fncGetdescription(cpro_order_uom,2) "MaxO",
--             cpro_position_max || ' ' || pkgreturncursor.fncGetdescription(cpro_position_uom,2)"MaxPosition",
--             cpro_delivery_unit || ' ' || pkgreturncursor.fncGetdescription(cpro_delivery_uom,2) "DeliveryUnit",
--             cpro_price_band "PriceBrand",cpro_initial_margin  "InitialMargin" , 
--             cpro_quality_detail "QualityDetails", 
--             cpro_quote_value "Quoteunit",
--             cpro_quote_uom "Quoteuom",
--             cpro_conversion_value "Conversion",
--             cpro_trade_unit "UOM",
--             cpro_product_code "ProductCode", cpro_trade_unit "Tradeunit",
--             cpro_record_status as "RecordStatus"
--             -- cpro_pick_code
--            -- numcode1 "DueDay"
--           from commodityproduct
--           left outer join 
--           TRMASTER503A ON
--           CPRM_PRODUCT_CODE = CPRO_PRODUCT_CODE    
--           and CPRM_EXCHANGE_CODE= CPRO_EXCHANGE_CODE
--           where 
--           --cpro_exchange_code=numcode
--           --AND 
--           cpro_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
--           and CPRM_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
--           AND CPRM_MATURITY_DATE >= datWorkDate
--           AND CPRO_PRODUCT_CODE = numcode2
--            AND CPRO_EXCHANGE_CODE = numcode
--           and CPRO_PRODUCT_CATEGORY = decode(varEntity,'CURRENCYFUTUREHEDGEDEAL',61000001,
--           'CURRENCYFUTURETRADEDEAL', 61000001,'OPTIONTRADEDEAL', 61000002,       
--           'OPTIONHEDGEDEAL',61000002,'IRF',61000003,'HEDGECOMMODITYDEAL',60300005,'TRADECOMMODITYDEAL',60300005)
--           and cpro_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          -- and cpro_due_date >= datWorkDate
--           order by cpro_short_description,CPRM_MATURITY_DATE;
            Open GenCursor for
                    select cpro_short_description ||' '|| TO_CHAR(CPRM_MATURITY_DATE,'DD MON YYYY') as "Name",
                            cpro_long_description as "NameinLong", CPRM_MATURITY_DATE as "DueDate", 
                            pkgreturncursor.fncGetdescription(cpro_exchange_code,2) as "Exchange",
                            pkgreturncursor.fncGetdescription(CPRO_BASE_CURRENCY,2) as "BaseCurrency",
                            pkgreturncursor.fncGetdescription(CPRO_QUOTE_CURRENCY,2) as "QuoteCurrency",
                            cpro_trade_unit || ' ' ||  pkgreturncursor.fncGetdescription(cpro_trade_uom,2) as "TradeQty",
                            cpro_quote_value || ' ' || pkgreturncursor.fncGetdescription(cpro_quote_uom,2) "Quote", 
                            cpro_tick_size || ' ' || cpro_tick_value || ' ' || pkgreturncursor.fncGetdescription(cpro_tick_uom,2) "Ticker" , 
                            cpro_order_max || ' ' ||pkgreturncursor.fncGetdescription(cpro_order_uom,2) "MaxOrder",
                            cpro_position_max || ' ' || pkgreturncursor.fncGetdescription(cpro_position_uom,2)"MaxPosition",
                            cpro_delivery_unit || ' ' || pkgreturncursor.fncGetdescription(cpro_delivery_uom,2) "DeliveryUnit",
                            cpro_price_band "PriceBrand",cpro_initial_margin  "InitialMargin" , 
                            cpro_quality_detail "QualityDetails", cpro_conversion_value "Conversion",
                            cpro_quote_value "Quoteunit", cpro_quote_uom "Quoteuom",
                            cpro_trade_unit "UOM", CPRO_PICK_CODE "ProductCode", cpro_trade_unit "Tradeunit",
                            CPRO_BASE_CURRENCY "BaseCurrencyCode", CPRO_QUOTE_CURRENCY "QuoteCurrencyCode",
                            CPRO_DEALWRITING_IN "DealWritingInCode", CPRO_MTM_PERUNIT "MTMPerUnit"
                        from TRMASTER503 left outer join TRMASTER503A 
                        ON CPRM_PRODUCT_CODE = CPRO_PICK_CODE    
                       -- and CPRM_EXCHANGE_CODE= CPRO_EXCHANGE_CODE
                        where cpro_record_status not in(10200005,10200006)
                        and CPRM_record_status not in(10200005,10200006)
                        AND CPRM_MATURITY_DATE >= datWorkDate
                        and CPRM_EFFECTIVE_DATE <= dattemp
                        AND CPRO_PICK_CODE = numcode2
                        AND CPRO_EXCHANGE_CODE = numcode
                        and CPRO_PRODUCT_CATEGORY = decode(varEntity,'CURRENCYFUTUREHEDGEDEAL',61000001,'FUTUREROLLOVER',61000001,
                        'CURRENCYFUTURETRADEDEAL', 61000001, 'FUTUREAMENDMENT', 61000001,
                        'OPTIONTRADEDEAL', 61000002, 'OPTIONAMENDMENT', 61000002, 'OPTIONHEDGEDEAL', 61000002,
                        'IRF',61000003,'HEDGECOMMODITYDEAL',60300005,'TRADECOMMODITYDEAL',60300005)
                         and cpro_Company_Code in( select usco_company_code from trsystem022a
                                                   where UPPER(usco_user_id) = varUserid
                       AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
                        and CPRO_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                                   where UPPER(USLO_USER_ID) = varUserid
                                                   and USLO_RECORD_STATUS NOT IN (10200005,10200006))   
                        order by cpro_short_description,CPRM_MATURITY_DATE;
                Goto Process_End; 
   end if;


--added by supriya for settlement dates screen
if numinfoType =REFGETPRODUCTCATEGORYDETAIL then
    varOperation := 'Populating Product Details';
    begin 
        numCode := GConst.fncXMLExtract(xmlDoc, 'Param/SelectedKeyValue', numCode);
    exception 
        when others then 
        numCode := 99999;
    end;

    Open GenCursor for
        SELECT pkgreturncursor.fncGetdescription(cpro_exchange_code,2) as "Exchange",
               pkgreturncursor.fncgetdescription(CPRO_PRODUCT_CATEGORY,1) || ' ' || CPRO_SHORT_DESCRIPTION "Name", 
               CPRO_PICK_CODE "ID"
        FROM TRMASTER503
        WHERE CPRO_RECORD_STATUS NOT IN (10200005,10200006)
        and CPRO_PICK_CODE = decode(numCode, 99999, CPRO_PICK_CODE, numCode);
    Goto Process_End;
end if;


 if numinfoType =REFMATURITYDATECALC then

    varOperation := 'Extracting Maturity Dates For the Execution Date';

--    ExecutionDate := gconst.fncxmlextract(xmldoc,'ExecutionDate', executiondate);
--    BaseCurrency := gconst.fncxmlextract(xmldoc,'BaseCurrency', BaseCurrency);
--    OtherCurrency := gconst.fncxmlextract(xmldoc,'OtherCurrency', OtherCurrency);
--    DelivaryType :=gconst.fncxmlextract(xmldoc,'DelivaryType', delivaryType);
   -- DelivaryOption :=gconst.fncxmlextract(xmldoc,'DelivaryOption', DelivaryOption);
   -- DelivaryDays :=gconst.fncxmlextract(xmldoc,'DelivaryDays', DelivaryDays);
    --DelivaryDate :=gconst.fncxmlextract(xmldoc,'DelivaryDate', DelivaryDate);

     begin
       ExecutionDate := gconst.fncxmlextract(xmldoc,'ExecutionDate', executiondate);
      exception
        when others then
         ExecutionDate :='';
      end;
    begin
       BaseCurrency := gconst.fncxmlextract(xmldoc,'BaseCurrency', BaseCurrency);
      exception
        when others then
         BaseCurrency :=30499999;
      end;
    begin
       OtherCurrency := gconst.fncxmlextract(xmldoc,'OtherCurrency', OtherCurrency);
      exception
        when others then
         OtherCurrency :=30499999;
      end;
    begin
       DelivaryType :=gconst.fncxmlextract(xmldoc,'DelivaryType', delivaryType);
      exception
        when others then
         DelivaryType :=25400003;
      end;

      begin
       numcode1 := gconst.fncxmlextract(xmldoc,'CurrencyPair', numcode1);

      SELECT CNDI_BASE_CURRENCY,CNDI_OTHER_CURRENCY 
      INTO BaseCurrency, OtherCurrency
      FROM TRMASTER256 
      WHERE CNDI_PICK_CODE = numcode1 AND CNDI_RECORD_STATUS NOT IN (10200005,10200006);
      exception
        when others then
         numcode1 :=25699999;
      end;     

    dayopendayend.prcHolidaysCheck (ExecutionDate,
                                    BaseCurrency,
                                    OtherCurrency,
                                    DelivaryType,
                                  null,--  DelivaryOption,
                                   null, --DelivaryDays,
                                    null,--DelivaryDate,
                                    dattemp,
                                    dattemp1);

    Open GenCursor for
        select dattemp maturityFrom,dattemp1 maturityDate from dual;
    Goto Process_End;
  end if;

if numinfotype =REFRATES then
      varOperation := 'Extracting Information For Rates For Calculation';
      numcode := gconst.fncxmlextract(xmldoc,'Param/BuySell',numcode);
      numcode1 := gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',numcode1);
      numcode2 := gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',numcode2);
      ExecutionDate :=  gconst.fncxmlextract(xmldoc,'Param/MaturityDate',ExecutionDate);

      numrate:=pkgforexprocess.fncGetRate(numcode1,numcode2,datworkdate,numcode,0,ExecutionDate);
      --numcustom :=pkgforexprocess.fncGetRate(numcode1,30400003,datworkdate,numcode,0,ExecutionDate);

      select PRMC_BENCHMARK_PERCENT 
        into numRate1
      from trsystem051;
   open gencursor for
          select (nvl(numrate,0)*(numRate1/100)) as VaryRate , numRate1 VaryPercentage, 
                 nvl(numrate,0) as MTMRate, nvl(numcustom,0) as CustomRate 
          from dual;

   Goto Process_End;
end if;


if numinfotype = REFkeygroup then
        varoperation := 'Extracting Max Keynumber for the Particular KeyGroup ';

--        numcode := gconst.fncxmlextract(xmldoc,'REFRELATIONTABLEVALID /KeyGroup', numcode);
        numcode := gconst.fncxmlextract(xmldoc,'Param/KeyGroup', numcode);

        open gencursor for
                 select max(pick_key_number)  +1 keynumber
                     from trmaster001
                     where pick_key_group = numcode
                     -- this we are using for the serial number so we should not check for the status
                     --and PICK_RECORD_STATUS not in(10200006,10200005)
                     and pick_key_number not in(99999)
                     -- this is for the serial number creationa nd it should not be according to Company , Location
--                     and PICK_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                           where upper(usco_user_id) = varUserid
--                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                     and PICK_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
                     group by pick_key_group;

     Goto Process_End;
end if;

--ADDED BY SUPRIYA ON 19/01/2022
if numInfoType = REFGETUSERPICKKEYGROUPS then
    open gencursor for
        select PICK_KEY_GROUP "ID", PICK_LONG_DESCRIPTION "Name"
        from trmaster001
        where PICK_KEY_TYPE in (10100003,10100002) and PICK_KEY_NUMBER = 0
        order by PICK_KEY_GROUP;
    Goto Process_End;
end if;

--ADDED BY SUPRIYA ON 24/01/2022
if numInfoType = REFGETALLUSERS then
    open gencursor for
        select USER_USER_ID "ID", USER_USER_ID "Name"
        from clouddb_global.trsystem022
        where USER_RECORD_STATUS not in (10200005,10200006)
        and USER_LICENSE_REFERENCE = (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051)
        order by USER_USER_ID;
    Goto Process_End;
end if;

--added by supriya on 24/01/2022
if NUMINFOTYPE = REFCHECKAPIUSEREXISTS then 
    open gencursor for
        SELECT UAPI_USER_ID 
        FROM trsystem022e
        WHERE Upper(UAPI_USER_ID) = upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/User', varTemp))
        AND UAPI_RECORD_STATUS NOT IN(10200005,10200006);         
    goto process_end;
end if;

--added by supriya on 25/01/2022
if NUMINFOTYPE = REFGETENCRYPTDECRYPTDETAILS then 
    vartemp := GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/DataSourceType', vartemp);

    select PRMC_PRIVATE_KEY, PRMC_PUBLIC_KEY, PRMC_PASS_PHRASE 
    into vartemp3, vartemp4, vartemp5
    from TRSYSTEM051; 

    open gencursor for
        select SOUK_ENCRYPTDECRYPT_ORDER "EncryptDecryptOrder", SOUK_ENCRYPT_DECRYPT "EncryptDecrypt",
            (case when SOUK_DEFAULT_PRIVATEKEY = 12400001 then vartemp3 ELSE SOUK_PRIVATE_KEY END) "PrivateKey",
            (case when SOUK_DEFAULT_PRIVATEKEY = 12400001 then vartemp4 ELSE SOUK_PUBLIC_KEY END) "PublicKey",
            vartemp5 "PassPhrase"
        from TRMASTER140A LEFT OUTER JOIN TRMASTER140
        ON SOUK_SOURCE_TYPE = SOUM_PICK_CODE
        WHERE SOUM_SHORT_DESCRIPTION = vartemp and SOUK_RECORD_STATUS not in (10200005,10200006)
        order by SOUK_ENCRYPTDECRYPT_ORDER;
    goto process_end;
end if;

--added by supriya on 25/01/2022
if NUMINFOTYPE = REFGETDATASOURCETYPE then 
    vartemp := GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/DataSourceType', vartemp);

    open gencursor for
        select PICK_KEY_VALUE "ID", PICK_SHORT_DESCRIPTION "Name"
        from TRMASTER001
        WHERE PICK_SHORT_DESCRIPTION = vartemp and PICK_RECORD_STATUS not in (10200005,10200006);
    goto process_end;
end if;

if numInfoType = REFOPTIONDEALS then
      varOperation := 'Extracting Cursor for Holding Rate';
       numcode := Gconst.fncXMLExtract(xmldoc,'Param/BaseCurrency',numcode);  
       --numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/BuySell', numCode);
       numcode2 := GConst.fncXMLExtract(xmldoc, 'Param/HedgingWith', numCode2);
       numcode3 := Gconst.fncXMLExtract(xmldoc,'Param/CompanyCode',numcode3);
       numcode4 := Gconst.fncXMLExtract(xmldoc,'Param/CounterParty',numcode4);
       numcode5 := Gconst.fncXMLExtract(xmldoc,'Param/Category',numcode5);
       numcode6 := Gconst.fncXMLExtract(xmldoc,'Param/SubCategory',numcode6);
--       numLocationCode := Gconst.fncXMLExtract(xmldoc,'Param/CrossCurrency',numLocationCode);
       numcode8:= Gconst.fncXMLExtract(xmldoc,'Param/LinkingCancelledDeals',numcode8);

         Open Gencursor for
            with CTE as(
            select rownum "Rownum", copt_execute_date ExecuteDate,copt_deal_number DealNumber,
                   COSU_BASE_AMOUNT  BaseAmount,
--                    decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) BaseAmount,    
                   pkgForexProcess.fncGetOutstandingTransaction(COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,
                        GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER) OutstandingAmount,

                    nvl(pkgReportprograms.fncGetCoverAmount(  null,copt_deal_number),0) CoveredAmount,  
--                    NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = copt_deal_number
--                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",     
                   fncgetdescription(cosu_buy_sell,2) BuySell,
                   fncgetdescription(cosu_option_type,2) OptionType,
                   cosu_strike_rate StrikeRate,
                   COSU_OTHER_AMOUNT OtherAmount,
--                (select (nvl(cosu_strike_rate,0)) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall) "BC",
--               (select (nvl(cosu_strike_rate,0)) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut) "BP",
--               (select (nvl(cosu_strike_rate,0)) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut) "SP",
--               (select (nvl(cosu_strike_rate,0)) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall) "SC",
--                    NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = copt_deal_number
--                         and copt_record_status in (10200001, 10200003, 10200004,10200012)),0) "AdjustedAmount",
--                   nvl(pkgReportprograms.fncGetCoverAmount(  null,copt_deal_number),0)
--                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
--                    ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = copt_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                )) "HedgingAmount",
--                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
--                    ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = copt_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                )) "UnCoveredAmount",
                 COSM_MATURITY_DATE MaturityDate,COSM_SETTLEMENT_DATE SettlementDate,
                 copt_premium_rate PremiumRate,copt_premium_Amount PremiumAmount,
                 copt_Premium_Exrate PremiumExRate,copt_premium_Local PremiumLocal,
                 fncgetdescription(copt_base_currency,2) BaseCurrency, fncgetdescription(copt_other_currency,2) OtherCurrency,
                 0 LocalRate,0 AmountLocal,
                 COPT_MATURITY_DATE "SettlementDate",--1 SerialNumber,
                 fncgetdescription(copt_counter_party,1) CounterParty,
                 fncgetdescription(copt_hedge_trade,1) HedgeTrade,
                 fncgetdescription(copt_contract_type,1) DealType,
                 --copt_time_stamp "DealTimeStamp",
                 COPT_SERIAL_NUMBER SerialNumber,
                 (select user_user_name
                   from usermaster
                  where user_user_id=copt_user_id) "UserName",
                  copt_other_currency OtherCurrencyCode,copt_lot_numbers LotNumbers,copt_lot_price LotPrice,
                  copt_dealer_remark Remarks,copt_record_status RecordStatus,
                  copt_base_currency BaseCurrencyCode
             from trtran071 inner join trtran072
             on copt_deal_number= cosu_deal_number
             and cosu_record_status not in(10200005,10200006)
             inner join trtran072A
             on cosm_deal_number=cosu_deal_number
             and cosm_serial_number= cosu_serial_number
             and cosm_record_status not in (10200005,10200006)
             left Outer Join TRMASTER323 on copt_Deal_Type = OPTI_PICK_CODE
             and opti_record_Status not in (10200005,10200006)

              where copt_hedge_trade in (26000001,26000003)
                and copt_process_complete = numcode8
                and copt_Company_Code in( select usco_company_code from trsystem022a
                                            where UPPER(usco_user_id) = varUserid
                                              AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
                and copt_company_code=decode(numcode3,30199999,copt_company_code,numcode3)
                and copt_counter_party=decode(numcode4,30699999,copt_counter_party,numcode4)
                and copt_base_currency = decode(numcode,30499999,copt_base_currency, numcode)
                and copt_backup_deal = decode(numcode5,33399999,copt_backup_deal, numcode5)
                and copt_init_code = decode(numcode6,33899999,copt_init_code, numcode6)
                and copt_record_status not in (10200005,10200006)
--                and COSM_SUBSERIAL_NUMBER = (case when OPTI_UNDERLYING_LINKLEGWISE = 12400001 
--                   then COSM_SUBSERIAL_NUMBER else 1 end))
                and COSU_SERIAL_NUMBER = (case when OPTI_UNDERLYING_LINKLEGWISE = 12400001 
                   then COSU_SERIAL_NUMBER else 1 end))


                select rownum "Rownum", ExecuteDate "ExecuteDate", DealNumber "DealNumber",
                    BaseAmount "BaseAmount", OutstandingAmount "OutstandingAmount",
                    CoveredAmount "CoveredAmount", (OutstandingAmount-CoveredAmount) "UnCoveredAmount",
                    BuySell "BuySell", OptionType "OptionType", StrikeRate "StrikeRate",
                    StrikeRate "ExchangeRate", SerialNumber "SerialNumber",
                    (OutstandingAmount-CoveredAmount) "HedgingAmount",
                    PremiumRate "PremiumRate",PremiumAmount "PremiumAmount",
                    PremiumExRate "PremiumExRate",PremiumLocal "PremiumLocal",
                    BaseCurrency "BaseCurrency", OtherCurrency "OtherCurrency",
                    OtherAmount "OtherAmount",0 "LocalRate",0 "AmountLocal",
                    MaturityDate "MaturityDate",
                    SettlementDate "SettlementDate",--1 "SerialNumber",
                    CounterParty "CounterParty",
                    HedgeTrade "HedgeTrade",
                    LotPrice "LotPrice",
                    OtherCurrencyCode "OtherCurrencyCode",LotNumbers "LotNumbers",LotPrice "LotPrice",
                    Remarks "Remarks", RecordStatus "RecordStatus", BaseCurrencyCode "BaseCurrencyCode"
                from CTE
                where (OutstandingAmount-CoveredAmount)>0;                
      Goto Process_End;

  End if;


--  if numInfoType = REFHEDGEDEALS then
--
--      varOperation := 'Extracting Cursor for Holding Rate';
----       delete from Testhari;commit;
----       insert into Testhari values(varOperation,'varOperation');commit;
--       numcode := Gconst.fncXMLExtract(xmldoc,'Param/BaseCurrency',numcode);      
--      -- insert into Testhari values(numcode,'BaseCurrency');commit;
--    --   numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/BuySell', numCode);
--    numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/ImportExport', numCode);
--    --    insert into Testhari values(numcode1,'BuySell');commit;
--       numcode2 := GConst.fncXMLExtract(xmldoc, 'Param/HedgingWith', numCode2);
--    --    insert into Testhari values(numcode2,'HedgingWith');commit;
--       numcode3 := Gconst.fncXMLExtract(xmldoc,'Param/CompanyCode',numcode3);
--     --   insert into Testhari values(numcode3,'CompanyCode');commit;
--       numcode4 := Gconst.fncXMLExtract(xmldoc,'Param/CounterParty',numcode4);
--     --   insert into Testhari values(numcode4,'CounterParty');commit;
--       numcode5 := Gconst.fncXMLExtract(xmldoc,'Param/Category',numcode5);
--    --    insert into Testhari values(numcode5,'Category');commit;
--       numcode6 := Gconst.fncXMLExtract(xmldoc,'Param/SubCategory',numcode6);
--
--     datTemp := Gconst.fncXMLExtract(xmldoc,'Param/EffectiveDate',datTemp);
--
--     --   insert into Testhari values(numcode6,'SubCategory');commit;
--      -- numdetail := Gconst.fncXMLExtract(xmldoc,'OtherCurrency',numdetail);
--      -- numLocationCode := Gconst.fncXMLExtract(xmldoc,'Param/CrossCurrency',numLocationCode);
--    --    insert into Testhari values(numLocationCode,'CrossCurrency');commit;
--       numcode8:= Gconst.fncXMLExtract(xmldoc,'Param/LinkingCancelledDeals',numcode8);
--    --    insert into Testhari values(numcode8,'LinkingCancelledDeals');commit;
-- --   if numcode2 = GConst.ForwardContract then
------Added by Ishwarachandra--------------- For multiple deal linking for Forward Contract
-- --     if numLocationCode = 12400002 then
--        SELECT decode(EXTY_INFLOW_OUTFLOW,17300002, 25300002,17300001,25300001)
--                 into numCode7 FROM TRMASTER259 
--                 WHERE EXTY_PICK_CODE=numcode1
--                 AND exty_record_status not in (10200005,10200006);
--                 
--      Open Gencursor for
--          with CTE as(
--           select  deal_execute_date ExecuteDate ,
--             pkgReturnCursor.fncGetDescription(deal_backup_deal,2) Category,
--            pkgReturnCursor.fncGetDescription(deal_init_code,2) SubCategory,
--            deal_base_amount BaseAmount,
--            Deal_other_amount QuoteAmount,
----            NVL((select sum(hedg_hedged_fcy)
----                from trtran004
----                where hedg_deal_number = deal_deal_number
----                and hedg_record_status not in (10200005,10200006)),0) CoveredAmount,
--           nvl(pkgReportprograms.fncGetCoverAmount(  null,deal_deal_number),0)    CoveredAmount,
----           
----                NVL((select sum( decode(Deal_writing_in,38300001,cdel_cancel_amount,cdel_other_amount))
----                from trtran006 a
----                where a.cdel_deal_number = deal_deal_number
----                and a.cdel_deal_serial = deal_serial_number
----                and a.cdel_record_status in (10200001, 10200003,10200004)),0)Reversed,
--                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as OutStanding,
----                (decode(Deal_writing_in,38300001,deal_base_amount,deal_other_amount)-
----                   ( NVL((select sum(hedg_hedged_fcy)
----                            from trtran004
----                            where hedg_deal_number = deal_deal_number 
----                            and hedg_record_status not in (10200005,10200006)),0)
----                              )) UncoveredAmount,
----                (decode(Deal_writing_in,38300001,deal_base_amount,deal_other_amount)-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number 
----                                              and hedg_record_status not in (10200005,10200006)),0)
----                                                )) HedgingAmount,
--                DEAL_SPOT_RATE SpotRate,
--                DEAL_FORWARD_RATE ForwardRate,
--                DEAL_MARGIN_RATE MarginRate,
--                deal_Exchange_rate AllinRate,
--                DEAL_MATURITY_FROM ExpiryDate,
--                deal_maturity_date SettlementDate,
--                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) BuySell,
--                deal_user_reference TradeReference,  
--               -- deal_other_amount QuoteAmount, ----Up to here
--                pkgReturnCursor.fncGetDescription(deal_base_currency,2) BaseCurrency,
--                pkgReturnCursor.fncGetDescription(deal_other_currency,2) OtherCurrency,
--                pkgReturnCursor.fncGetDescription(deal_counter_party,2) Bank,
--               -- deal_spot_rate SpotRate,
--                deal_forward_rate Premium,
--              --  deal_margin_rate MarginRate, 
--              deal_serial_number SerialNumber,
--                deal_local_rate LocalRate, deal_exchange_rate ExchangeRate,
--                deal_deal_number DealNumber,deal_other_currency OtherCurrencyCode, 0 RecordStatus
--                from trtran001 left outer join TRMASTER256
--                ON deal_base_currency = CNDI_BASE_CURRENCY AND deal_other_currency = CNDI_OTHER_CURRENCY                
--                where  
----                deal_Company_Code in
----                (select usco_company_code from trsystem022a
----                  where usco_user_id =varUserid)
----                and
--                deal_record_status in (10200001, 10200002, 10200003, 10200004)
--                and deal_company_code = decode(numcode3,30199999, deal_company_code, numcode3)
--                and deal_counter_party = decode(numcode4,30699999,deal_counter_party,numcode4)
--              --  and deal_process_complete = GConst.OPTIONNO 
--                and Deal_maturity_date >=datTemp 
--                and deal_buy_sell = decode(numCode7,25399999,deal_buy_sell, numCode7)
--                and (case when CNDI_OUTSTANDING_TRACKING =38300001 then deal_base_currency else deal_other_currency end) =
--                   decode(numcode,30499999,(case when CNDI_OUTSTANDING_TRACKING =38300001 then deal_base_currency else deal_other_currency end), numcode)
--                and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
--                and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
--                 and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        WHERE UPPER(usco_user_id) =VARUSERID
--                                        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)))
--                select rownum "Rownum",  ExecuteDate "ExecuteDate" , Category "Category",
--                     SubCategory "SubCategory",BaseAmount "BaseAmount",QuoteAmount "QuoteAmount",
--                     CoveredAmount "CoveredAmount",(BaseAmount-OutStanding) "Reversed",OutStanding "OutStanding", 
--                     (OutStanding-CoveredAmount) "UncoveredAmount",(OutStanding-CoveredAmount) "HedgingAmount",SpotRate "SpotRate",
--                      ForwardRate "ForwardRate",MarginRate "MarginRate", AllinRate "AllinRate",
--                      ExpiryDate "ExpiryDate", SettlementDate "SettlementDate", BuySell "BuySell",
--                      TradeReference "TradeReference", BaseCurrency  "BaseCurrency", OtherCurrency "OtherCurrency",
--                      Bank "Bank",Premium "Premium",LocalRate "LocalRate",ExchangeRate  "ExchangeRate",
--                      DealNumber "DealNumber", OtherCurrencyCode "OtherCurrencyCode", 0 "RecordStatus",
--                      SerialNumber "SerialNumber"
--                 from CTE
--                 where OutStanding>0
--                 and (OutStanding- CoveredAmount)>0 ;
--
---- Commented because we have written saparate Cursor for Delete and View                
----                and ((numUserActionType in (101,102,103,104)
----                and deal_process_complete = numcode8
----                and (Deal_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number
----                                                and hedg_record_status not in (10200005,10200006)),0))))
----                 or (numUserActionType not in (101,102,103,104)));
--
----    elsif   numLocationCode = 12400001 then
----            Open Gencursor for
----            select rownum "Rownum", deal_execute_date "ExecuteDate" ,pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
----            pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
----            DEAL_OTHER_AMOUNT "BaseAmount",
----            NVL((select sum(hedg_hedged_fcy)
----                from trtran004
----                where hedg_deal_number = deal_deal_number
----                and hedg_record_status not in (10200005,10200006)),0) "CoveredAmount",
----                NVL((select sum(CDEL_OTHER_AMOUNT)
----                from trtran006 a
----                where a.cdel_deal_number = deal_deal_number
----                and a.cdel_deal_serial = deal_serial_number
----                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
----                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as "OutStanding",
----                  (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number 
----                                              and hedg_record_status not in (10200005,10200006)),0)
----                                                )) "HedgingAmount",
----                (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
----                            from trtran004
----                            where hedg_deal_number = deal_deal_number 
----                            and hedg_record_status not in (10200005,10200006)),0)
----                              )) "UnCoveredAmount",
----                DEAL_SPOT_RATE "SpotRate",
----                DEAL_FORWARD_RATE "ForwardRate",
----                DEAL_MARGIN_RATE "MarginRate",
----                deal_Exchange_rate "AllinRate",
----                DEAL_MATURITY_FROM "ExpiryDate",
----                deal_maturity_date "SettlementDate",
----                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) "BuySell",
----                deal_user_reference "TradeReference",  
----                deal_other_amount "QuoteAmount", ----Up to here
----                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
----                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
----                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
----               -- deal_spot_rate "SpotRate", 
----                deal_forward_rate "Premium",
----               -- deal_margin_rate "MarginRate", 
----                deal_local_rate "LocalRate", deal_exchange_rate "ExchangeRate",
----                deal_deal_number "DealNumber",deal_other_currency "OtherCurrencyCode", 0 "RecordStatus"
----             from trtran001
----            where deal_hedge_trade in (26000001 ,26000003)
----                  and deal_process_complete = numcode8
----                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
----                  and deal_company_code=decode(numcode3,30199999,deal_company_code,numcode3)
----                  and deal_counter_party=decode(numcode4,30699999,deal_counter_party,numcode4)
----                  and deal_buy_sell= decode(numcode1,25399999,deal_buy_sell, numcode1)
----                  and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
----                  and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
----                  and deal_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----              and deal_other_currency = decode(numcode,30499999,deal_other_currency, numcode)
----              and (DEAL_OTHER_AMOUNT >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number
----                                                and hedg_record_status not in (10200005,10200006)),0)));
----      end if;
----    elsif numcode2=GConst.FutureContract then
----         Open Gencursor for
----            select rownum "Rownum", cfut_execute_date "ExecuteDate" ,cfut_deal_number "DealNumber",cfut_exchange_rate "ExchangeRate",
----                 cfut_base_amount "BaseAmount",
----                  NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = cfut_deal_number
----                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",
----
----                   (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                  (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                )) "UnCoveredAmount",
----                                                
----                (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                  (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                )) "HedgingAmount",
----                 
----                 fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
----                 cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",
----                 --pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
----                 cfut_maturity_date "SettlementDate",0 "SerialNumber",fncgetdescription(cfut_counter_party,1) "CounterParty",
----                 fncgetdescription(cfut_init_code,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
----                 fncgetdescription(cfut_exchange_code,1) "SwapOutright",fncgetdescription(cfut_contract_type,1) "DealType",
----                 cfut_time_stamp "DealTimeStamp",
----                 (select user_user_name
----                   from usermaster
----                  where user_user_id=cfut_user_id) "UserName",
----                  cfut_other_currency "OtherCurrencyCode",cfut_lot_numbers "Lot Numbers",CFUT_EXCHANGE_RATE "Lot Price",
----                  cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
----                  cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode"
----             from trtran061
----            where cfut_hedge_trade in (26000001,26000003)
----              and cfut_process_complete = GConst.OPTIONNO
----              and cfut_company_code=decode(numcode3,30199999,cfut_company_code,numcode3) --numcode3
----              and cfut_exchange_code=decode(numcode4,50199999,cfut_exchange_code,numcode4)
----              and cfut_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----              and cfut_buy_sell= decode(numcode1,25399999,cfut_buy_sell, numcode1)
----              and cfut_base_currency = decode(numcode,30499999,cfut_base_currency, numcode)
----              and cfut_backup_deal = decode(numcode5,33399999,cfut_backup_deal, numcode5)
----              and cfut_init_code = decode(numcode6,33899999,cfut_init_code, numcode6)
----              and (cfut_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                                          (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                ))
----             and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
----
----      elsif numcode2=GConst.OptionContract then
----         Open Gencursor for
----            select rownum "Rownum", copt_execute_date "ExecuteDate",copt_deal_number "DealNumber",
----                    decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount)"BaseAmount",      
----                    NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = copt_deal_number
----                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",                    
----                (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.PURCHASEDEAL
----                   and cosu_option_type=GCONST.OptionCall) "BC",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.PURCHASEDEAL
----                   and cosu_option_type=GCONST.OptionPut) "BP",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.SALEDEAL
----                   and cosu_option_type=GCONST.OptionPut) "SP",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.SALEDEAL
----                   and cosu_option_type=GCONST.OptionCall) "SC",
----                    NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = copt_deal_number
----                         and copt_record_status in (10200001, 10200003, 10200004,10200012)),0) "AdjustedAmount",
----                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
----                    ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                )) "HedgingAmount",
----                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
----                    ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                )) "UnCoveredAmount",
----                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
----                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
----                 fncgetdescription(copt_base_currency,2) "BaseCurrency", fncgetdescription(copt_other_currency,2) "OtherCurrency",
----                 copt_other_amount "OtherAmount",0 "LocalRate",0 "AmountLocal",
----                 COPT_MATURITY_DATE "SettlementDate",1 "SerialNumber",fncgetdescription(copt_counter_party,1) "CounterParty",
----                 fncgetdescription(copt_hedge_trade,1) "HedgeTrade",
----                 fncgetdescription(copt_contract_type,1) "DealType",
----                 copt_time_stamp "DealTimeStamp",
----                 (select user_user_name
----                   from usermaster
----                  where user_user_id=copt_user_id) "UserName",
----                  copt_other_currency "OtherCurrencyCode",copt_lot_numbers "Lot_Numbers",copt_lot_price "Lot_Price",
----                  copt_dealer_remark "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
----                  copt_base_currency "BaseCurrencyCode",
----                   0 "ExchangeRate",
----                   0 "LocalRate"
----             from trtran071
----              where copt_hedge_trade in (26000001,26000003)
----                and copt_process_complete = numcode8
----                and copt_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----                and copt_company_code=decode(numcode3,30199999,copt_company_code,numcode3)
----                and copt_counter_party=decode(numcode4,30699999,copt_counter_party,numcode4)
----                and copt_base_currency = decode(numcode,30499999,copt_base_currency, numcode)
----                and copt_backup_deal = decode(numcode5,33399999,copt_backup_deal, numcode5)
----                and copt_init_code = decode(numcode6,33899999,copt_init_code, numcode6)
----                and copt_base_amount
----                                >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0))
----                and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
-- --   end if;
--  Goto Process_End;
--  End if;



if numInfoType = REFHEDGEDEALS then

      varOperation := 'Extracting Cursor for Holding Rate';
--       delete from Testhari;commit;
--       insert into Testhari values(varOperation,'varOperation');commit;
       numcode := Gconst.fncXMLExtract(xmldoc,'Param/BaseCurrency',numcode);      
      -- insert into Testhari values(numcode,'BaseCurrency');commit;
    --   numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/BuySell', numCode);
    numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/ImportExport', numCode);
    --    insert into Testhari values(numcode1,'BuySell');commit;
       numcode2 := GConst.fncXMLExtract(xmldoc, 'Param/HedgingWith', numCode2);
    --    insert into Testhari values(numcode2,'HedgingWith');commit;
       numcode3 := Gconst.fncXMLExtract(xmldoc,'Param/CompanyCode',numcode3);
     --   insert into Testhari values(numcode3,'CompanyCode');commit;
       numcode4 := Gconst.fncXMLExtract(xmldoc,'Param/CounterParty',numcode4);
     --   insert into Testhari values(numcode4,'CounterParty');commit;
       numcode5 := Gconst.fncXMLExtract(xmldoc,'Param/Category',numcode5);
    --    insert into Testhari values(numcode5,'Category');commit;
       numcode6 := Gconst.fncXMLExtract(xmldoc,'Param/SubCategory',numcode6);

     datTemp := Gconst.fncXMLExtract(xmldoc,'Param/EffectiveDate',datTemp);

     --   insert into Testhari values(numcode6,'SubCategory');commit;
      -- numdetail := Gconst.fncXMLExtract(xmldoc,'OtherCurrency',numdetail);
      -- numLocationCode := Gconst.fncXMLExtract(xmldoc,'Param/CrossCurrency',numLocationCode);
    --    insert into Testhari values(numLocationCode,'CrossCurrency');commit;
       numcode8:= Gconst.fncXMLExtract(xmldoc,'Param/LinkingCancelledDeals',numcode8);
    --    insert into Testhari values(numcode8,'LinkingCancelledDeals');commit;
 --   if numcode2 = GConst.ForwardContract then
----Added by Ishwarachandra--------------- For multiple deal linking for Forward Contract
 --     if numLocationCode = 12400002 then
        SELECT decode(EXTY_INFLOW_OUTFLOW,17300002, 25300002,17300001,25300001)
                 into numCode7 FROM TRMASTER259 
                 WHERE EXTY_PICK_CODE=numcode1
                 AND exty_record_status not in (10200005,10200006);

      Open Gencursor for
          with CTE as(
           select  deal_execute_date ExecuteDate ,
             pkgReturnCursor.fncGetDescription(deal_backup_deal,2) Category,
            pkgReturnCursor.fncGetDescription(deal_init_code,2) SubCategory,
            deal_base_amount BaseAmount,
            Deal_other_amount QuoteAmount,
--            NVL((select sum(hedg_hedged_fcy)
--                from trtran004
--                where hedg_deal_number = deal_deal_number
--                and hedg_record_status not in (10200005,10200006)),0) CoveredAmount,
           nvl(pkgReportprograms.fncGetCoverAmount(  null,deal_deal_number),0)    CoveredAmount,
--           
--                NVL((select sum( decode(Deal_writing_in,38300001,cdel_cancel_amount,cdel_other_amount))
--                from trtran006 a
--                where a.cdel_deal_number = deal_deal_number
--                and a.cdel_deal_serial = deal_serial_number
--                and a.cdel_record_status in (10200001, 10200003,10200004)),0)Reversed,
                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datTemp) as OutStanding,
--                (decode(Deal_writing_in,38300001,deal_base_amount,deal_other_amount)-
--                   ( NVL((select sum(hedg_hedged_fcy)
--                            from trtran004
--                            where hedg_deal_number = deal_deal_number 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) UncoveredAmount,
--                (decode(Deal_writing_in,38300001,deal_base_amount,deal_other_amount)-( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = deal_deal_number 
--                                              and hedg_record_status not in (10200005,10200006)),0)
--                                                )) HedgingAmount,
                DEAL_SPOT_RATE SpotRate,
                DEAL_FORWARD_RATE ForwardRate,
                DEAL_MARGIN_RATE MarginRate,
                deal_Exchange_rate AllinRate,
                DEAL_MATURITY_FROM ExpiryDate,
                deal_maturity_date SettlementDate,
                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) BuySell,
                deal_user_reference TradeReference,  
               -- deal_other_amount QuoteAmount, ----Up to here
                pkgReturnCursor.fncGetDescription(deal_base_currency,2) BaseCurrency,
                pkgReturnCursor.fncGetDescription(deal_other_currency,2) OtherCurrency,
                pkgReturnCursor.fncGetDescription(deal_counter_party,2) Bank,
               -- deal_spot_rate SpotRate,
                deal_forward_rate Premium,
              --  deal_margin_rate MarginRate, 
              deal_serial_number SerialNumber,
                deal_local_rate LocalRate, deal_exchange_rate ExchangeRate,
                deal_deal_number DealNumber,deal_other_currency OtherCurrencyCode, 0 RecordStatus
                from trtran001 left outer join TRMASTER256
                ON deal_base_currency = CNDI_BASE_CURRENCY AND deal_other_currency = CNDI_OTHER_CURRENCY                
                where  
--                deal_Company_Code in
--                (select usco_company_code from trsystem022a
--                  where usco_user_id =varUserid)
--                and
                deal_record_status in (10200001, 10200002, 10200003, 10200004)
                and deal_company_code = decode(numcode3,30199999, deal_company_code, numcode3)
                and deal_counter_party = decode(numcode4,30699999,deal_counter_party,numcode4)
              --  and deal_process_complete = GConst.OPTIONNO 
                and Deal_maturity_date >=datTemp 
                and deal_execute_date <= datTemp
                and deal_buy_sell = decode(numCode7,25399999,deal_buy_sell, numCode7)
                and (case when CNDI_OUTSTANDING_TRACKING =38300001 then deal_base_currency else deal_other_currency end) =
                   decode(numcode,30499999,(case when CNDI_OUTSTANDING_TRACKING =38300001 then deal_base_currency else deal_other_currency end), numcode)
                and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
                and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
                 and deal_Company_Code in( select usco_company_code from trsystem022a
                                        WHERE UPPER(usco_user_id) =VARUSERID
                                        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
                and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)))
                select rownum "Rownum",  ExecuteDate "ExecuteDate" , Category "Category",
                     SubCategory "SubCategory",BaseAmount "BaseAmount",QuoteAmount "QuoteAmount",
                     CoveredAmount "CoveredAmount",(BaseAmount-OutStanding) "Reversed",OutStanding "OutStanding", 
                     (OutStanding-CoveredAmount) "UncoveredAmount",(OutStanding-CoveredAmount) "HedgingAmount",SpotRate "SpotRate",
                      ForwardRate "ForwardRate",MarginRate "MarginRate", AllinRate "AllinRate",
                      ExpiryDate "ExpiryDate", SettlementDate "SettlementDate", BuySell "BuySell",
                      TradeReference "TradeReference", BaseCurrency  "BaseCurrency", OtherCurrency "OtherCurrency",
                      Bank "Bank",Premium "Premium",LocalRate "LocalRate",ExchangeRate  "ExchangeRate",
                      DealNumber "DealNumber", OtherCurrencyCode "OtherCurrencyCode", 0 "RecordStatus",
                      SerialNumber "SerialNumber"
                 from CTE
                 where OutStanding>0
                 and (OutStanding- CoveredAmount)>0 ;

-- Commented because we have written saparate Cursor for Delete and View                
--                and ((numUserActionType in (101,102,103,104)
--                and deal_process_complete = numcode8
--                and (Deal_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = deal_deal_number
--                                                and hedg_record_status not in (10200005,10200006)),0))))
--                 or (numUserActionType not in (101,102,103,104)));

--    elsif   numLocationCode = 12400001 then
--            Open Gencursor for
--            select rownum "Rownum", deal_execute_date "ExecuteDate" ,pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
--            pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
--            DEAL_OTHER_AMOUNT "BaseAmount",
--            NVL((select sum(hedg_hedged_fcy)
--                from trtran004
--                where hedg_deal_number = deal_deal_number
--                and hedg_record_status not in (10200005,10200006)),0) "CoveredAmount",
--                NVL((select sum(CDEL_OTHER_AMOUNT)
--                from trtran006 a
--                where a.cdel_deal_number = deal_deal_number
--                and a.cdel_deal_serial = deal_serial_number
--                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
--                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as "OutStanding",
--                  (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = deal_deal_number 
--                                              and hedg_record_status not in (10200005,10200006)),0)
--                                                )) "HedgingAmount",
--                (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
--                            from trtran004
--                            where hedg_deal_number = deal_deal_number 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) "UnCoveredAmount",
--                DEAL_SPOT_RATE "SpotRate",
--                DEAL_FORWARD_RATE "ForwardRate",
--                DEAL_MARGIN_RATE "MarginRate",
--                deal_Exchange_rate "AllinRate",
--                DEAL_MATURITY_FROM "ExpiryDate",
--                deal_maturity_date "SettlementDate",
--                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) "BuySell",
--                deal_user_reference "TradeReference",  
--                deal_other_amount "QuoteAmount", ----Up to here
--                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
--                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
--                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
--               -- deal_spot_rate "SpotRate", 
--                deal_forward_rate "Premium",
--               -- deal_margin_rate "MarginRate", 
--                deal_local_rate "LocalRate", deal_exchange_rate "ExchangeRate",
--                deal_deal_number "DealNumber",deal_other_currency "OtherCurrencyCode", 0 "RecordStatus"
--             from trtran001
--            where deal_hedge_trade in (26000001 ,26000003)
--                  and deal_process_complete = numcode8
--                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
--                  and deal_company_code=decode(numcode3,30199999,deal_company_code,numcode3)
--                  and deal_counter_party=decode(numcode4,30699999,deal_counter_party,numcode4)
--                  and deal_buy_sell= decode(numcode1,25399999,deal_buy_sell, numcode1)
--                  and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
--                  and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
--                  and deal_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--              and deal_other_currency = decode(numcode,30499999,deal_other_currency, numcode)
--              and (DEAL_OTHER_AMOUNT >  ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = deal_deal_number
--                                                and hedg_record_status not in (10200005,10200006)),0)));
--      end if;
--    elsif numcode2=GConst.FutureContract then
--         Open Gencursor for
--            select rownum "Rownum", cfut_execute_date "ExecuteDate" ,cfut_deal_number "DealNumber",cfut_exchange_rate "ExchangeRate",
--                 cfut_base_amount "BaseAmount",
--                  NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = cfut_deal_number
--                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",
--
--                   (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = cfut_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                +
--                  (NVL((select sum(cfrv_reverse_lot)
--                                              from trtran063
--                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
--                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
--                                                )) "UnCoveredAmount",
--                                                
--                (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = cfut_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                +
--                  (NVL((select sum(cfrv_reverse_lot)
--                                              from trtran063
--                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
--                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
--                                                )) "HedgingAmount",
--                 
--                 fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
--                 cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",
--                 --pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
--                 cfut_maturity_date "SettlementDate",0 "SerialNumber",fncgetdescription(cfut_counter_party,1) "CounterParty",
--                 fncgetdescription(cfut_init_code,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
--                 fncgetdescription(cfut_exchange_code,1) "SwapOutright",fncgetdescription(cfut_contract_type,1) "DealType",
--                 cfut_time_stamp "DealTimeStamp",
--                 (select user_user_name
--                   from usermaster
--                  where user_user_id=cfut_user_id) "UserName",
--                  cfut_other_currency "OtherCurrencyCode",cfut_lot_numbers "Lot Numbers",CFUT_EXCHANGE_RATE "Lot Price",
--                  cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
--                  cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode"
--             from trtran061
--            where cfut_hedge_trade in (26000001,26000003)
--              and cfut_process_complete = GConst.OPTIONNO
--              and cfut_company_code=decode(numcode3,30199999,cfut_company_code,numcode3) --numcode3
--              and cfut_exchange_code=decode(numcode4,50199999,cfut_exchange_code,numcode4)
--              and cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--              and cfut_buy_sell= decode(numcode1,25399999,cfut_buy_sell, numcode1)
--              and cfut_base_currency = decode(numcode,30499999,cfut_base_currency, numcode)
--              and cfut_backup_deal = decode(numcode5,33399999,cfut_backup_deal, numcode5)
--              and cfut_init_code = decode(numcode6,33899999,cfut_init_code, numcode6)
--              and (cfut_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = cfut_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                +
--                                          (NVL((select sum(cfrv_reverse_lot)
--                                              from trtran063
--                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
--                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
--                                                ))
--             and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--
--      elsif numcode2=GConst.OptionContract then
--         Open Gencursor for
--            select rownum "Rownum", copt_execute_date "ExecuteDate",copt_deal_number "DealNumber",
--                    decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount)"BaseAmount",      
--                    NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = copt_deal_number
--                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",                    
--                (select avg(cosu_strike_rate) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall) "BC",
--               (select avg(cosu_strike_rate) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut) "BP",
--               (select avg(cosu_strike_rate) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut) "SP",
--               (select avg(cosu_strike_rate) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall) "SC",
--                    NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = copt_deal_number
--                         and copt_record_status in (10200001, 10200003, 10200004,10200012)),0) "AdjustedAmount",
--                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
--                    ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = copt_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                )) "HedgingAmount",
--                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
--                    ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = copt_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                )) "UnCoveredAmount",
--                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
--                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
--                 fncgetdescription(copt_base_currency,2) "BaseCurrency", fncgetdescription(copt_other_currency,2) "OtherCurrency",
--                 copt_other_amount "OtherAmount",0 "LocalRate",0 "AmountLocal",
--                 COPT_MATURITY_DATE "SettlementDate",1 "SerialNumber",fncgetdescription(copt_counter_party,1) "CounterParty",
--                 fncgetdescription(copt_hedge_trade,1) "HedgeTrade",
--                 fncgetdescription(copt_contract_type,1) "DealType",
--                 copt_time_stamp "DealTimeStamp",
--                 (select user_user_name
--                   from usermaster
--                  where user_user_id=copt_user_id) "UserName",
--                  copt_other_currency "OtherCurrencyCode",copt_lot_numbers "Lot_Numbers",copt_lot_price "Lot_Price",
--                  copt_dealer_remark "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
--                  copt_base_currency "BaseCurrencyCode",
--                   0 "ExchangeRate",
--                   0 "LocalRate"
--             from trtran071
--              where copt_hedge_trade in (26000001,26000003)
--                and copt_process_complete = numcode8
--                and copt_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--                and copt_company_code=decode(numcode3,30199999,copt_company_code,numcode3)
--                and copt_counter_party=decode(numcode4,30699999,copt_counter_party,numcode4)
--                and copt_base_currency = decode(numcode,30499999,copt_base_currency, numcode)
--                and copt_backup_deal = decode(numcode5,33399999,copt_backup_deal, numcode5)
--                and copt_init_code = decode(numcode6,33899999,copt_init_code, numcode6)
--                and copt_base_amount
--                                >  ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = copt_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0))
--                and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
 --   end if;
  Goto Process_End;
  End if;


--if numInfoType = REFHEDGEDEALS then
--
--      varOperation := 'Extracting Cursor for Holding Rate';
----       delete from Testhari;commit;
----       insert into Testhari values(varOperation,'varOperation');commit;
--       numcode := Gconst.fncXMLExtract(xmldoc,'Param/BaseCurrency',numcode);      
--      -- insert into Testhari values(numcode,'BaseCurrency');commit;
--    --   numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/BuySell', numCode);
--    numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/ImportExport', numCode);
--    --    insert into Testhari values(numcode1,'BuySell');commit;
--       numcode2 := GConst.fncXMLExtract(xmldoc, 'Param/HedgingWith', numCode2);
--    --    insert into Testhari values(numcode2,'HedgingWith');commit;
--       numcode3 := Gconst.fncXMLExtract(xmldoc,'Param/CompanyCode',numcode3);
--     --   insert into Testhari values(numcode3,'CompanyCode');commit;
--       numcode4 := Gconst.fncXMLExtract(xmldoc,'Param/CounterParty',numcode4);
--     --   insert into Testhari values(numcode4,'CounterParty');commit;
--       numcode5 := Gconst.fncXMLExtract(xmldoc,'Param/Category',numcode5);
--    --    insert into Testhari values(numcode5,'Category');commit;
--       numcode6 := Gconst.fncXMLExtract(xmldoc,'Param/SubCategory',numcode6);
--
--     datTemp := Gconst.fncXMLExtract(xmldoc,'Param/EffectiveDate',datTemp);
--
--     --   insert into Testhari values(numcode6,'SubCategory');commit;
--      -- numdetail := Gconst.fncXMLExtract(xmldoc,'OtherCurrency',numdetail);
--      -- numLocationCode := Gconst.fncXMLExtract(xmldoc,'Param/CrossCurrency',numLocationCode);
--    --    insert into Testhari values(numLocationCode,'CrossCurrency');commit;
--       numcode8:= Gconst.fncXMLExtract(xmldoc,'Param/LinkingCancelledDeals',numcode8);
--    --    insert into Testhari values(numcode8,'LinkingCancelledDeals');commit;
-- --   if numcode2 = GConst.ForwardContract then
------Added by Ishwarachandra--------------- For multiple deal linking for Forward Contract
-- --     if numLocationCode = 12400002 then
--        SELECT decode(EXTY_INFLOW_OUTFLOW,17300002, 25300002,17300001,25300001)
--                 into numCode7 FROM TRMASTER259 
--                 WHERE EXTY_PICK_CODE=numcode1
--                 AND exty_record_status not in (10200005,10200006);
--                 
--      Open Gencursor for
--          with CTE as(
--           select  deal_execute_date ExecuteDate ,
--             pkgReturnCursor.fncGetDescription(deal_backup_deal,2) Category,
--            pkgReturnCursor.fncGetDescription(deal_init_code,2) SubCategory,
--            deal_base_amount BaseAmount,
--            Deal_other_amount QuoteAmount,
----            NVL((select sum(hedg_hedged_fcy)
----                from trtran004
----                where hedg_deal_number = deal_deal_number
----                and hedg_record_status not in (10200005,10200006)),0) CoveredAmount,
--           nvl(pkgReportprograms.fncGetCoverAmount(  null,deal_deal_number),0)    CoveredAmount,
----           
----                NVL((select sum( decode(Deal_writing_in,38300001,cdel_cancel_amount,cdel_other_amount))
----                from trtran006 a
----                where a.cdel_deal_number = deal_deal_number
----                and a.cdel_deal_serial = deal_serial_number
----                and a.cdel_record_status in (10200001, 10200003,10200004)),0)Reversed,
--                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datTemp) as OutStanding,
----                (decode(Deal_writing_in,38300001,deal_base_amount,deal_other_amount)-
----                   ( NVL((select sum(hedg_hedged_fcy)
----                            from trtran004
----                            where hedg_deal_number = deal_deal_number 
----                            and hedg_record_status not in (10200005,10200006)),0)
----                              )) UncoveredAmount,
----                (decode(Deal_writing_in,38300001,deal_base_amount,deal_other_amount)-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number 
----                                              and hedg_record_status not in (10200005,10200006)),0)
----                                                )) HedgingAmount,
--                DEAL_SPOT_RATE SpotRate,
--                DEAL_FORWARD_RATE ForwardRate,
--                DEAL_MARGIN_RATE MarginRate,
--                deal_Exchange_rate AllinRate,
--                DEAL_MATURITY_FROM ExpiryDate,
--                deal_maturity_date SettlementDate,
--                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) BuySell,
--                deal_user_reference TradeReference,  
--               -- deal_other_amount QuoteAmount, ----Up to here
--                pkgReturnCursor.fncGetDescription(deal_base_currency,2) BaseCurrency,
--                pkgReturnCursor.fncGetDescription(deal_other_currency,2) OtherCurrency,
--                pkgReturnCursor.fncGetDescription(deal_counter_party,2) Bank,
--               -- deal_spot_rate SpotRate,
--                deal_forward_rate Premium,
--              --  deal_margin_rate MarginRate, 
--              deal_serial_number SerialNumber,
--                deal_local_rate LocalRate, deal_exchange_rate ExchangeRate,
--                deal_deal_number DealNumber,deal_other_currency OtherCurrencyCode, 0 RecordStatus
--                from trtran001 left outer join TRMASTER256
--                ON deal_base_currency = CNDI_BASE_CURRENCY AND deal_other_currency = CNDI_OTHER_CURRENCY                
--                where  
----                deal_Company_Code in
----                (select usco_company_code from trsystem022a
----                  where usco_user_id =varUserid)
----                and
--                deal_record_status in (10200001, 10200002, 10200003, 10200004)
--                and deal_company_code = decode(numcode3,30199999, deal_company_code, numcode3)
--                and deal_counter_party = decode(numcode4,30699999,deal_counter_party,numcode4)
--              --  and deal_process_complete = GConst.OPTIONNO 
--                and Deal_maturity_date >=datTemp 
--                and deal_execute_date <=datTemp
--                and deal_buy_sell = decode(numCode7,25399999,deal_buy_sell, numCode7)
--                and (case when CNDI_OUTSTANDING_TRACKING =38300001 then deal_base_currency else deal_other_currency end) =
--                   decode(numcode,30499999,(case when CNDI_OUTSTANDING_TRACKING =38300001 then deal_base_currency else deal_other_currency end), numcode)
--                and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
--                and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
--                 and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        WHERE UPPER(usco_user_id) =VARUSERID
--                                        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)))
--                select rownum "Rownum",  ExecuteDate "ExecuteDate" , Category "Category",
--                     SubCategory "SubCategory",BaseAmount "BaseAmount",QuoteAmount "QuoteAmount",
--                     CoveredAmount "CoveredAmount",(BaseAmount-OutStanding) "Reversed",OutStanding "OutStanding", 
--                     (OutStanding-CoveredAmount) "UncoveredAmount",(OutStanding-CoveredAmount) "HedgingAmount",SpotRate "SpotRate",
--                      ForwardRate "ForwardRate",MarginRate "MarginRate", AllinRate "AllinRate",
--                      ExpiryDate "ExpiryDate", SettlementDate "SettlementDate", BuySell "BuySell",
--                      TradeReference "TradeReference", BaseCurrency  "BaseCurrency", OtherCurrency "OtherCurrency",
--                      Bank "Bank",Premium "Premium",LocalRate "LocalRate",ExchangeRate  "ExchangeRate",
--                      DealNumber "DealNumber", OtherCurrencyCode "OtherCurrencyCode", 0 "RecordStatus",
--                      SerialNumber "SerialNumber"
--                 from CTE
--                 where OutStanding>0
--                 and (OutStanding- CoveredAmount)>0 ;
--
---- Commented because we have written saparate Cursor for Delete and View                
----                and ((numUserActionType in (101,102,103,104)
----                and deal_process_complete = numcode8
----                and (Deal_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number
----                                                and hedg_record_status not in (10200005,10200006)),0))))
----                 or (numUserActionType not in (101,102,103,104)));
--
----    elsif   numLocationCode = 12400001 then
----            Open Gencursor for
----            select rownum "Rownum", deal_execute_date "ExecuteDate" ,pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
----            pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
----            DEAL_OTHER_AMOUNT "BaseAmount",
----            NVL((select sum(hedg_hedged_fcy)
----                from trtran004
----                where hedg_deal_number = deal_deal_number
----                and hedg_record_status not in (10200005,10200006)),0) "CoveredAmount",
----                NVL((select sum(CDEL_OTHER_AMOUNT)
----                from trtran006 a
----                where a.cdel_deal_number = deal_deal_number
----                and a.cdel_deal_serial = deal_serial_number
----                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
----                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as "OutStanding",
----                  (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number 
----                                              and hedg_record_status not in (10200005,10200006)),0)
----                                                )) "HedgingAmount",
----                (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
----                            from trtran004
----                            where hedg_deal_number = deal_deal_number 
----                            and hedg_record_status not in (10200005,10200006)),0)
----                              )) "UnCoveredAmount",
----                DEAL_SPOT_RATE "SpotRate",
----                DEAL_FORWARD_RATE "ForwardRate",
----                DEAL_MARGIN_RATE "MarginRate",
----                deal_Exchange_rate "AllinRate",
----                DEAL_MATURITY_FROM "ExpiryDate",
----                deal_maturity_date "SettlementDate",
----                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) "BuySell",
----                deal_user_reference "TradeReference",  
----                deal_other_amount "QuoteAmount", ----Up to here
----                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
----                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
----                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
----               -- deal_spot_rate "SpotRate", 
----                deal_forward_rate "Premium",
----               -- deal_margin_rate "MarginRate", 
----                deal_local_rate "LocalRate", deal_exchange_rate "ExchangeRate",
----                deal_deal_number "DealNumber",deal_other_currency "OtherCurrencyCode", 0 "RecordStatus"
----             from trtran001
----            where deal_hedge_trade in (26000001 ,26000003)
----                  and deal_process_complete = numcode8
----                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
----                  and deal_company_code=decode(numcode3,30199999,deal_company_code,numcode3)
----                  and deal_counter_party=decode(numcode4,30699999,deal_counter_party,numcode4)
----                  and deal_buy_sell= decode(numcode1,25399999,deal_buy_sell, numcode1)
----                  and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
----                  and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
----                  and deal_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----              and deal_other_currency = decode(numcode,30499999,deal_other_currency, numcode)
----              and (DEAL_OTHER_AMOUNT >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number
----                                                and hedg_record_status not in (10200005,10200006)),0)));
----      end if;
----    elsif numcode2=GConst.FutureContract then
----         Open Gencursor for
----            select rownum "Rownum", cfut_execute_date "ExecuteDate" ,cfut_deal_number "DealNumber",cfut_exchange_rate "ExchangeRate",
----                 cfut_base_amount "BaseAmount",
----                  NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = cfut_deal_number
----                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",
----
----                   (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                  (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                )) "UnCoveredAmount",
----                                                
----                (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                  (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                )) "HedgingAmount",
----                 
----                 fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
----                 cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",
----                 --pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
----                 cfut_maturity_date "SettlementDate",0 "SerialNumber",fncgetdescription(cfut_counter_party,1) "CounterParty",
----                 fncgetdescription(cfut_init_code,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
----                 fncgetdescription(cfut_exchange_code,1) "SwapOutright",fncgetdescription(cfut_contract_type,1) "DealType",
----                 cfut_time_stamp "DealTimeStamp",
----                 (select user_user_name
----                   from usermaster
----                  where user_user_id=cfut_user_id) "UserName",
----                  cfut_other_currency "OtherCurrencyCode",cfut_lot_numbers "Lot Numbers",CFUT_EXCHANGE_RATE "Lot Price",
----                  cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
----                  cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode"
----             from trtran061
----            where cfut_hedge_trade in (26000001,26000003)
----              and cfut_process_complete = GConst.OPTIONNO
----              and cfut_company_code=decode(numcode3,30199999,cfut_company_code,numcode3) --numcode3
----              and cfut_exchange_code=decode(numcode4,50199999,cfut_exchange_code,numcode4)
----              and cfut_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----              and cfut_buy_sell= decode(numcode1,25399999,cfut_buy_sell, numcode1)
----              and cfut_base_currency = decode(numcode,30499999,cfut_base_currency, numcode)
----              and cfut_backup_deal = decode(numcode5,33399999,cfut_backup_deal, numcode5)
----              and cfut_init_code = decode(numcode6,33899999,cfut_init_code, numcode6)
----              and (cfut_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                                          (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                ))
----             and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
----
----      elsif numcode2=GConst.OptionContract then
----         Open Gencursor for
----            select rownum "Rownum", copt_execute_date "ExecuteDate",copt_deal_number "DealNumber",
----                    decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount)"BaseAmount",      
----                    NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = copt_deal_number
----                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",                    
----                (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.PURCHASEDEAL
----                   and cosu_option_type=GCONST.OptionCall) "BC",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.PURCHASEDEAL
----                   and cosu_option_type=GCONST.OptionPut) "BP",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.SALEDEAL
----                   and cosu_option_type=GCONST.OptionPut) "SP",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.SALEDEAL
----                   and cosu_option_type=GCONST.OptionCall) "SC",
----                    NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = copt_deal_number
----                         and copt_record_status in (10200001, 10200003, 10200004,10200012)),0) "AdjustedAmount",
----                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
----                    ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                )) "HedgingAmount",
----                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
----                    ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                )) "UnCoveredAmount",
----                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
----                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
----                 fncgetdescription(copt_base_currency,2) "BaseCurrency", fncgetdescription(copt_other_currency,2) "OtherCurrency",
----                 copt_other_amount "OtherAmount",0 "LocalRate",0 "AmountLocal",
----                 COPT_MATURITY_DATE "SettlementDate",1 "SerialNumber",fncgetdescription(copt_counter_party,1) "CounterParty",
----                 fncgetdescription(copt_hedge_trade,1) "HedgeTrade",
----                 fncgetdescription(copt_contract_type,1) "DealType",
----                 copt_time_stamp "DealTimeStamp",
----                 (select user_user_name
----                   from usermaster
----                  where user_user_id=copt_user_id) "UserName",
----                  copt_other_currency "OtherCurrencyCode",copt_lot_numbers "Lot_Numbers",copt_lot_price "Lot_Price",
----                  copt_dealer_remark "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
----                  copt_base_currency "BaseCurrencyCode",
----                   0 "ExchangeRate",
----                   0 "LocalRate"
----             from trtran071
----              where copt_hedge_trade in (26000001,26000003)
----                and copt_process_complete = numcode8
----                and copt_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----                and copt_company_code=decode(numcode3,30199999,copt_company_code,numcode3)
----                and copt_counter_party=decode(numcode4,30699999,copt_counter_party,numcode4)
----                and copt_base_currency = decode(numcode,30499999,copt_base_currency, numcode)
----                and copt_backup_deal = decode(numcode5,33399999,copt_backup_deal, numcode5)
----                and copt_init_code = decode(numcode6,33899999,copt_init_code, numcode6)
----                and copt_base_amount
----                                >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0))
----                and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
-- --   end if;
--  Goto Process_End;
--  End if;

--if numInfoType = REFHEDGEDEALS then
--      varOperation := 'Extracting Cursor for Holding Rate';
----       delete from Testhari;commit;
----       insert into Testhari values(varOperation,'varOperation');commit;
--       numcode := Gconst.fncXMLExtract(xmldoc,'Param/BaseCurrency',numcode);      
--      -- insert into Testhari values(numcode,'BaseCurrency');commit;
--       numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/BuySell', numCode);
--    --    insert into Testhari values(numcode1,'BuySell');commit;
--       numcode2 := GConst.fncXMLExtract(xmldoc, 'Param/HedgingWith', numCode2);
--    --    insert into Testhari values(numcode2,'HedgingWith');commit;
--       numcode3 := Gconst.fncXMLExtract(xmldoc,'Param/CompanyCode',numcode3);
--     --   insert into Testhari values(numcode3,'CompanyCode');commit;
--       numcode4 := Gconst.fncXMLExtract(xmldoc,'Param/CounterParty',numcode4);
--     --   insert into Testhari values(numcode4,'CounterParty');commit;
--       numcode5 := Gconst.fncXMLExtract(xmldoc,'Param/Category',numcode5);
--    --    insert into Testhari values(numcode5,'Category');commit;
--       numcode6 := Gconst.fncXMLExtract(xmldoc,'Param/SubCategory',numcode6);
--     --   insert into Testhari values(numcode6,'SubCategory');commit;
--      -- numdetail := Gconst.fncXMLExtract(xmldoc,'OtherCurrency',numdetail);
--      -- numLocationCode := Gconst.fncXMLExtract(xmldoc,'Param/CrossCurrency',numLocationCode);
--    --    insert into Testhari values(numLocationCode,'CrossCurrency');commit;
--       numcode8:= Gconst.fncXMLExtract(xmldoc,'Param/LinkingCancelledDeals',numcode8);
--    --    insert into Testhari values(numcode8,'LinkingCancelledDeals');commit;
-- --   if numcode2 = GConst.ForwardContract then
------Added by Ishwarachandra--------------- For multiple deal linking for Forward Contract
-- --     if numLocationCode = 12400002 then
--      Open Gencursor for
--            select rownum "Rownum", deal_execute_date "ExecuteDate" ,pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
--            pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
--            deal_base_amount "BaseAmount",
--            Deal_other_amount "QuoteAmount",
--            NVL((select sum(hedg_hedged_fcy)
--                from trtran004
--                where hedg_deal_number = deal_deal_number
--                and hedg_record_status not in (10200005,10200006)),0) "CoveredAmount",
--                NVL((select sum( decode(Deal_writing_in,38300001,cdel_cancel_amount,cdel_other_amount))
--                from trtran006 a
--                where a.cdel_deal_number = deal_deal_number
--                and a.cdel_deal_serial = deal_serial_number
--                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
--                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as "OutStanding",
--                (decode(Deal_writing_in,38300001,deal_base_amount,deal_other_amount)-
--                   ( NVL((select sum(hedg_hedged_fcy)
--                            from trtran004
--                            where hedg_deal_number = deal_deal_number 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) "UncoveredAmount",
--                (decode(Deal_writing_in,38300001,deal_base_amount,deal_other_amount)-( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = deal_deal_number 
--                                              and hedg_record_status not in (10200005,10200006)),0)
--                                                )) "HedgingAmount",
--                DEAL_SPOT_RATE "SpotRate",
--                DEAL_FORWARD_RATE "ForwardRate",
--                DEAL_MARGIN_RATE "MarginRate",
--                deal_Exchange_rate "AllinRate",
--                DEAL_MATURITY_FROM "ExpiryDate",
--                deal_maturity_date "SettlementDate",
--                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) "BuySell",
--                deal_user_reference "TradeReference",  
--               -- deal_other_amount "QuoteAmount", ----Up to here
--                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
--                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
--                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
--               -- deal_spot_rate "SpotRate",
--                deal_forward_rate "Premium",
--              --  deal_margin_rate "MarginRate", 
--                deal_local_rate "LocalRate", deal_exchange_rate "ExchangeRate",
--                deal_deal_number "DealNumber",deal_other_currency "OtherCurrencyCode", 0 "RecordStatus"
--                from trtran001
--                where  
----                deal_Company_Code in
----                (select usco_company_code from trsystem022a
----                  where usco_user_id =varUserid)
----                and
--                deal_record_status in (10200001, 10200002, 10200003, 10200004)
--                and deal_company_code = decode(numcode3,30199999, deal_company_code, numcode3)
--                and deal_counter_party = decode(numcode4,30699999,deal_counter_party,numcode4)
--              --  and deal_process_complete = GConst.OPTIONNO 
--                and deal_buy_sell = decode(numcode1,25399999,deal_buy_sell, numcode1)
--                and (case when Deal_writing_in=38300001 then deal_base_currency else deal_other_currency end) =
--                   decode(numcode,30499999,(case when Deal_writing_in=38300001 then deal_base_currency else deal_other_currency end), numcode)
--                and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
--                and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
--                
--                and ((numUserActionType in (101,102,103,104)
--                and deal_process_complete = numcode8
--                and (Deal_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = deal_deal_number
--                                                and hedg_record_status not in (10200005,10200006)),0))))
--                 or (numUserActionType not in (101,102,103,104)));
--                 
----    elsif   numLocationCode = 12400001 then
----            Open Gencursor for
----            select rownum "Rownum", deal_execute_date "ExecuteDate" ,pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
----            pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
----            DEAL_OTHER_AMOUNT "BaseAmount",
----            NVL((select sum(hedg_hedged_fcy)
----                from trtran004
----                where hedg_deal_number = deal_deal_number
----                and hedg_record_status not in (10200005,10200006)),0) "CoveredAmount",
----                NVL((select sum(CDEL_OTHER_AMOUNT)
----                from trtran006 a
----                where a.cdel_deal_number = deal_deal_number
----                and a.cdel_deal_serial = deal_serial_number
----                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
----                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as "OutStanding",
----                  (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number 
----                                              and hedg_record_status not in (10200005,10200006)),0)
----                                                )) "HedgingAmount",
----                (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
----                            from trtran004
----                            where hedg_deal_number = deal_deal_number 
----                            and hedg_record_status not in (10200005,10200006)),0)
----                              )) "UnCoveredAmount",
----                DEAL_SPOT_RATE "SpotRate",
----                DEAL_FORWARD_RATE "ForwardRate",
----                DEAL_MARGIN_RATE "MarginRate",
----                deal_Exchange_rate "AllinRate",
----                DEAL_MATURITY_FROM "ExpiryDate",
----                deal_maturity_date "SettlementDate",
----                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) "BuySell",
----                deal_user_reference "TradeReference",  
----                deal_other_amount "QuoteAmount", ----Up to here
----                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
----                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
----                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
----               -- deal_spot_rate "SpotRate", 
----                deal_forward_rate "Premium",
----               -- deal_margin_rate "MarginRate", 
----                deal_local_rate "LocalRate", deal_exchange_rate "ExchangeRate",
----                deal_deal_number "DealNumber",deal_other_currency "OtherCurrencyCode", 0 "RecordStatus"
----             from trtran001
----            where deal_hedge_trade in (26000001 ,26000003)
----                  and deal_process_complete = numcode8
----                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
----                  and deal_company_code=decode(numcode3,30199999,deal_company_code,numcode3)
----                  and deal_counter_party=decode(numcode4,30699999,deal_counter_party,numcode4)
----                  and deal_buy_sell= decode(numcode1,25399999,deal_buy_sell, numcode1)
----                  and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
----                  and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
----                  and deal_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----              and deal_other_currency = decode(numcode,30499999,deal_other_currency, numcode)
----              and (DEAL_OTHER_AMOUNT >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number
----                                                and hedg_record_status not in (10200005,10200006)),0)));
----      end if;
----    elsif numcode2=GConst.FutureContract then
----         Open Gencursor for
----            select rownum "Rownum", cfut_execute_date "ExecuteDate" ,cfut_deal_number "DealNumber",cfut_exchange_rate "ExchangeRate",
----                 cfut_base_amount "BaseAmount",
----                  NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = cfut_deal_number
----                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",
----
----                   (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                  (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                )) "UnCoveredAmount",
----                                                
----                (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                  (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                )) "HedgingAmount",
----                 
----                 fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
----                 cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",
----                 --pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
----                 cfut_maturity_date "SettlementDate",0 "SerialNumber",fncgetdescription(cfut_counter_party,1) "CounterParty",
----                 fncgetdescription(cfut_init_code,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
----                 fncgetdescription(cfut_exchange_code,1) "SwapOutright",fncgetdescription(cfut_contract_type,1) "DealType",
----                 cfut_time_stamp "DealTimeStamp",
----                 (select user_user_name
----                   from usermaster
----                  where user_user_id=cfut_user_id) "UserName",
----                  cfut_other_currency "OtherCurrencyCode",cfut_lot_numbers "Lot Numbers",CFUT_EXCHANGE_RATE "Lot Price",
----                  cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
----                  cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode"
----             from trtran061
----            where cfut_hedge_trade in (26000001,26000003)
----              and cfut_process_complete = GConst.OPTIONNO
----              and cfut_company_code=decode(numcode3,30199999,cfut_company_code,numcode3) --numcode3
----              and cfut_exchange_code=decode(numcode4,50199999,cfut_exchange_code,numcode4)
----              and cfut_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----              and cfut_buy_sell= decode(numcode1,25399999,cfut_buy_sell, numcode1)
----              and cfut_base_currency = decode(numcode,30499999,cfut_base_currency, numcode)
----              and cfut_backup_deal = decode(numcode5,33399999,cfut_backup_deal, numcode5)
----              and cfut_init_code = decode(numcode6,33899999,cfut_init_code, numcode6)
----              and (cfut_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                                          (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                ))
----             and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
----
----      elsif numcode2=GConst.OptionContract then
----         Open Gencursor for
----            select rownum "Rownum", copt_execute_date "ExecuteDate",copt_deal_number "DealNumber",
----                    decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount)"BaseAmount",      
----                    NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = copt_deal_number
----                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",                    
----                (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.PURCHASEDEAL
----                   and cosu_option_type=GCONST.OptionCall) "BC",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.PURCHASEDEAL
----                   and cosu_option_type=GCONST.OptionPut) "BP",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.SALEDEAL
----                   and cosu_option_type=GCONST.OptionPut) "SP",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.SALEDEAL
----                   and cosu_option_type=GCONST.OptionCall) "SC",
----                    NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = copt_deal_number
----                         and copt_record_status in (10200001, 10200003, 10200004,10200012)),0) "AdjustedAmount",
----                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
----                    ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                )) "HedgingAmount",
----                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
----                    ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                )) "UnCoveredAmount",
----                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
----                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
----                 fncgetdescription(copt_base_currency,2) "BaseCurrency", fncgetdescription(copt_other_currency,2) "OtherCurrency",
----                 copt_other_amount "OtherAmount",0 "LocalRate",0 "AmountLocal",
----                 COPT_MATURITY_DATE "SettlementDate",1 "SerialNumber",fncgetdescription(copt_counter_party,1) "CounterParty",
----                 fncgetdescription(copt_hedge_trade,1) "HedgeTrade",
----                 fncgetdescription(copt_contract_type,1) "DealType",
----                 copt_time_stamp "DealTimeStamp",
----                 (select user_user_name
----                   from usermaster
----                  where user_user_id=copt_user_id) "UserName",
----                  copt_other_currency "OtherCurrencyCode",copt_lot_numbers "Lot_Numbers",copt_lot_price "Lot_Price",
----                  copt_dealer_remark "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
----                  copt_base_currency "BaseCurrencyCode",
----                   0 "ExchangeRate",
----                   0 "LocalRate"
----             from trtran071
----              where copt_hedge_trade in (26000001,26000003)
----                and copt_process_complete = numcode8
----                and copt_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----                and copt_company_code=decode(numcode3,30199999,copt_company_code,numcode3)
----                and copt_counter_party=decode(numcode4,30699999,copt_counter_party,numcode4)
----                and copt_base_currency = decode(numcode,30499999,copt_base_currency, numcode)
----                and copt_backup_deal = decode(numcode5,33399999,copt_backup_deal, numcode5)
----                and copt_init_code = decode(numcode6,33899999,copt_init_code, numcode6)
----                and copt_base_amount
----                                >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0))
----                and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
-- --   end if;
--  Goto Process_End;
--  End if;

--if numInfoType = REFHEDGEDEALS then
--
--      varOperation := 'Extracting Cursor for Holding Rate';
----       delete from Testhari;commit;
----       insert into Testhari values(varOperation,'varOperation');commit;
--       numcode := Gconst.fncXMLExtract(xmldoc,'Param/BaseCurrency',numcode);      
--      -- insert into Testhari values(numcode,'BaseCurrency');commit;
--    --   numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/BuySell', numCode);
--    numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/ImportExport', numCode);
--    --    insert into Testhari values(numcode1,'BuySell');commit;
--       numcode2 := GConst.fncXMLExtract(xmldoc, 'Param/HedgingWith', numCode2);
--    --    insert into Testhari values(numcode2,'HedgingWith');commit;
--       numcode3 := Gconst.fncXMLExtract(xmldoc,'Param/CompanyCode',numcode3);
--     --   insert into Testhari values(numcode3,'CompanyCode');commit;
--       numcode4 := Gconst.fncXMLExtract(xmldoc,'Param/CounterParty',numcode4);
--     --   insert into Testhari values(numcode4,'CounterParty');commit;
--       numcode5 := Gconst.fncXMLExtract(xmldoc,'Param/Category',numcode5);
--    --    insert into Testhari values(numcode5,'Category');commit;
--       numcode6 := Gconst.fncXMLExtract(xmldoc,'Param/SubCategory',numcode6);
--
--     datTemp := Gconst.fncXMLExtract(xmldoc,'Param/EffectiveDate',datTemp);
--
--     --   insert into Testhari values(numcode6,'SubCategory');commit;
--      -- numdetail := Gconst.fncXMLExtract(xmldoc,'OtherCurrency',numdetail);
--      -- numLocationCode := Gconst.fncXMLExtract(xmldoc,'Param/CrossCurrency',numLocationCode);
--    --    insert into Testhari values(numLocationCode,'CrossCurrency');commit;
--       numcode8:= Gconst.fncXMLExtract(xmldoc,'Param/LinkingCancelledDeals',numcode8);
--    --    insert into Testhari values(numcode8,'LinkingCancelledDeals');commit;
-- --   if numcode2 = GConst.ForwardContract then
------Added by Ishwarachandra--------------- For multiple deal linking for Forward Contract
-- --     if numLocationCode = 12400002 then
--        SELECT decode(EXTY_INFLOW_OUTFLOW,17300002, 25300002,17300001,25300001)
--                 into numCode7 FROM TRMASTER259 
--                 WHERE EXTY_PICK_CODE=numcode1
--                 AND exty_record_status not in (10200005,10200006);
--                 
--      Open Gencursor for
--          with CTE as(
--           select  deal_execute_date ExecuteDate ,
--             pkgReturnCursor.fncGetDescription(deal_backup_deal,2) Category,
--            pkgReturnCursor.fncGetDescription(deal_init_code,2) SubCategory,
--            deal_base_amount BaseAmount,
--            Deal_other_amount QuoteAmount,
----            NVL((select sum(hedg_hedged_fcy)
----                from trtran004
----                where hedg_deal_number = deal_deal_number
----                and hedg_record_status not in (10200005,10200006)),0) CoveredAmount,
--           nvl(pkgReportprograms.fncGetCoverAmount(  null,deal_deal_number),0)    CoveredAmount,
----           
----                NVL((select sum( decode(Deal_writing_in,38300001,cdel_cancel_amount,cdel_other_amount))
----                from trtran006 a
----                where a.cdel_deal_number = deal_deal_number
----                and a.cdel_deal_serial = deal_serial_number
----                and a.cdel_record_status in (10200001, 10200003,10200004)),0)Reversed,
--                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as OutStanding,
----                (decode(Deal_writing_in,38300001,deal_base_amount,deal_other_amount)-
----                   ( NVL((select sum(hedg_hedged_fcy)
----                            from trtran004
----                            where hedg_deal_number = deal_deal_number 
----                            and hedg_record_status not in (10200005,10200006)),0)
----                              )) UncoveredAmount,
----                (decode(Deal_writing_in,38300001,deal_base_amount,deal_other_amount)-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number 
----                                              and hedg_record_status not in (10200005,10200006)),0)
----                                                )) HedgingAmount,
--                DEAL_SPOT_RATE SpotRate,
--                DEAL_FORWARD_RATE ForwardRate,
--                DEAL_MARGIN_RATE MarginRate,
--                deal_Exchange_rate AllinRate,
--                DEAL_MATURITY_FROM ExpiryDate,
--                deal_maturity_date SettlementDate,
--                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) BuySell,
--                deal_user_reference TradeReference,  
--               -- deal_other_amount QuoteAmount, ----Up to here
--                pkgReturnCursor.fncGetDescription(deal_base_currency,2) BaseCurrency,
--                pkgReturnCursor.fncGetDescription(deal_other_currency,2) OtherCurrency,
--                pkgReturnCursor.fncGetDescription(deal_counter_party,2) Bank,
--               -- deal_spot_rate SpotRate,
--                deal_forward_rate Premium,
--              --  deal_margin_rate MarginRate, 
--              deal_serial_number SerialNumber,
--                deal_local_rate LocalRate, deal_exchange_rate ExchangeRate,
--                deal_deal_number DealNumber,deal_other_currency OtherCurrencyCode, 0 RecordStatus
--                from trtran001 left outer join TRMASTER256
--                ON deal_base_currency = CNDI_BASE_CURRENCY AND deal_other_currency = CNDI_OTHER_CURRENCY                
--                where  
----                deal_Company_Code in
----                (select usco_company_code from trsystem022a
----                  where usco_user_id =varUserid)
----                and
--                deal_record_status in (10200001, 10200002, 10200003, 10200004)
--                and deal_company_code = decode(numcode3,30199999, deal_company_code, numcode3)
--                and deal_counter_party = decode(numcode4,30699999,deal_counter_party,numcode4)
--              --  and deal_process_complete = GConst.OPTIONNO 
--                and Deal_maturity_date >=datTemp 
--                and deal_buy_sell = decode(numCode7,25399999,deal_buy_sell, numCode7)
--                and (case when CNDI_OUTSTANDING_TRACKING =38300001 then deal_base_currency else deal_other_currency end) =
--                   decode(numcode,30499999,(case when CNDI_OUTSTANDING_TRACKING =38300001 then deal_base_currency else deal_other_currency end), numcode)
--                and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
--                and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
--                 and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        WHERE UPPER(usco_user_id) =VARUSERID
--                                        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)))
--                select rownum "Rownum",  ExecuteDate "ExecuteDate" , Category "Category",
--                     SubCategory "SubCategory",BaseAmount "BaseAmount",QuoteAmount "QuoteAmount",
--                     CoveredAmount "CoveredAmount",(BaseAmount-OutStanding) "Reversed",OutStanding "OutStanding", 
--                     (OutStanding-CoveredAmount) "UncoveredAmount",(OutStanding-CoveredAmount) "HedgingAmount",SpotRate "SpotRate",
--                      ForwardRate "ForwardRate",MarginRate "MarginRate", AllinRate "AllinRate",
--                      ExpiryDate "ExpiryDate", SettlementDate "SettlementDate", BuySell "BuySell",
--                      TradeReference "TradeReference", BaseCurrency  "BaseCurrency", OtherCurrency "OtherCurrency",
--                      Bank "Bank",Premium "Premium",LocalRate "LocalRate",ExchangeRate  "ExchangeRate",
--                      DealNumber "DealNumber", OtherCurrencyCode "OtherCurrencyCode", 0 "RecordStatus",
--                      SerialNumber "SerialNumber"
--                 from CTE
--                 where OutStanding>0
--                 and (OutStanding- CoveredAmount)>0 ;
--
---- Commented because we have written saparate Cursor for Delete and View                
----                and ((numUserActionType in (101,102,103,104)
----                and deal_process_complete = numcode8
----                and (Deal_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number
----                                                and hedg_record_status not in (10200005,10200006)),0))))
----                 or (numUserActionType not in (101,102,103,104)));
--
----    elsif   numLocationCode = 12400001 then
----            Open Gencursor for
----            select rownum "Rownum", deal_execute_date "ExecuteDate" ,pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
----            pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
----            DEAL_OTHER_AMOUNT "BaseAmount",
----            NVL((select sum(hedg_hedged_fcy)
----                from trtran004
----                where hedg_deal_number = deal_deal_number
----                and hedg_record_status not in (10200005,10200006)),0) "CoveredAmount",
----                NVL((select sum(CDEL_OTHER_AMOUNT)
----                from trtran006 a
----                where a.cdel_deal_number = deal_deal_number
----                and a.cdel_deal_serial = deal_serial_number
----                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
----                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as "OutStanding",
----                  (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number 
----                                              and hedg_record_status not in (10200005,10200006)),0)
----                                                )) "HedgingAmount",
----                (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
----                            from trtran004
----                            where hedg_deal_number = deal_deal_number 
----                            and hedg_record_status not in (10200005,10200006)),0)
----                              )) "UnCoveredAmount",
----                DEAL_SPOT_RATE "SpotRate",
----                DEAL_FORWARD_RATE "ForwardRate",
----                DEAL_MARGIN_RATE "MarginRate",
----                deal_Exchange_rate "AllinRate",
----                DEAL_MATURITY_FROM "ExpiryDate",
----                deal_maturity_date "SettlementDate",
----                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) "BuySell",
----                deal_user_reference "TradeReference",  
----                deal_other_amount "QuoteAmount", ----Up to here
----                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
----                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
----                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
----               -- deal_spot_rate "SpotRate", 
----                deal_forward_rate "Premium",
----               -- deal_margin_rate "MarginRate", 
----                deal_local_rate "LocalRate", deal_exchange_rate "ExchangeRate",
----                deal_deal_number "DealNumber",deal_other_currency "OtherCurrencyCode", 0 "RecordStatus"
----             from trtran001
----            where deal_hedge_trade in (26000001 ,26000003)
----                  and deal_process_complete = numcode8
----                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
----                  and deal_company_code=decode(numcode3,30199999,deal_company_code,numcode3)
----                  and deal_counter_party=decode(numcode4,30699999,deal_counter_party,numcode4)
----                  and deal_buy_sell= decode(numcode1,25399999,deal_buy_sell, numcode1)
----                  and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
----                  and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
----                  and deal_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----              and deal_other_currency = decode(numcode,30499999,deal_other_currency, numcode)
----              and (DEAL_OTHER_AMOUNT >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = deal_deal_number
----                                                and hedg_record_status not in (10200005,10200006)),0)));
----      end if;
----    elsif numcode2=GConst.FutureContract then
----         Open Gencursor for
----            select rownum "Rownum", cfut_execute_date "ExecuteDate" ,cfut_deal_number "DealNumber",cfut_exchange_rate "ExchangeRate",
----                 cfut_base_amount "BaseAmount",
----                  NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = cfut_deal_number
----                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",
----
----                   (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                  (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                )) "UnCoveredAmount",
----                                                
----                (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                  (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                )) "HedgingAmount",
----                 
----                 fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
----                 cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",
----                 --pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
----                 cfut_maturity_date "SettlementDate",0 "SerialNumber",fncgetdescription(cfut_counter_party,1) "CounterParty",
----                 fncgetdescription(cfut_init_code,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
----                 fncgetdescription(cfut_exchange_code,1) "SwapOutright",fncgetdescription(cfut_contract_type,1) "DealType",
----                 cfut_time_stamp "DealTimeStamp",
----                 (select user_user_name
----                   from usermaster
----                  where user_user_id=cfut_user_id) "UserName",
----                  cfut_other_currency "OtherCurrencyCode",cfut_lot_numbers "Lot Numbers",CFUT_EXCHANGE_RATE "Lot Price",
----                  cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
----                  cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode"
----             from trtran061
----            where cfut_hedge_trade in (26000001,26000003)
----              and cfut_process_complete = GConst.OPTIONNO
----              and cfut_company_code=decode(numcode3,30199999,cfut_company_code,numcode3) --numcode3
----              and cfut_exchange_code=decode(numcode4,50199999,cfut_exchange_code,numcode4)
----              and cfut_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----              and cfut_buy_sell= decode(numcode1,25399999,cfut_buy_sell, numcode1)
----              and cfut_base_currency = decode(numcode,30499999,cfut_base_currency, numcode)
----              and cfut_backup_deal = decode(numcode5,33399999,cfut_backup_deal, numcode5)
----              and cfut_init_code = decode(numcode6,33899999,cfut_init_code, numcode6)
----              and (cfut_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = cfut_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                +
----                                          (NVL((select sum(cfrv_reverse_lot)
----                                              from trtran063
----                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
----                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
----                                                ))
----             and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
----
----      elsif numcode2=GConst.OptionContract then
----         Open Gencursor for
----            select rownum "Rownum", copt_execute_date "ExecuteDate",copt_deal_number "DealNumber",
----                    decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount)"BaseAmount",      
----                    NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = copt_deal_number
----                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",                    
----                (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.PURCHASEDEAL
----                   and cosu_option_type=GCONST.OptionCall) "BC",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.PURCHASEDEAL
----                   and cosu_option_type=GCONST.OptionPut) "BP",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.SALEDEAL
----                   and cosu_option_type=GCONST.OptionPut) "SP",
----               (select avg(cosu_strike_rate) from trtran072
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.SALEDEAL
----                   and cosu_option_type=GCONST.OptionCall) "SC",
----                    NVL((select sum(hedg_hedged_fcy)
----                         from trtran004
----                         where hedg_deal_number = copt_deal_number
----                         and copt_record_status in (10200001, 10200003, 10200004,10200012)),0) "AdjustedAmount",
----                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
----                    ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                )) "HedgingAmount",
----                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
----                    ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
----                                                )) "UnCoveredAmount",
----                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
----                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
----                 fncgetdescription(copt_base_currency,2) "BaseCurrency", fncgetdescription(copt_other_currency,2) "OtherCurrency",
----                 copt_other_amount "OtherAmount",0 "LocalRate",0 "AmountLocal",
----                 COPT_MATURITY_DATE "SettlementDate",1 "SerialNumber",fncgetdescription(copt_counter_party,1) "CounterParty",
----                 fncgetdescription(copt_hedge_trade,1) "HedgeTrade",
----                 fncgetdescription(copt_contract_type,1) "DealType",
----                 copt_time_stamp "DealTimeStamp",
----                 (select user_user_name
----                   from usermaster
----                  where user_user_id=copt_user_id) "UserName",
----                  copt_other_currency "OtherCurrencyCode",copt_lot_numbers "Lot_Numbers",copt_lot_price "Lot_Price",
----                  copt_dealer_remark "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
----                  copt_base_currency "BaseCurrencyCode",
----                   0 "ExchangeRate",
----                   0 "LocalRate"
----             from trtran071
----              where copt_hedge_trade in (26000001,26000003)
----                and copt_process_complete = numcode8
----                and copt_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----                and copt_company_code=decode(numcode3,30199999,copt_company_code,numcode3)
----                and copt_counter_party=decode(numcode4,30699999,copt_counter_party,numcode4)
----                and copt_base_currency = decode(numcode,30499999,copt_base_currency, numcode)
----                and copt_backup_deal = decode(numcode5,33399999,copt_backup_deal, numcode5)
----                and copt_init_code = decode(numcode6,33899999,copt_init_code, numcode6)
----                and copt_base_amount
----                                >  ( NVL((select sum(hedg_hedged_fcy)
----                                              from trtran004
----                                              where hedg_deal_number = copt_deal_number
----                                                and hedg_record_status in (10200001, 10200003, 10200004)),0))
----                and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
-- --   end if;
--  Goto Process_End;
--  End if;





  If  numInfoType =REFCUSTOMRATEIMP THEN
      varOperation := 'Extracting Import Exchange Rate';
      datTemp := GConst.fncXMLExtract(xmlDoc, 'Param/ReferenceDate', datTemp);
      numCode := GConst.fncXMLExtract(xmlDoc, 'Param/RateType', numCode);
      numCode1 := GConst.fncXMLExtract(xmlDoc, 'Param/TradeCurrency', numCode1);
      numTemp := GConst.fncXMLExtract(xmlDoc, 'Param/TenorPeriod', numTemp);
      numCode2 := GConst.fncXMLExtract(xmlDoc, 'Param/LocalBank', numCode2);
      datTemp1 := GConst.fncXMLExtract(xmlDoc, 'Param/MaturityDate', datTemp1);
      numCode4 := GConst.fncXMLExtract(xmlDoc, 'Param/ImportExport', numCode4);

      begin 
        numCode3 := GConst.fncXMLExtract(xmlDoc, 'LocalCurrency', numCode3);
      exception 
        when others then 
         numCode3 :=30400003;
      end;

      if (numCode3 =30499999) then
        numCode3 :=30400003;
      end if;  

      varOperation := 'Extracting Bank Margin Rate';
      begin
      select NVL(lbnk_bank_margin ,0)
        into numTemp1
        from trmaster306
        where lbnk_pick_code = numCode2;
      exception 
        when others then 
         numTemp1 :=0;
      end;        

--  if varentity = 'IMPORTTRADEREGISTER' then
--  
--    numRate:=  Function fncGetRate_ForRateType
--    ( numCode1,
--      numCode3 ,
--      datTemp ,
--      25300001,
--      datTemp1,
--      numCode ,
--      numSpot ,
--      Premium ,
--      BankMargin) 
--      
----      if numCode = 1 then
----
----        varOperation := 'Extracting Custom Rates';
----        Open GenCursor for
----        select erat_import_custom SpotRate, 0 Premium
----          from tfsystem009
----          where erat_currency_code = numCode1
----          and erat_effective_date =
----          (select max(erat_effective_date)
----            from tfsystem009
----            where erat_currency_code = numCode1
----            and erat_effective_date <= datTemp);
----      Else
--        select pkgForexProcess.fncGetRate(numCode1,numCode3,datTemp,25300001,0,NULL)
--          into numSpot
--          from dual;
--
--
----      End if;
--
--    else
----       if numCode = 1 then
----
----        Open GenCursor for
----        select ERAT_EXPORT_CUSTOM SpotRate, 0 Premium
----          from tfsystem009
----          where erat_currency_code = numCode1
----          and erat_effective_date =
----          (select max(erat_effective_date)
----            from tfsystem009
----            where erat_currency_code = numCode1
----            and erat_effective_date <= datTemp);
----      Else
--        select pkgForexProcess.fncGetRate(numCode1,numCode3,datTemp,25300002,0,NULL)
--          into numSpot
--          from dual;
--
--        Open GenCursor for
--        select
--          numSpot "SpotRate",
--          pkgForexProcess.fncGetRate(numCode1,numCode3,datTemp,25300002,0,datTemp + numTemp) - numSpot "Premium",
--          numTemp1 "BankMargin"
--          from dual;
--
----      End if;
--
--    end if;

  if varentity in ('IMPORTTRADEREGISTER','EXPOSUREROLLOVER') then

    numRate:=  pkgforexprocess.fncGetRate_ForRateType ( numCode1, numCode3 , datTemp ,  numCode4, datTemp1,
      numCode , numSpot ,numRate1 , numRate2);
  elsif varentity IN ('EXPORTTRADEREGISTER','EXPOSUREROLLOVER') then

    numRate:=  pkgforexprocess.fncGetRate_ForRateType ( numCode1, numCode3 , datTemp ,  numCode4, datTemp1,
      numCode , numSpot ,numRate1 , numRate2);
  End If;

      Open GenCursor for
        select  numSpot "SpotRate",
          numRate1 - numSpot "Premium",
          numRate2 "BankMargin",
          numRate "FinalRate"
          from dual;
    GOTO process_end;
 end if;   
if numInfoType =REFFUTUREOUTSTANDING then
    -- numcode :=gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
     varoperation := 'Extracting Information of Outstanding Deals ';

 --   if varEntity = 'CURRENCYFUTUREDEALCANCEL' then 

 Begin
        VarReference := gconst.fncxmlextract(xmldoc,'Param/DealNumber', VarReference);
        Exception 
            when others then 
            varreference := '0';        
        end;

      --  commit;
     Open Gencursor For  
        select cfut_deal_number "DealNumber" ,
        pkgreturncursor.fncgetdescription(cfut_product_code,2) "Currency",
          cfut_execute_date "ExecuteDate",
          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "BusinessUnit",
          pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) "ProfitCentre",
          fncGetDescription(CFUT_EXCHANGE_CODE,2) "Exchange",
          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "Broker",
          pkgreturncursor.fncgetdescription(Cfut_Buy_Sell,2) "Buy_Sell",
          --CFUT_LOT_NUMBERS "NoOfLots", 
          pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "OutstandingLots", 
          CFUT_LOT_NUMBERS- pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "AdjustedLots",
          CPRO_Trade_unit "LotQuantity",
          (CPRO_Trade_unit* pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)) "OutstandingAmount",
          fncgetdescription(CFUT_BASE_CURRENCY,2) "BaseCurrency",
            fncgetdescription(CFUT_OTHER_CURRENCY,2) "OtherCurrency",
          CFUT_SPOT_RATE "SpotRate", CFUT_FORWARD_RATE "ForwardRate",
          CFUT_MARGIN_RATE  "MarginRate", CFUT_EXCHANGE_RATE "AllInRate",
          --cfut_Lot_price "AllInRate",
          CFUT_Maturity_From "ExpiryDate",
          Cfut_Maturity_Date "DeliveryDate",
        --  0 "LotQuantity",
         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
          cfut_base_amount "TradeAmount", cfut_margin_amount "MarginAmount",
          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
           pkgreturncursor.fncGetDescription(cfut_hedge_trade,2) "hedgetrade",
          Cfut_Product_Code "productCode",Cfut_Record_Status "RecordStatus",
          Cfut_Bank_Reference "BankReference",Cfut_Company_Code "CompanyCode",
          cfut_counter_party "CounterParty",  CFUT_LOCATION_CODE "LocationCode",
          Cfut_Backup_Deal "Portfolio", CFUT_INIT_CODE "SubPortfolio",
          Cfut_Buy_Sell "BuySell", CPRO_TRADE_UNIT "TradeUnit",
           CFUT_OTHER_CURRENCY "OtherCurrencyCode",
            CFUT_BASE_CURRENCY "BaseCurrencyCode",
            CPRO_DEALWRITING_IN "WritingINCode", CPRO_MTM_PERUNIT "MTMPerUnit",
            CFUT_DEALER_NAME "DealerId",
            (SELECT user_user_name 
              FROM usermaster 
              WHERE upper(user_user_id)=upper(CFUT_DEALER_NAME)
              and user_record_status not in (10200005,10200006)) "DealerName"
       from trtran061 inner join trmaster503
         on CFUT_PRODUCT_CODE= CPRO_PICK_CODE
       where cfut_process_complete != gconst.OPTIONYES and
       cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid 
	   AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
        and CFUT_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)) 
          --And Cfut_Exchange_Code= Numcode
--          and ((varEntity = 'CURRENCYFUTUREDEALCANCEL' and cfut_hedge_trade in (26000001,26000003))
--                or (varEntity = 'CURRENCYFUTURETRADDEALCANCEL' and cfut_hedge_trade in (26000002)))
          and cfut_record_status not in (10200006, 10200005)
          and cpro_record_status not in (10200006,10200005)
          and cfut_deal_number = decode(VarReference,'0',cfut_deal_number,VarReference);


--      elsif varEntity = 'CURRENCYFUTURETRADDEALCANCEL' then
--           open gencursor for  
--        select cfut_deal_number "DealNumber" ,pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
--          cfut_execute_date "Execute Date",
--          --0 "NoOfLots", 
--          Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,Gconst.Utilfuturedeal,Gconst.Amountfcy, Datworkdate)  "NoOfLots", 
--          cfut_Lot_price "UnitPrice",
--        --  0 "LotQuantity",
--          (cfut_lot_quantity /cfut_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",
--          
--         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
--          cfut_base_amount "TradeAmount",cfut_margin_amount "MarginAmount",
--          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
--          Cfut_Maturity_Date "MaturityDate",Cfut_Buy_Sell "Buysell",
--            pkgreturncursor.fncGetDescription(cfut_hedge_trade,2) "hedgetrade",
--          cfut_product_code "productCode",cfut_record_status "RecordStatus",
--          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "Initiator",
--          Pkgreturncursor.Fncgetdescription(Cfut_Init_Code,2) "Trader",
--          CFUT_BANK_REFERENCE "BankReference",Cfut_Company_Code "CompanyCode",
--          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "CounterParty"
--          from trtran061
--          where cfut_process_complete= gconst.optionNo
--            and cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and cfut_exchange_code= numcode
--          and cfut_hedge_trade in(26000002)
--          and cfut_record_status not in (10200006, 10200005);
--    end if;      
         goto process_end;
  End If;

if numInfoType =REFPATICULAREFUTDEAL then
    -- numcode :=gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
     varoperation := 'Extracting Information of Outstanding Deals ';

 --   if varEntity = 'CURRENCYFUTUREDEALCANCEL' then 

 Begin
        VarReference := gconst.fncxmlextract(xmldoc,'Param/DealNumber', VarReference);
        Exception 
            when others then 
            varreference := '0';        
        end;

       -- commit;
     Open Gencursor For  
        select cfut_deal_number "DealNumber" ,
        pkgreturncursor.fncgetdescription(cfut_product_code,2) "Currency",
          cfut_execute_date "ExecuteDate",
          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "BusinessUnit",
          pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) "ProfitCentre",
          fncGetDescription(CFUT_EXCHANGE_CODE,2) "Exchange",
          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "Broker",
          pkgreturncursor.fncgetdescription(Cfut_Buy_Sell,2) "Buy_Sell",
          --CFUT_LOT_NUMBERS "NoOfLots", 
          pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "OutstandingLots", 
          CFUT_LOT_NUMBERS- pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "AdjustedLots",
          CPRO_Trade_unit "LotQuantity",
          (CPRO_Trade_unit* pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)) "OutstandingAmount",
          fncgetdescription(CFUT_BASE_CURRENCY,2) "BaseCurrency",
            fncgetdescription(CFUT_OTHER_CURRENCY,2) "OtherCurrency",
          CFUT_SPOT_RATE "SpotRate", CFUT_FORWARD_RATE "ForwardRate",
          CFUT_MARGIN_RATE  "MarginRate", CFUT_EXCHANGE_RATE "AllInRate",
          --cfut_Lot_price "AllInRate",
          CFUT_Maturity_From "ExpiryDate",
          Cfut_Maturity_Date "DeliveryDate",
        --  0 "LotQuantity",
         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
          cfut_base_amount "TradeAmount", cfut_margin_amount "MarginAmount",
          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
           pkgreturncursor.fncGetDescription(cfut_hedge_trade,2) "hedgetrade",
          Cfut_Product_Code "productCode",Cfut_Record_Status "RecordStatus",
          Cfut_Bank_Reference "BankReference",Cfut_Company_Code "CompanyCode",
          cfut_counter_party "CounterParty",  CFUT_LOCATION_CODE "LocationCode",  
          Cfut_Buy_Sell "BuySell", CPRO_TRADE_UNIT "TradeUnit",
           CFUT_OTHER_CURRENCY "OtherCurrencyCode",
            CFUT_BASE_CURRENCY "BaseCurrencyCode",
            CPRO_DEALWRITING_IN "WritingInCode", CPRO_MTM_PERUNIT "MTMPerUnit",
             CFUT_DEALER_NAME "DealerId",
            (SELECT user_user_name 
              FROM usermaster 
              WHERE upper(user_user_id)=upper(CFUT_DEALER_NAME)
              and user_record_status not in (10200005,10200006)) "DealerName"
       from trtran061 inner join trmaster503
         on CFUT_PRODUCT_CODE= CPRO_PICK_CODE
       where cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid 
        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
         and CFUT_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))    
          --And Cfut_Exchange_Code= Numcode
--          and ((varEntity = 'CURRENCYFUTUREDEALCANCEL' and cfut_hedge_trade in (26000001,26000003))
--                or (varEntity = 'CURRENCYFUTURETRADDEALCANCEL' and cfut_hedge_trade in (26000002)))
          and cfut_record_status not in (10200006, 10200005)
          and cpro_record_status not in (10200006,10200005)
          and cfut_deal_number = decode(VarReference,'0',cfut_deal_number,VarReference);

         goto process_end;
  End If;


if numinfotype=REFCURRENCYLABEL then
      numCode1 := GConst.fncxmlextract(xmldoc,'LocationCode',numCode1);
            open GenCursor for
                select pkgreturncursor.fncgetdescription(locn_local_currency,2) "Currency",
                       locn_local_currency "CurrencyCode"
                from trmaster302 
                   where locn_pick_code= numCode1;


 GoTo Process_End;
 End if;   

 if numInfoType = REFTRADELINKING then
        varOperation := 'Extracting Trade Register for Hedging';
        numCode := GConst.fncXMLExtract(xmldoc, 'ImportExport', numCode);
        numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
        numcode2 := Gconst.fncXMLextract(xmldoc, 'CompanyCode',numcode2);
        numcode3 := Gconst.fncXMLextract(xmldoc,'CounterParty',numcode3);
        numCode4 := Gconst.fncXMLextract(xmldoc,'Category',numcode4);
        Numcode5 := Gconst.Fncxmlextract(Xmldoc,'SubCategory',Numcode5);
        datTemp := Gconst.fncXMLExtract(xmldoc,'EffectiveDate',datTemp);
       -- numCode6 := Gconst.Fncxmlextract(Xmldoc,'CrossCurrency',numCode6);
        SELECT NVL(PRMC_TRADEFINANCE_LINK,12400002) INTO numCode7 FROM TRSYSTEM051;

       varOperation := PKGFOREXPROCESS.fncExposureCovered('01-JAN-16',datTemp,NULL, NULL);

--IF  numCode7 = 12400002 then  
      if numCode6 = 12400002 then ---Corss currency no then
        if numCode <= 25900050 then
           numCode8 := 25300002;
        else
           numCode8 := 25300001;
        end if;
      else
         if numCode <= 25900050 then
           numCode8 := 25300001;
        else
           numCode8 := 25300002;
        end if;
      end if;


   open Gencursor for

   With OpenExposure as 
     (select pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) Product, 
          trad_contract_no as BillReference,
          pkgreturncursor.fncgetdescription(trad_local_bank,2) as Bank,
          trad_maturity_date BillMaturity,
          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as Currency,
          trad_trade_fcy  BillAmount,
          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,GCONST.UTILCONTRACTOS,1,datTemp) OutStanding,
          NVL(PKGREPORTPROGRAMS.fncGetCoverAmount (TRAD_TRADE_REFERENCE,NULL),0) CoveredAmount, 
--          NVL((select sum(hedg_hedged_fcy)
--                from trtran004
--                where HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
--                and hedg_record_status not in (10200005,10200006)),0) CoveredAmount,
          trad_trade_rate BenchMarkRate, trad_trade_inr RupeeAmount, 
          trad_trade_reference TradeReference,trad_reference_date as ReferenceDate, 
          trad_trade_remarks BankReference,
          pkgreturncursor.fncgetdescription(trad_company_code,2) as CompanyName,
          trad_local_bank BankCode,trad_company_code CompanyCode,
          trad_trade_currency currencyCode ,
         (select b.trad_maturity_date
            from TradeRegister b
            where a.trad_reverse_reference = b.trad_trade_reference) ContractMaturity
          from TradeRegister a 
          inner join trmaster259
            on TRAD_IMPORT_EXPORT=EXTY_PICK_CODE
            and exty_record_Status not in (10200005,1020006)            
          where 
--          trad_import_export in
--          (select erel_entity_relation
--             from trsystem008
--             where erel_main_entity =
--             decode(numCode8, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--             and erel_relation_type = 259)
         -- and 
          trad_process_complete = GConst.OPTIONNO
          and nvl(EXTY_ALLOW_LINKING,12400002) = 12400001
--          and trad_Company_Code in
--          (select usco_company_code from trsystem022a
--           where usco_user_id = varUserid)
          and trad_record_status between 10200001 and 10200004
          and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
          and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
          and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
          and trad_product_category  = decode(numcode4,33399999,trad_product_category,numcode4)
          and trad_subproduct_Code = decode(numcode5,33899999,trad_subproduct_code,numcode5)
          and trad_maturity_date >= datTemp
          --and TRAD_IMPORT_EXPORT in(25900053,25900059)
          AND TRAD_IMPORT_EXPORT = decode(numCode,25999999,TRAD_IMPORT_EXPORT,numCode)
          and  Trad_company_code in (select usco_company_code from trsystem022a
                            where UPPER(usco_user_id) =varUserid
                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
          and  TRAD_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)))

          select rownum "Rownum", Product "Product", 
          BillReference as "BillReference",Bank as "Bank",
          BillMaturity "BillMaturity",Currency as "Currency",
          BillAmount  "BillAmount",OutStanding "OutStanding",CoveredAmount "CoveredAmount",  
          (Case when OutStanding> CoveredAmount then OutStanding-CoveredAmount else 0 end) "UncoveredAmount",
          (Case when OutStanding> CoveredAmount then OutStanding-CoveredAmount else 0 end)"HedgingAmount",
          BenchMarkRate "BenchMarkRate", RupeeAmount "RupeeAmount", TradeReference "TradeReference",
          ReferenceDate as "ReferenceDate",  BankReference "BankReference",   CompanyName as "CompanyName",
          BankCode "BankCode",CompanyCode "CompanyCode",
          currencyCode "currencyCode" ,0 "RecordStatus", ContractMaturity "ContractMaturity"
          from OpenExposure
          where OutStanding>0
          and OutStanding-CoveredAmount>0;
         -- and trad_local_bank not in(30699999);
   Goto Process_End;
   end if;

-- if numInfoType = REFTRADELINKING then
--        varOperation := 'Extracting Trade Register for Hedging';
--        numCode := GConst.fncXMLExtract(xmldoc, 'ImportExport', numCode);
--        numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--        numcode2 := Gconst.fncXMLextract(xmldoc, 'CompanyCode',numcode2);
--        numcode3 := Gconst.fncXMLextract(xmldoc,'CounterParty',numcode3);
--        numCode4 := Gconst.fncXMLextract(xmldoc,'Category',numcode4);
--        Numcode5 := Gconst.Fncxmlextract(Xmldoc,'SubCategory',Numcode5);
--        datTemp := Gconst.fncXMLExtract(xmldoc,'EffectiveDate',datTemp);
--       -- numCode6 := Gconst.Fncxmlextract(Xmldoc,'CrossCurrency',numCode6);
--        SELECT NVL(PRMC_TRADEFINANCE_LINK,12400002) INTO numCode7 FROM TRSYSTEM051;
--
--       varOperation := PKGFOREXPROCESS.fncExposureCovered('01-JAN-16',datTemp,NULL, NULL);
--
----IF  numCode7 = 12400002 then  
--      if numCode6 = 12400002 then ---Corss currency no then
--        if numCode <= 25900050 then
--           numCode8 := 25300002;
--        else
--           numCode8 := 25300001;
--        end if;
--      else
--         if numCode <= 25900050 then
--           numCode8 := 25300001;
--        else
--           numCode8 := 25300002;
--        end if;
--      end if;
--
--
--   open Gencursor for
--
--   With OpenExposure as 
--     (select rownum Rowno, pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) Product, 
--          trad_Contract_No as BillReference,
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as Bank,
--          trad_maturity_date BillMaturity,
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as Currency,
--          trad_trade_fcy  BillAmount,
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,GCONST.UTILCONTRACTOS,1,datTemp) OutStanding,
--          NVL(PKGREPORTPROGRAMS.fncGetCoverAmount (TRAD_TRADE_REFERENCE,NULL),0) CoveredAmount, 
----          NVL((select sum(hedg_hedged_fcy)
----                from trtran004
----                where HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
----                and hedg_record_status not in (10200005,10200006)),0) CoveredAmount,
--          trad_trade_rate BenchMarkRate, trad_trade_inr RupeeAmount, 
--          trad_trade_reference TradeReference,trad_reference_date as ReferenceDate, 
--          trad_trade_remarks BankReference,
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as CompanyName,
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,
--         (select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference) ContractMaturity
--          from TradeRegister a 
--          inner join trmaster259
--            on TRAD_IMPORT_EXPORT=EXTY_PICK_CODE
--            and exty_record_Status not in (10200005,1020006)            
--          where 
----          trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode8, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
--         -- and 
--          trad_process_complete = GConst.OPTIONNO
--          and nvl(EXTY_ALLOW_LINKING,12400002) = 12400001
----          and trad_Company_Code in
----          (select usco_company_code from trsystem022a
----           where usco_user_id = varUserid)
--          and trad_record_status between 10200001 and 10200004
--          and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
--          and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
--          and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
--          and trad_product_category  = decode(numcode4,33399999,trad_product_category,numcode4)
--          and trad_subproduct_Code = decode(numcode5,33899999,trad_subproduct_code,numcode5)
--          and trad_maturity_date >= datTemp
--          --and TRAD_IMPORT_EXPORT in(25900053,25900059)
--          AND TRAD_IMPORT_EXPORT = decode(numCode,25999999,TRAD_IMPORT_EXPORT,numCode)
--          and  Trad_company_code in (select usco_company_code from trsystem022a
--                            where UPPER(usco_user_id) =varUserid
--                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--          and  TRAD_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)))
--
--          select ROWNO "Rownum", Product "Product", 
--          BillReference as "BillReference",Bank as "Bank",
--          BillMaturity "BillMaturity",Currency as "Currency",
--          BillAmount  "BillAmount",OutStanding "OutStanding",CoveredAmount "CoveredAmount",  
--          (Case when OutStanding> CoveredAmount then OutStanding-CoveredAmount else 0 end) "UncoveredAmount",
--          (Case when OutStanding> CoveredAmount then OutStanding-CoveredAmount else 0 end)"HedgingAmount",
--          BenchMarkRate "BenchMarkRate", RupeeAmount "RupeeAmount", TradeReference "TradeReference",
--          ReferenceDate as "ReferenceDate",  BankReference "BankReference",   CompanyName as "CompanyName",
--          BankCode "BankCode",CompanyCode "CompanyCode",
--          currencyCode "currencyCode" ,0 "RecordStatus", ContractMaturity "ContractMaturity"
--          from OpenExposure
--          where OutStanding>0
--          and OutStanding-CoveredAmount>0;
--         -- and trad_local_bank not in(30699999);
--   Goto Process_End;
--   end if;

-- if numInfoType = REFTRADELINKING then
--        varOperation := 'Extracting Trade Register for Hedging';
--        numCode := GConst.fncXMLExtract(xmldoc, 'ImportExport', numCode);
--        numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--        numcode2 := Gconst.fncXMLextract(xmldoc, 'CompanyCode',numcode2);
--        numcode3 := Gconst.fncXMLextract(xmldoc,'CounterParty',numcode3);
--        numCode4 := Gconst.fncXMLextract(xmldoc,'Category',numcode4);
--        Numcode5 := Gconst.Fncxmlextract(Xmldoc,'SubCategory',Numcode5);
--        datTemp := Gconst.fncXMLExtract(xmldoc,'EffectiveDate',datTemp);
--       -- numCode6 := Gconst.Fncxmlextract(Xmldoc,'CrossCurrency',numCode6);
--        SELECT NVL(PRMC_TRADEFINANCE_LINK,12400002) INTO numCode7 FROM TRSYSTEM051;
--
--       varOperation := PKGFOREXPROCESS.fncExposureCovered('01-JAN-16',datTemp,NULL, NULL);
--
----IF  numCode7 = 12400002 then  
--      if numCode6 = 12400002 then ---Corss currency no then
--        if numCode <= 25900050 then
--           numCode8 := 25300002;
--        else
--           numCode8 := 25300001;
--        end if;
--      else
--         if numCode <= 25900050 then
--           numCode8 := 25300001;
--        else
--           numCode8 := 25300002;
--        end if;
--      end if;
--
--
--   open Gencursor for
--
--   With OpenExposure as 
--     (select pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) Product, 
--          trad_user_reference as BillReference,
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as Bank,
--          trad_maturity_date BillMaturity,
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as Currency,
--          trad_trade_fcy  BillAmount,
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,GCONST.UTILCONTRACTOS,1,datTemp) OutStanding,
--          NVL(PKGREPORTPROGRAMS.fncGetCoverAmount (TRAD_TRADE_REFERENCE,NULL),0) CoveredAmount, 
----          NVL((select sum(hedg_hedged_fcy)
----                from trtran004
----                where HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
----                and hedg_record_status not in (10200005,10200006)),0) CoveredAmount,
--          trad_trade_rate BenchMarkRate, trad_trade_inr RupeeAmount, 
--          trad_trade_reference TradeReference,trad_reference_date as ReferenceDate, 
--          trad_trade_remarks BankReference,
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as CompanyName,
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,
--         (select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference) ContractMaturity
--          from TradeRegister a 
--          inner join trmaster259
--            on TRAD_IMPORT_EXPORT=EXTY_PICK_CODE
--            and exty_record_Status not in (10200005,1020006)            
--          where 
----          trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode8, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
--         -- and 
--          trad_process_complete = GConst.OPTIONNO
--          and nvl(EXTY_ALLOW_LINKING,12400002) = 12400001
----          and trad_Company_Code in
----          (select usco_company_code from trsystem022a
----           where usco_user_id = varUserid)
--          and trad_record_status between 10200001 and 10200004
--          and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
--          and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
--          and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
--          and trad_product_category  = decode(numcode4,33399999,trad_product_category,numcode4)
--          and trad_subproduct_Code = decode(numcode5,33899999,trad_subproduct_code,numcode5)
--          and trad_maturity_date >= datTemp
--          --and TRAD_IMPORT_EXPORT in(25900053,25900059)
--          AND TRAD_IMPORT_EXPORT = decode(numCode,25999999,TRAD_IMPORT_EXPORT,numCode)
--          and  Trad_company_code in (select usco_company_code from trsystem022a
--                            where UPPER(usco_user_id) =varUserid
--                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--          and  TRAD_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)))
--
--          select rownum "Rownum", Product "Product", 
--          BillReference as "BillReference",Bank as "Bank",
--          BillMaturity "BillMaturity",Currency as "Currency",
--          BillAmount  "BillAmount",OutStanding "OutStanding",CoveredAmount "CoveredAmount",  
--          (Case when OutStanding> CoveredAmount then OutStanding-CoveredAmount else 0 end) "UncoveredAmount",
--          (Case when OutStanding> CoveredAmount then OutStanding-CoveredAmount else 0 end)"HedgingAmount",
--          BenchMarkRate "BenchMarkRate", RupeeAmount "RupeeAmount", TradeReference "TradeReference",
--          ReferenceDate as "ReferenceDate",  BankReference "BankReference",   CompanyName as "CompanyName",
--          BankCode "BankCode",CompanyCode "CompanyCode",
--          currencyCode "currencyCode" ,0 "RecordStatus", ContractMaturity "ContractMaturity"
--          from OpenExposure
--          where OutStanding>0
--          and OutStanding-CoveredAmount>0;
--         -- and trad_local_bank not in(30699999);
--   Goto Process_End;
--   end if;

-- if numInfoType = REFTRADELINKING then
--        varOperation := 'Extracting Trade Register for Hedging';
--        numCode := GConst.fncXMLExtract(xmldoc, 'ImportExport', numCode);
--        numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--        numcode2 := Gconst.fncXMLextract(xmldoc, 'CompanyCode',numcode2);
--        numcode3 := Gconst.fncXMLextract(xmldoc,'CounterParty',numcode3);
--        numCode4 := Gconst.fncXMLextract(xmldoc,'Category',numcode4);
--        Numcode5 := Gconst.Fncxmlextract(Xmldoc,'SubCategory',Numcode5);
--        datTemp := Gconst.fncXMLExtract(xmldoc,'EffectiveDate',datTemp);
--       -- numCode6 := Gconst.Fncxmlextract(Xmldoc,'CrossCurrency',numCode6);
--        SELECT NVL(PRMC_TRADEFINANCE_LINK,12400002) INTO numCode7 FROM TRSYSTEM051;
--
--       varOperation := PKGFOREXPROCESS.fncExposureCovered('01-JAN-16',datTemp,NULL, NULL);
--
----IF  numCode7 = 12400002 then  
--      if numCode6 = 12400002 then ---Corss currency no then
--        if numCode <= 25900050 then
--           numCode8 := 25300002;
--        else
--           numCode8 := 25300001;
--        end if;
--      else
--         if numCode <= 25900050 then
--           numCode8 := 25300001;
--        else
--           numCode8 := 25300002;
--        end if;
--      end if;
--
--
--   open Gencursor for
--
--   With OpenExposure as 
--     (select pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) Product, 
--          trad_user_reference as BillReference,
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as Bank,
--          trad_maturity_date BillMaturity,
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as Currency,
--          trad_trade_fcy  BillAmount,
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,GCONST.UTILCONTRACTOS,1,datTemp) OutStanding,
--          NVL(PKGREPORTPROGRAMS.fncGetCoverAmount (TRAD_TRADE_REFERENCE,NULL),0) CoveredAmount, 
----          NVL((select sum(hedg_hedged_fcy)
----                from trtran004
----                where HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
----                and hedg_record_status not in (10200005,10200006)),0) CoveredAmount,
--          trad_trade_rate BenchMarkRate, trad_trade_inr RupeeAmount, 
--          trad_trade_reference TradeReference,trad_reference_date as ReferenceDate, 
--          trad_trade_remarks BankReference,
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as CompanyName,
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,
--         (select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference) ContractMaturity
--          from TradeRegister a 
--          inner join trmaster259
--            on TRAD_IMPORT_EXPORT=EXTY_PICK_CODE
--            and exty_record_Status not in (10200005,1020006)            
--          where 
----          trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode8, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
--         -- and 
--          trad_process_complete = GConst.OPTIONNO
--          and nvl(EXTY_ALLOW_LINKING,12400002) = 12400001
----          and trad_Company_Code in
----          (select usco_company_code from trsystem022a
----           where usco_user_id = varUserid)
--          and trad_record_status between 10200001 and 10200004
--          and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
--          and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
--          and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
--          and trad_product_category  = decode(numcode4,33399999,trad_product_category,numcode4)
--          and trad_subproduct_Code = decode(numcode5,33899999,trad_subproduct_code,numcode5)
--          and trad_maturity_date >= datTemp
--          --and TRAD_IMPORT_EXPORT in(25900053,25900059)
--          AND TRAD_IMPORT_EXPORT = decode(numCode,25999999,TRAD_IMPORT_EXPORT,numCode)
--          and  Trad_company_code in (select usco_company_code from trsystem022a
--                            where UPPER(usco_user_id) =varUserid
--                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--          and  TRAD_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)))
--
--          select rownum "Rownum", Product "Product", 
--          BillReference as "BillReference",Bank as "Bank",
--          BillMaturity "BillMaturity",Currency as "Currency",
--          BillAmount  "BillAmount",OutStanding "OutStanding",CoveredAmount "CoveredAmount",  
--          (Case when OutStanding> CoveredAmount then OutStanding-CoveredAmount else 0 end) "UncoveredAmount",
--          (Case when OutStanding> CoveredAmount then OutStanding-CoveredAmount else 0 end)"HedgingAmount",
--          BenchMarkRate "BenchMarkRate", RupeeAmount "RupeeAmount", TradeReference "TradeReference",
--          ReferenceDate as "ReferenceDate",  BankReference "BankReference",   CompanyName as "CompanyName",
--          BankCode "BankCode",CompanyCode "CompanyCode",
--          currencyCode "currencyCode" ,0 "RecordStatus", ContractMaturity "ContractMaturity"
--          from OpenExposure
--          where OutStanding>0
--          and OutStanding-CoveredAmount>0;
--         -- and trad_local_bank not in(30699999);
--   Goto Process_End;
--   end if;


     if numInfoType = REFOPTIONTRADES then
        varOperation := 'Extracting Trade Type';
       Numcode := Gconst.Fncxmlextract(Xmldoc, 'HedgeTrade', Numcode);
       Numcode2 := Gconst.Fncxmlextract(Xmldoc, 'ExerciseType', Numcode2);
       begin
          Numcode1 :=Gconst.Fncxmlextract(Xmldoc, 'ActionMode', Numcode1);          
       exception 
         when others then 
           Numcode1:=0;          
       end;
       begin         
          varReference :=Gconst.Fncxmlextract(Xmldoc, 'DealNumber', varReference);
          numcode3 := nvl(Gconst.Fncxmlextract(Xmldoc, 'SerialNumber', numcode3),0);
          numCode4 := nvl(Gconst.Fncxmlextract(Xmldoc, 'SubSerialNumber', numCode4),0);
          numCode5 := nvl(Gconst.Fncxmlextract(Xmldoc, 'ReverseSerial', numCode5),0);
       exception 
         when others then 
           varReference:='0';
           numcode3 := 0;
          numCode4 := 0;
          numCode5:=0;
       end;
       Glog.log_write(varReference || ' ' ||  Numcode2 ||' ' ||  numcode3 || ' ' || numCode4 || ' ' || numCode5 || '  After extracting Data ');
      -- insert into temp values(Numcode1||varReference, 'testoption'); commit;
      if Numcode2 = 33000003 then  
      open GenCursor for
         select rownum "Rownum", Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As "BaseCurrency",
                pkgreturncursor.fncgetdescription(copt_other_currency, 2) as "OtherCurrency",
                COPT_EXECUTE_DATE as "ExecuteDate",
                pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  "Initiator" ,
                COPT_BACKUP_DEAL  as  "InitiatorCode" ,
                pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  "Trader" ,
                COPT_INIT_CODE as  "TraderCode" ,
                pkgreturncursor.fncgetdescription(copt_counter_party, 2) as "CounterParty",
                pkgreturncursor.fncgetdescription(cosu_buy_sell,2) "Buysell", 
                pkgreturncursor.fncgetdescription(cosu_option_type,2) "OptionType",
                copt_Base_Amount "BaseAmount",
                pkgForexProcess.fncGetOutstandingTransaction(COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER) "OutstandingAmount",
                nvl(CancelAmount.corv_base_amount,0) "ReversalAmount",
                nvl(CancelAmount.CORV_REVERSE_SERIAL,0) "ReverseSerial",
--                (case when Numcode1 = 101 then 
--                 pkgForexProcess.fncGetOutstanding(COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER)
--                else CORV_BASE_AMOUNT end) -- take care of Edit Loads
                -- "MaturityAmount",
                 cosu_strike_rate "Strike",
               --  pkgForexProcess.fncGetOutstanding(COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER) "OutstandingAmount",
               COPT_EXPIRY_DATE "ExpiryDate",COPT_MATURITY_DATE "SettlementDate",
               pkgreturncursor.fncgetdescription(copt_deal_type, 1) as "DealType",
               copt_deal_type as "DealTypeCode",
               copt_user_reference "UserReference",
               --copt_execute_date "ExecuteDate",


--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall),0) "BC",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut),0) "BP",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut),0) "SP",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall),0) "SC",
               copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
               nvl(copt_Premium_Exrate,0) "PremiumExRate",copt_premium_Local "PremiumLocal",

               Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As "BaseCurrency",
               pkgreturncursor.fncgetdescription(copt_other_currency, 2) as "OtherCurrency",
               --copt_base_amount as "BaseAmount", 
               copt_deal_number "DealNumber",COSU_SERIAL_NUMBER "SerialNumber",
               --cosu_strike_rate "ExchangeRate",
                COSM_SUBSERIAL_NUMBER "SubSerialNumber",
               pkgreturncursor.fncgetdescription(copt_contract_type, 1) as "ContractType",
               pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as "HedgeTrade",

               pkgreturncursor.fncgetdescription(copt_option_style, 1) as "Optionstyle",
               copt_premium_status as "PremiumStatusCode", 
               copt_base_currency as "BaseCurrencyCode",
               copt_other_currency as "OtherCurrencyCode", copt_company_code "CompanyCode", 0 as "RecordStatus",
               Copt_Bank_Reference "BankReference",
               copt_counter_party "CounterpartyCode", 
               Copt_Premium_Exrate As PremiumRate,
               copt_contract_type "ContractTypeCode",
               COPT_DEALER_NAME "DealerId",
               (SELECT user_user_name 
              FROM usermaster 
              WHERE upper(user_user_id)=upper(COPT_DEALER_NAME)
              and user_record_status not in (10200005,10200006)) "DealerName",
              COPT_LOCATION_CODE "LocationCode"
--          from trtran071 
--           JOIN TRTRAN072A ON
--           COPT_DEAL_NUMBER = COSM_DEAL_NUMBER
--          and COSM_SERIAL_NUMBER = 1
--          AND COSM_RECORD_STATUS NOT IN(10200005,10200006) 
--          -- and cosu_serial_number=copt_serial_number
           from trtran071 join trtran072
           on cosu_deal_number= COPT_DEAL_NUMBER
           JOIN TRTRAN072A ON
           cosu_deal_number = COSM_DEAL_NUMBER
           and cosu_serial_number=cosm_serial_number
           left outer join 
               (select corv_deal_number,corv_serial_number,corv_subserial_number,corv_base_amount,CORV_REVERSE_SERIAL 
                  from trtran073 where 
                    corv_deal_number=varReference
                   and corv_serial_number=numcode3
                   and corv_subserial_number=numcode4
                   and CORV_REVERSE_SERIAL=numCode5
                   and corv_Record_Status not in (10200005,10200006)) CancelAmount
            on CancelAmount.corv_deal_number=copt_deal_number
           and CancelAmount.corv_serial_number=cosm_serial_number
           and CancelAmount.corv_subserial_number=COSM_SUBSERIAL_NUMBER
           left Outer Join TRMASTER323 on copt_Deal_Type = OPTI_PICK_CODE
         Where 
         --Copt_Hedge_Trade=Decode(Numcode,26000000,Copt_Hedge_Trade,Numcode)
          cosu_record_Status not in (10200005,10200006)
          and copt_record_status not in (10200005,10200006)
          and cosm_record_status not in (10200005,10200006)
          -- and copt_record_status = 10200003  -- commented by lakshmi, to display even 10200001 records 
          and copt_record_status not in (10200005,10200006)
         and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid 
		AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
          and COPT_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))          
          and COPT_DEAL_NUMBER = decode(varReference,'0',COPT_DEAL_NUMBER,varReference)
          AND ((NVL(OPTI_UNWIND_LEGWISE,12400002) = 12400001 AND COSM_SERIAL_NUMBER = decode(numcode3,0,COSM_SERIAL_NUMBER,numcode3) 
          AND COSM_SUBSERIAL_NUMBER = decode(numCode4,0,COSM_SUBSERIAL_NUMBER,numCode4)) OR 
          (NVL(OPTI_UNWIND_LEGWISE,12400002) = 12400002 AND COSM_SERIAL_NUMBER = decode(numcode3,0,1,numcode3)))
         -- (NVL(OPTI_UNWIND_LEGWISE,12400002) = 12400002 AND COSM_SERIAL_NUMBER = decode(numcode3,0,COSM_SERIAL_NUMBER,numcode3)))
          and ((( pkgForexProcess.fncGetOutstandingTransaction
             (COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,
             GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER)>0)
             and (varReference='0'))
             or (varReference!='0'))
--           and ((Copt_Process_Complete =Decode(Numcode1,101,12400002,103,12400001,106,12400001,Copt_Process_Complete))or
--                (Copt_Process_Complete = case when Numcode1 = 103 and (( select count(*)
--                                          from trtran073 where corv_deal_number = copt_deal_number 
--                                          and corv_record_status not in (10200005,10200006))>=1) then Copt_Process_Complete
--                        else null end))
--
--           and ((COSM_Process_Complete =Decode(Numcode1,101,12400002,103,12400001,106,12400001,COSM_Process_Complete))or
--                (COSM_Process_Complete = case when Numcode1 = 103 and (( select count(*)
--                                          from trtran073 where corv_deal_number = copt_deal_number 
--                                          and corv_record_status not in (10200005,10200006))>=1) then COSM_Process_Complete
--                        else null end))

                        ; 
      elsif Numcode2 in(33000001,33000002)then
      open GenCursor for
         select rownum "Rownum", Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As "BaseCurrency",
                pkgreturncursor.fncgetdescription(copt_other_currency, 2) as "OtherCurrency",
                COPT_EXECUTE_DATE as "ExecuteDate",
                pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  "Initiator" ,
                COPT_BACKUP_DEAL "InitiatorCode" ,
                pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  "Trader" ,
                COPT_INIT_CODE "TraderCode" ,
                pkgreturncursor.fncgetdescription(copt_counter_party, 2) as "CounterParty",
                pkgreturncursor.fncgetdescription(cosu_buy_sell,2) "Buysell", 
                pkgreturncursor.fncgetdescription(cosu_option_type,2) "OptionType",
                copt_Base_Amount "BaseAmount",
                pkgForexProcess.fncGetOutstandingTransaction(COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER) "OutstandingAmount",
                nvl(CancelAmount.corv_base_amount,0) "ReversalAmount",
                nvl(CancelAmount.CORV_REVERSE_SERIAL,0) "ReverseSerial",
--                 (case when Numcode1 = 101 then 
--                 pkgForexProcess.fncGetOutstanding(COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER)
--                else CORV_BASE_AMOUNT end) -- take care of Edit Loads
--                 "MaturityAmount",
                 cosu_strike_rate "Strike",
              --pkgForexProcess.fncGetOutstanding(COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER) "OutstandingAmount",
              COPT_EXPIRY_DATE "ExpiryDate",COPT_MATURITY_DATE "SettlementDate",
               pkgreturncursor.fncgetdescription(copt_deal_type, 1) as "DealType",
               copt_deal_type as "DealTypeCode",
               copt_user_reference "UserReference",
               --copt_execute_date "ExecuteDate",


--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall),0) "BC",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut),0) "BP",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut),0) "SP",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall),0) "SC",
               copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
               nvl(copt_Premium_Exrate,0) "PremiumExRate",copt_premium_Local "PremiumLocal",

               Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As "BaseCurrency",
               pkgreturncursor.fncgetdescription(copt_other_currency, 2) as "OtherCurrency",
              -- copt_base_amount as "BaseAmount",
               copt_deal_number "DealNumber",COSU_SERIAL_NUMBER "SerialNumber",
               --cosu_strike_rate "ExchangeRate",
                COSM_SUBSERIAL_NUMBER "SubSerialNumber",
               pkgreturncursor.fncgetdescription(copt_contract_type, 1) as "ContractType",
               pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as "HedgeTrade",

               pkgreturncursor.fncgetdescription(copt_option_style, 1) as "Optionstyle",
               copt_premium_status as "PremiumStatusCode", 
               copt_base_currency as "BaseCurrencyCode",
               copt_other_currency as "OtherCurrencyCode", copt_company_code "CompanyCode", 0 as "RecordStatus",
               Copt_Bank_Reference "BankReference",
               copt_counter_party "CounterpartyCode", 
               Copt_Premium_Exrate As PremiumRate,
               copt_contract_type "ContractTypeCode",
               COPT_DEALER_NAME "DealerId",
                (SELECT user_user_name 
              FROM usermaster 
              WHERE upper(user_user_id)=upper(COPT_DEALER_NAME)
              and user_record_status not in (10200005,10200006)) "DealerName",
              COPT_LOCATION_CODE "LocationCode"
--          from trtran071 
--           JOIN TRTRAN072A ON
--           COPT_DEAL_NUMBER = COSM_DEAL_NUMBER
--          and COSM_SERIAL_NUMBER = 1
--          AND COSM_RECORD_STATUS NOT IN(10200005,10200006) 
--          -- and cosu_serial_number=copt_serial_number
           from trtran071 join trtran072
           on cosu_deal_number= COPT_DEAL_NUMBER
           JOIN TRTRAN072A ON
           cosu_deal_number = COSM_DEAL_NUMBER
           and cosu_serial_number=cosm_serial_number
--           left outer join trtran073
--           on corv_deal_number=copt_deal_number
--           and corv_serial_number=cosm_serial_number
--           and corv_subserial_number=COSM_SUBSERIAL_NUMBER

            left outer join 
               (select corv_deal_number,corv_serial_number,corv_subserial_number,corv_base_amount,CORV_REVERSE_SERIAL 
                  from trtran073 where 
                    corv_deal_number=varReference
                   and corv_serial_number=numcode3
                   and corv_subserial_number=numcode4
                   and CORV_REVERSE_SERIAL=numCode5
                   and corv_Record_Status not in (10200005,10200006)) CancelAmount
            on CancelAmount.corv_deal_number=copt_deal_number
           and CancelAmount.corv_serial_number=cosm_serial_number
           and CancelAmount.corv_subserial_number=COSM_SUBSERIAL_NUMBER

           left Outer Join TRMASTER323 on copt_Deal_Type = OPTI_PICK_CODE
 --          from trtran071 join trtran072
 --          on cosu_deal_number= COPT_DEAL_NUMBER
 --          and cosu_serial_number=copt_serial_number
 --          JOIN TRTRAN072A ON
 --          cosu_deal_number = COSM_DEAL_NUMBER
           --and cosm_serial_number = 1 -- COMMENTED BY LAKSHMI, AS SUGGESTED BY MANJU
         Where 
         --Copt_Hedge_Trade=Decode(Numcode,26000000,Copt_Hedge_Trade,Numcode)
          cosu_record_Status not in (10200005,10200006)
          and copt_record_status not in (10200005,10200006)
          and cosm_record_status not in (10200005,10200006)
       --   and copt_record_status = 10200003 -- commented by lakshmi, to display even 10200001 records 
          and copt_record_status not in (10200005,10200006)
          and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid
		AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
          and COPT_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))   
          and COPT_DEAL_NUMBER = decode(varReference,'0',COPT_DEAL_NUMBER,varReference)
        --  and (case when OPTI_UNWIND_LEGWISE = 12400001 then 
        --  ( COSM_SERIAL_NUMBER = COSM_SERIAL_NUMBER AND COSM_SUBSERIAL_NUMBER = COSM_SUBSERIAL_NUMBER ) 
         -- else        
        --  ( 
--        AND COSM_SERIAL_NUMBER = decode(numcode3,0,COSM_SERIAL_NUMBER,numcode3) 
--          AND COSM_SUBSERIAL_NUMBER = decode(numCode4,0,COSM_SUBSERIAL_NUMBER,numCode4) 
          --end)          
          AND ((NVL(OPTI_EXERCISE_LEGWISE,12400002) = 12400001 AND COSM_SERIAL_NUMBER = decode(numcode3,0,COSM_SERIAL_NUMBER,numcode3) 
          AND COSM_SUBSERIAL_NUMBER = decode(numCode4,0,COSM_SUBSERIAL_NUMBER,numCode4)) OR 
--          (NVL(OPTI_EXERCISE_LEGWISE,12400002) = 12400002 AND COSM_SERIAL_NUMBER = decode(numcode3,0,COSM_SERIAL_NUMBER,numcode3)))
          (NVL(OPTI_EXERCISE_LEGWISE,12400002) = 12400002 AND COSM_SERIAL_NUMBER = decode(numcode3,0,1,numcode3)))
          and ((( pkgForexProcess.fncGetOutstandingTransaction
             (COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,
             GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER)>0)
             and (varReference='0'))
             or (varReference!='0'));
--           and ((Copt_Process_Complete =Decode(Numcode1,101,12400002,103,12400001,106,12400001,Copt_Process_Complete))or
--                (Copt_Process_Complete = case when Numcode1 = 103 and (( select count(*)
--                                          from trtran073 where corv_deal_number = copt_deal_number 
--                                          and corv_record_status not in (10200005,10200006))>=1) then Copt_Process_Complete
--                        else null end)); 
      end if;                  
      Goto Process_End;       
    End If;   



if numinfoType =REFOPTIONLEGS then
    varOperation := 'Getting Legs of Option Deal';
    varTemp :=gconst.fncxmlextract(xmldoc,'Param/DealNumber',varTemp);
    open genCursor for
   select COSU_SERIAL_NUMBER "SerialNumber",COSU_SUBSERIAL_NUMBER "SubSerialNumber",
              --pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2) OptionTypeCode,
              COSU_OPTION_TYPE "OptionTypeCode",
              pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2) "OptionType", 
              pkgreturncursor.fncgetdescription(COSU_BUY_SELL,2) "BuySell",COSU_BASE_AMOUNT "BaseAmount",
              COSU_BUY_SELL "BuySellCode",
              COSU_STRIKE_RATE "StrikeRate",COSU_OTHER_AMOUNT "OtherAmount",
              COSU_LOCAL_RATE "LocalRate",COSU_LOCAL_AMOUNT "LocalAmount",COSU_PREMIUM_RATE "PremiumRate",
              COSU_PREMIUM_AMOUNT "PremiumAmount",COSU_PREMIUM_LOCALRATE "PremiumLocalRate",
              COSU_PREMIUM_LOCALAMOUNT "PremiumLocalAmount",COSU_MATURITY_DATE "MaturityDate",
              COSU_SETTLEMENT_DATE "SettlementDate",COSU_USER_REMARKS "UserRemarks",COSU_ACTION_TAKEN "ActionTaken",
              pkgreturncursor.fncgetdescription(COSU_PRODUCT_CODE,2) "ProductCode", 
              pkgreturncursor.fncgetdescription(COSU_PRODUCT_CODE,2) "Product",COSU_LOT_NUMBERS "NoOfLots",0 "ExchangeRate"
         from trtran072
        where cosu_deal_number=varTemp;
   goto process_end;
  end if;
--  if numinfoType =REFOPTIONSPL then
--    varOperation := 'Getting Pl for the Option Contracts';
--    varReference :=gconst.fncxmlextract(xmldoc,'ROW/DealNumber',varTemp);
--    numrate :=gconst.fncxmlextract(xmldoc,'ROW/RBIRefrate',numrate);
--    datTemp := gconst.fncxmlextract(xmldoc,'ROW/ExerciseDate',datTemp);
--    numFcy:= gconst.fncxmlextract(xmldoc,'ROW/BaseAmount',numFcy);
--    delete from temp;
--
--
--    numfcy1:=  pkgforexprocess.fncGetprofitLossOptions(varReference,numrate,numFcy,datTemp,  numRecords,  numfcy1,  numinr,  varTemp1) ;
--
--
--
--    open gencursor for
--       select numrate refRate, numRecords SerialNumber,
--              numFcy1 PLFcy,numinr PLinr,varTemp1 remarks
--         from dual;
--
--   goto process_end;
--   end if;
  if numinfoType =REFOPTIONSPL then
    varOperation := 'Getting Pl for the Option Contracts';
    varReference :=gconst.fncxmlextract(xmldoc,'Param/DealNumber',varTemp);
    numrate :=gconst.fncxmlextract(xmldoc,'Param/RBIRefrate',numrate);
    datTemp := gconst.fncxmlextract(xmldoc,'Param/ExerciseDate',datTemp);
    numFcy:= gconst.fncxmlextract(xmldoc,'Param/BaseAmount',numFcy);
    numCode9:=  gconst.fncxmlextract(xmldoc,'Param/SerialNumber',numCode9);
  --numCode10:=  gconst.fncxmlextract(xmldoc,'Param/SubSerialNumber',numCode10);

  --  delete from temp;

    numfcy1:=  pkgforexprocess.fncGetprofitLossOptions(varReference,numrate,numFcy,datTemp,numCode9, numfcy1,  numinr,  varTemp1) ;


    GLOG.log_write('fncGetprofitLossOptions completed and returned val is Ref Rate' ||numrate || ' Ref ' || varReference || ' Fcy ' || numFcy
                                         || ' Exercise Date ' || datTemp || ' Sr. No. ' ||numCode9 || ' PL FCY ' ||numFcy1 || ' PC LCY' || numFcy1 || 
                                         ' Remarks ' || varTemp1);
    open gencursor for
       select numrate refRate, numRecords SerialNumber,
              numFcy1 PLFcy, numFcy1 PLinr,varTemp1 remarks
         from dual;  

   goto process_end;
   end if;


if numInfoType=REFFrowardBatchno then
    varOperation := 'Getting the Link BatchNo';
    VarReference := 'LINK' || PKGMaster.fncGenerateSerial(PKGMaster.SERIALFRWDLINKBATCHNO);
    open gencursor for
       select VarReference "VarReference"
         from dual;  

   goto process_end;
  end if;

  if numInfoType=REFGETCASHINHANDREFERENCE then
    varOperation := 'Getting the Cash In Hand Reference Number';
    VarReference := 'CASH' || PKGMaster.fncGenerateSerial(PKGMaster.SERIALCASHINHAND);
    open gencursor for
       select VarReference "VarReference"
         from dual;  

   goto process_end;
  end if;

if numInfoType=REFDeliveryBatchNo then
    varOperation := 'Getting the Delivery BatchNo';
    VarReference := 'DELI' || PKGMaster.fncGenerateSerial(PKGMaster.SERIALDELIVERYBATCHNO);
    open gencursor for
       select VarReference "VarReference"
         from dual;        
   goto process_end;
  end if;
  --added by supriya on 04/11/2020
if numInfoType=REFGETBUDGETREFERENCE then
    varOperation := 'Getting the Delivery BatchNo';
    VarReference := 'BUDG' || PKGMaster.FNCGENERATESERIAL(PKGMaster.SERIALCASHFLOWBUDGET); 
    open gencursor for
        select VarReference "VarReference"
        from dual;        
    goto process_end;
end if;

if numInfoType = REFLINKREFERENCE then
    varOperation := 'Getting the Serial No';
    VarReference := 'BTNO' || PKGMaster.fncGenerateSerial(PKGMaster.SERIALBATCHNO);
    open gencursor for
        select VarReference "VarReference"
        from dual;        
    goto process_end;
end if;

--  if numInfoType = REFDEALSVIEW then
--
--    varOperation := 'Extracting Deal Details';
--    GConst.gdatToday := datWorkDate;
--
--    numCode  := GConst.fncxmlextract(xmldoc, 'OpenClose', numCode);
--    numCode1 := GConst.fncxmlextract(xmldoc, 'CompanyCode', numCode1);
--    numCode2 := GConst.fncxmlextract(xmldoc, 'CounterParty', numCode2);
--    numCode3 := GConst.fncxmlextract(xmldoc, 'TransType', numCode3);
--    numCode4 := GConst.fncxmlextract(xmldoc, 'DealType', numCode4);
--    numCode5 := GConst.fncxmlextract(xmldoc, 'MTMType', numCode5);
--    numCode6 := GConst.fncxmlextract(xmldoc, 'GroupBy', numCode6);
--    numCode7 := GConst.fncxmlextract(xmldoc, 'HedgeTrade', numCode7);
--    numCode8 := GConst.fncxmlextract(xmldoc, 'Dealers', numCode8);
--    numCode9 := GConst.fncxmlextract(xmldoc, 'CurrencyPair', numCode9);
--    ExecutionDate := GConst.fncxmlextract(xmldoc, 'ExecuteFrom', ExecutionDate);
--    DelivaryDate := GConst.fncxmlextract(xmldoc, 'ExecuteTo', DelivaryDate);
--    datTemp := GConst.fncxmlextract(xmldoc, 'MaturityFrom', datTemp);
--    datTemp1 := GConst.fncxmlextract(xmldoc, 'MaturityTo', datTemp1);
--    datTemp2 := GConst.fncxmlextract(xmldoc, 'CancelledFrom', datTemp);
--    datTemp3 := GConst.fncxmlextract(xmldoc, 'CancelledTo', datTemp1);
--    numFcy := GConst.fncxmlextract(xmldoc, 'RateFrom', numFcy);
--    numFcy1 := GConst.fncxmlextract(xmldoc, 'RateTo', numFcy1);
--
--    if numCode5 = 62400003 then
--      numRate := GConst.fncxmlextract(xmldoc, 'AskRate', numRate);
--      numSpot := GConst.fncxmlextract(xmldoc, 'BidRate', numSpot);
--    else
--      numRate := 0;
--      numSpot := 0;
--    end if;
--
--    if numCode6 not in (62500022,62599999) then
--
--      select pick_long_description
--        into varTemp
--        from trmaster001
--        where pick_key_value = numCode6;
--
--      varTemp2 := 'select ' || varTemp || ',';
--
--      varTemp1 := 'to_char(dealdate,' || '''' || 'yyyy:mm' || '''' || ')';
--      if  instr(varTemp2, varTemp1) > 0 then
--        varTemp2 := replace(varTemp2, varTemp1, varTemp1 || ' ' || 'DealMonth');
--      end if;
--
--      varTemp1 := 'to_char(maturity,' || '''' || 'yyyy:mm' || '''' || ')';
--      if  instr(varTemp2, varTemp1) > 0 then
--        varTemp2 := replace(varTemp2, varTemp1, varTemp1 || ' ' || 'MatuMonth');
--      end if;
--
--      if numCode4 = 32200001 then
--        varTemp2 := varTemp2 || ' count(*) DealNos, sum(dealamount) DealAmount,
--        sum(pandlfcy) PandlFcy, min(exrate) EXMin, max(exrate) ExMax,
--        Round(avg(exrate),4) ExAvg,
--        from vewForwards ';
----        sum(decode(status,12400001,0,Round(pkgReturnCursor.fncMTMRate(DealNumber,
----        32200001,62400002) * pkgReturnCursor.fncMTMRate(DealNumber,32200001,62400002,0,0,1)))) MTMAmount
--      elsif numCode4 = 32200002 then
--        varTemp2 := varTemp2 || ' count(*) DealNos, sum(dealamount) DealAmount,
--        sum(pandlfcy) PandlFcy, min(exrate) EXMin, max(exrate) ExMax,
--        Round(avg(exrate),4) ExAvg
--        from vewFutures ';
--      elsif numCode4 = 32200003 then
--        varTemp2 := varTemp2 || ' count(*) DealNos, sum(dealamount) DealAmount,
--        sum(premium) Premium, sum(pandlfcy) PandlFcy,
--        min(sc) SCMin, max(sc) SCMax, Round(avg(sc),4) SCAvg
--        from vewoptions ';
--      else
--        varTemp2 := varTemp2 || ' count(*) DealNos, sum(dealamount) DealAmount,
--        sum(pandlfcy) PandlFcy, min(exrate) EXMin, max(exrate) ExMax,
--        Round(avg(exrate),4) ExAvg
--        from vewFutureForward ';
--      end if;
--
--      Goto Where_Clause;
--    elsif numCode6 = 62500022 then
--        Goto Where_Clause;
--    End if;
--
---- Balance
--    varCondition := ' pkgForexProcess.fncGetOutstanding(dealnumber, 1,';
--    if numCode4 = 32200001 then
--      varCondition := varCondition || '1,';
--    elsif numCode4 = 32200002 then
--      varCondition := varCondition || '14,';
--    elsif numCode4 = 32200003 then
--      varCondition := varCondition || '15,';
--    else
--      varCondition := varCondition || 'decode(DealType, 32200001, 1, 14),';
--    end if;
--    varCondition := varCondition || '1,' || '''' || datWorkDate|| '''' || ') Balance,';
--
---- MTM Value
--    varCondition := varCondition || ' pkgReturnCursor.fncMTMRate(' || 'dealnumber' || ',';
--    if numCode4 = 32200004 then
--      varCondition := varCondition ||  'DealType,' || numCode5 || ',';
--    else
--      varCondition := varCondition || numCode4 || ',' || numCode5  || ',';
--    End if;
--
--    varCondition := varCondition || numRate || ',' || numSpot || ')';
--    varCondition := varCondition || ' MTMRate' || ',0 MTMValue,';
--
----Wash Rate
--    varCondition := varCondition ||
--    ' pkgReturnCursor.fncMTMRate(' || 'dealnumber' || ',';
--    if numCode4 = 32200004 then
--      varCondition := varCondition ||  'DealType,' || numCode5 || ',';
--    else
--      varCondition := varCondition || numCode4 || ',' || numCode5  || ',';
--    End if;
--
--    varCondition := varCondition || numRate || ',' || numSpot || ',1)';
--    varCondition := varCondition || ' WashRate,0 PNLInr';
--
--    if  numCode4 = 32200001 then
--      varTemp2 := 'select dealnumber,NVL(dealref,0) dealref,companyname,bankname,
--        trans, dealdate,dealamount,currency,exrate,maturity,
--        canceldate,cancelrate,NVL(pandlfcy,0) pandlfcy, completedate,
--        pkgReturnCursor.fncGetDescription(status,2) Closed, UserID,
--        pkgReturnCursor.fncGetDescription(InitCode,2) Initiator,';
--      varTemp2 := varTemp2 || varCondition;
--      varTemp2 := varTemp2 || ' from vewForwards';
--    elsif numCode4 = 32200002 then
--      varTemp2 := 'select dealnumber,NVL(dealref,0) dealref,companyname,bankname,
--        trans, dealdate,dealamount,currency,exrate,maturity,
--        canceldate,cancelrate,NVL(pandlfcy,0) pandlfcy, completedate,
--        pkgReturnCursor.fncGetDescription(status,2) Closed, UserID,
--        pkgReturnCursor.fncGetDescription(InitCode,2) Initiator,';
--      varTemp2 := varTemp2 || varCondition;
--      varTemp2 := varTemp2 || ' from vewFutures';
--    elsif numCode4 = 32200003 then
--      varTemp2 := 'select dealnumber,NVL(dealref,0) dealref,companyname,bankname,
--        trans,dealdate,dealamount,currency,
--        premium,maturity,settlement,premiumdate,
--        bc,bp,sc,sp,canceldate,cancelrate,
--        NVL(pandlfcy,0) pandlfcy, completedate,
--        pkgReturnCursor.fncGetDescription(status,2) Closed, UserID,
--        pkgReturnCursor.fncGetDescription(InitCode,2) Initiator,';
--      varTemp2 := varTemp2 || varCondition;
--      varTemp2 := varTemp2 || ' from vewOptions';
--    else
--      varTemp2 := 'select dealnumber,NVL(dealref,0) dealref,companyname,bankname,
--        trans, dealdate,dealamount,currency,exrate,maturity,
--        canceldate,cancelrate,NVL(pandlfcy,0) pandlfcy, completedate,
--        pkgReturnCursor.fncGetDescription(status,2) Closed, UserID,
--        pkgReturnCursor.fncGetDescription(InitCode,2) Initiator,';
--      varTemp2 := varTemp2 || varCondition;
--      varTemp2 := varTemp2 || ' from vewFutureForward';
--    End if;
--
--<<Where_Clause>>
---- In the following lines, the code is concatenatedto varTemp2 to facilitate
---- the next query to call with the same 'where' condition
--      if numCode3 = 99999999 then
--        SQLQuery := SQLQuery || ' where TransCode between 33300001 and 33399998';
--        varTemp3 := ' and TransCode between 33300001 and 33399998';
--      else
--        SQLQuery := SQLQuery || ' where TransCode = ' || numCode3;
--        varTemp3 := ' and TransCode = ' || numCode3;
--      end if;
----    if numCode3 = 99999999 then
----      SQLQuery := SQLQuery || ' Where Trans like ' || '''' || '%' || '''';
----    else
----      SQLQuery := SQLQuery || ', trmaster001 where ';
----      SQLQuery := SQLQuery || ' trans = pick_short_description';
----      SQLQuery := SQLQuery || ' and pick_key_value = ' || numCode3;
----    End if;
--
--    if  numCode1 != 99999999 then
--      SQLQuery := SQLQuery || ' and CompanyCode = ' || numCode1;
--      varTemp3 := varTemp3 || ' and CompanyCode = ' || numCode1;
--    end if;
--
--      SQLQuery := SQLQuery || ' and CompanyCode in( select usco_company_code from trsystem022a
--                                    where UPPER(usco_user_id) =' || '''' ||  varUserid || '''' || ' )' ;
--      varTemp3 := varTemp3 || ' and CompanyCode in( select usco_company_code from trsystem022a
--                                    where UPPER(usco_user_id) =' || '''' ||  varUserid || '''' || ' )' ;
--
--    if numCode2 != 99999999 then
--      SQLQuery := SQLQuery || ' and BankCode = ' || numCode2;
--      varTemp3 := varTemp3 || ' and BankCode = ' || numCode2;
--    end if;
--
--    if numCode != 99999999 then
--      SQLQuery := SQLQuery || ' and status = ' || numCode;
--      varTemp3 := varTemp3 || ' and status = ' || numCode;
--    End if;
--
--    if numCode = 12400001 then
--      SQLQuery := SQLQuery || ' and CancelDate between ';
--      SQLQuery := SQLQuery || '''' || to_char(datTemp2,'dd-mon-yyyy') || '''';
--      SQLQuery := SQLQuery || ' and ' || '''' || to_char(datTemp3, 'dd-mon-yyyy')  || '''';
--
--      varTemp3 := varTemp3 || ' and CancelDate between ';
--      varTemp3 := varTemp3 || '''' || to_char(datTemp2,'dd-mon-yyyy') || '''';
--      varTemp3 := varTemp3 || ' and ' || '''' || to_char(datTemp3, 'dd-mon-yyyy')  || '''';
--    End if;
--
--    SQLQuery := SQLQuery || ' and dealdate between ';
--    SQLQuery := SQLQuery || '''' || to_char(ExecutionDate,'dd-mon-yyyy') || '''';
--    SQLQuery := SQLQuery || ' and ' || '''' || to_char(DelivaryDate, 'dd-mon-yyyy')  || '''';
--    SQLQuery := SQLQuery || ' and Maturity between ';
--    SQLQuery := SQLQuery || '''' || to_char(datTemp,'dd-mon-yyyy') || '''';
--    SQLQuery := SQLQuery || ' and ' || '''' || to_char(datTemp1, 'dd-mon-yyyy')  || '''';
--
--    varTemp3 := varTemp3 || ' and dealdate between ';
--    varTemp3 := varTemp3 || '''' || to_char(ExecutionDate,'dd-mon-yyyy') || '''';
--    varTemp3 := varTemp3 || ' and ' || '''' || to_char(DelivaryDate, 'dd-mon-yyyy')  || '''';
--    varTemp3 := varTemp3 || ' and Maturity between ';
--    varTemp3 := varTemp3 || '''' || to_char(datTemp,'dd-mon-yyyy') || '''';
--    varTemp3 := varTemp3 || ' and ' || '''' || to_char(datTemp1, 'dd-mon-yyyy')  || '''';
--
--    if numCode4 = 32200003 then
--      SQLQuery := SQLQuery || ' and greatest(bc,bp,sc,sp) between ' || numFcy || ' and ' || numFcy1;
--      varTemp3 := varTemp3 || ' and greatest(bc,bp,sc,sp) between ' || numFcy || 'and ' || numFcy1;
--    else
--      SQLQuery := SQLQuery || ' and exrate between ' || numFcy || ' and ' || numFcy1;
--      varTemp3 := varTemp3 || ' and exrate between ' || numFcy || ' and ' || numFcy1;
--    end if;
--
--    if numCode7 != 99999999 then
--      SQLQuery := SQLQuery || ' and HedgeTrade = ' || numCode7;
--      varTemp3 := varTemp3 || ' and HedgeTrade = ' || numCode7;
--    End if;
--
--    if numCode8 != 99999999 then
--      SQLQuery := SQLQuery || ' and InitCode = ' || numCode8;
--      varTemp3 := varTemp3 || ' and InitCode = ' || numCode8;
--    End if;
--
----    if numCode8 != 99999999 then
----      SQLQuery := SQLQuery || ' and UserID = ' || '''' ||
----        pkgReturnCursor.fncGetDescription(numCode8,2) || '''';
----      varTemp3 := varTemp3 || ' and UserID = ' || '''' ||
----        pkgReturnCursor.fncGetDescription(numCode8,2) || '''';
----    End if;
--
--    if numCode9 != 99999999 then
--      SQLQuery := SQLQuery || ' and Currency = ' || '''' ||
--        pkgReturnCursor.fncGetDescription(numCode9,2) || '''';
--      varTemp3 := varTemp3 || ' and Currency = ' || '''' ||
--        pkgReturnCursor.fncGetDescription(numCode9,2) || '''';
--    End if;
--
--    if numCode6 = 62500022 then
--      varOperation := 'Calling Trade Profile Program';
--      select decode(numCode4, 99999999, ' where ' || substr(varTemp3,5),
--                  ' where dealtype = ' || numCode4 || varTemp3)
--        into varTemp3
--        from dual;
--      numCode6 := fncDealProfile1(varTemp3);
--      Open GenCursor for
--        select deal_profile_serial Sl,deal_profile_legend Param,deal_profile_currency Currency,
--          deal_profile_april April,deal_profile_may May,deal_profile_june June,
--          deal_profile_july July,deal_profile_august August,deal_profile_september September,
--          deal_profile_october October,deal_profile_november November,deal_profile_december December,
--          deal_profile_january January,deal_profile_february February,deal_profile_march March,
--          deal_profile_total Total
--          from trsystem980;
--      Goto Process_End;
--    End if;
--
--    if numCode6 != 62599999 then
--      SQLQuery := varTemp2 || SQLQuery || ' group by ' || varTemp;
--      SQLQuery := SQLQuery || ' order by '  || varTemp;
--    else
--      SQLQuery := varTemp2 || SQLQuery || ' order by dealdate, bankname';
--      varTemp3 := varTemp3 || ' order by dealdate, bankname';
--    end if;
--
--delete from temp;
--insert into temp(tt, tt1) values('Query', sqlquery);
--
--    open GenCursor
--      for SQLQuery;
--
--
--    SQLQuery := ' and ' || Substr(SQLQuery, instr(SQLQuery, 'where') + 6);
--
----varUserID to be added to the key
----delete from temp;
--insert into temp(tt, tt1) values('VewDeals', varTemp3);
--
--    Goto Process_End;
--  End if;

--   if numinfotype = REFGetExposure then
----      numCode := gconst.fncxmlextract(xmldoc,'KeyValues/ImportExport',   numCode);        
----      numCode3 := gconst.fncxmlextract(xmldoc,'KeyValues/CounterParty',  numCode3);  
----      DatTemp  := gconst.fncxmlextract(xmldoc,'KeyValues/FromDate',  DatTemp);  
----      DatTemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/ToDate',  DatTemp1);
--      --dattemp2 := gconst.fncxmlextract(xmldoc,'KeyValues/EntryDate',  dattemp2);   
--
--        Begin
--        varTemp := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  numCode4);
--        Exception 
--            when others then 
--            varTemp := null;        
--        end;
--
--
--       Begin
--        numCode2 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode2);  
--        Exception 
--            when others then 
--            numCode2 := 30299999;        
--        end;
--
--         Begin
--        numCode1 := gconst.fncxmlextract(xmldoc,'Param/TradeCurrency',  numCode1); 
--        Exception 
--            when others then 
--            numCode1 := 30499999;        
--        end;
--
--         Begin
--        numCode := gconst.fncxmlextract(xmldoc,'Param/CounterParty',  numCode1); 
--        Exception 
--            when others then 
--            numCode := 30699999;        
--        end;
----        Begin
----        numCode3 := gconst.fncxmlextract(xmldoc,'Param/LocalCurrency',  numCode1); 
----        Exception 
----            when others then 
----            numCode3 := 30499999;        
----        end;
--
----        { "LocationCode", RemitRequest.LocationCode.ToString() },
----                    { "TradeCurrency", RemitRequest.TradeCurrency.ToString() },
----                    { "BusinessUnit", RemitRequest.UserPortfolio.ToString() },
----                    { "CounterParty", RemitRequest.LocalBank.ToString() },
----                    { "EntryDate", RemitRequest.EntryDate == null ? DateTime.Now.ToShortDateString() : RemitRequest.EntryDate },
----                    { "LocalCurrency", RemitRequest.LocalCurrency.ToString()},
----                    { "LocationCode", RemitRequest.LocationCode.ToString() },
----                    { "MaturityDate",RemitRequest.MaturityDate.ToString()},
----                    { "MaturityFrom", RemitRequest.MaturityFrom.ToString()}
----                    { "CrossCurrencyDelivery",RemitRequest.OtherCurrencyYesNo.ToString()},
--
--         Begin
--        DatTemp := gconst.fncxmlextract(xmldoc,'Param/FromDate',  DatTemp1);
--        Exception 
--            when others then 
--            DatTemp :=null;     
--        end;
--
--       Begin
--        DatTemp1 := gconst.fncxmlextract(xmldoc,'Param/ToDate',  DatTemp1);
--        Exception 
--            when others then 
--            DatTemp1 := null;        
--        end;
--
--       Begin
--        numCode6 := gconst.fncxmlextract(xmldoc,'Param/CrossCurrencyDelivery',  numCode4);
--        Exception 
--            when others then 
--            numCode6 := 12400002;        
--        end;
--
--        Begin
--        numCode7 := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',  numCode4);
--        Exception 
--            when others then 
--            numCode7 := 30199999;        
--        end;
--
--        Begin
--        numCode8 := gconst.fncxmlextract(xmldoc,'Param/ImportExport',  numCode4);
--        Exception 
--            when others then 
--            numCode8 := 31700001;        
--        end;
--
--
--
--      open gencursor for            
--        SELECT rownum "Rownum", BREL_TRADE_REFERENCE "TradeReference",
--          pkgReturnCursor.fncGetDescription(NVL(brel_reversal_type,25999999),1)"ReversalType",
--          pkgReturnCursor.fncGetDescription(NVL(BREL_IMPORT_EXPORT,31799999),1) "ImportExport",
--          BREL_REVERSAL_FCY "BillAmount",
--          BREL_REVERSAL_FCY-nvl((SELECT sum(cdel_cancel_amount)
--            FROM TRTRAN006 
--          WHERE CDEL_RECORD_STATUS NOT IN(10200005,10200006)
--            and NVL(CDEL_TRADE_REFERENCE,0) || nvl(CDEL_TRADE_SERIAL,0) =   nvl(BREL_TRADE_REFERENCE,0)||nvl(Brel_Reverse_Serial,0)
--             AND CDEL_TRADE_REFERENCE IS NOT NULL),0) "TotalAmount",
--          pkgforexprocess.Fncgetoutstanding(BREL_TRADE_REFERENCE, BREL_REVERSE_SERIAL,Gconst.UTILREMITTANCE,
--                                              Gconst.Amountfcy, datworkdate) "Outstanding",
--          pkgReturnCursor.fncGetDescription(NVL(brel_trade_currency,30499999),2)"BaseCurrency",
--          pkgReturnCursor.fncGetDescription(NVL(brel_local_currency,30499999),2)"OtherCurrency",
--          TRAD_TRADE_RATE "ExchangeRate",
----          0 AS "Spot_CashFcy",
----          0 AS "Spot_CashRate",
----          0 AS "ForwardFcy",
----          0 AS "ForwardRate",
--          pkgReturnCursor.fncGetDescription(NVL(brel_local_bank,30699999),2) "Bank",
--          pkgReturnCursor.fncGetDescription(NVL(brel_location_code,30299999),2) "Location",
--          pkgReturnCursor.fncGetDescription(NVL(BREL_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
--          pkgReturnCursor.fncGetDescription(NVL(brel_company_code,30199999),2) "Company",
--          TRAD_BILL_DATE "BLDate",
--          Trad_Vessel_Name "VesselName",
--          Brel_entry_date "EntryDate",
--          nvl(BREL_TRANSACTION_DATE,brel_maturity_date) "ValueDate",  
--          BREL_REMARKS "Remarks",
--          '' "ForwardReference",
--          0 "BatchNo",
--          0 "EDBenefit",
--          0 "EDAmount",
--          brel_batch_number "BatchNumber",          
--          brel_reversal_type "ImportExportCode",
--          brel_trade_currency "CurrencyCode",
--          brel_local_currency "OtherCurrencyCode",
--          0 "SpotRate",
--          brel_company_code "CompanyCode",
--          brel_local_bank "LocalBank",
--          0 "Status",
--          Brel_Reverse_Serial "SerialNumber",
--          BREL_LOCATION_CODE "LocationCode",
--          '' "UserReference"
--        FROM TRTRAN003 inner join TRTRAN002 
--        on TRAD_TRADE_REFERENCE = BREL_TRADE_REFERENCE
--        WHERE BREL_RECORD_STATUS NOT IN(10200005,10200006)
--        and BREL_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                           where upper(usco_user_id) = varUserid
--                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--        and BREL_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--        AND TRAD_RECORD_STATUS NOT IN(10200005,10200006)
--         and TRAD_PROCESS_COMPLETE not in(12400001)
--        and (((varTemp is null) and 
--        (Trad_company_code = decode(numCode7,30199999,Trad_company_code,numCode7)
--        and  Trad_company_code in (select usco_company_code from trsystem022a
--           where UPPER(usco_user_id) =varUserid
--        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--        and Trad_Location_code = decode(numCode2,30299999,Trad_Location_code,numCode2)
--        and Trad_Trade_currency = decode(numCode1,30499999,Trad_Trade_currency,numCode1)
----        and TRAD_LOCAL_CURRENCY = decode(numCode3,30499999,TRAD_LOCAL_CURRENCY,numCode3)
--        and TRAD_LOCAL_BANK = decode(numCode,30699999,TRAD_LOCAL_BANK,numCode)
--        and ((numCode8 = 31700001 and trad_import_export <=25900050) or
--            (numCode8 = 31700002 and trad_import_export >=25900050))
--        and ((DatTemp1 is null) or  (brel_maturity_date between DatTemp and DatTemp1))))
--        or ((varTemp is not null) and (BREL_DELIVERY_BATCH =varTemp)));
--
--          --  ((DatTemp2 is null) or  (trad_maturity_date <= DatTemp1)));
--
----        AND to_date(BREL_ENTRY_DATE) = DatTemp2
----        AND BREL_LOCATION_CODE = numCode2
----        AND Brel_Product_Category = numCode4;
----        GROUP BY Brel_entry_date, brel_reversal_type,brel_trade_currency,
----          brel_local_currency, brel_batch_number,brel_company_code,brel_location_code,
----          brel_local_bank,BREL_TRANSACTION_DATE,brel_maturity_date,BREL_REMARKS;          
--      Goto Process_End;
--    END IF; 


--added  by supriya on 19/11/2021
if numinfotype = REFGETGROUPBYREMITTANCES then    
    Begin
        numCode7 := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',  numCode7);
    Exception 
    when others then 
        numCode7 := 30199999;        
    end;

    Begin
        numCode2 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode2);  
    Exception 
    when others then 
        numCode2 := 30299999;        
    end;

    Begin
        numCode3 := gconst.fncxmlextract(xmldoc,'Param/Book',  numCode3);
    Exception 
    when others then 
        numCode3 := 33399999;        
    end;

    Begin
        numCode4 := gconst.fncxmlextract(xmldoc,'Param/Strategy',  numCode4);
    Exception 
    when others then 
        numCode4 := 33899999;        
    end;

    Begin
        DatTemp2 := gconst.fncxmlextract(xmldoc,'Param/EntryDate',  DatTemp2);
    Exception 
    when others then 
        DatTemp2 := null;        
    end;

     GLOG.LOG_Write('Active Params ' );    
 SELECT     LISTAGG (  GPIC_PARAMETER_NAME || ' as "' 
           || (GPIC_PARAMETER_NAME) || '"' ,',')
              WITHIN GROUP (ORDER BY GPIC_RECORD_STATUS) ||','||
           LISTAGG ( (case when nvl(GPIC_PICK_GROUP,0) !=0 then GPIC_PARAMETER_NAME || '_Desc as "' 
           || (GPIC_PARAMETER_NAME) || '_Desc' || '"' end),',')
              WITHIN GROUP (ORDER BY GPIC_RECORD_STATUS),
                LISTAGG ( ( GPIC_PARAMETER_NAME),',')
              WITHIN GROUP (ORDER BY GPIC_RECORD_STATUS) ||', '
              ||LISTAGG ( (case when nvl(GPIC_PICK_GROUP,0) !=0 then GPIC_PARAMETER_NAME || '_Desc'|| '' end),',')
              WITHIN GROUP (ORDER BY GPIC_RECORD_STATUS) 
   into vartemp,vartemp1
                                FROM  TRSYSTEM999B 
                                WHERE GPIC_SYNONYM_NAME= varentity 
                                AND GPIC_RECORD_STATUS='10200001';

--SELECT 
--  LISTAGG ( (case when nvl(GPIC_PICK_GROUP,0) =0 then GPIC_PARAMETER_NAME end),',')
--              WITHIN GROUP (ORDER BY GPIC_RECORD_STATUS) ||','||
--           LISTAGG ( (case when nvl(GPIC_PICK_GROUP,0) !=0 then GPIC_PARAMETER_NAME || '_Desc "' end),',')
--              WITHIN GROUP (ORDER BY GPIC_RECORD_STATUS) 
--              LISTAGG(GPIC_PARAMETER_NAME ,',')
-- WITHIN GROUP (ORDER BY GPIC_RECORD_STATUS) 
--into vartemp1 
--                                FROM  TRSYSTEM999B 
--                                WHERE GPIC_SYNONYM_NAME= varentity
--                                AND GPIC_RECORD_STATUS='10200001';


 GLOG.LOG_Write('Active Params ' || vartemp);  
  sqlQuery :='SELECT row_number() over(order by 1) "Rownum",sum(BillAmount) "BillAmount",Sum(Outstanding) "Outstanding", ' || vartemp||' from
              (select pkgReturnCursor.fncGetDescription(NVL(brel_local_bank,30699999),2) Bank_Desc,
                            pkgReturnCursor.fncGetDescription(NVL(brel_trade_currency,30499999),2) BaseCurrency_Desc,
                            pkgReturnCursor.fncGetDescription(NVL(brel_local_currency,30499999),2) OtherCurrency_Desc,
                            pkgReturnCursor.fncGetDescription(NVL(BREL_IMPORT_EXPORT,31799999),1) InflowOutflow_Desc,
                            pkgReturnCursor.fncGetDescription(NVL(BREL_COMPANY_CODE,30199999),1) CompanyCode_Desc,
                            pkgReturnCursor.fncGetDescription(NVL(BREL_SUB_PORTFOLIO,33899999),1) SubPortfolio_Desc,
                            pkgReturnCursor.fncGetDescription(NVL(BREL_PRODUCT_CATEGORY,33399999),1) Portfolio_Desc,
                            pkgReturnCursor.fncGetDescription(NVL(BREL_LOCATION_CODE,30299999),1) LocationCode_Desc,                            
                            BREL_MATURITY_FROM FromDate,
                            BREL_MATURITY_DATE ToDate,
                            BREL_REVERSAL_FCY BillAmount,
                            BREL_REVERSAL_FCY Outstanding,
                            BREL_MATURITY_DATE MaturityDate,
                            NVL(brel_local_bank,30699999) Bank,
                            NVL(brel_trade_currency,30499999) BaseCurrency,
                            NVL(brel_local_currency,30499999) OtherCurrency,
                            NVL(BREL_IMPORT_EXPORT,31799999) InflowOutflow,
                            NVL(BREL_COMPANY_CODE,30199999) CompanyCode,
                            NVL(BREL_SUB_PORTFOLIO,33899999) SubPortfolio,
                            NVL(BREL_PRODUCT_CATEGORY,33399999) Portfolio,
                            NVL(BREL_LOCATION_CODE,30299999) LocationCode 
                            FROM TRTRAN003
                    WHERE BREL_RECORD_STATUS NOT IN(10200005,10200006)
                    and BREL_DELIVERY_BATCH is null    
                    and BREL_MATURITY_DATE <= '||''''||DatTemp2||''''||'
                   and BREL_COMPANY_CODE = decode('||numCode7||',30199999,BREL_COMPANY_CODE,'||numCode7||')
                   and BREL_LOCATION_CODE = decode('||numCode2||',30299999,BREL_LOCATION_CODE,'||numCode2||')
                   and BREL_PRODUCT_CATEGORY = decode('||numCode3||',33399999,BREL_PRODUCT_CATEGORY,'||numCode3||')
                   and BREL_SUB_PORTFOLIO = decode('||numCode4||',33899999,BREL_SUB_PORTFOLIO,'||numCode4||'))
                   where BillAmount > 0
                   group by  ('||vartemp1||')';   
        GLOG.LOG_Write('sqlQuery ' || sqlQuery);    
        open gencursor for sqlQuery;
--    open gencursor for 
--        SELECT rownum "Rownum", Location "LocationDesc", ImportExport "ImportExport",  
--                BaseCurrency "BaseCurrencyDesc", OtherCurrency "OtherCurrencyDesc", Bank "BankDesc",
--                BillAmount "BillAmount",  Outstanding "Outstanding",
--                ImportExportCode "InflowOutflow", BankCode "Bank",
--                BaseCurrencyCode "BaseCurrency", OtherCurrencyCode "OtherCurrency",
--                LocCode "LocationCode", Portfolio "PortfolioDesc", PortfolioCode "Portfolio",
--                MaturityDate "MaturityDate"
--                from (select pkgReturnCursor.fncGetDescription(NVL(BREL_LOCATION_CODE,30299999),2) Location,
--                            pkgReturnCursor.fncGetDescription(NVL(brel_local_bank,30699999),2) Bank,
--                            pkgReturnCursor.fncGetDescription(NVL(BREL_PRODUCT_CATEGORY,30499999),2) Portfolio,
--                            pkgReturnCursor.fncGetDescription(NVL(brel_trade_currency,30499999),2) BaseCurrency,
--                            pkgReturnCursor.fncGetDescription(NVL(brel_local_currency,30499999),2) OtherCurrency,
--                            pkgReturnCursor.fncGetDescription(NVL(BREL_IMPORT_EXPORT,31799999),1) ImportExport,
--                            sum(BREL_REVERSAL_FCY) BillAmount,
--                            sum(BREL_REVERSAL_FCY) Outstanding,
--                            brel_trade_currency BaseCurrencyCode,
--                            brel_local_currency OtherCurrencyCode,
--                            brel_local_bank BankCode,BREL_PRODUCT_CATEGORY PortfolioCode,
--                            BREL_IMPORT_EXPORT ImportExportCode,BREL_LOCATION_CODE LocCode,
--                            brel_maturity_date MaturityDate
--                    FROM TRTRAN003 
--                    WHERE BREL_RECORD_STATUS NOT IN(10200005,10200006)
--                    and BREL_DELIVERY_BATCH is null
--                    and brel_maturity_date <= DatTemp2
--                    and BREL_COMPANY_CODE = decode(numCode7,30199999,BREL_COMPANY_CODE,numCode7)
--                    and BREL_LOCATION_CODE = decode(numCode2,30299999,BREL_LOCATION_CODE,numCode2)
--                    and BREL_PRODUCT_CATEGORY = decode(numCode3,33399999,BREL_PRODUCT_CATEGORY,numCode3)
--                    and BREL_SUB_PORTFOLIO = decode(numCode4,33899999,BREL_SUB_PORTFOLIO,numCode4)
--                    group by BREL_PRODUCT_CATEGORY,BREL_LOCATION_CODE,BREL_IMPORT_EXPORT,
--                    brel_local_bank,brel_trade_currency,brel_local_currency,brel_maturity_date)
--                    where BillAmount > 0;
    Goto Process_End;
end if;


--Added by supriya on 24/03/2021
if numinfotype = REFGetExposure then

    Begin
        numCode1 := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',  numCode1);
    Exception 
    when others then 
        numCode1 := 30199999;        
    end;

    Begin
        numCode2 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode2);  
    Exception 
    when others then 
        numCode2 := 30299999;        
    end;

    Begin
        numCode3 := gconst.fncxmlextract(xmldoc,'Param/Portfolio',  numCode3);
    Exception 
    when others then 
        numCode3 := 33399999;        
    end;

    Begin
        numCode4 := gconst.fncxmlextract(xmldoc,'Param/SubPortfolio',  numCode4);
    Exception 
    when others then 
        numCode4 := 33899999;        
    end;

    Begin
        numCode5 := gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',  numCode5); 
    Exception 
    when others then 
        numCode5 := 30499999;        
    end;

    Begin
        numCode6 := gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',  numCode6); 
    Exception 
    when others then 
        numCode6 := 30499999;        
    end;

    Begin
        numCode7 := gconst.fncxmlextract(xmldoc,'Param/Bank',  numCode7); 
    Exception 
    when others then 
        numCode7 := 30699999;        
    end;

    Begin
        numCode8 := gconst.fncxmlextract(xmldoc,'Param/InflowOutflow',  numCode8);
    Exception 
    when others then 
        numCode8 := 31700001;        
    end;

    Begin
        DatTemp := gconst.fncxmlextract(xmldoc,'Param/FromDate',  DatTemp);
    Exception 
    when others then 
        DatTemp := null;     
    end;

    Begin
        DatTemp1 := gconst.fncxmlextract(xmldoc,'Param/ToDate',  DatTemp1);
    Exception 
    when others then 
        DatTemp1 := null;        
    end;

    Begin
        DatTemp2 := gconst.fncxmlextract(xmldoc,'Param/EntryDate',  DatTemp2);
    Exception 
    when others then 
        DatTemp2 := null;        
    end;

    Begin
        DatTemp3 := gconst.fncxmlextract(xmldoc,'Param/MaturityDate',  DatTemp3);
    Exception 
    when others then 
        DatTemp3 := null;        
    end;

    Begin
        numCode9 := gconst.fncxmlextract(xmldoc,'Param/GroupByLink',  numCode9);
    Exception 
    when others then 
        numCode9 := 12400001;        
    end;

    if numCode9 = 12400001 then 
        open gencursor for 
            SELECT rownum "Rownum", BatchReference "BatchNumber", TradeReference "TradeReference",
                   Company "Company", Location "Location", Portfolio "Portfolio",
                   SubPortfolio "SubPortfolio", ReversalType "ReversalType",
                   EntryDate "EntryDate", Bank "Bank", DisposableAccountNo "DisposableAccountNo",
                   UserReference "UserReference", BaseCurrency "BaseCurrency", OtherCurrency "OtherCurrency",
                   BillAmount "BillAmount",  Outstanding "Outstanding",
                   ReversalRate "ExchangeRate", ReversalINR "ReversalINR",
                   ValueDate "MaturityDate",
                   Remarks "Remarks", ERPReference "ERPReference",
                   Remarks1 "Remarks1", Remarks2 "Remarks2",
                   Remarks3 "Remarks3", Remarks4 "Remarks4",
                   Remarks5 "Remarks5", Remarks6 "Remarks6",
                   Remarks7 "Remarks7", Remarks8 "Remarks8",
                   EDBenefit "EDBenefit", EDAmount "EDAmount",
                   ImportExport "ImportExport", ImportExportCode "ImportExportCode",
                   CurrencyCode "CurrencyCode", OtherCurrencyCode "OtherCurrencyCode",
                   CompanyCode "CompanyCode", LocationCode "LocationCode",
                   LocalBank "LocalBank", SerialNumber "SerialNumber",
                   PortfolioCode "PortfolioCode", SubPortfolioCode "SubPortfolioCode",
                   BuySellCode "BuySellCode", ForwardDealAmt "ForwardDealAmt"
            from (select BREL_BATCH_NUMBER BatchReference,
                     BREL_TRADE_REFERENCE TradeReference,
                    sum(BREL_REVERSAL_FCY) BillAmount,
                    sum(BREL_REVERSAL_FCY) Outstanding,
                    --sum(BREL_REVERSAL_RATE) ReversalRate,
                    round(SUM(BREL_REVERSAL_FCY*BREL_REVERSAL_RATE) / SUM(BREL_REVERSAL_FCY),6) ReversalRate,
                    sum(BREL_REVERSAL_INR) ReversalINR,
                    BREL_ENTRY_DATE EntryDate,
                    BREL_MATURITY_DATE ValueDate,  
                    0 EDBenefit,
                    0 EDAmount,
                    pkgReturnCursor.fncGetDescription(MAX(NVL(brel_reversal_type,25999999)),1)ReversalType,
                    pkgReturnCursor.fncGetDescription(MAX(NVL(BREL_IMPORT_EXPORT,31799999)),1) ImportExport,
                    pkgReturnCursor.fncGetDescription(MAX(NVL(brel_trade_currency,30499999)),2) BaseCurrency,
                    pkgReturnCursor.fncGetDescription(MAX(NVL(brel_local_currency,30499999)),2) OtherCurrency,
                    pkgReturnCursor.fncGetDescription(MAX(NVL(brel_local_bank,30699999)),2) Bank,
                    pkgReturnCursor.fncGetDescription(MAX(NVL(brel_company_code,30199999)),2) Company,
                    pkgReturnCursor.fncGetDescription(MAX(NVL(brel_location_code,30299999)),2) Location,
                    pkgReturnCursor.fncGetDescription(MAX(NVL(BREL_PRODUCT_CATEGORY,33399999)),2) Portfolio,
                    pkgReturnCursor.fncGetDescription(MAX(NVL(BREL_SUB_PORTFOLIO,33399999)),2) SubPortfolio,
                    MAX(brel_reversal_type) ImportExportCode,
                    MAX(brel_trade_currency) CurrencyCode,
                    MAX(brel_local_currency) OtherCurrencyCode,
                    MAX(brel_company_code) CompanyCode,
                    MAX(brel_local_bank) LocalBank,
                    MAX(Brel_Reverse_Serial) SerialNumber,
                    MAX(BREL_LOCATION_CODE) LocationCode,
                    MAX(NVL(BREL_PRODUCT_CATEGORY,33399999)) PortfolioCode,
                    MAX(NVL(BREL_SUB_PORTFOLIO,33899999)) SubPortfolioCode,
                    BREL_USER_REFERENCE UserReference,
                    BREL_REMARKS Remarks, BREL_ERP_REFERENCE ERPReference,
                    BREL_REMARKS1 Remarks1, BREL_REMARKS2 Remarks2,
                    BREL_REMARKS3 Remarks3, BREL_REMARKS4 Remarks4,
                    BREL_REMARKS5 Remarks5, BREL_REMARKS6 Remarks6,
                    BREL_REMARKS7 Remarks7, BREL_REMARKS8 Remarks8,
                    BREL_ACCOUNT_NUMBER DisposableAccountNo,
                    BREL_IMPORT_EXPORT BuySellCode, BREL_FORWARDDEAL_AMOUNT ForwardDealAmt
                    FROM TRTRAN003 
                    WHERE BREL_RECORD_STATUS NOT IN(10200005,10200006)
                    and BREL_DELIVERY_BATCH is null
                   -- AND BREL_BATCH_NUMBER != 'NA'
                    and BREL_COMPANY_CODE = decode(numCode1,30199999,BREL_COMPANY_CODE,numCode1)
                    and BREL_LOCATION_CODE = decode(numCode2,30299999,BREL_LOCATION_CODE,numCode2)
                    and BREL_PRODUCT_CATEGORY = decode(numCode3,33399999,BREL_PRODUCT_CATEGORY,numCode3)
                    and BREL_SUB_PORTFOLIO = decode(numCode4,33899999,BREL_SUB_PORTFOLIO,numCode4)
                    and BREL_TRADE_CURRENCY = decode(numCode5,30499999,BREL_TRADE_CURRENCY,numCode5)
                    and BREL_LOCAL_CURRENCY = decode(numCode6,30499999,BREL_LOCAL_CURRENCY,numCode6)
                    and BREL_LOCAL_BANK = decode(numCode7,30699999,BREL_LOCAL_BANK,numCode7)                        
                    and BREL_IMPORT_EXPORT = decode(numCode8,31799999,BREL_IMPORT_EXPORT,numCode8)
                    and ((DatTemp3 is null) or brel_maturity_date = DatTemp3)
                    group by BREL_ENTRY_DATE,BREL_MATURITY_DATE,BREL_BATCH_NUMBER,BREL_TRADE_REFERENCE,
                    BREL_USER_REFERENCE,BREL_ACCOUNT_NUMBER,BREL_REMARKS,BREL_ERP_REFERENCE,
                    BREL_REMARKS1,BREL_REMARKS2,BREL_REMARKS3,BREL_REMARKS4,BREL_REMARKS5,
                    BREL_REMARKS6,BREL_REMARKS7,BREL_REMARKS8,BREL_IMPORT_EXPORT,BREL_FORWARDDEAL_AMOUNT);
    else 
        open gencursor for 
            SELECT rownum "Rownum", 
                BREL_TRADE_REFERENCE "TradeReference",
                pkgReturnCursor.fncGetDescription(NVL(brel_reversal_type,25999999),1)"ReversalType",
                pkgReturnCursor.fncGetDescription(NVL(BREL_IMPORT_EXPORT,31799999),1) "ImportExport",
                BREL_REVERSAL_FCY "BillAmount",
                BREL_REVERSAL_FCY "Outstanding",
--                pkgforexprocess.Fncgetoutstanding(BREL_TRADE_REFERENCE, BREL_REVERSE_SERIAL,Gconst.UTILREMITTANCE,
--                Gconst.Amountfcy, datworkdate) "Outstanding",
                BREL_REVERSAL_RATE "ExchangeRate",
                Brel_entry_date "EntryDate",
                brel_maturity_date "MaturityDate",  
                0 "EDBenefit",
                0 "EDAmount",
                pkgReturnCursor.fncGetDescription(NVL(brel_trade_currency,30499999),2)"BaseCurrency",
                pkgReturnCursor.fncGetDescription(NVL(brel_local_currency,30499999),2)"OtherCurrency",
                pkgReturnCursor.fncGetDescription(NVL(brel_local_bank,30699999),2) "Bank",
                pkgReturnCursor.fncGetDescription(NVL(brel_company_code,30199999),2) "Company",
                pkgReturnCursor.fncGetDescription(NVL(brel_location_code,30299999),2) "Location",
                pkgReturnCursor.fncGetDescription(NVL(BREL_PRODUCT_CATEGORY,33399999),2) Portfolio,
                pkgReturnCursor.fncGetDescription(NVL(BREL_SUB_PORTFOLIO,33399999),2) SubPortfolio,
                brel_batch_number "BatchNumber",          
                brel_reversal_type "ImportExportCode",
                brel_trade_currency "CurrencyCode",
                brel_local_currency "OtherCurrencyCode",
                brel_company_code "CompanyCode",
                brel_local_bank "LocalBank",
                Brel_Reverse_Serial "SerialNumber",
                BREL_LOCATION_CODE "LocationCode",
                BREL_ACCOUNT_NUMBER DisposableAccountNo,
                NVL(BREL_PRODUCT_CATEGORY,33399999) PortfolioCode,
                NVL(BREL_SUB_PORTFOLIO,33899999) SubPortfolioCode,
                BREL_USER_REFERENCE UserReference,
                BREL_REMARKS "Remarks", BREL_ERP_REFERENCE "ERPReference",
                BREL_REMARKS1 "Remarks1", BREL_REMARKS2 "Remarks2",
                BREL_REMARKS3 "Remarks3", BREL_REMARKS4 "Remarks4",
                BREL_REMARKS5 "Remarks5", BREL_REMARKS6 "Remarks6",
                BREL_REMARKS7 "Remarks7", BREL_REMARKS8 "Remarks8",
                BREL_ACCOUNT_NUMBER DisposableAccountNo,
                BREL_IMPORT_EXPORT BuySellCode, BREL_FORWARDDEAL_AMOUNT ForwardDealAmt
            FROM TRTRAN003 inner join TRTRAN002 
            on TRAD_TRADE_REFERENCE = BREL_TRADE_REFERENCE
            WHERE TRAD_RECORD_STATUS NOT IN(10200005,10200006)
            and BREL_RECORD_STATUS NOT IN(10200005,10200006)
            and BREL_DELIVERY_BATCH is null
            AND BREL_BATCH_NUMBER != 'NA'
            and BREL_COMPANY_CODE = decode(numCode1,30199999,BREL_COMPANY_CODE,numCode1)
            and BREL_LOCATION_CODE = decode(numCode2,30299999,BREL_LOCATION_CODE,numCode2)
            and BREL_PRODUCT_CATEGORY = decode(numCode3,33399999,BREL_PRODUCT_CATEGORY,numCode3)
            and BREL_SUB_PORTFOLIO = decode(numCode4,33899999,BREL_SUB_PORTFOLIO,numCode4)
            and BREL_TRADE_CURRENCY = decode(numCode5,30499999,BREL_TRADE_CURRENCY,numCode5)
            and BREL_LOCAL_CURRENCY = decode(numCode6,30499999,BREL_LOCAL_CURRENCY,numCode6)
            and BREL_LOCAL_BANK = decode(numCode7,30699999,BREL_LOCAL_BANK,numCode7)       
            and ((numCode8 = 31700001 and trad_import_export <= 25900050) or
            (numCode8 = 31700002 and trad_import_export >= 25900050))
            and (DatTemp3 is null or brel_maturity_date = DatTemp3);
            --and brel_maturity_date <= Dattemp2;--between DatTemp and DatTemp1;
        end if;
    Goto Process_End;
END IF; 

if numInfoType = REFGetForward then
    varOperation := 'Extracting Deal Information for reversal';
    Begin
        numCode1 := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',  numCode1);
    Exception 
    when others then 
        numCode1 := 30199999;        
    end;

    Begin
        numCode2 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode2);  
    Exception 
    when others then 
        numCode2 := 30299999;        
    end;

    Begin
        numCode3 := gconst.fncxmlextract(xmldoc,'Param/Portfolio',  numCode3);
    Exception 
    when others then 
        numCode3 := 33399999;        
    end;

    Begin
        numCode4 := gconst.fncxmlextract(xmldoc,'Param/SubPortfolio',  numCode4);
    Exception 
    when others then 
        numCode4 := 33899999;        
    end;

    Begin
        numCode5 := gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',  numCode5); 
    Exception 
    when others then 
        numCode5 := 30499999;        
    end;

    Begin
        numCode6 := gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',  numCode6); 
    Exception 
    when others then 
        numCode6 := 30499999;        
    end;

    Begin
        numCode7 := gconst.fncxmlextract(xmldoc,'Param/Bank',  numCode7); 
    Exception 
    when others then 
        numCode7 := 30699999;        
    end;

    Begin
        numCode8 := gconst.fncxmlextract(xmldoc,'Param/InflowOutflow',  numCode8);
    Exception 
    when others then 
        numCode8 := 31700001;        
    end;

    Begin
        DatTemp := gconst.fncxmlextract(xmldoc,'Param/FromDate',  DatTemp1);
    Exception 
    when others then 
        DatTemp := null;     
    end;

    Begin
        DatTemp1 := gconst.fncxmlextract(xmldoc,'Param/ToDate',  DatTemp1);
    Exception 
    when others then 
        DatTemp1 := null;        
    end;

    Begin
        DatTemp2 := gconst.fncxmlextract(xmldoc,'Param/EntryDate',  DatTemp2);
    Exception 
    when others then 
        DatTemp2 := null;        
    end;

    begin 
        vartemp  := gconst.fncxmlextract(xmldoc,'Param/TradeReference',  vartemp); 
    exception 
    when others then
        vartemp := null;
    end;      

    begin 
        vartemp1  := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  vartemp); 
    exception 
    when others then
        vartemp1 := null;
    end;

    SELECT CNDI_DIRECT_INDIRECT,CNDI_REMITTANCE_DIRIND
    into numCode9,numcode10
    FROM TRMASTER256
    WHERE CNDI_BASE_CURRENCY=numCode5
    and CNDI_OTHER_CURRENCY=numCode6
    and  CNDI_RECORD_STATUS NOT IN(10200005,10200006);

    select nvl(count(*),0) 
    into numCode11 
    from trtran004,trtran001 
    where HEDG_TRADE_REFERENCE = vartemp 
    and hedg_deal_number = deal_deal_number
    and deal_record_status between 10200001 and 10200004
    and hedg_record_status between 10200001 and 10200004
    and deal_deal_type not in(25400001); 

    if numCode8 =31700001 then
        numCode8 := 25300002;
    else
        numCode8 := 25300001;
    end if;

    if numCode11 = 0 then
        Open GenCursor for
            select rownum "Rownum", deal_deal_number "DealNumber",
                    DEAL_BANK_REFERENCE "BankReference", --deal_dealer_remarks "BankReference", 
                    deal_base_amount "BaseAmount", 
                    deal_spot_rate "SpotRate",
                    DEAL_OTHER_AMOUNT "QuoteAmount",
                    deal_forward_rate "Premium", 
                    deal_maturity_date "MaturityDate",
                    pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",            
                    NVL((select sum(cdel_cancel_amount)
                    from trtran006 a
                    where a.cdel_deal_number = deal_deal_number
                    -- Commented By Manjunath Reddy on 17-May-2021
                   -- and a.cdel_deal_serial = deal_serial_number
                    and a.cdel_record_status in (10200001, 10200003,10200004)),0)"UtilizedCancelledAmount",
                    pkgforexprocess.FncgetoutstandingTransaction(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                    Gconst.Amountfcy, dattemp2) "Outstanding",
                    pkgforexprocess.FncgetoutstandingTransaction(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                    Gconst.Amountfcy, dattemp2) "OutstandingRunningBalance",                                              
                    --            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                    --                                              Gconst.Amountfcy, dattemp2) "ReverseNow", 
                    0 "UtilizationAmount",
                    0 "EDBenefit",
                    0 "EDAmount",
                    deal_exchange_rate "FinalRate", 
                    0 "ProfitLoss",
                    deal_execute_date "DealBookingDate",            
                    deal_margin_rate "MarginRate",
                    pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
                    pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
                    pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
                    deal_execute_date "ExecuteDate",
                    deal_exchange_rate "ExchangeRate",
                    pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
                    pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
                    deal_buy_sell "BUYSELLCODE",
                    deal_deal_number as "HedgingWith",
                    deal_other_amount "HedgedOther", 
                    deal_local_rate "OtherRate",                  
                    1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
                    '0' "BatchNo",
                    'NA' "ExposureReference",
                    0 as "Status",
                    deal_other_currency "OtherCurrencyCode",
                    deal_counter_party "CounterPartyCode",
                    -- deal_direct_indirect "DirectIndirect",
                    deal_base_currency "BaseCurrencyCode",
                    deal_exchange_rate "FinalRateCalculated",
                    CNDI_DIRECT_INDIRECT "DirectIndirect",
--                    (SELECT CNDI_DIRECT_INDIRECT
--                        FROM TRMASTER256
--                        WHERE CNDI_BASE_CURRENCY=deal_base_currency
--                        and CNDI_OTHER_CURRENCY=deal_other_currency
--                        and  CNDI_RECORD_STATUS NOT IN(10200005,10200006)) "DirectIndirect",
                    DEAL_CURRENCY_PAIR "CurrencyPair"
            from trtran001 left outer join trmaster256
            on CNDI_PICK_CODE= deal_currency_pair
            and deal_record_status not in (10200005,10200006)
            where  deal_Company_Code in (select usco_company_code from trsystem022a
                                        where UPPER(usco_user_id) =varUserid
                                        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
            and DEAL_LOCATION_CODE in (select USLO_ENTITY from trsystem022d
                                        where UPPER(USLO_USER_ID) = varUserid
                                        and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            and deal_record_status between 10200001 and 10200004
            and ((vartemp1 is null) and 
            (deal_company_code = decode(numCode1,30199999,deal_company_code,numCode1)
            and DEAL_LOCATION_CODE = decode(numCode2,30299999,DEAL_LOCATION_CODE,numCode2)
            and DEAL_BACKUP_DEAL = decode(numCode3,33399999,DEAL_BACKUP_DEAL,numCode3)
            and DEAL_INIT_CODE = decode(numCode4,33899999,DEAL_INIT_CODE,numCode4)
            and deal_counter_party = decode(numCode7,30699999,deal_counter_party,numCode7)
            -- and deal_base_currency = numcode3 --and deal_other_currency = numcode5
            --  and (deal_base_currency = numcode3 or deal_other_currency = numcode3) -- Added by lakshmi
--            and ((numCode7 = 12400001 and deal_base_currency = numcode3) or 
--            (numCode7 = 12400002 and ((deal_base_currency = numcode3) or 
--            deal_other_currency = numcode3))) -- Added by lakshmi
--            and (deal_base_currency = numcode3 or deal_other_currency = numcode3)--Added by supriya
           and ((numcode10=12400001 and deal_base_currency = numCode5 and CNDI_DIRECT_INDIRECT=12400001 ) or 
             (numcode10=12400002 and (deal_base_currency = numCode5 or deal_other_currency = numCode5)))--Added by supriya
           --and deal_deal_type !=25400001 
            and DEAL_SWAP_OUTRIGHT != 25200001
            and deal_process_complete !=12400001
            --and deal_backup_deal = numCode4
            and deal_buy_sell = numCode8
            --and deal_maturity_date >=dattemp2
            and deal_execute_date <= dattemp2)
            --and deal_maturity_date between DatTemp and DatTemp1--DEALS BETWEEN EXPOSURES MATURITY DATE TO MATURITY DATE SELECTED IN THE SCREEN
            or ((vartemp1 is not null) and (deal_deal_number in (select cdel_deal_number from trtran006 where cdel_batch_number=vartemp1))))
            order by deal_maturity_date;            
    else            
        Open GenCursor for
            select rownum "Rownum", deal_deal_number "DealNumber",
                    DEAL_BANK_REFERENCE "BankReference", --deal_dealer_remarks "BankReference", 
                    deal_base_amount "BaseAmount", 
                    deal_spot_rate "SpotRate",
                    DEAL_OTHER_AMOUNT "QuoteAmount",
                    deal_forward_rate "Premium", 
                    deal_maturity_date "MaturityDate",
                    pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",            
                    NVL((select sum(cdel_cancel_amount)
                    from trtran006 a
                    where a.cdel_deal_number = deal_deal_number
                    -- commented by Mnajunath Reddy on 17-May-2021
                    --and a.cdel_deal_serial = deal_serial_number
                    and a.cdel_record_status in (10200001, 10200003,10200004)),0)"UtilizedCancelledAmount",
                    pkgforexprocess.FncgetoutstandingTransaction(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                    Gconst.Amountfcy, dattemp2) "Outstanding",
                    pkgforexprocess.FncgetoutstandingTransaction(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                    Gconst.Amountfcy, dattemp2) "OutstandingRunningBalance",                                              
                    --            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                    --                                              Gconst.Amountfcy, dattemp2) "ReverseNow", 
                    0 "UtilizationAmount",
                    0 "EDBenefit",
                    0 "EDAmount",
                    deal_exchange_rate "FinalRate", 
                    0 "ProfitLoss",
                    deal_execute_date "DealBookingDate",            
                    deal_margin_rate "MarginRate",
                    pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
                    pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
                    pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
                    deal_execute_date "ExecuteDate",
                    deal_exchange_rate "ExchangeRate",
                    pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
                    pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",                  
                    deal_buy_sell "BUYSELLCODE",
                    deal_deal_number as "HedgingWith",
                    deal_other_amount "HedgedOther", 
                    deal_local_rate "OtherRate",                  
                    1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
                    '0' "BatchNo",
                    'NA' "ExposureReference",
                    0 as "Status",
                    deal_other_currency "OtherCurrencyCode",
                    deal_counter_party "CounterPartyCode",
                    -- deal_direct_indirect "DirectIndirect",
                    deal_base_currency "BaseCurrencyCode",
                    deal_exchange_rate "FinalRateCalculated",
                    CNDI_DIRECT_INDIRECT "DirectIndirect",
--                    (SELECT CNDI_DIRECT_INDIRECT
--                        FROM TRMASTER256
--                        WHERE CNDI_BASE_CURRENCY=deal_base_currency
--                        and CNDI_OTHER_CURRENCY=deal_other_currency
--                        and  CNDI_RECORD_STATUS NOT IN(10200005,10200006)) "DirectIndirect",
                    DEAL_CURRENCY_PAIR "CurrencyPair"
            from trtran001 left outer join trtran004
            on deal_deal_number = hedg_deal_number
            and hedg_record_status between 10200001 and 10200004
            left outer join trmaster256
            on CNDI_PICK_CODE= deal_currency_pair
            and deal_record_status not in (10200005,10200006)
            where HEDG_TRADE_REFERENCE = vartemp
            and deal_Company_Code in
            (select usco_company_code from trsystem022a
            where UPPER(usco_user_id) =varUserid
            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
            and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
            where UPPER(USLO_USER_ID) = varUserid
            and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            and (((vartemp1 is null) and
            (deal_record_status between 10200001 and 10200004
            --and deal_deal_type !=25400001
            and DEAL_SWAP_OUTRIGHT != 25200001
            and deal_process_complete !=12400001
--            and ((numCode7 = 12400001 and deal_base_currency = numcode3) or --commented by supriya
--            (numCode7 = 12400002 and ((deal_base_currency = numcode3) or 
--            deal_other_currency = numcode3))) -- Added by lakshmi    
            and deal_company_code = decode(numCode1,30199999,deal_company_code,numCode1)
            and DEAL_LOCATION_CODE = decode(numCode2,30299999,DEAL_LOCATION_CODE,numCode2)
            and DEAL_BACKUP_DEAL = decode(numCode3,33399999,DEAL_BACKUP_DEAL,numCode3)
            and DEAL_INIT_CODE = decode(numCode4,33899999,DEAL_INIT_CODE,numCode4)
            and deal_counter_party = decode(numCode7,30699999,deal_counter_party,numCode7)
           and ((numcode10=12400001 and deal_base_currency = numcode3 and CNDI_DIRECT_INDIRECT=12400001) or 
             (numcode10=12400002 and (deal_base_currency = numcode3 or deal_other_currency = numcode3)))--Added by supriya
           -- and deal_maturity_date >=dattemp2
--            and deal_maturity_date between DatTemp and DatTemp1
--            and deal_execute_date <= dattemp2
            --and deal_maturity_date between DatTemp and DatTemp1--DEALS BETWEEN EXPOSURES MATURITY DATE TO MATURITY DATE SELECTED IN THE SCREEN
            and deal_execute_date <= dattemp2))
            or ((vartemp1 is not null)
            and (deal_deal_number in (select cdel_deal_number from trtran006 where cdel_batch_number=vartemp1))))
            order by deal_maturity_date;
    end if;
    Goto Process_End;
End if; 

--    if numInfoType = REFGetForward then
--      varOperation := 'Extracting Deal Information for reversal';
--      numcode := gconst.fncXMLExtract(xmldoc,'Param/CompanyCode', numcode); 
--      numCode1 := gconst.fncxmlextract(xmldoc,'Param/CounterParty',  numCode1);  
--      numCode2 := GConst.fncXMLExtract(xmldoc,'Param/ImportExport', numCode2);
--      numCode3 := GConst.fncXMLExtract(xmldoc,'Param/TradeCurrency', numCode3);
--      numCode4 := gconst.fncxmlextract(xmldoc,'Param/BusinessUnit',  numCode4); 
--     -- numCode5 := GConst.fncXMLExtract(xmldoc,'Param/OtherCurrency', numCode5);
--      DatTemp  := gconst.fncxmlextract(xmldoc,'Param/FromDate',  DatTemp);  
--      DatTemp1 := gconst.fncxmlextract(xmldoc,'Param/ToDate',  DatTemp1);
--      dattemp2 := gconst.fncxmlextract(xmldoc,'Param/EntryDate',  dattemp2);
--      begin 
--        vartemp  := gconst.fncxmlextract(xmldoc,'Param/TradeReference',  vartemp); 
--      exception 
--        when others then
--        vartemp := '';
--      end;      
--
--      begin 
--        vartemp1  := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  vartemp); 
--      exception 
--        when others then
--        vartemp1 := '';
--      end;
--      
--      SELECT CNDI_DIRECT_INDIRECT 
--             into numCode7
--      FROM TRMASTER256
--      WHERE CNDI_BASE_CURRENCY=numCode3
--      and CNDI_OTHER_CURRENCY=numcode5
--      and  CNDI_RECORD_STATUS NOT IN(10200005,10200006);
--
--      select nvl(count(*),0) into numCode6 from trtran004,trtran001 
--      where HEDG_TRADE_REFERENCE = vartemp 
--      and hedg_deal_number = deal_deal_number
--      and deal_record_status between 10200001 and 10200004
--      and hedg_record_status between 10200001 and 10200004
--      and deal_deal_type not in(25400001); 
--      if numCode2 =31700001 then
--        numCode2 := 25300002;
--      else
--        numCode2 := 25300001;
--      end if;
--      if numCode6 = 0 then
--        Open GenCursor for
--          select rownum "Rownum", deal_dealer_remarks "BankReference", deal_deal_number "DealNumber",
--            deal_base_amount "BaseAmount", 
--            deal_spot_rate "SpotRate",
--            deal_forward_rate "Premium", 
--            deal_maturity_date "MaturityDate",
--            pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",            
--            NVL((select sum(cdel_cancel_amount)
--                 from trtran006 a
--                 where a.cdel_deal_number = deal_deal_number
--                 and a.cdel_deal_serial = deal_serial_number
--                 and a.cdel_record_status in (10200001, 10200003,10200004)),0)"UtilizedCancelledAmount",
--            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
--                                              Gconst.Amountfcy, dattemp2) "Outstanding",
--            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
--                                              Gconst.Amountfcy, dattemp2) "OutstandingRunningBalance",                                              
----            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
----                                              Gconst.Amountfcy, dattemp2) "ReverseNow", 
--            0 "UtilizationAmount",
--            0 "EDBenefit",
--            0 "EDAmount",
--            deal_exchange_rate "FinalRate", 
--            0 "ProfitLoss",
--            deal_execute_date "DealBookingDate",            
--            deal_margin_rate "MarginRate",
--            pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
--            pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
--            pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
--            deal_execute_date "ExecuteDate",
--            deal_exchange_rate "ExchangeRate",
--            pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
--            pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
--            deal_buy_sell buySellcode,
--            deal_deal_number as "HedgingWith",
--            deal_other_amount "HedgedOther", 
--            deal_local_rate "OtherRate",                  
--            1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
--            '0' "BatchNo",
--            'NA' "ExposureReference",
--            0 as "Status",
--            deal_other_currency "OtherCurrencyCode",
--            deal_counter_party "CounterPartyCode",
--           -- deal_direct_indirect "DirectIndirect",
--            deal_base_currency "BaseCurrencyCode",
--            deal_exchange_rate "FinalRateCalculated"
--       		from trtran001
--          where  deal_Company_Code in
--          (select usco_company_code from trsystem022a
--           where UPPER(usco_user_id) =varUserid
--        	AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--           and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--          and deal_record_status between 10200001 and 10200004
--          and ((vartemp1 is null) and 
--          (deal_company_code = numcode
--         -- and deal_base_currency = numcode3 --and deal_other_currency = numcode5
--        --  and (deal_base_currency = numcode3 or deal_other_currency = numcode3) -- Added by lakshmi
--           and ((numCode7 = 12400001 and deal_base_currency = numcode3) or 
--                (numCode7 = 12400002 and ((deal_base_currency = numcode3) or 
--                 deal_other_currency = numcode3))) -- Added by lakshmi
--          --and deal_deal_type !=25400001 
--          and DEAL_SWAP_OUTRIGHT != 25200001
--          and deal_process_complete !=12400001
--          --and deal_backup_deal = numCode4
--          and deal_buy_sell = numcode2
--          and deal_maturity_date >=dattemp2
--          and deal_execute_date <= dattemp2
--          --and deal_maturity_date between DatTemp and DatTemp1
--          and deal_counter_party = decode(numcode1,30699999,deal_counter_party,numcode1))
--          or ((vartemp1 is not null) and (deal_deal_number in (select cdel_deal_number from trtran006 where cdel_batch_number=vartemp1))))
--          order by deal_maturity_date;
--
--      else
--
--        Open GenCursor for
--          select rownum "Rownum", deal_dealer_remarks "BankReference", deal_deal_number "DealNumber",
--            deal_base_amount "BaseAmount", 
--            deal_spot_rate "SpotRate",
--            deal_forward_rate "Premium", 
--            deal_maturity_date "MaturityDate",
--            pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",            
--            NVL((select sum(cdel_cancel_amount)
--                 from trtran006 a
--                 where a.cdel_deal_number = deal_deal_number
--                 and a.cdel_deal_serial = deal_serial_number
--                 and a.cdel_record_status in (10200001, 10200003,10200004)),0)"UtilizedCancelledAmount",
--            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
--                                              Gconst.Amountfcy, dattemp2) "Outstanding",
--            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
--                                              Gconst.Amountfcy, dattemp2) "OutstandingRunningBalance",                                              
----            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
----                                              Gconst.Amountfcy, dattemp2) "ReverseNow", 
--            0 "UtilizationAmount",
--            0 "EDBenefit",
--            0 "EDAmount",
--            deal_exchange_rate "FinalRate", 
--            0 "ProfitLoss",
--            deal_execute_date "DealBookingDate",            
--            deal_margin_rate "MarginRate",
--            pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
--            pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
--            pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
--            deal_execute_date "ExecuteDate",
--            deal_exchange_rate "ExchangeRate",
--            pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
--            pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",                  
--            deal_buy_sell buySellcode,
--            deal_deal_number as "HedgingWith",
--            deal_other_amount "HedgedOther", 
--            deal_local_rate "OtherRate",                  
--            1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
--            '0' "BatchNo",
--            'NA' "ExposureReference",
--            0 as "Status",
--            deal_other_currency "OtherCurrencyCode",
--            deal_counter_party "CounterPartyCode",
--           -- deal_direct_indirect "DirectIndirect",
--            deal_base_currency "BaseCurrencyCode",
--            deal_exchange_rate "FinalRateCalculated"
--       		from trtran001,trtran004
--          where HEDG_TRADE_REFERENCE = vartemp
--          and deal_deal_number = hedg_deal_number
--          and deal_Company_Code in
--         (select usco_company_code from trsystem022a
--           where UPPER(usco_user_id) =varUserid
--        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--          and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--          and (((vartemp1 is null) and
--          (deal_record_status between 10200001 and 10200004
--          and hedg_record_status between 10200001 and 10200004
--          --and deal_deal_type !=25400001
--          and DEAL_SWAP_OUTRIGHT != 25200001
--          and deal_process_complete !=12400001
--          --and deal_base_currency = numcode3 --and deal_other_currency = numcode5
----          and (deal_base_currency = numcode3 or deal_other_currency = numcode3) -- Added by lakshmi
--         and ((numCode7 = 12400001 and deal_base_currency = numcode3) or 
--                (numCode7 = 12400002 and ((deal_base_currency = numcode3) or 
--                 deal_other_currency = numcode3))) -- Added by lakshmi     
--              
--          and deal_maturity_date >=dattemp2
--          and deal_execute_date <= dattemp2))
--          or ((vartemp1 is not null)
--           and (deal_deal_number in (select cdel_deal_number from trtran006 where cdel_batch_number=vartemp1))))
--          order by deal_maturity_date;
--      end if;
--      Goto Process_End;
--    End if; 

if numInfoType = REFGetForwardCross then
    varOperation := 'Extracting Deal Information for reversal';

    Begin
        numcode := gconst.fncXMLExtract(xmldoc,'Param/CompanyCode', numcode);  
    Exception 
    when others then 
        numcode := 30199999;        
    end;

    Begin
        numCode1 := gconst.fncxmlextract(xmldoc,'Param/CounterParty',  numCode1); 
    Exception 
    when others then 
        numCode1 := 30699999;        
    end;

    Begin
        numCode2 := GConst.fncXMLExtract(xmldoc,'Param/ImportExport', numCode2);
    Exception 
    when others then 
        numCode2 := 31799999;        
    end;

    Begin
        numCode4 := gconst.fncxmlextract(xmldoc,'Param/BusinessUnit',  numCode4); 
    Exception 
    when others then 
        numCode4 := 33399999;        
    end;

    Begin
        dattemp2 := gconst.fncxmlextract(xmldoc,'Param/EntryDate',  dattemp2); 
    Exception 
    when others then 
        dattemp2 := null;        
    end;

    Begin
        numCode3 := GConst.fncXMLExtract(xmldoc,'Param/ForwardBase', numCode3);
    Exception 
    when others then 
        numCode3 := 30499999;        
    end;

    Begin
        numCode6 := GConst.fncXMLExtract(xmldoc,'Param/ForwardOther', numCode6);
    Exception 
    when others then 
        numCode6 := 30499999;        
    end;

     Begin
        numcode5 := gconst.fncXMLExtract(xmldoc,'Param/LocationCode', numcode5);  
    Exception 
    when others then 
        numcode5 := 30199999;        
    end;
--    numCode3 := GConst.fncXMLExtract(xmldoc,'Param/TradeCurrency', numCode3);
--    numCode5 := GConst.fncXMLExtract(xmldoc,'Param/OtherCurrency', numCode5);
--    DatTemp  := gconst.fncxmlextract(xmldoc,'Param/FromDate',  DatTemp);  
--    DatTemp1 := gconst.fncxmlextract(xmldoc,'Param/ToDate',  DatTemp1); 
--    numCode8 := GConst.fncXMLExtract(xmldoc,'Param/RemittanceBase', numCode8);
--    numCode9 := GConst.fncXMLExtract(xmldoc,'Param/RemittanceOther', numCode9);
--    numFcy   := gconst.fncxmlextract(xmldoc,'KeyValues/ReveseAmount',  numFcy);  
--    numspot := gconst.fncxmlextract(xmldoc,'KeyValues/ExchangeRate',  numspot);
    SELECT decode(EXTY_INFLOW_OUTFLOW,17300002, 25300002, 17300001, 25300001)
    into numCode2 FROM TRMASTER259 
    WHERE EXTY_PICK_CODE = numCode2
    AND exty_record_status not in (10200005,10200006);

--    if numCode2 > 25900049 then
--    numCode2 := 25300001;
--    else
--    numCode2 := 25300002;
--    end if;

    Open GenCursor for
        select rownum "Rownum", deal_dealer_remarks "TradeReference", 
                deal_deal_number "DealNumber", deal_base_amount "BaseAmount", 
                NVL((select sum(cdel_cancel_amount)
                from trtran006 a
                where a.cdel_deal_number = deal_deal_number
                --commented by supriya on 25/05/2021 as Utilised_Canceled amount was showing wrong
                --and a.cdel_deal_serial = deal_serial_number
                and a.cdel_record_status in (10200001, 10200003,10200004)),0) "Utilised_Canceled",
                pkgforexprocess.FncgetoutstandingTransaction(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                Gconst.Amountfcy, dattemp2) "Outstanding",
                pkgforexprocess.FncgetoutstandingTransaction(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                Gconst.Amountfcy, dattemp2) "Outstandingason",                                                                                                  
                --                  Round(numFcy * numspot,2)"ReverseNow",                                   
                0 "UtilizationAmount", 
                deal_spot_rate "SpotRate",
                deal_forward_rate "Premium",
                deal_margin_rate "MarginRate",
                0 "EDBenefit",
                0 "EDAmount",
                deal_exchange_rate "FinalRate",
                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",
                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
                deal_maturity_date "MaturityDate", 
                pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
                deal_execute_date "ExecuteDate",
                deal_exchange_rate "ExchangeRate",
                pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
                pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",                  
                deal_other_currency "OtherCurrencyCode",
                deal_base_currency "BaseCurrencyCode",
                deal_deal_number as "HedgingWith",
                deal_other_amount "HedgedOther", 
                deal_local_rate "OtherRate",                  
                1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
                deal_buy_sell "BUYSELLCODE",
                '0' "BatchNo",
                '' "ExposureReference",
                0 as "Status",
                deal_exchange_rate "FinalRateCalculated",
                DEAL_CURRENCY_PAIR "CurrencyPair",
                CNDI_DIRECT_INDIRECT "DirectIndirect"
        from trtran001 left outer join trmaster256
        on CNDI_PICK_CODE= deal_currency_pair
        where  deal_Company_Code in
        (select usco_company_code from trsystem022a
        where UPPER(usco_user_id) =varUserid
        AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
        and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
        where UPPER(USLO_USER_ID) = varUserid
        and USLO_RECORD_STATUS NOT IN (10200005,10200006))
        and deal_record_status in (10200001, 10200002, 10200003, 10200004)
        and deal_process_complete not in (12400001)
        and deal_company_code = decode(numcode,30199999,deal_company_code,numcode)
        and DEAL_LOCATION_CODE = decode(numcode5,30299999,DEAL_LOCATION_CODE,numcode5)
        and deal_base_currency = numCode3 and deal_other_currency = numcode6
        --and ((numCode7=12400001 and 
        --                   (deal_basE_currency=numCode6 and deal_other_currency =numCode9))
        --                   or ((numCode7=12400002) and
        --                   (deal_base_currency=numCode3 and deal_other_currency =numCode9)))
        --                and deal_base_currency = numcode3 -- and deal_other_currency = numcode5
        --and deal_deal_type not in (25400001)
        and DEAL_SWAP_OUTRIGHT != 25200001
        and deal_backup_deal =  decode(numcode4,33399999,deal_backup_deal,numcode4)
        and deal_buy_sell = numcode2
        and deal_maturity_date >=dattemp2
        and deal_execute_date <= dattemp2
        --and deal_maturity_date between DatTemp and DatTemp1
        and deal_counter_party =  decode(numcode1,30699999,deal_counter_party,numcode1)
        order by deal_maturity_date;
    Goto Process_End;
End if; 

--   if numInfoType = REFGetForwardCross then
--      varOperation := 'Extracting Deal Information for reversal';
--      numcode := gconst.fncXMLExtract(xmldoc,'Param/CompanyCode', numcode);  
--      numCode1 := gconst.fncxmlextract(xmldoc,'Param/CounterParty',  numCode1); 
--      numCode2 := GConst.fncXMLExtract(xmldoc,'Param/ImportExport', numCode2);
--      --numCode3 := GConst.fncXMLExtract(xmldoc,'Param/TradeCurrency', numCode3);
--      numCode4 := gconst.fncxmlextract(xmldoc,'Param/BusinessUnit',  numCode4); 
--     -- numCode5 := GConst.fncXMLExtract(xmldoc,'Param/OtherCurrency', numCode5);
--      DatTemp  := gconst.fncxmlextract(xmldoc,'Param/FromDate',  DatTemp);  
--      DatTemp1 := gconst.fncxmlextract(xmldoc,'Param/ToDate',  DatTemp1); 
--      dattemp2 := gconst.fncxmlextract(xmldoc,'Param/EntryDate',  dattemp2);  
--      numCode3 := GConst.fncXMLExtract(xmldoc,'Param/ForwardBase', numCode3);
--      numCode6 := GConst.fncXMLExtract(xmldoc,'Param/ForwardOther', numCode6);
--      numCode8 := GConst.fncXMLExtract(xmldoc,'Param/RemittanceBase', numCode8);
--      numCode9 := GConst.fncXMLExtract(xmldoc,'Param/RemittanceOther', numCode9);
----      numFcy   := gconst.fncxmlextract(xmldoc,'KeyValues/ReveseAmount',  numFcy);  
----      numspot := gconst.fncxmlextract(xmldoc,'KeyValues/ExchangeRate',  numspot);
--      if numCode2 > 25900049 then
--        numCode2 := 25300001;
--      else
--        numCode2 := 25300002;
--      end if;
----      SELECT CNDI_DIRECT_INDIRECT 
----             into numCode7
----      FROM TRMASTER256
----      WHERE CNDI_BASE_CURRENCY=numCode3
----      and CNDI_OTHER_CURRENCY=numCode6
----      and  CNDI_RECORD_STATUS NOT IN(10200005,10200006);
--      
--     -- numCode5/INR
--     -- numCode3/INR
--      
--          Open GenCursor for
--               select rownum "Rownum", deal_dealer_remarks "TradeReference", 
--               deal_deal_number "DealNumber", deal_base_amount "BaseAmount", 
--               NVL((select sum(cdel_cancel_amount)
--                    from trtran006 a
--                    where a.cdel_deal_number = deal_deal_number
--                    --commented by supriya on 25/05/2021 as Utilised_Canceled amount was showing wrong
--                    --and a.cdel_deal_serial = deal_serial_number
--                    and a.cdel_record_status in (10200001, 10200003,10200004)),0) "Utilised_Canceled",
--               pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
--                                                    Gconst.Amountfcy, dattemp2) "Outstanding",
--               pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
--                                                    Gconst.Amountfcy, dattemp2) "Outstandingason",                                                                                                  
----                  Round(numFcy * numspot,2)"ReverseNow",                                   
--               0 "UtilizationAmount", 
--               deal_spot_rate "SpotRate",
--               deal_forward_rate "Premium",
--               deal_margin_rate "MarginRate",
--               0 "EDBenefit",
--               0 "EDAmount",
--               deal_exchange_rate "FinalRate",
--               pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",
--               pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
--               pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
--               deal_maturity_date "MaturityDate", 
--               pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
--               deal_execute_date "ExecuteDate",
--               deal_exchange_rate "ExchangeRate",
--               pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
--               pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",                  
--               deal_other_currency "OtherCurrencyCode",
--               deal_base_currency "BaseCurrencyCode",
--               deal_deal_number as "HedgingWith",
--               deal_other_amount "HedgedOther", 
--               deal_local_rate "OtherRate",                  
--               1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
--               deal_buy_sell "BUYSELLCODE",
--               '0' "BatchNo",
--               '' "ExposureReference",
--               0 as "Status",
--               deal_exchange_rate "FinalRateCalculated",
--               DEAL_CURRENCY_PAIR "CurrencyPair",
--               CNDI_DIRECT_INDIRECT "DirectIndirect"
--       		from trtran001 left outer join trmaster256
--            on CNDI_PICK_CODE= deal_currency_pair
--                where  deal_Company_Code in
--                  (select usco_company_code from trsystem022a
--                  where UPPER(usco_user_id) =varUserid
--            	AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                  and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--                and deal_record_status in (10200001, 10200002, 10200003, 10200004)
--                and deal_process_complete not in (12400001)
--                and deal_company_code = numcode
--                and deal_base_currency = numCode3 and deal_other_currency = numcode6
--                --and ((numCode7=12400001 and 
----                   (deal_basE_currency=numCode6 and deal_other_currency =numCode9))
----                   or ((numCode7=12400002) and
----                   (deal_base_currency=numCode3 and deal_other_currency =numCode9)))
----                and deal_base_currency = numcode3 -- and deal_other_currency = numcode5
--                --and deal_deal_type not in (25400001)
--                and DEAL_SWAP_OUTRIGHT != 25200001
--                and deal_backup_deal =  decode(numcode4,33399999,deal_backup_deal,numcode4)
--                and deal_buy_sell = numcode2
--                and deal_maturity_date >=dattemp2
--                and deal_execute_date <= dattemp2
--                --and deal_maturity_date between DatTemp and DatTemp1
--                and deal_counter_party =  decode(numcode1,30699999,deal_counter_party,numcode1)
--                order by deal_maturity_date;
--      Goto Process_End;
--    End if; 

--    if numinfotype = refExposureLinkDelete then
--      --DatTemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/EntryDate',   DatTemp1);  
--      --varTemp1 := gconst.fncxmlextract(xmldoc,'Param/BatchNumber',  varTemp1); 
--      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  varTemp1);
--      
--      select distinct BREL_BATCH_NUMBER
--      into vartemp2
--        from trtran003
--        where BREL_DELIVERY_BATCH = vartemp1;
--      open gencursor for   
--      
--      select pkgReturnCursor.fncGetDescription(max(nvl(BREL_PRODUCT_CATEGORY,33399999)),2) "BusinessUnit",
--             pkgReturnCursor.fncGetDescription(max(nvl(BREL_SUB_PORTFOLIO,33899999)),2) "ProfitCenter",
--             pkgReturnCursor.fncGetDescription(max(nvl(brel_trade_currency,30499999)),2) "Currency",
--             pkgReturnCursor.fncGetDescription(max(nvl(brel_local_bank,30699999)),2) "Bank",
--             MAX(BREL_BATCH_NUMBER) "BatchNo",
--             SUM(BREL_REVERSAL_FCY) "AmountFcy",    
--             SettlementAmount "SetteledAmount",
--             SettlementWeightedAvg "ReverseRate",
--             CashSettleAmountFCY "CashFcy",
--             CashSettleAmountLCY/ (case when CashSettleAmountFCY=0 then 1 else CashSettleAmountFCY end )"CashRate",
--             FWDSettleAmountFCY "ForwardFcy",
--             FWDSettleAmountFCY/(case when FWDSettleAmountLCY=0 then 1 else FWDSettleAmountLCY end ) "FWD_Rate"
--        from trtran003 
--        inner join (SELECT SUM(nvl(CDEL_CANCEL_AMOUNT,0)) SettlementAmount,
--                           round(SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) / SUM(CDEL_CANCEL_AMOUNT),6) SettlementWeightedAvg,
--                           SUM(nvl((case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT else 0 end),0)) CashSettleAmountFCY,
--                           SUM( case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE else 0 end) CashSettleAmountLCY,
----                           round((SUM(( case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE else 0 end)
----                              ) / SUM(case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT else 1 end)),6) CashSettleAvg, 
--                           SUM(nvl(( case when  DEAL_DEAL_TYPE != 25400001 then CDEL_CANCEL_AMOUNT else 0 end),0)) FWDSettleAmountFCY,
--                           SUM( case when  DEAL_DEAL_TYPE != 25400001 then CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE else 0 end) FWDSettleAmountLCY,
--                                    cdel_batch_number BatchNo
--                             FROM TRTRAN006 inner join trtran001
--                             on DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--                             WHERE cdel_batch_number = varTemp1
--                             AND CDEL_RECORD_STATUS NOT IN(10200006,10200005)
--                             and deal_record_Status not in (10200005,10200006)
--                             group by cdel_batch_number)settled
--         on BREL_DELIVERY_BATCH = settled.BatchNo         
--          where BREL_BATCH_NUMBER = vartemp2
--          group by BREL_BATCH_NUMBER,SettlementAmount,SettlementWeightedAvg,CashFcy,CashRate,ForwardFcy,FWD_Rate;
----         inner join (SELECT SUM(CDEL_CANCEL_AMOUNT) CancelAmount, sum(CDEL_CANCEL_RATE) CancelRate,
----                                round(SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) / SUM(CDEL_CANCEL_AMOUNT),6) WeightedAvereage,
----                                cdel_batch_number BatchNo
----                         FROM TRTRAN006,TRTRAN001
----                          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
----                          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
----                          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
----                          AND DEAL_DEAL_TYPE = 25400001
----                          AND cdel_batch_number = varTemp1
----                          group by cdel_batch_number) cash
----          on BEXP_DELIVERY_BATCH = cash.BatchNo
----          inner join (SELECT SUM(CDEL_CANCEL_AMOUNT) CancelAmount, sum(CDEL_CANCEL_RATE) CancelRate,
----                                round(SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) / SUM(CDEL_CANCEL_AMOUNT),6) WeightedAvereage,
----                                cdel_batch_number BatchNo
----                         FROM TRTRAN006,TRTRAN001
----                          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
----                          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
----                          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
----                          AND DEAL_DEAL_TYPE != 25400001
----                          AND cdel_batch_number = varTemp1
----                          group by cdel_batch_number)fwd
----          on BEXP_DELIVERY_BATCH = fwd.BatchNo
--     Goto Process_End;
--END IF; 

-- if numinfotype = refExposureLinkDelete then
--      --DatTemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/EntryDate',   DatTemp1);  
--      --varTemp1 := gconst.fncxmlextract(xmldoc,'Param/BatchNumber',  varTemp1); 
--      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  varTemp1);
--      
--      select distinct BREL_BATCH_NUMBER
--      into vartemp2
--        from trtran003
--        where BREL_DELIVERY_BATCH = vartemp1;
--      open gencursor for   
--      
--      select pkgReturnCursor.fncGetDescription(max(nvl(BREL_PRODUCT_CATEGORY,33399999)),2) "BusinessUnit",
--             pkgReturnCursor.fncGetDescription(max(nvl(BREL_SUB_PORTFOLIO,33899999)),2) "ProfitCenter",
--             pkgReturnCursor.fncGetDescription(max(nvl(brel_trade_currency,30499999)),2) "Currency",
--             pkgReturnCursor.fncGetDescription(max(nvl(brel_local_bank,30699999)),2) "Bank",
--             MAX(BREL_BATCH_NUMBER) "BatchNo",
--             SUM(BREL_REVERSAL_FCY) "AmountFcy",    
--             SettlementAmount "SetteledAmount",
--             SettlementWeightedAvg "ReverseRate",
--             CashSettleAmount "CashFcy",
--             CashSettleAvg "CashRate",
--             FWDSettleAmount "ForwardFcy",
--             FWDSettleAvg "FWD_Rate"
--        from trtran003 
--        inner join (SELECT SUM(nvl(CDEL_CANCEL_AMOUNT,0)) SettlementAmount,
--                           round(SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) / SUM(CDEL_CANCEL_AMOUNT),6) SettlementWeightedAvg,
--                           SUM(nvl((case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT else 0 end),0)) CashSettleAmount,
--                           round((SUM(( case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE else 0 end)
--                              ) / SUM(case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT else 1 end)),6) CashSettleAvg, 
--                           SUM(nvl(( case when  DEAL_DEAL_TYPE != 25400001 then CDEL_CANCEL_AMOUNT else 0 end),0)) FWDSettleAmount,
--                           round((SUM(( case when  DEAL_DEAL_TYPE != 25400001 then CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE else 0 end)
--                              ) / SUM(case when  DEAL_DEAL_TYPE != 25400001 then CDEL_CANCEL_AMOUNT else 1 end)),6) FWDSettleAvg,
--                                    cdel_batch_number BatchNo
--                             FROM TRTRAN006 inner join trtran001
--                             on DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--                             WHERE cdel_batch_number = varTemp1
--                             AND CDEL_RECORD_STATUS NOT IN(10200006,10200005)
--                             and deal_record_Status not in (10200005,10200006)
--                             group by cdel_batch_number)settled
--         on BREL_DELIVERY_BATCH = settled.BatchNo         
--          where BREL_BATCH_NUMBER = vartemp2
--          group by BREL_BATCH_NUMBER,SettlementAmount,SettlementWeightedAvg,CashSettleAmount,CashSettleAvg,FWDSettleAmount,FWDSettleAvg;
----         inner join (SELECT SUM(CDEL_CANCEL_AMOUNT) CancelAmount, sum(CDEL_CANCEL_RATE) CancelRate,
----                                round(SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) / SUM(CDEL_CANCEL_AMOUNT),6) WeightedAvereage,
----                                cdel_batch_number BatchNo
----                         FROM TRTRAN006,TRTRAN001
----                          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
----                          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
----                          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
----                          AND DEAL_DEAL_TYPE = 25400001
----                          AND cdel_batch_number = varTemp1
----                          group by cdel_batch_number) cash
----          on BEXP_DELIVERY_BATCH = cash.BatchNo
----          inner join (SELECT SUM(CDEL_CANCEL_AMOUNT) CancelAmount, sum(CDEL_CANCEL_RATE) CancelRate,
----                                round(SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) / SUM(CDEL_CANCEL_AMOUNT),6) WeightedAvereage,
----                                cdel_batch_number BatchNo
----                         FROM TRTRAN006,TRTRAN001
----                          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
----                          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
----                          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
----                          AND DEAL_DEAL_TYPE != 25400001
----                          AND cdel_batch_number = varTemp1
----                          group by cdel_batch_number)fwd
----          on BEXP_DELIVERY_BATCH = fwd.BatchNo
--     Goto Process_End;
--END IF; 
--       select 
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_TRADE_CURRENCY,30499999),2) "Currency",
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_LOCAL_BANK,30699999),2) "Bank",
--         TRAD_TRADE_FCY "AmountFcy",
--         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006
--         WHERE cdel_batch_number = BREL_DELIVERY_BATCH
--         AND CDEL_RECORD_STATUS NOT IN(10200006,10200005)),0)"SettledAmount",
--         BREL_REVERSAL_RATE "ReverseRate",
--         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 
--          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--          AND DEAL_DEAL_TYPE = 25400001
--          AND cdel_batch_number = BREL_DELIVERY_BATCH),0) as "Spot_CashFcy" ,
--          BREL_REVERSAL_RATE as "Spot_CashRate",
--         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 
--          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--          AND DEAL_DEAL_TYPE != 25400001
--          AND cdel_batch_number = BREL_DELIVERY_BATCH),0) as "ForwardFcy" ,

--         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006
--         WHERE cdel_batch_number = BREL_DELIVERY_BATCH
--         AND CDEL_RECORD_STATUS NOT IN(10200006,10200005)),0)"SettledAmount",
--         
--         (case when (SELECT count(*) FROM TRTRAN006
--                     WHERE cdel_batch_number = BREL_DELIVERY_BATCH
--                     AND CDEL_RECORD_STATUS NOT IN(10200006,10200005)) > 0 
--           then     ((SELECT SUM(CDEL_CANCEL_RATE) FROM TRTRAN006
--                     WHERE cdel_batch_number = BREL_DELIVERY_BATCH
--                     AND CDEL_RECORD_STATUS NOT IN(10200006,10200005))/(SELECT count(*) FROM TRTRAN006
--                     WHERE cdel_batch_number = BREL_DELIVERY_BATCH
--                     AND CDEL_RECORD_STATUS NOT IN(10200006,10200005)))
--           else 0 end) "ReverseRate",
--         
--         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 
--          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--          AND DEAL_DEAL_TYPE = 25400001
--          AND cdel_batch_number = BREL_DELIVERY_BATCH),0) as "Spot_CashFcy",
--         
--         (case when (SELECT count(*) FROM TRTRAN006,TRTRAN001
--                      WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--                      AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--                      AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--                      AND DEAL_DEAL_TYPE = 25400001
--                      AND cdel_batch_number = BREL_DELIVERY_BATCH) > 0 
--           then     ((SELECT SUM(CDEL_CANCEL_RATE) FROM TRTRAN006,TRTRAN001
--                      WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--                      AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--                      AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--                      AND DEAL_DEAL_TYPE = 25400001
--                      AND cdel_batch_number = BREL_DELIVERY_BATCH) /
--                     (SELECT count(*) FROM TRTRAN006,TRTRAN001
--                      WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--                      AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--                      AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--                      AND DEAL_DEAL_TYPE = 25400001
--                      AND cdel_batch_number = BREL_DELIVERY_BATCH))
--           else 0 end) "Spot_CashRate",
--         
--         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 
--          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--          AND DEAL_DEAL_TYPE != 25400001
--          AND cdel_batch_number = BREL_DELIVERY_BATCH),0) as "ForwardFcy" ,
--          
--         (case when (SELECT count(*) FROM TRTRAN006,TRTRAN001
--                       WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--                      AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--                      AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--                      AND DEAL_DEAL_TYPE != 25400001
--                      AND cdel_batch_number = BREL_DELIVERY_BATCH) > 0 
--           then     ((SELECT SUM(CDEL_CANCEL_RATE) FROM TRTRAN006,TRTRAN001
--                       WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--                      AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--                      AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--                      AND DEAL_DEAL_TYPE != 25400001
--                      AND cdel_batch_number = BREL_DELIVERY_BATCH) /
--                     (SELECT count(*) FROM TRTRAN006,TRTRAN001
--                      WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--                      AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--                      AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--                      AND DEAL_DEAL_TYPE != 25400001
--                      AND cdel_batch_number = BREL_DELIVERY_BATCH))
--           else 0 end) "FWD_Rate",
--         TRAD_REFERENCE_DATE "ReferenceDate",
--         TRAD_MATURITY_DATE "DueDate",
--         trad_trade_rate "ExchangeRate",
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_IMPORT_EXPORT,25999999),1) "ImportExport",
--         TRAD_ENTRY_DATE "EntryDate",
--         TRAD_TRADE_REFERENCE "TradeReference",
--         'Delete' "EditDelete",
--         TRAD_COMPANY_CODE "CompanyCode",
--         TRAD_LOCATION_CODE "LocationCode",
--         TRAD_LOCAL_BANK "LocalBankCode",
--         --TRAD_ENTRY_DATE "EntryDate",
--         BREL_BATCH_NUMBER "BatchNo",
--         0 as "Status",
--         brel_reverse_serial "ReverseSerial",
--         TRAD_USER_REFERENCE "UserRemarks",
--         TRAD_TRADE_REMARKS "RequestedBy",
--         BREL_DELIVERY_BATCH "DeliveryBatch"
--         from TRTRAN003A INNER JOIN trtran003
--            ON BEXP_DELIVERY_BATCH = brel_DELIVERY_BATCH
--            INNER JOIN trtran002  
--            on brel_trade_reference = trad_trade_reference  
--            where trad_record_status not in(1020005,10200006)
--            and bexp_record_status not in(1020005,10200006)
--            and brel_record_status not in(1020005,10200006)
--            and BEXP_DELIVERY_BATCH = varTemp1;
--        from trtran002,trtran003 where 
--          trad_trade_reference = brel_trade_reference
--          and trad_record_status not in(1020005,10200006)
--          and brel_record_status not in(1020005,10200006)
--          and BREL_DELIVERY_BATCH = varTemp1
--          and BREL_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                           where upper(usco_user_id) = varUserid
--                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--         and BREL_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--            and  Trad_company_code in (select usco_company_code from trsystem022a
--           where UPPER(usco_user_id) =varUserid
--          AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--          and  TRAD_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
          --and brel_batch_number = varTemp1
          --and brel_entry_date = DatTemp1
--      UNION ALL
--       select 
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_CURRENCY_CODE,30499999),2) "Currency",
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_LOCAL_BANK,30699999),2) "Bank",
--         BCRD_SANCTIONED_FCY "AmountFcy",
--         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006
--         WHERE cdel_batch_number = brel_batch_number
--         AND CDEL_RECORD_STATUS NOT IN(10200006,10200005)),0)"SettledAmount",
--         BREL_REVERSAL_RATE "ReverseRate",
--         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 
--          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--          AND DEAL_DEAL_TYPE = 25400001
--          AND cdel_batch_number = brel_batch_number),0) as "Spot_CashFcy" ,
--          BREL_REVERSAL_RATE as "Spot_CashRate",
--         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 
--          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
--          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--          AND DEAL_DEAL_TYPE != 25400001
--          AND cdel_batch_number = brel_batch_number),0) as "ForwardFcy" ,
--         BCRD_SANCTION_DATE "ReferenceDate",
--         BCRD_DUE_DATE "DueDate",
--         BCRD_CONVERSION_RATE "ExchangeRate",
--         pkgReturnCursor.fncGetDescription(nvl(25900073,25999999),1) "ImportExport",
--         BCRD_SANCTION_DATE "EntryDate",
--         BCRD_BUYERS_CREDIT "TradeReference",
--         'Delete' "EditDelete",
--         BCRD_COMPANY_CODE "CompanyCode",
--         BCRD_LOCATION_CODE "LocationCode",
--         BCRD_LOCAL_BANK "LocalBankCode",
--         --BCRD_SANCTION_DATE "EntryDate",
--         BREL_BATCH_NUMBER "BatchNo",
--         0 as "Status",
--         brel_reverse_serial "SerialNumber",
--         BCRD_SANCTION_REFERENCE "UserRemarks",
--         BCRD_LOAN_REMARKS "RequestedBy",
--         BREL_DELIVERY_BATCH "DeliveryBatch"
--        from trtran045,trtran003 
--        where 
--          BCRD_BUYERS_CREDIT = brel_trade_reference
--          and bcrd_record_status not in(1020005,10200006)
--          and brel_record_status not in(1020005,10200006)
--          and BREL_DELIVERY_BATCH = varTemp1;
          --and brel_batch_number = varTemp1;
          --and brel_entry_date = DatTemp1;

----------------------------------------------------------------------------
--added by supriya on 12/06/2021

if numinfotype = REFEXPOSURELINKDELETE then
varOperation := 'Extratcting Settled PO Details';
vartemp2 := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  vartemp2);
    open gencursor for
--         select DeliveryBatch "BatchNo", BusinessUnit "BusinessUnit",ProfitCenter "ProfitCenter", Currency "Currency",
--                 Bank "Bank", AmountFcy "AmountFcy", SettlementAmount "SetteledAmount",
--                 SettlementWeightedAvg"ReverseRate",CashSettleAmountFCY "CashFcy",
--                 round(CashSettleAmountLCY/ (case when CashSettleAmountFCY=0 then 1 else CashSettleAmountFCY end ),6)"CashRate",
--                 FWDSettleAmountFCY "ForwardFcy",
--                 round(FWDSettleAmountFCY/(case when FWDSettleAmountLCY=0 then 1 else FWDSettleAmountLCY end ),6) "FWD_Rate"
--          from (select BREL_DELIVERY_BATCH DeliveryBatch,
--                         pkgReturnCursor.fncGetDescription((nvl(BREL_PRODUCT_CATEGORY,33399999)),2) BusinessUnit,
--                         pkgReturnCursor.fncGetDescription((nvl(BREL_SUB_PORTFOLIO,33899999)),2) ProfitCenter,
--                         pkgReturnCursor.fncGetDescription((nvl(brel_trade_currency,30499999)),2) Currency,
--                         pkgReturnCursor.fncGetDescription((nvl(brel_local_bank,30699999)),2) Bank,
--                         sum(BREL_REVERSAL_FCY) AmountFcy  
--                     from trtran003 
--                     where brel_record_Status not in (10200005,10200006)
--                     group by BREL_DELIVERY_BATCH,BREL_PRODUCT_CATEGORY,BREL_SUB_PORTFOLIO,
--                       brel_trade_currency,brel_local_bank )
--                     inner join 
--                     (SELECT SUM(nvl(CDEL_CANCEL_AMOUNT,0)) SettlementAmount,
--                           round(SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) / SUM(CDEL_CANCEL_AMOUNT),6) SettlementWeightedAvg,
--                           SUM(nvl((case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT else 0 end),0)) CashSettleAmountFCY,
--                           SUM( case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE else 0 end) CashSettleAmountLCY,
--                --                           round((SUM(( case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE else 0 end)
--                --                              ) / SUM(case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT else 1 end)),6) CashSettleAvg, 
--                           SUM(nvl(( case when  DEAL_DEAL_TYPE != 25400001 then CDEL_CANCEL_AMOUNT else 0 end),0)) FWDSettleAmountFCY,
--                           SUM( case when  DEAL_DEAL_TYPE != 25400001 then CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE else 0 end) FWDSettleAmountLCY,
--                                    cdel_batch_number Cancel_BatchNo
--                             FROM TRTRAN006 inner join trtran001
--                             on DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
--                             WHERE  CDEL_RECORD_STATUS NOT IN(10200006,10200005)
--                             and deal_record_Status not in (10200005,10200006)
--                             group by cdel_batch_number)settled
--             on DeliveryBatch = settled.Cancel_BatchNo         
--             where Cancel_BatchNo = vartemp2;

         select DeliveryBatch "DeliveryBatch", BusinessUnit "BusinessUnit",ProfitCenter "ProfitCenter", 
                 Bank "Bank", AmountFcy "AmountFcy", 
                 pkgReturnCursor.fncGetDescription(ExpTradeCurrency,2) "ExpTradeCurrency", 
                 pkgReturnCursor.fncGetDescription(ExpLocalCurrency,2) "ExpLocalCurrency",
                 (case when ExpTradeCurrency=BaseCurrency then 
                 FWDSettleAmountFCY+CashSettleAmountFCY else FWDSettleAmountLCY+CashSettleAmountLCY end) "SettlementAmount",
                 round(((case when CrossCashSettleAmountLCY+ CrossFWDSettleAmountLCY !=0 then CrossCashSettleAmountLCY+ CrossFWDSettleAmountLCY
                 else FWDSettleAmountLCY+CashSettleAmountLCY end) /
                 (case when ExpTradeCurrency=BaseCurrency then FWDSettleAmountFCY+CashSettleAmountFCY 
                 else FWDSettleAmountLCY+CashSettleAmountLCY end)),6) "ReverseRate",-- SettWightedAVGRate,
                 CashSettleAmountFCY "FWDCashFcy", CashSettleAmountLCY "FWDCashLcy",
                 round(CashSettleAmountLCY/ (case when CashSettleAmountFCY=0 then 1 else CashSettleAmountFCY end) ,6) "CashWeightAvgRate",
                 FWDSettleAmountFCY "ForwardFcy", FWDSettleAmountLCY "ForwardLcy",  
                 round(FWDSettleAmountLCY/ (case when FWDSettleAmountFCY=0 then 1 else FWDSettleAmountFCY end) ,6) "FWDWeightAvgRate",
                 CrossCashSettleAmountFCY "CrossCashFCY", CrossCashSettleAmountLCY "CrossCashLCY", 
                 round(CrossCashSettleAmountLCY/ (case when CrossCashSettleAmountFCY=0 then 1 else CrossCashSettleAmountFCY end) ,6)"CrossCashWeightAvgRate",
                 CrossFWDSettleAmountFCY "CrossFWDCashFCY", CrossFWDSettleAmountLCY "CrossFWDCashLCY",
                 round(CrossFWDSettleAmountLCY/ (case when CrossFWDSettleAmountFCY=0 then 1 else CrossFWDSettleAmountFCY end) ,6) "CrossFWDWeightAvgRate",
                 pkgReturnCursor.fncGetDescription(CrossCurrencyPair,2) "CrossCurrencyPair", 
                 pkgReturnCursor.fncGetDescription(DealCurrencyPair,2) "DealCurrencyPair",
                 PurposeCode "PurposeCode",TradeReference "TradeReference"
            from (select BREL_DELIVERY_BATCH DeliveryBatch,
                         pkgReturnCursor.fncGetDescription((nvl(BREL_PRODUCT_CATEGORY,33399999)),2) BusinessUnit,
                         pkgReturnCursor.fncGetDescription((nvl(BREL_SUB_PORTFOLIO,33899999)),2) ProfitCenter,
                         pkgReturnCursor.fncGetDescription((nvl(brel_local_bank,30699999)),2) Bank,
                         sum(BREL_REVERSAL_FCY) AmountFcy,
                         Brel_trade_currency ExpTradeCurrency,Brel_local_currency ExpLocalCurrency,
                         pkgreturncursor.fncgetdescription(BREL_REVERSAL_TYPE,2) PurposeCode,
                         BREL_TRADE_REFERENCE TradeReference
                     from trtran003 
                     where brel_record_Status not in (10200005,10200006)
                     group by BREL_DELIVERY_BATCH,BREL_PRODUCT_CATEGORY,BREL_SUB_PORTFOLIO,
                     brel_trade_currency,brel_local_bank,Brel_trade_currency,Brel_local_currency,BREL_REVERSAL_TYPE,BREL_TRADE_REFERENCE)
            inner join 
                     (select Cancel_BatchNo,sum(case when DeliverySRNo=1 then DealBaseCurrency else 0 end) BaseCurrency,
                            sum(case when DeliverySRNo=1 then DealOther else 0 end) QuoteCurrency,
                            sum(case when DeliverySRNo=1 then CurrencyPair else 0 end) DEALCurrencyPair,
                            nvl(sum(case when DeliverySRNo=1 then CashSettleAmountFCY else 0 end),0) CashSettleAmountFCY,
                            nvl(sum(case when DeliverySRNo=1 then CashSettleAmountLCY else 0 end),0) CashSettleAmountLCY,
                            nvl(sum(case when DeliverySRNo=1 then FWDSettleAmountFCY else 0 end),0) FWDSettleAmountFCY,
                            nvl(sum(case when DeliverySRNo=1 then FWDSettleAmountLCY else 0 end),0) FWDSettleAmountLCY,
                            nvl(sum(case when DeliverySRNo=2 then DealBaseCurrency else 0 end),0) CrossBaseCurrency,
                            nvl(sum(case when DeliverySRNo=2 then DealOther else 0 end),0) CrossQuoteCurrency,
                            nvl(sum(case when DeliverySRNo=2 then CurrencyPair else 0 end),0) CrossCurrencyPair,
                            nvl(sum(case when DeliverySRNo=2 then CashSettleAmountFCY else 0 end),0) CrossCashSettleAmountFCY,
                            nvl(sum(case when DeliverySRNo=2 then CashSettleAmountLCY else 0 end),0) CrossCashSettleAmountLCY,
                            nvl(sum(case when DeliverySRNo=2 then FWDSettleAmountFCY else 0 end),0) CrossFWDSettleAmountFCY,
                            nvl(sum(case when DeliverySRNo=2 then FWDSettleAmountLCY else 0 end),0) CrossFWDSettleAmountLCY
                        from (SELECT Cdel_delivery_serial DeliverySRNo,
                        cdel_batch_number Cancel_BatchNo,
                        deal_base_currency DealBaseCurrency,deal_other_currency DealOther,
                        deal_currency_pair CurrencyPair, SUM(nvl((case when  DEAL_DEAL_TYPE = 25400001 then CDEL_CANCEL_AMOUNT else 0 end),0)) CashSettleAmountFCY,
                        SUM( case when  DEAL_DEAL_TYPE = 25400001 then CDEL_OTHER_AMOUNT else 0 end) CashSettleAmountLCY,
                        SUM(nvl(( case when  DEAL_DEAL_TYPE != 25400001 then CDEL_CANCEL_AMOUNT else 0 end),0)) FWDSettleAmountFCY,
                        SUM( case when  DEAL_DEAL_TYPE != 25400001 then CDEL_OTHER_AMOUNT else 0 end) FWDSettleAmountLCY
                        FROM TRTRAN006 inner join trtran001
                        on DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
                        WHERE  CDEL_RECORD_STATUS NOT IN(10200006,10200005)
                        and deal_record_Status not in (10200005,10200006)
                        and cdel_batch_number is not null
                        group by Cdel_delivery_serial,cdel_batch_number,deal_base_currency,deal_other_currency,deal_currency_pair )
                        group by Cancel_BatchNo)
                on DeliveryBatch=Cancel_BatchNo
                where Cancel_BatchNo = vartemp2;
    goto Process_End;
end if;      

---------------------------------------------------------------------------
    --Added by Supriya on 30/03/2020
if numinfotype = REFPICKENTITY then
    varOperation := 'Extracting Entity Realtion Details';

   open Gencursor for
            select PICK_LONG_DESCRIPTION "Name", pick_key_group "ID"
                from trmaster001
                where pick_key_group in (select distinct EREL_ENTITY_TYPE from trsystem008
                where erel_record_status not in (10200005,10200006))
                and PICK_KEY_TYPE in (10100002,10100003)
                 and PICK_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
                and PICK_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
                AND PICK_RECORD_STATUS NOT IN (10200005,10200006);
  Goto Process_End;
End if;

if numinfotype = REFRELATIONTYPE then
    varOperation := 'Extracting Entity Realtion Details';
    numcode := gconst.fncxmlextract(xmldoc,'Param/EntityType',  numcode);

   open Gencursor for
            select pick_long_description "Name", pick_key_group "ID"
            from trmaster001
            where 
            pick_key_group in (select EREL_RELATION_TYPE from trsystem008 where EREL_ENTITY_TYPE=numcode
            and EREL_RECORD_STATUS not in (10200005,10200006))
              and PICK_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and PICK_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            AND PICK_RECORD_STATUS NOT IN (10200005,10200006);
  Goto Process_End;
End if;

if numinfotype = REFMAINENTITY then
    varOperation := 'Extracting Entity Realtion Details';
    numcode := gconst.fncxmlextract(xmldoc,'Param/EntityType',  numcode);

   open Gencursor for
            select pick_long_description "Name", pick_key_VALUE "ID"
            from trmaster001
            where 
            pick_key_VALUE in (select EREL_MAIN_ENTITY from trsystem008 where EREL_ENTITY_TYPE=numcode
            and EREL_RECORD_STATUS not in (10200005,10200006))
             and PICK_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and PICK_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            AND PICK_RECORD_STATUS NOT IN (10200005,10200006);
  Goto Process_End;
End if;

if numinfotype = REFRELATIONENTITY then
    varOperation := 'Extracting Entity Realtion Details';
    numcode := gconst.fncxmlextract(xmldoc,'Param/RelationType',  numcode);

   open Gencursor for
            select pick_long_description "Name", pick_key_VALUE "ID"
            from trmaster001
            where 
            pick_key_VALUE in (select EREL_ENTITY_RELATION from trsystem008 where EREL_RELATION_TYPE=numcode
            and EREL_RECORD_STATUS not in (10200005,10200006))
             and PICK_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
            and PICK_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            AND PICK_RECORD_STATUS NOT IN (10200005,10200006);
  Goto Process_End;
End if;

if numinfotype = REFRELATIONTABLEVALID then
    varOperation := 'Extracting Entity Realtion Details';
    numcode := gconst.fncxmlextract(xmldoc,'Param/MainEntity',  numcode);
    numcode1 := gconst.fncxmlextract(xmldoc,'Param/EntityRelation',  numcode1);

 select count(*)
    into numcode2
    FROM TRSYSTEM008
    WHERE EREL_MAIN_ENTITY = numcode
    AND EREL_ENTITY_RELATION=numcode1
    AND EREL_RECORD_STATUS NOT IN (10200005,10200006);

   open Gencursor for
            select numcode2 "RecordCount" from dual;
  Goto Process_End;
End if;

if numinfotype = REFPICKKEYVALUES then
    varOperation := 'Extracting Entity Realtion Details';
    numcode := gconst.fncxmlextract(xmldoc,'Param/KeyGroup',  numcode);

   open Gencursor for
            select rownum "Rownum", pick_long_description "LongDescription", pick_key_group "KeyGroup",
            pick_short_description "ShortDescription", pick_key_value "KeyValue"
            from trmaster001
            where 
            pick_key_group = numcode
            AND PICK_RECORD_STATUS NOT IN (10200005,10200006)
            and pick_key_number not in (0,99999);
--            and PICK_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                           where upper(usco_user_id) = varUserid
--                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--            and PICK_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
  Goto Process_End;
End if;

--ADDED BY SUPRIYA
if numinfotype = REFGETRATES then
    varOperation := 'Extracting Entity Realtion Details';
    numcode := gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',  numcode);
    numcode1 := gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',  numcode1);

   open Gencursor for
            select pkgforexprocess.fncGetRate(OtherCurrency, BaseCurrency, sysdate, 25300001)
            from dual;
   Goto Process_End;
End if;
---------------------------------------------------------------------------
    --Added by Supriya on 31/03/2020
if numinfotype = REFGETRELATIONTYPE then
    varOperation := 'Extracting Entity Realtion Details';
    numcode := Gconst.fncXMLExtract(xmldoc,'EntityType',numcode);
        open Gencursor for
            select distinct pick_long_description "Name", pick_key_group "ID"
            from  trmaster001
            where pick_key_group in (select distinct erel_relation_type
                                     from trsystem008
                                     where erel_entity_type = numcode)
            and pick_key_number =0
            and pick_key_type in (10100002,10100003)
            AND PICK_RECORD_STATUS NOT IN (10200005,10200006)
            order by pick_key_group;
  Goto Process_End;
End if;

---------------------------------------------------------------------------
    --Added by Supriya on 31/03/2020
if numinfotype = REFGETMAINENTITY then
    varOperation := 'Extracting Entity Realtion Details';
    numcode := Gconst.fncXMLExtract(xmldoc,'EntityType',numcode);
        open Gencursor for
            select distinct pick_long_description "Name", pick_key_value "ID"
            from  trmaster001
            where pick_key_group = numcode
            and PICK_KEY_NUMBER not in (0,99999)
            AND PICK_RECORD_STATUS NOT IN (10200005,10200006)
            order by pick_key_group;
  Goto Process_End;
End if;
-----------------------------------------------------------------------------------
--if numInfoType = REFGETENTITYRELATION then
--    varOperation := 'Extracting Entity Realtion Details';
--    numcode := Gconst.fncXMLExtract(xmldoc,'RelationType',numcode);
--    numcode1:= Gconst.fncXMLExtract(xmldoc,'MainEntity',numcode1);
--   -- vartemp := Gconst.fncXMLExtract(xmldoc,'Mode',vartemp);
--     begin
--          Numcode2 :=Gconst.Fncxmlextract(Xmldoc, 'Action', Numcode2);          
--       exception 
--         when others then 
--           Numcode2:=0;          
--       end;
--       insert into temp values('Numcode2',Xmldoc);commit;
--   if Numcode2 = 131 then
--         open Gencursor for
--           select distinct pick_key_value "ID",pick_long_description "Name"
--             from trmaster001
--             where pick_key_number >0
--             and pick_key_group =numcode
--             and pick_key_value not in (select erel_entity_relation
--                                          from trsystem008
--                                          where erel_relation_type= numcode
--                                          and erel_main_entity =numcode1
--                                          and erel_company_code = pick_company_code
--                                          and erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED))
--             and pick_key_type in (10100002,10100003)
--             order by pick_key_group;
--    else
--      open Gencursor for
--           select distinct pick_key_value "ID",pick_long_description "Name"
--             from trmaster001
--             where pick_key_number >0
--             and pick_key_group =numcode
--             and pick_key_value in (select erel_entity_relation
--                                      from trsystem008
--                                     where erel_relation_type= numcode
--                                       and erel_main_entity =numcode1
--                                       and erel_company_code = pick_company_code
--                                       and erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED))
--              and pick_key_type in (10100002,10100003)
--             order by pick_key_group;
--    end if;
--    Goto Process_End;
--  End if;

if numInfoType = REFGETENTITYRELATION then
    varOperation := 'Extracting Entity Realtion Details';
 numcode1:= Gconst.fncXMLExtract(xmldoc,'MainEntity',numcode1);
OPEN GENCURSOR FOR
        SELECT PICK_LONG_DESCRIPTION "Name", pick_key_group "ID"
        from trmaster001
        where pick_key_group in (select EREL_RELATION_TYPE from trsystem008
        where erel_record_status not in (10200005,10200006)
        and EREL_ENTITY_TYPE=numcode1)
        AND PICK_RECORD_STATUS NOT IN (10200005,10200006);

Goto Process_End;
  End if;
------------------------------------------------------------------------------------------

   if numinfotype = REFDealLinkDelete then
      --DatTemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/EntryDate',   DatTemp1);  
      --varTemp1 := gconst.fncxmlextract(xmldoc,'Param/BatchNumber',  varTemp1);  
      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  varTemp1);
      open gencursor for            
               select cdel_trade_reference "TradeReference", deal_deal_number "DealNumber",
                  deal_exchange_rate "BaseRate",
                  deal_base_amount "BaseAmount", 
                  cdel_cancel_amount "Reversed",
                  0.00 "ReverseNow",
                  pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
                  pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
                  deal_other_amount "HedgedOther", 
                  deal_local_rate "OtherRate",
                  pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
                  pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
                  pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",
                  pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
                  deal_other_currency "OtherCurrencycode",deal_buy_sell "buySellcode",deal_deal_number as "HedgingWith",
                  1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
                  round(deal_spot_rate,4) "SpotRate",
                  round(deal_forward_rate,4) "Premium",
                  round (deal_margin_rate,4) "MarginRate",                  
                  nvl(cdel_forward_rate,0) "EDBenefit",
                  nvl(Cdel_Profit_Loss,0) "EDAmount",
                  round (deal_exchange_rate,4) "FinalRate",
                  deal_execute_date "ExecuteDate",
                  deal_maturity_date "MaturityDate",
                  cdel_BATCH_NUMBER "BatchNo",
                  '' "ExposureReference",
                  0 as "Status"
       		from trtran001,trtran006
                where  --deal_Company_Code in
--                 (select usco_company_code from trsystem022a
--                  where UPPER(usco_user_id) =varUserid
--            	AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                  and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--               and   CDEL_COMPANY_CODE in
--                (select usco_company_code from trsystem022a
--                  where UPPER(usco_user_id) =varUserid
--                AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                  and CDEL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))    
                   deal_deal_number = cdel_deal_number
                  and cdel_record_status not in(10200005,10200006)
                  and cdel_batch_number = varTemp1
                  --AND deal_other_currency != 30400003
                  and CDEL_TRADE_REFERENCE is not null
                  --and hedg_linked_date = DatTemp1
                and deal_record_status not in(10200005,10200006);
                Goto Process_End;
    END IF;     

   if numinfotype = REFDealLinkDeletecross then
      --DatTemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/EntryDate',   DatTemp1);  
      --varTemp1 := gconst.fncxmlextract(xmldoc,'Param/BatchNumber',  varTemp1);  
      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  varTemp1);
      open gencursor for            
               select cdel_trade_reference "TradeReference", deal_deal_number "DealNumber",
                  deal_exchange_rate "BaseRate",
                  deal_base_amount "BaseAmount", 
                  cdel_cancel_amount "Reversed",
                  0.00 "ReverseNow",
                  pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
                  pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
                  deal_other_amount "HedgedOther", 
                  deal_local_rate "OtherRate",
                  pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
                  pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
                  pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",
                  pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
                  deal_other_currency "OtherCurrencycode",deal_buy_sell "buySellcode",deal_deal_number as "HedgingWith",
                  1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
                  round(deal_spot_rate,4) "SpotRate",
                  round(deal_forward_rate,4) "Premium",
                  round (deal_margin_rate,4) "MarginRate",
                  nvl(cdel_forward_rate,0) "EDBenefit",
                  nvl(Cdel_Profit_Loss,0) "EDAmount",
                  round (deal_exchange_rate,4) "FinalRate",
                  deal_execute_date "ExecuteDate",
                  deal_maturity_date "MaturityDate",
                  CDEL_BATCH_NUMBER "BatchNo",
                  '' "ExposureReference",
                  0 as "Status"
       		from trtran001,trtran006
                where  
--                deal_Company_Code in
--                 (select usco_company_code from trsystem022a
--                  where UPPER(usco_user_id) =varUserid
--             AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                  and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--               and   CDEL_COMPANY_CODE in
--                (select usco_company_code from trsystem022a
--                  where UPPER(usco_user_id) =varUserid
--            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                  and CDEL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))    
                  --and 
                  deal_deal_number = cdel_deal_number
                  and CDEL_record_status not in(10200005,10200006)
                  and CDEL_batch_number = varTemp1
                  and CDEL_TRADE_REFERENCE is null
--                  AND DEAL_DEAL_TYPE != 25400001
               --   AND deal_other_currency = 30400003
                  --and hedg_linked_date = DatTemp1
                and deal_record_status not in(10200005,10200006);
                Goto Process_End;
    END IF;           
    -----data upload--

--modified by supriya on 07/04/2021
if numinfotype = REFGETSYNONYMNAME then
    OPEN Gencursor FOR 
        SELECT load_data_name,LOAD_SYNONYM_NAME,LOAD_SERIAL_NUMBER, LOAD_DISPLAY_NAME
        from trsystem969
        where load_record_Status not in (10200005,10200006)
        and load_data_name in (select actl_program_unit 
                                      from trsystem006
                                      where actl_record_status not in (10200005,10200006)
                                      and UPPER(case when actl_user_id = '.' then varUserid else actl_user_id end) = varUserid
                                      and actl_group_code =(select user_group_code from USERMASTER
                                                              where UPPER(user_user_id) = varUserid
                                                              and USER_RECORD_STATUS not in  (10200005,10200006)))
        order by LOAD_DISPLAY_NAME asc;    
    Goto Process_End; 
end if;

--added by supriya on 29/07/2021
if numinfotype = REFGETDATALOADDETAILS then
    OPEN Gencursor FOR 
        SELECT LOCL_DATA_NAME "DataName", LOCL_SOURCE_COLUMN "ColumnName", 
               LOCL_DATA_TYPE "DataType", pkgreturncursor.fncgetdescription(LOCL_MANDATORY_YN,1) "MandatoryYN"
               --(case when nvl(LOCL_PICK_GROUP,0) > 0 then pkgreturncursor.fncgetdescription(LOCL_DEFAULT_VALUE,1) else LOCL_DEFAULT_VALUE end) "DefaultValue"
        from trsystem968
        where locl_record_Status not in (10200005,10200006)
        and locl_data_name in (select actl_program_unit 
                                      from trsystem006
                                      where actl_record_status not in (10200005,10200006)
                                      and UPPER(case when actl_user_id = '.' then varUserid else upper(actl_user_id) end) = varUserid
                                      and actl_group_code =(select user_group_code from USERMASTER
                                                              where UPPER(user_user_id) = varUserid
                                                              and USER_RECORD_STATUS not in  (10200005,10200006)))
        order by LOCL_DATA_NAME asc;    
    Goto Process_End; 
end if;

if numinfotype=REFGETXMLFIELDCLOUD then
     varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
     numcode := gconst.fncxmlextract(xmldoc,'Comapny',numcode);

 Open GenCursor for
      SELECT synonymname,tooltiptext,columnname,xmlfield,datatype,
             columnwidth,pickgroup,showyn,iseditable,displayname,
             serialno,decode(listrange,'0','0',ROWNUM ||'='||listrange) AS listrange 
             FROM  
             ( SELECT locl_data_name  AS synonymname,pkgreturncursor.fncgetdescription(locl_column_editable,1) AS iseditable ,
                 pkgreturncursor.fncgetdescription(locl_data_type,1) AS datatype, 
                 locl_tool_tip AS tooltiptext,locl_destination_column AS columnname,
                 locl_source_column AS xmlfield,  locl_pick_group AS pickgroup ,locl_column_width AS columnwidth ,
                 decode( locl_show_YN ,12400001,'True','False') AS showyn, 
                 tr968.locl_display_name AS displayname , locl_column_id AS serialno, nvl(sel2.excelrange,0) AS listrange
      --As per the requirement, this query avoids dependency on TRSYSTEM999
              FROM trsystem968 tr968
             LEFT OUTER JOIN 
          (SELECT t2.pickgroup,t2.excelrange FROM 

          (SELECT t1.shortdescription,t1.longdescription,t1.pickgroup, 
             CASE t1.itemcnt WHEN 1 THEN 'B'||to_number(ROWNUM +1)||':B'||(ROWNUM+t1.totalcnt) ELSE '0' END AS excelrange 
             FROM( 

             SELECT  t3.pick_short_description  AS shortdescription,
                        t3.pick_long_description AS longdescription,   t3.pick_key_group AS pickgroup,
                        row_number() OVER (PARTITION BY t3.pick_key_group ORDER BY t3.pick_Long_description ASC) AS itemcnt,
                        COUNT(*) OVER (PARTITION BY t3.pick_key_group) totalcnt
--                  FROM trmaster001 t3
--                 WHERE t3.pick_key_group IN 
--                 (SELECT DISTINCT locl_pick_group FROM trsystem968 t4 
--                    WHERE t4.locl_data_name = vartemp 
--                    AND locl_show_YN = 12400001 AND locl_pick_group <> 0)
--                    AND t3.pick_key_number NOT IN (0) 
--                    AND t3.pick_record_status NOT IN (10200005,10200006)
            from trmaster001 t3 inner join 
                (select LOCL_PICK_GROUP ,LOCL_DESCRIPTION_TYPE DescriptionType,
                       nvl(FLDP_DROPDOWN_RELATIONKEY,0)  RelationKey
                  from TRSYSTEM968 T4 inner join trsystem969
                  on LOAD_DATA_NAME=LOCL_DATA_NAME
                  left outer join trsystem999
                  on LOAD_SYNONYM_NAME=FLDP_TABLE_SYNONYM
                  and LOCL_XML_FIELD=FLDP_XML_FIELD
                  where T4.LOCL_DATA_NAME = varTemp
                  and LOCL_Show_yn = 12400001 
                  and LOCL_PICK_GROUP <> 0
                  group by LOCL_PICK_GROUP,LOCL_DESCRIPTION_TYPE,nvl(FLDP_DROPDOWN_RELATIONKEY,0))
             on pick_key_group= LOCL_PICK_GROUP
            where t3.pick_key_number not in (0) 
            And T3.Pick_Record_Status Not In (10200005,10200006)
            -- Added By Manjunath Reddy To consider the Relation Key for the Template List Boxes
--            and ((RelationKey=0) or  
--              ((RelationKey !=0) and (PICK_KEY_VALUE=
--                (select erel_entity_relation 
--                   from trsystem008
--                  where erel_record_status not in (10200005,10200006)
--                  and erel_main_entity=RelationKey
--                  and erel_relation_type=LOCL_PICK_GROUP))))
            and ((RelationKey=0) or  
              ((RelationKey !=0) and 
                exists  (select 'x' 
                   from trsystem008
                  where erel_record_status not in (10200005,10200006)
                  and erel_main_entity=RelationKey
                  and erel_relation_type=LOCL_PICK_GROUP
                  and PICK_KEY_VALUE=erel_entity_relation
                  )))


                    ) t1 ) t2 
                    --AND decode(t3.pick_company_code,30199999,numcode,t3.pick_company_code)= numcode) t1 ) t2 
            WHERE t2.excelrange <> '0') sel2 
            ON locl_pick_group = sel2.pickgroup
          WHERE tr968.locl_data_name = vartemp 
          AND tr968.locl_show_YN = 12400001
          and tr968.locl_record_status not in (10200005,10200006)
          ORDER BY tr968.locl_column_id);




--     select SYNONYMNAME,TOOLTIPTEXT,COLUMNNAME,XMLFIELD,PICKGROUP,SHOWYN,DISPALYYN,SERIALNO,decode(LISTRANGE,'0','0',rownum ||'='||LISTRANGE) as LISTRANGE from  ( select FLDP_TABLE_SYNONYM  as SYNONYMNAME,FLDP_TOOLTIP_TEXT as TOOLTIPTEXT,FLDP_COLUMN_NAME as COLUMNNAME,FLDP_XML_FIELD as XMLFIELD,
--FLDP_PICK_GROUP AS PICKGROUP ,  FLDP_SHOW_YN AS SHOWYN,FLDP_DISPLAY_YN AS DISPALYYN,FLDP_COLUMN_ID AS SERIALNO, NVL(SEL2.EXCELRANGE,0) AS LISTRANGE
--from TRSYSTEM999 TR999 left outer join 
--(select T2.PICKGROUP,T2.EXCELRANGE from (select T1.SHORTDESCRIPTION,T1.LONGDESCRIPTION,T1.PICKGROUP, case T1.ITEMCNT when 1 then 'B'||to_number(rownum +1)||':B'||(rownum+T1.TOTALCNT) else '0' end as EXCELRANGE  from(
--select  T3.PICK_SHORT_DESCRIPTION  as SHORTDESCRIPTION,
--T3.PICK_LONG_DESCRIPTION as LONGDESCRIPTION,
--T3.PICK_KEY_GROUP as PICKGROUP,
--ROW_NUMBER() over (partition by T3.PICK_KEY_GROUP order by T3.PICK_SHORT_DESCRIPTION asc) as ITEMCNT,
--count(*) over (partition by T3.PICK_KEY_GROUP) TOTALCNT
--from TRMASTER001 T3
--where T3.PICK_KEY_GROUP in (select distinct FLDP_PICK_GROUP from TRSYSTEM999 T4 where T4.FLDP_TABLE_SYNONYM = varTemp and FLDP_SHOW_YN = 'Y' and FLDP_PICK_GROUP <> 0)
--and T3.PICK_KEY_NUMBER not in (0) 
--and T3.PICK_RECORD_STATUS not in (10200005,10200006) 
--and DECODE(T3.PICK_COMPANY_CODE,30199999,numcode,T3.PICK_COMPANY_CODE)= numcode
--
--) T1 ) T2 where T2.EXCELRANGE <> '0') SEL2 on FLDP_PICK_GROUP = SEL2.PICKGROUP
--where TR999.FLDP_TABLE_SYNONYM = varTemp and TR999.FLDP_SHOW_YN = 'Y' order by TR999.FLDP_COLUMN_ID);
--

 Goto Process_End;
end if;

if numinfotype =REFgetsynonymdetailscloud then
    varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);

    OPEN Gencursor FOR 
        SELECT  LOAD_DATA_NAME AS dataname,
        LOAD_DATA_FILE AS filename,
        LOAD_FILE_PATH AS filepath,
        LOAD_BACKUP_FOLDER AS backupfolder,
        LOAD_FILE_FORMAT AS fileformat,
         -- REMOVING 'CLOUDDB_TR_SEED.' AS THIS IS CAUSING ISSUE AS THE SCHEMA NAME WILL BE DIFFERENT FOR EACH COMPANY
--         'CLOUDDB_TR_SEED.'||LOAD_RUN_PROGRAM AS runprogram,
--        'CLOUDDB_TR_SEED.' ||LOAD_STAGING_TABLE AS firststagingtable,
        LOAD_RUN_PROGRAM AS runprogram,
        LOAD_STAGING_TABLE AS firststagingtable,
        LOAD_ZIP_STATUS AS iszip,
        LOAD_RECORD_STATUS AS recordstatus,
        LOAD_SHEET_RANGE AS sheetrange,
        LOAD_COMP_QUERY AS compquery,
        LOAD_SYNONYM_NAME  AS synonymname,
        LOAD_USER_PASSWORD AS userpassword,
        LOAD_USER_ID AS userid,
        LOAD_SERIAL_NUMBER as serialnumber,
        -- REMOVING 'CLOUDDB_TR_SEED.' AS THIS IS CAUSING ISSUE AS THE SCHEMA NAME WILL BE DIFFERENT FOR EACH COMPANY
--        'CLOUDDB_TR_SEED.'|| LOAD_STAGING_TABLE_TWO AS secondstagingtable,
--        'CLOUDDB_TR_SEED.' || LOAD_STAGING_TABLE_ARCHIVE  AS archivestagingtable,
        LOAD_STAGING_TABLE_TWO AS secondstagingtable,
        LOAD_STAGING_TABLE_ARCHIVE  AS archivestagingtable,
        LOAD_PROCESS_WHILE_ERR as processyn,
        LOAD_HEADER_YN headeryn, LOAD_HEADER_ROWCOUNT headercount,
        LOAD_SHEET_NAME sheetname, LOAD_STARTHEADER_ROW startheaderrow,
        LOAD_DATASOURCE_TYPE "DataSourceType"
        from trsystem969
        WHERE load_record_Status NOT IN (10200005,10200006)
        -- and upper(LOAD_SYNONYM_NAME) = upper(varTemp);--commented by supriya, load synonym name is for mapping trsystem999 entries
        and upper(LOAD_DATA_NAME) = upper(varTemp);   
    Goto Process_End; 
end if;

if numinfotype =REFGETCOLUMNSFORDROPBOX then
    varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);

    OPEN Gencursor FOR 
        SELECT  LOCL_SOURCE_COLUMN "CustomizedColumns"
            from TRSYSTEM968
            WHERE LOCL_RECORD_STATUS NOT IN (10200005,10200006)
            and LOCL_SOURCE_COLUMN != 'NA'
            and upper(LOCL_DATA_NAME) = upper(varTemp);   
    Goto Process_End; 
end if;


 if numinfotype=REFgetmasterdataCloud then
    varOperation := 'Master Data Load ';

   varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
    numcode := gconst.fncxmlextract(xmldoc,'Comapny',numcode);

    open Gencursor for

     select Decode(DescriptionType,92100001,t2.LongDescription ,t2.ShortDescription) ShortDescription
       ,t2.LongDescription 
     from 
       (select t1.ShortDescription,t1.LongDescription,t1.PickGroup,
           case t1.itemcnt when 1 then 'B'||to_number(rownum+1)||':B'||(rownum+t1.totalcnt) else '0' end as excelrange,
           DescriptionType
       from(
            select  t3.pick_short_description  as ShortDescription,
                  t3.pick_long_description as LongDescription,
                  t3.pick_key_group as PickGroup,
                  ROW_NUMBER() OVER (partition by t3.pick_key_group order BY t3.pick_Long_description asc) as itemcnt,
                  count(*) OVER (partition by t3.pick_key_group) totalcnt,
                  DescriptionType
            from trmaster001 t3 inner join 
--                (select LOCL_PICK_GROUP ,LOCL_DESCRIPTION_TYPE DescriptionType
--                  from TRSYSTEM968 T4 
--                  where T4.LOCL_DATA_NAME = varTemp 
--                  and LOCL_Show_yn = 12400001 
--                  and LOCL_PICK_GROUP <> 0
--                  group by LOCL_PICK_GROUP,LOCL_DESCRIPTION_TYPE)
                (select LOCL_PICK_GROUP ,LOCL_DESCRIPTION_TYPE DescriptionType,
                       nvl(FLDP_DROPDOWN_RELATIONKEY,0)  RelationKey
                  from TRSYSTEM968 T4 inner join trsystem969
                  on LOAD_DATA_NAME=LOCL_DATA_NAME
                  left outer join trsystem999
                  on LOAD_SYNONYM_NAME=FLDP_TABLE_SYNONYM
                  and LOCL_XML_FIELD=FLDP_XML_FIELD
                  where T4.LOCL_DATA_NAME = varTemp
                  and LOCL_Show_yn = 12400001 
                  and LOCL_PICK_GROUP <> 0
                  group by LOCL_PICK_GROUP,LOCL_DESCRIPTION_TYPE,nvl(FLDP_DROPDOWN_RELATIONKEY,0))
             on pick_key_group= LOCL_PICK_GROUP
            where t3.pick_key_number not in (0) 
            And T3.Pick_Record_Status Not In (10200005,10200006)
            -- Added By Manjunath Reddy To consider the Relation Key for the Template List Boxes
            and ((RelationKey=0) or  
              ((RelationKey !=0) and 
                exists  (select 'x' 
                   from trsystem008
                  where erel_record_status not in (10200005,10200006)
                  and erel_main_entity=RelationKey
                  and erel_relation_type=LOCL_PICK_GROUP
                  and PICK_KEY_VALUE=erel_entity_relation
                  )))

            --and decode(t3.pick_company_code,30199999,numcode,t3.pick_company_code)= numcode
            ) t1) t2;

-- select t2.ShortDescription,t2.LongDescription from (select t1.ShortDescription,t1.LongDescription,t1.PickGroup, case t1.itemcnt when 1 then 'B'||to_number(rownum+1)||':B'||(rownum+t1.totalcnt) else '0' end as excelrange  
-- from(
--select  t3.pick_short_description  as ShortDescription,
--t3.pick_long_description as LongDescription,
--t3.pick_key_group as PickGroup,
--ROW_NUMBER() OVER (partition by t3.pick_key_group order BY t3.pick_short_description asc) as itemcnt,
--count(*) OVER (partition by t3.pick_key_group) totalcnt
--from trmaster001 t3
--where t3.pick_key_group in (select distinct FLDP_PICK_GROUP from TRSYSTEM999 T4 where T4.FLDP_TABLE_SYNONYM = varTemp and FLDP_SHOW_YN = 'Y' and FLDP_PICK_GROUP <> 0)
--and t3.pick_key_number not in (0) 
--and t3.pick_record_status not in (10200005,10200006) 
--and decode(t3.pick_company_code,30199999,numcode,t3.pick_company_code)= numcode) t1) t2;



  Goto Process_End;
  end if;

--RefCursor to fetch file upload details from traudit001 table added by Rishi
IF numinfotype=REFgetfileuploaddetailscloud THEN
    varOperation := 'Fetch file upload details from audit table';

    varTemp := Gconst.Fncxmlextract(Xmldoc,'Param/RunProgram', varTemp);
    dattemp1 :=Gconst.Fncxmlextract(Xmldoc,'Param/FromDate', dattemp1);
    dattemp2 :=Gconst.Fncxmlextract(Xmldoc,'Param/ToDate', dattemp2); 
--    numcode := gconst.fncxmlextract(xmldoc,'Comapny',numcode);

    select GRUP_GROUP_TYPE 
    into numcode1
    from TRMASTER142 inner join Clouddb_Global.trsystem022 
    on GRUP_PICK_CODE = USER_GROUP_CODE
    where upper(USER_USER_ID) = upper(varUserid) 
    and user_record_Status not in (10200005,10200006);

    Open Gencursor For
--      Select Data_File_Name As FILENAME,
--        Data_Update_Date As UPDATEDATE,
--        data_synonym_name AS synonymname,
--        --pkgreturncursor.fncgethumanreadablefilesize(NVL(Data_File_Size,0)) As FILESIZE,
--        --Data_File_Modifieddate as FILEMODIFIEDDATE,
--        Data_Rows_Processed   As ROWSPROCESSED,
--        Data_Rows_Notprocessed As Rowsnotprocessed,
--        data_upload_remarks AS uploadremarks,
--        DATA_KEY_GUID AS FileGuid
--      from traudit001 where data_synonym_name  = varTemp  order by DATA_UPLOAD_TIMESTAMP asc;
        --added by supriya 

        Select Data_File_Name As FILENAME, Data_Update_Date As UPDATEDATE, data_synonym_name AS synonymname,
               Data_Rows_Processed   As ROWSPROCESSED, Data_Rows_Notprocessed As Rowsnotprocessed,
               data_upload_remarks AS uploadremarks, DATA_KEY_GUID AS FileGuid
        from TRAUDIT001 
        where data_synonym_name = Decode(varTemp,'ALL',data_synonym_name,varTemp)
        and Data_Update_Date between dattemp1 and dattemp2
        and ((numcode1 in (10100001)) or ( upper(DATA_USER_ID) = upper(varUserid)))
        order by DATA_UPLOAD_TIMESTAMP asc;
    GOTO process_end;
end if;


--RefCursor to fetch uploded file details from staging table added by Rishi
IF numinfotype=REFgetfiledetailscloud THEN
    varOperation := 'Fetch file upload details from archive table';

    Begin
        varTemp := Gconst.Fncxmlextract(Xmldoc,'RunProgram', varTemp);
    Exception
    when others then
        varTemp1 := gconst.fncxmlextract(xmldoc,'FileGuid',varTemp1);

        select STAG_DATA_NAME into varTemp
        from TRSTAGING001 WHERE STAG_DATA_GUID = varTemp1;
    end;

    SELECT LOAD_STAGING_TABLE_ARCHIVE  AS archivestagingtable
    into vartemp1
    from trsystem969
    WHERE load_record_Status NOT IN (10200005,10200006)
   -- and upper(LOAD_SYNONYM_NAME) = upper(varTemp); --commented by supriya, load synonym name is for mapping trsystem999 entries
    and upper(LOAD_DATA_NAME) = upper(varTemp);   

    VarTemp2 := gconst.fncxmlextract(xmldoc,'FileGuid',VarTemp2);
    sqlQuery :=  'SELECT *  FROM ' || varTemp1 || '  WHERE GUID = '|| '''' || TRIM(VarTemp2) || '''' ||' ' || ' Order by REMARKS ASC nulls last' ;
    GLOG.LOG_Write(sqlQuery);
    OPEN Gencursor FOR sqlQuery;
Goto Process_End;
end if;

--ADDED BY SUPRIYA 16/01/2022
IF numinfotype = REFGETAPISTATUSDETAILS THEN
    GLOG.LOG_Write('REFGETAPISTATUSDETAILS');
    varOperation := 'Fetch API file upload details from archive table';    
    varTemp := gconst.fncxmlextract(xmldoc, 'FileGuid', varTemp);   
    OPEN Gencursor FOR
--        SELECT DATA_UPLOAD_REMARKS || ', Rows Processed ' ||DATA_ROWS_PROCESSED || ', Rows Not Processed ' || DATA_ROWS_NOTPROCESSED as "Status"
--       -- into vartemp1
--        from TRAUDIT001
        SELECT DATA_ROWS_PROCESSED "RowsProcessed", DATA_ROWS_NOTPROCESSED "NotProcessed"
        from TRAUDIT001
        WHERE DATA_KEY_GUID = varTemp;--upper(DATA_USER_ID) = varuserid and 
    Goto Process_End;
end if;

--added by supriya on 24/11/2021
IF numinfotype = REFGETDATACONFIGCOLUMNMODEL THEN
    varOperation := 'Fetch DATA CONFIG COLUMN MODEL';    
    varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);

    OPEN Gencursor FOR 
        SELECT CursorName "CursorName", CursorNumber "CursorNumber", ColumnName "ColumnName", 
               ColumnType "ColumnType", 
               DisplayName "DisplayName", TextLength "TextLength",
               DisplayYN "DisplayYN", Width"Width", 
               AggregateYN "AggregateYN",
               AggregateFunction "AggregateFunction", EditableYN "EditableYN",
               DecimalScale "DecimalScale", FormatString "FormatString", 
               to_char(DisplayOrder) "DisplayOrder",
               PickGroup "PickGroup"
        from (
        select LOCL_DATA_NAME CursorName, 0 CursorNumber, 
               LOCL_DESTINATION_COLUMN ColumnName, 
               pkgreturncursor.fncgetdescription((case when FORMAT_GENERAL_DATATYPE in (94000003)
               then 90400001 else LOCL_DATA_TYPE end),2) ColumnType , -- New Pick Code --STRING, NUMBER, DATE ColumnDataType 904
               LOCL_DISPLAY_NAME DisplayName, '99999' TextLength,
               LOCL_SHOW_YN DisplayYN, to_char(nvl(LOCL_COLUMN_WIDTH,100)) Width,
               pkgreturncursor.fncgetdescription(12400002,1) AggregateYN,
               '' AggregateFunction,
               pkgreturncursor.fncgetdescription(12400002,1) EditableYN,
               to_char((case when format_data_type in (90400002,90400007) 
               then Format_Decimal_scale else 0 end)) DecimalScale, 
               (case when FORMAT_GENERAL_DATATYPE in (94000003) 
               then null else Format_format_string end) FormatString, 
               LOCL_COLUMN_ID DisplayOrder,
               to_char(nvl(LOCL_PICK_GROUP,0)) PickGroup
        from TRSYSTEM968 
        left outer join trGlobalmas914
        on LOCL_DATA_TYPE = format_data_type
         and format_pick_code =Glog.LanguageCode
        and format_pick_code = 91499999 and LOCL_RECORD_STATUS not in (10200005,10200006)
        where LOCL_DATA_NAME = vartemp
        union all
        select DISP_DATA_NAME CursorName, 0 CursorNumber, 
               DISP_COLUMN_NAME ColumnName, 
               pkgreturncursor.fncgetdescription((case when FORMAT_GENERAL_DATATYPE in (94000003)
               then 90400001 else DISP_COLUMN_TYPE end),2) ColumnType , -- New Pick Code --STRING, NUMBER, DATE ColumnDataType 904
               DISP_DISPLAY_NAME DisplayName, '99999' TextLength,
               DISP_DISPLAY_YN DisplayYN, '50' Width, 
               pkgreturncursor.fncgetdescription(12400002,1) AggregateYN,
               '' AggregateFunction, pkgreturncursor.fncgetdescription(12400002,1) EditableYN,
               to_char((case when format_data_type in (90400002,90400007) 
               then Format_Decimal_scale else 0 end)) DecimalScale, 
               (case when FORMAT_GENERAL_DATATYPE in (94000003) 
               then null else Format_format_string end) FormatString, 
               DISP_DISPLAY_ORDER DisplayOrder, 
               '0' PickGroup    
        from TRSYSTEM968A left outer join trGlobalmas914
        on DISP_COLUMN_TYPE = format_data_type
         and format_pick_code =Glog.LanguageCode
        and format_pick_code = 91499999
        where DISP_DATA_NAME = vartemp)
        order by DisplayOrder asc;
    Goto Process_End;
end if;

  if numinfotype = REFINFLOWOUTFLOWDETAILS then

      numCode := gconst.fncxmlextract(xmldoc,'Param/ImportExport',   numCode);  
      Numcode1 := Gconst.Fncxmlextract(Xmldoc,'Param/TradeCurrency',  Numcode1);  
      numCode4 := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',  numCode4); 
      numCode3 := gconst.fncxmlextract(xmldoc,'Param/LocationCode',  numCode3);  
      numCode2 := gconst.fncxmlextract(xmldoc,'Param/Book',  numCode2);  
      numCode5 := gconst.fncxmlextract(xmldoc,'Param/Strategy',  numCode5);  
      Dattemp  := Gconst.Fncxmlextract(Xmldoc,'Param/EntryDate',  Dattemp);
      dattemp1 :=Gconst.Fncxmlextract(Xmldoc,'Param/MaturityFrom',  dattemp1);
      dattemp2 :=Gconst.Fncxmlextract(Xmldoc,'Param/MaturityDate',  dattemp2); 
--      Numcode2 := Gconst.Fncxmlextract(Xmldoc,'Param/OtherCurrency',  Numcode2);       
       -- delete from temp1; commit;

--     if numcode=25900073 then 
--       Open Gencursor For    
--           select rownum "Rownum",
--         bcrd_buyers_credit "TradeReference",              
--         pkgReturnCursor.fncGetDescription(nvl(25900073,25900073),1) "ImportExportDesc",  
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_CURRENCY_CODE,30499999),2) "Currency",
--         Pkgreturncursor.Fncgetdescription(Nvl(bcrd_local_bank,30699999),2) "Bank",
--         Bcrd_Sanctioned_Fcy "AmountFcy",
--         Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,datworkdate) "OutstandingAmount",
--         Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,datworkdate) "SettlementAmount",       
--         bcrd_sanction_date "ReferenceDate",
--         pkgReturnCursor.fncGetDescription(BCRD_COMPANY_CODE,1)"Company",
--         bcrd_due_date "DueDate",
--         bcrd_conversion_rate "ExchangeRate",
--         bcrd_sanction_date "EntryDate",
--         BCRD_LOAN_REMARKS "UserRemarks",
--         bcrd_due_date "MaturityFrom",
--         '' "RequestedBy" , 
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",         
--         Bcrd_Company_Code "CompanyCode",
--         BCRD_LOCATION_CODE "LocationCode",
--         bcrd_local_bank "LocalBankCode",         
--          0 "Status",
--          '.' "BatchNumber"
--          From Trtran045 A
--          where  Bcrd_Process_Complete not in (12400001)
--          And bcrd_Company_Code=decode(Numcode4,30100001,bcrd_Company_Code,Numcode4)
--        --  And bcrd_Location_Code=Numcode3
--          and to_date(bcrd_due_date) between to_date(dattemp1) and to_date(dattemp2)
--         -- And bcrd_Import_Export = decode(numCode,25999999,Trad_Import_Export,numCode)
--          and BCRD_CURRENCY_CODE = decode(Numcode1,30499999,BCRD_CURRENCY_CODE,Numcode1)
--          And bcrd_Record_Status Not In(10200006,10200005) 
--         And Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,to_date(datworkdate))!=0;       
--    elsif numcode in (25900090,25900089) then 
--     open Gencursor for
--         SELECT rownum "Rownum", TLON_LOAN_NUMBER "TradeReference",           
--         DECODE(reps_record_type,1,'Loan Repayment',2,'Interest Payment') "ImportExportDesc",
--         pkgReturnCursor.fncGetDescription(nvl(TLON_CURRENCY_CODE,30499999),2) "Currency",
--         Pkgreturncursor.Fncgetdescription(Nvl(TLON_LOCAL_BANK,30699999),2) "Bank",
--         REPS_PRINCIPAL_AMOUNT "AmountFcy",
--         REPS_PRINCIPAL_AMOUNT "OutstandingAmount",
--         REPS_PRINCIPAL_AMOUNT "SettlementAmount",       
--         Tlon_Disbursal_Date "ReferenceDate",
--         pkgReturnCursor.fncGetDescription(TLON_COMPANY_CODE,1)"Company",         
--         REPS_INSTALLMENT_DATE "DueDate",
--         TLON_SANCTIONED_RATE "ExchangeRate",
--         TLON_CREATE_DATE "EntryDate",
--         '' "UserRemarks",
--          REPS_INSTALLMENT_DATE "MaturityFrom",
--         '' "RequestedBy" ,
--         ''  "BusinessUnit",'' "ProfitCenter",            
--         TLON_COMPANY_CODE "CompanyCode",
--         TLON_LOCATION_CODE "LocationCode",
--         TLON_LOCAL_BANK "LocalBankCode" ,
--          '.' "BatchNumber"         
--         From Trtran081,TRTRAN081A
--          Where  Tlon_Process_Complete not in (12400001)
--          AND TLON_LOAN_NUMBER = REPS_LOAN_NUMBER
--          AND reps_record_type IN(1,2)
--          AND REPS_RECORD_STATUS NOT IN(10200005,10200006)          
--         and TLON_COMPANY_CODE=decode(Numcode4,30199999,TLON_COMPANY_CODE,Numcode4)
--           and to_date(REPS_INSTALLMENT_DATE) between to_date(dattemp1) and to_date(dattemp2)
--          And Tlon_Record_Status In (Gconst.Statusentry, Gconst.Statusauthorized, Gconst.Statusupdated);
--        --And  Pkgforexprocess.Fncgetoutstanding(Tlon_Bank_Reference,0,12,1,to_date(datworkdate))!=0;
--    Elsif Numcode In (25999999) Then
--        OPEN GENCURSOR FOR
--         select rownum "Rownum", a.*
--           from (select 
--         bcrd_buyers_credit "TradeReference",            
--         pkgReturnCursor.fncGetDescription(nvl(25900073,25900073),1) "ImportExportDesc",
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_CURRENCY_CODE,30499999),2) "Currency",
--         Pkgreturncursor.Fncgetdescription(Nvl(bcrd_local_bank,30699999),2) "Bank",
--         Bcrd_Sanctioned_Fcy "AmountFcy",
--         Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,datworkdate) "OutstandingAmount",
--         Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,datworkdate) "SettlementAmount",       
--         bcrd_sanction_date "ReferenceDate",
--         pkgReturnCursor.fncGetDescription(BCRD_COMPANY_CODE,1)"Company",         
--         bcrd_due_date "DueDate",
--         bcrd_conversion_rate "ExchangeRate",
--         bcrd_sanction_date "EntryDate",
--         BCRD_LOAN_REMARKS "UserRemarks",
--         bcrd_due_date "MaturityFrom",         
--         '' "RequestedBy" ,
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",         
--         Bcrd_Company_Code "CompanyCode",
--         BCRD_LOCATION_CODE "LocationCode",
--         bcrd_local_bank "LocalBankCode" ,
--          '.' "BatchNumber"         
--          From Trtran045 A
--          where  Bcrd_Process_Complete =12400002
--          And bcrd_Company_Code=decode(Numcode4,30100001,bcrd_Company_Code,Numcode4)
--          --And bcrd_Location_Code=Numcode3
--          and to_date(bcrd_due_date) between to_date(dattemp1) and to_date(dattemp2)
--         -- And bcrd_Import_Export = decode(numCode,25999999,Trad_Import_Export,numCode)
--          and BCRD_CURRENCY_CODE = decode(Numcode1,30499999,BCRD_CURRENCY_CODE,Numcode1)
--          And bcrd_Record_Status Not In(10200006,10200005) 
--         And Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,to_date(datworkdate))!=0
--         Union All
--         select 
--         TLON_LOAN_NUMBER "TradeReference",           
--         DECODE(reps_record_type,1,'Loan Repayment',2,'Interest Payment') "ImportExportDesc",
--         pkgReturnCursor.fncGetDescription(nvl(TLON_CURRENCY_CODE,30499999),2) "Currency",
--         Pkgreturncursor.Fncgetdescription(Nvl(TLON_LOCAL_BANK,30699999),2) "Bank",
--         REPS_PRINCIPAL_AMOUNT "AmountFcy",
--         REPS_PRINCIPAL_AMOUNT "OutstandingAmount",
--         REPS_PRINCIPAL_AMOUNT "SettlementAmount",       
--         Tlon_Disbursal_Date "ReferenceDate",
--         pkgReturnCursor.fncGetDescription(TLON_COMPANY_CODE,1)"Company",         
--         REPS_INSTALLMENT_DATE "DueDate",
--         TLON_SANCTIONED_RATE "ExchangeRate",
--         TLON_CREATE_DATE "EntryDate",
--         '' "UserRemarks",
--          REPS_INSTALLMENT_DATE "MaturityFrom",        
--         '' "RequestedBy" ,
--         ''  "BusinessUnit",'' "ProfitCenter",            
--         TLON_COMPANY_CODE "CompanyCode",
--         TLON_LOCATION_CODE "LocationCode",
--         TLON_LOCAL_BANK "LocalBankCode" ,
--          '.' "BatchNumber"         
--         From Trtran081,TRTRAN081A
--          Where  Tlon_Process_Complete not in (12400001)
--          AND TLON_LOAN_NUMBER = REPS_LOAN_NUMBER
--          AND reps_record_type in(1,2)
--          AND REPS_RECORD_STATUS NOT IN(10200005,10200006) 
--          and TLON_COMPANY_CODE=decode(Numcode4,30199999,TLON_COMPANY_CODE,Numcode4)
--           and to_date(REPS_INSTALLMENT_DATE) between to_date(dattemp1) and to_date(dattemp2)
--          And Tlon_Record_Status In (Gconst.Statusentry, Gconst.Statusauthorized, Gconst.Statusupdated)
--        --And  Pkgforexprocess.Fncgetoutstanding(Tlon_Bank_Reference,0,12,1,to_date(datworkdate))!=0
--        UNION ALL
--            select 
--         TRAD_TRADE_REFERENCE "TradeReference",               
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_IMPORT_EXPORT,25999999),1) "ImportExportDesc",
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_TRADE_CURRENCY,30499999),2) "Currency",
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_LOCAL_BANK,30699999),2) "Bank",
--         TRAD_TRADE_FCY "AmountFcy",
--         ----For TOI Use this
--         --TRAD_TRADE_FCY "OutstandingAmount", --Check of TOI
--         --pkgforexprocess.fncGetOutstanding(trad_trade_reference,1,GConst.UTILCONTRACTOS,GConst.AMOUNTFCY, datworkdate)"OutstandingAmount",
--         ---For other client
--         pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate)"OutstandingAmount",
----         (TRAD_TRADE_FCY - 
----         TRAD_TRADE_FCY)"SettledAmount",
----         (TRAD_TRADE_FCY - 
----       pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate))"SettlementAmount",
--         pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate) "SettlementAmount",
--         Trad_Reference_Date "ReferenceDate",
--         pkgReturnCursor.fncGetDescription(TRAD_COMPANY_CODE,1)"Company",         
--         TRAD_MATURITY_DATE "DueDate",
--         trad_trade_rate "ExchangeRate",
--         TRAD_ENTRY_DATE "EntryDate",
--         TRAD_USER_REFERENCE "UserRemarks",
--         trad_maturity_from "MaturityFrom",         
--         TRAD_TRADE_REMARKS "RequestedBy" , 
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",         
--         TRAD_COMPANY_CODE "CompanyCode",
--         TRAD_LOCATION_CODE "LocationCode",
--         TRAD_LOCAL_BANK "LocalBankCode",
--          '.' "BatchNumber"         
--          from trtran002 where 
--          Trad_Process_Complete not in (12400001)
--          And Trad_Company_Code=decode(Numcode4,30199999,Trad_Company_Code,Numcode4)
--         -- And Trad_Location_Code=Numcode3
--          And Trad_Import_Export = Decode(Numcode,25999999,Trad_Import_Export,Numcode)
--          and TRAD_TRADE_CURRENCY = decode(Numcode1,30499999,TRAD_TRADE_CURRENCY,Numcode1)
--          And Trad_Record_Status Not In(10200006,10200005))a;
--          --And Trad_Maturity_Date Between Dattemp1 And Dattemp2;
--          --AND pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate)!=0;         
--   Else    
       Open Gencursor For    
        select rownum "Rownum",
         TRAD_TRADE_REFERENCE "TradeReference",           
         pkgReturnCursor.fncGetDescription(nvl(TRAD_IMPORT_EXPORT,25999999),1) "ImportExportDesc",
         pkgReturnCursor.fncGetDescription(nvl(TRAD_TRADE_CURRENCY,30499999),2) "Currency",
         pkgReturnCursor.fncGetDescription(TRAD_BUYER_SELLER,2) "Buyer_seller",
         pkgReturnCursor.fncGetDescription(nvl(TRAD_LOCAL_BANK,30699999),2) "Bank",
         TRAD_TRADE_FCY "AmountFcy",
         ----For TOI Use this
         --TRAD_TRADE_FCY "OutstandingAmount", --Check of TOI
         --pkgforexprocess.fncGetOutstanding(trad_trade_reference,1,GConst.UTILCONTRACTOS,GConst.AMOUNTFCY, datworkdate)"OutstandingAmount",
         ---For other client
         pkgforexprocess.fncGetOutstandingTransaction(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate)"OutstandingAmount",
--         (TRAD_TRADE_FCY - 
--         TRAD_TRADE_FCY)"SettledAmount",
--         (TRAD_TRADE_FCY - 
--       pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate))"SettlementAmount",
         pkgforexprocess.fncGetOutstandingTransaction(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate) "SettlementAmount",
         TRAD_REFERENCE_DATE "ReferenceDate",
         pkgReturnCursor.fncGetDescription(TRAD_COMPANY_CODE,1)"Company",    
         pkgReturnCursor.fncGetDescription(TRAD_LOCATION_CODE,1)"Location",    
         TRAD_MATURITY_DATE "DueDate",
         trad_trade_rate "ExchangeRate",
         TRAD_ENTRY_DATE "EntryDate",
         TRAD_TRADE_REMARKS "UserRemarks",
         trad_maturity_from "MaturityFrom",         
         TRAD_USER_REFERENCE "RequestedBy" ,
         pkgReturnCursor.fncGetDescription(nvl(TRAD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
         pkgReturnCursor.fncGetDescription(nvl(TRAD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",         
         TRAD_COMPANY_CODE "CompanyCode",
         TRAD_LOCATION_CODE "LocationCode",
         TRAD_LOCAL_BANK "LocalBankCode",        
          0 "Status", TRAD_LOCAL_CURRENCY "LocalCurrency",
          '.' "BatchNumber"          
         from trtran002 inner join trmaster259
            on TRAD_IMPORT_EXPORT=EXTY_PICK_CODE
            and exty_record_Status not in (10200005,1020006)
         where Trad_Process_Complete not in (12400001)
         AND Trad_Company_Code=decode(Numcode4,30199999,Trad_Company_Code,Numcode4)
          --And Trad_Location_Code=Numcode3
         -- And Trad_Import_Export = Decode(Numcode,25999999,Trad_Import_Export,Numcode) -- Commented this line, as we changed the pickkeygroup from 259 to 317
--         and ((Numcode = 31700001 and trad_import_export <=25900050) or
--            (Numcode = 31700002 and trad_import_export >=25900050) or
--            (Numcode = 31799999 and trad_import_export = trad_import_export))

         and ((Numcode = 31700001 and EXTY_INFLOW_OUTFLOW =17300002) or
            (Numcode = 31700002 and EXTY_INFLOW_OUTFLOW =17300001) or
            (Numcode = 31799999 and EXTY_INFLOW_OUTFLOW = EXTY_INFLOW_OUTFLOW))
         and TRAD_TRADE_CURRENCY = decode(Numcode1,30499999,TRAD_TRADE_CURRENCY,Numcode1)
         and TRAD_PRODUCT_CATEGORY = decode(numCode2,33399999,TRAD_PRODUCT_CATEGORY,numCode2)
         and TRAD_SUBPRODUCT_CODE = decode(numCode5,33899999,TRAD_SUBPRODUCT_CODE,numCode5)
         And Trad_Record_Status Not In(10200006,10200005)
         and  Trad_company_code in (select usco_company_code from trsystem022a
         where UPPER(usco_user_id) =varUserid
         AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
         and  TRAD_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
         and to_date(TRAD_MATURITY_DATE) between to_date(dattemp1) and to_date(dattemp2)
         AND pkgforexprocess.fncGetOutstandingTransaction(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, to_date(datworkdate))!=0
         and nvl(EXTY_CONSIDER_FORSETTLEMENT,12400002)=12400001 ;
         -- and TRAD_PRODUCT_CATEGORY = numCode4
    --      end if;
        Goto Process_End;
    END IF;   

IF numinfotype = REFGETEXPOSURESFORREVERSAL then
    Begin
        Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/TradeReference', Vartemp);
    Exception
    when others then
        Vartemp := null;
    end;

    Begin
        numcode := Gconst.Fncxmlextract(Xmldoc,'Param/ImportExport', numcode);
    Exception
    when others then
        numcode := 0;
    end;

    Begin
        numcode1 := Gconst.Fncxmlextract(Xmldoc,'Param/UserActionType', numcode1);
    Exception
    when others then
        numcode1 := 0;
    end;

    Open Gencursor For
        Select rownum "Rownum", TRAD_TRADE_REFERENCE "TradeReference", 
                pkgReturnCursor.fncGetDescription(NVL(TRAD_COMPANY_CODE,30199999),2) "Company",
                pkgReturnCursor.fncGetDescription(NVL(TRAD_LOCATION_CODE,30299999),2) "Location",
                pkgReturnCursor.fncGetDescription(NVL(TRAD_LOCAL_BANK,30699999),2) "Bank",        
                pkgReturnCursor.fncGetDescription(NVL(TRAD_TRADE_CURRENCY,30499999),2)"BaseCurrency",
                pkgReturnCursor.fncGetDescription(NVL(TRAD_LOCAL_CURRENCY,30499999),2)"OtherCurrency",
                pkgReturnCursor.fncGetDescription(NVL(TRAD_IMPORT_EXPORT,25999999),1) "ImportExport",
                pkgReturnCursor.fncGetDescription(NVL(TRAD_PRODUCT_CATEGORY,33399999),1)"Book",
                pkgReturnCursor.fncGetDescription(NVL(TRAD_SUBPRODUCT_CODE,33899999),1) "Strategy",
                TRAD_USER_REFERENCE	"UserReference", TRAD_ENTRY_DATE "EntryDate", TRAD_REFERENCE_DATE "ReferenceDate",
                pkgReturnCursor.fncGetDescription(NVL(TRAD_PRODUCT_CODE,24200001),1) "ProductCode", TRAD_PRODUCT_DESCRIPTION "ProductDescription",
                pkgReturnCursor.fncGetDescription(NVL(TRAD_TENOR_CODE,23400004),1) "TenorCode", TRAD_TENOR_PERIOD "TenorPeriod",
                TRAD_MATURITY_FROM	"MaturityFrom", TRAD_MATURITY_DATE	"MaturityDate", 
                pkgReturnCursor.fncGetDescription(NVL(TRAD_BUYER_SELLER,30599999),1) "BuyerSeller", 
                TRAD_TRADE_FCY "TradeFcy", pkgforexprocess.fncGetOutstandingTransaction(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate) "OutstandingAmount",
                pkgReturnCursor.fncGetDescription(NVL(TRAD_RATE_TYPE,91100001),1) "RateType",
                TRAD_SPOT_RATE "SpotRate", TRAD_FORWARD_RATE "ForwardRate", TRAD_MARGIN_RATE "MarginRate",
                TRAD_TRADE_RATE	"TradeRate", TRAD_TRADE_INR	"TradeInr", TRAD_TRADE_REMARKS "TradeRemarks",
                TRAD_TRADE_CURRENCY "BaseCurrencyCode", TRAD_LOCAL_CURRENCY "OtherCurrencyCode",
                TRAD_RATE_TYPE "RateTypeCode"
        From TRTRAN002 
        where TRAD_RECORD_STATUS NOT IN (10200005,10200006)
        and ((numcode1 = 101 and TRAD_PROCESS_COMPLETE != 12400001) or (numcode1 != 101 and 
        (TRAD_PROCESS_COMPLETE = 12400001 or TRAD_PROCESS_COMPLETE = 12400002)))
        and TRAD_COMPANY_CODE in (select usco_company_code from trsystem022a
                                  where UPPER(usco_user_id) = varUserid
                                  AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
        and TRAD_LOCATION_CODE in(select USLO_ENTITY from trsystem022d
                                  where UPPER(USLO_USER_ID) = varUserid
                                  and USLO_RECORD_STATUS NOT IN (10200005,10200006))
        and TRAD_TRADE_REFERENCE = decode(Vartemp,null,TRAD_TRADE_REFERENCE,Vartemp)
        and ((numcode = 31700001 and trad_import_export <= 25900050) or
           (numcode = 31700002 and trad_import_export > 25900050));
    Goto Process_End;
end if;





  if numinfotype = REFRETREIVEDEALS then 
--    Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/TradeReference',   Vartemp);  
-- Numcode1 := Gconst.Fncxmlextract(Xmldoc,'Param/ReverseSerial',  Numcode1);
-- numcode2:=Gconst.Fncxmlextract(Xmldoc,'Param/CompanyCode',  numcode2);
Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/BatchNumber',   Vartemp); 
     Open Gencursor For  
          Select rownum "Rownum",
          BREL_BATCH_NUMBER "BatchNumber",
          Brel_Trade_Reference "TradeReference",
          brel_reverse_serial "ReverseSerial",
          BREL_COMPANY_CODE "CompanyCode",
          fncGetDescription(BREL_COMPANY_CODE,2) "Company",
          Brel_Entry_Date "EntryDate",
          Brel_Reference_Date "ReferenceDate",
          pkgReturnCursor.fncGetDescription(nvl(BREL_LOCAL_BANK,30699999),2) "Bank",
          brel_local_bank "LocalBank",
          Brel_Reversal_Fcy "ReversalFCY",
          Brel_Reversal_Rate "CancelRate",
          Brel_Reversal_Inr "ReversalNR"
          from trtran003 where Brel_Record_Status not in (10200005,10200003,10200006)
          and BREL_BATCH_NUMBER = Vartemp
           and  BREL_COMPANY_CODE in (select usco_company_code from trsystem022a
                            where UPPER(usco_user_id) =varUserid
                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
          and  BREL_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
          --And Brel_Trade_Reference=Vartemp
          --And Brel_Reverse_Serial=Numcode1
          --and brel_company_code=numcode2;
Goto Process_End;
End If;  


    if numInfoTYpe = REFIMAGESCANNING then
    vartemp1 := gconst.fncxmlextract(xmldoc,'CommandSet/Entity', vartemp1); 
     open GenCursor for  
      SELECT DOUP_DOCUMENT_TYPE DocumentType,
             pkgreturncursor.fncgetdescription(DOUP_DOCUMENT_TYPE,1)DocumentTypeDesc,
            DOUP_SYNONYM_NAME SynonymName,  DOUP_MENU_DESCRIPRION MenuName           
      from tftran101A
      where DOUP_RECORD_STATUS not in(10200005,10200006)
      AND DOUP_SYNONYM_NAME = vartemp1
      union all
      SELECT PICK_KEY_VALUE DocumentType,
            pkgreturncursor.fncgetdescription(PICK_KEY_VALUE,1)DocumentTypeDesc,
            vartemp1 SynonymName, null MenuName           
      from trmaster001
      where pick_key_group=901
      and pick_key_value=90199999
      and pick_record_status not in (10200005,10200006);

    Goto Process_End;
  End if;
--   if numInfoTYpe = REFIMAGEGRIDDATA then
--     vartemp1 := gconst.fncxmlextract(xmldoc,'CommandSet/Entity', vartemp1);
----   Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/TradeReference',   Vartemp);   
----    select FLDP_XML_FIELD 
----      into  Vartemp2
----      from trsystem999
----      where fldp_table_synonym =vartemp1
----      and FLDP_COLUMNS_FORIMAGE='DocumentReference'
----      and rownum=1;
--
--       FOR CurL in (select FLDP_XML_FIELD CName,fldp_data_type dataType
--           from trsystem999
--            where FLDP_TABLE_SYNONYM = varEntity 
--             and upper(FLDP_COLUMNS_FORIMAGE)=upper('DocumentReference')
--             and FLDP_KEY_NO>0
--             order by nvl(FLDP_KEY_NO,999))
--       loop
--           varOperation := ' Extracting Information' ||varReference ;
--            varTemp:=  GConst.fncXMLExtract(Xmldoc,'Param/' || CurL.CName, varReference);
----            if (CurL.dataType='DATE') then 
----            datTemp:=  GConst.fncXMLExtract(Xmldoc,'Param/' || CurL.CName, datTemp);
----               varTemp:=to_char(datTemp);
----            end if;
--              varTemp2:=varTemp2 || ',' || varTemp;
--       end loop;
--       
--     -- Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/' || Vartemp2,   Vartemp);   
--
--     open GenCursor for  
--        select    
--          IMAG_REFERENCE_NUMBER ReferenceNumber,
--          --IMAG_DOCUMENT_REFERENCE ReferenceNumber,
--          IMAG_REFERENCE_SERIAL ReferenceSerial,
--          --IMAG_REFERENCE_NUMBER || '_' || IMAG_REFERENCE_SERIAL "Unique_ReferenceNumber",
--          IMAG_DOCUMENT_SERIAL DocumentSerial,
--          IMAG_DOCUMENT_TYPE DocumentType,
--          pkgreturncursor.fncgetdescription(IMAG_DOCUMENT_TYPE,2)DocumentTypeDesc,
--          IMAG_DOCUMENT_NAME DocumentName,
--        --  IMAG_DOCUMENT_IMAGE DocumentImage,
--          IMAG_USER_REMARKS UserRemarks,
--          IMAG_RECORD_STATUS RecordStatus
--      from tftran101
--      where imag_record_status not in(10200005,10200006)
--      AND IMAG_ENTITY_NAME = vartemp1
--      AND IMAG_DOCUMENT_REFERENCE = varTemp2;
--
--    Goto Process_End;
--  End if;

if numInfoTYpe = REFIMAGEGRIDDATA then
     vartemp1 := gconst.fncxmlextract(xmldoc,'CommandSet/Entity', vartemp1);
--   Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/TradeReference',   Vartemp);  
--    select FLDP_XML_FIELD
--      into  Vartemp2
--      from trsystem999
--      where fldp_table_synonym =vartemp1
--      and FLDP_COLUMNS_FORIMAGE='DocumentReference'
--      and rownum=1;

       FOR CurL in (select FLDP_XML_FIELD CName,fldp_data_type dataType
           from trsystem999
            where FLDP_TABLE_SYNONYM = varEntity
             and upper(FLDP_COLUMNS_FORIMAGE)=upper('DocumentReference')
             and FLDP_KEY_NO>0
             order by nvl(FLDP_KEY_NO,999))
       loop
           varOperation := ' Extracting Information' ||varReference ;
            varTemp:=  GConst.fncXMLExtract(Xmldoc,'Param/' || CurL.CName, varReference);
--            if (CurL.dataType='DATE') then
--            datTemp:=  GConst.fncXMLExtract(Xmldoc,'Param/' || CurL.CName, datTemp);
--               varTemp:=to_char(datTemp);
--            end if;

            if varTemp2 is not null then
                varTemp2:=varTemp2 || ',' || varTemp;
            else
                varTemp2:=varTemp;
            end if;
            --  varTemp2:=varTemp2 || ',' || varTemp;
       end loop;

        if varTemp2 is null then
           FOR CurL in (select FLDP_COLUMN_NAME CName,FLDP_DATA_TYPE dataType
               from trsystem999
                where FLDP_TABLE_SYNONYM = varEntity
                 --and upper(FLDP_COLUMNS_FORIMAGE)=upper('DocumentReference')
                 and FLDP_KEY_NO>0
                 order by nvl(FLDP_KEY_NO,999))
           loop
               varOperation := ' Extracting Information' ||varReference ;
                varTemp:= GConst.fncXMLExtract(Xmldoc,'Param/' || CurL.CName, varReference);
--                if (CurL.dataType='DATE') then
--                   datTemp:=  GConst.fncXMLExtract(xmlTemp,CurL.CName, datTemp);
--                   varTemp:=to_char(datTemp,'YYYYMMDD');
--                end if;
                -- this is to Check for the First Time
                if varTemp2 is not null then
                    varTemp2:=varTemp2 || ',' || varTemp;
                else
                    varTemp2:=varTemp;
                end if;
           end loop;
        end if;

     -- Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/' || Vartemp2,   Vartemp);  

     open GenCursor for  
        select    
          IMAG_REFERENCE_NUMBER ReferenceNumber,
          --IMAG_DOCUMENT_REFERENCE ReferenceNumber,
          IMAG_REFERENCE_SERIAL ReferenceSerial,
          --IMAG_REFERENCE_NUMBER || '_' || IMAG_REFERENCE_SERIAL "Unique_ReferenceNumber",
          IMAG_DOCUMENT_SERIAL DocumentSerial,
          IMAG_DOCUMENT_TYPE DocumentType,
          pkgreturncursor.fncgetdescription(IMAG_DOCUMENT_TYPE,2)DocumentTypeDesc,
          IMAG_DOCUMENT_NAME DocumentName,
        --  IMAG_DOCUMENT_IMAGE DocumentImage,
          IMAG_USER_REMARKS UserRemarks,
          IMAG_RECORD_STATUS RecordStatus
      from tftran101
      where imag_record_status not in(10200005,10200006)
      AND IMAG_ENTITY_NAME = vartemp1
      AND IMAG_DOCUMENT_REFERENCE = varTemp2;

    Goto Process_End;
  End if;

   if numInfoTYpe = REFGETDOCSUPLOADED then
     vartemp1 := gconst.fncxmlextract(xmldoc,'Param/Guid', vartemp1); 
    numtemp := gconst.fncxmlextract(xmldoc,'Param/DocSerial', numtemp);
     open GenCursor for  
        select    
          IMAG_REFERENCE_NUMBER ReferenceNumber,
          --IMAG_DOCUMENT_REFERENCE ReferenceNumber,
          IMAG_REFERENCE_SERIAL ReferenceSerial,
          --IMAG_REFERENCE_NUMBER || '_' || IMAG_REFERENCE_SERIAL "Unique_ReferenceNumber",
          IMAG_DOCUMENT_SERIAL DocumentSerial,
          IMAG_DOCUMENT_TYPE DocumentType,
          pkgreturncursor.fncgetdescription(IMAG_DOCUMENT_TYPE,2)DocumentTypeDesc,
          IMAG_DOCUMENT_NAME DocumentName,
        --  IMAG_DOCUMENT_IMAGE DocumentImage,
          IMAG_USER_REMARKS UserRemarks,
          IMAG_RECORD_STATUS RecordStatus
      from tftran101
      where imag_record_status not in(10200005,10200006)
      AND IMAG_REFERENCE_NUMBER = vartemp1
      AND IMAG_DOCUMENT_SERIAL = numtemp;     

    Goto Process_End;
  End if;


     if numInfoTYpe = REFGETDOCUMENT then
     vartemp1 := gconst.fncxmlextract(xmldoc,'Param/Guid', vartemp1); 
    numcode := gconst.fncxmlextract(xmldoc,'Param/DocSerial', numcode);
     open GenCursor for 
      select    
          IMAG_REFERENCE_NUMBER ReferenceNumber,
           IMAG_REFERENCE_SERIAL ReferenceSerial,
          IMAG_DOCUMENT_SERIAL DocumentSerial,
          IMAG_DOCUMENT_TYPE DocumentType,
     IMAG_DOCUMENT_IMAGE DocumentImage,
     IMAG_DOCUMENT_NAME DocumentName

--       select IMAG_DOCUMENT_IMAGE DocumentImage,
--        IMAG_DOCUMENT_NAME DocumentName,
        from tftran101 

       where imag_image_type='pdf' 
       and imag_record_status not in(10200005,10200006)
            and IMAG_DOCUMENT_REFERENCE='FWD000001358';
            --and imag_entity_name='HEDGEDEALREGISTER';   

    Goto Process_End;
  End if;


 if numInfoTYpe = REFGETMAPPENDINGDOCUMENT then
     vartemp1 := gconst.fncxmlextract(xmldoc,'Param/SynonymName', vartemp1); 
     numcode := gconst.fncxmlextract(xmldoc,'Param/DocumentType', numcode);
  --  GLOG.LOG_Write('SynonymName - ' || vartemp1 );
     open GenCursor for 
    -- GLOG.LOG_Write('SynonymName - ' || vartemp1  ||' DocumentType ' || DocumentType);
      select    
          IMAG_REFERENCE_NUMBER ReferenceNumber,
          IMAG_REFERENCE_SERIAL ReferenceSerial,
          IMAG_DOCUMENT_SERIAL DocumentSerial,
          IMAG_DOCUMENT_TYPE DocumentType,
          --IMAG_DOCUMENT_IMAGE DocumentImage,
          IMAG_DOCUMENT_NAME DocumentName          
        from tftran101       
       where imag_document_type=numcode 
            and IMAG_ENTITY_NAME=vartemp1 
            and IMAG_DOCUMENT_REFERENCE is null 
            and  IMAG_IMAGE_TYPE='pdf'
            and imag_record_status NOT IN (10200005,10200006);
            --and imag_entity_name='HEDGEDEALREGISTER';   

    Goto Process_End;
  End if;

if numInfoTYpe = REFGETDOCIMAGE then
     vartemp1 := gconst.fncxmlextract(xmldoc,'Param/Guid', vartemp1); 
    numtemp := gconst.fncxmlextract(xmldoc,'Param/RefSerial', numtemp);
     open GenCursor for  
        select 
         IMAG_DOCUMENT_IMAGE DocumentImage         
      from tftran101
      where imag_record_status not in(10200005,10200006)
      AND IMAG_REFERENCE_NUMBER = vartemp1
      AND IMAG_REFERENCE_SERIAL = numtemp;     

    Goto Process_End;
  End if;

 if numInfoTYpe = REFLIMITDASHBOARD then
     open GenCursor for 

     select 'Any' Product, LimitType UnderLying,PPLimitAmount,RunningAmount,inwdcancel,utilized,
        PPLimitAmount-RunningAmount LimitAvalible,
        EffectiveDate,DueDate,Period ,'15-oct-18'  Asondate
     from (
         select pkgreturncursor.fncgetdescription(bank_limit_type,2) LimitType,
          nvl(sum(bank_limit_amount),0) PPLimitAmount,
          fncGetPPLimitUtilise('15-oct-18',25300001,1)  as RunningAmount,
          fncGetPPLimitUtilise('15-oct-18',25300001,2)  AS inwdcancel,
          fncGetPPLimitUtilise('15-oct-18',25300001,3)  AS utilized, 
          bank_effective_date  EffectiveDate,bank_due_date DueDate,
--          to_char(to_date(bank_effective_date,'dd-MON-yy'), 'Mon') || ' to ' || to_char(to_date(bank_due_date,'dd-MON-yy'), 'Mon')
--           || '' || to_char(to_date(bank_due_date,'dd-MON-yy'), 'YY')   Period  
          0 Period
          From trtran015 where bank_limit_type in (31100006)
          and bank_record_status not in (10200005,10200006)
          group by bank_limit_type,bank_effective_date,bank_due_date 
          union all
          select 
          pkgreturncursor.fncgetdescription(bank_limit_type,2) LimitType,
          nvl(sum(bank_limit_amount),0) PPLimitAmount,
          fncGetPPLimitUtilise('15-oct-18',25300002,1)  as RunningAmount,
          fncGetPPLimitUtilise('15-oct-18',25300002,2)  AS inwdcancel,
          fncGetPPLimitUtilise('15-oct-18',25300002,3)  AS utilized ,
          bank_effective_date  EffectiveDate,bank_due_date DueDate,
          0 Period
--          to_char(to_date(bank_effective_date,'dd-MON-yy'), 'Mon') || ' to ' || to_char(to_date(bank_due_date,'dd-MON-yy'), 'Mon')
--           || '' || to_char(to_date(bank_due_date,'dd-MON-yy'), 'YY')   Period              
          From trtran015 where bank_limit_type in (31100005)
          and bank_record_status not in (10200005,10200006)
          group by bank_limit_type,bank_effective_date,bank_due_date) ;
     Goto Process_End;
  End if; 

if numInfoTYpe = REFHEDGESTATUS then
--insert into temp values('Inside REFHEDGESTATUS','Hari');commit;
        BEGIN
           vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',vartemp,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp := '30199999';
       End;  
        BEGIN
           vartemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',vartemp2,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp2 := '30299999';
       End;
        BEGIN
           vartemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',vartemp4,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp4 := '33399999';
       End;
        BEGIN
           vartemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',vartemp5,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp5 := '33899999';
       End;  
      BEGIN
           vartemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/InflowOutflow',vartemp1,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp1 := '90200001';
       End;
       Begin       
            vartemp6 :=  GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',vartemp6,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp6 := '25699999';
       End;

  numcode := PKGFOREXPROCESS.fncPositionGenerate(to_date(trunc(sysdate)),'ALL',vartemp,vartemp6,varTemp4,varTemp5,varTemp2);

     open GenCursor for 
 select     
      CompanyCode,DueMonth,DueDate_monthEnd,round(Budgetfcy,2)Budget,
      (case when Budgetlocal =0 then round(MarketRate,6)
           else round((Budgetlocal/decode(Budgetfcy,0,1,Budgetfcy)),2) end)  BudgetRate,
      round(Actual,2)Actual,HedgeFcy HedgeAmount,
      (case when HedgeLocal=0 then round(MarketRate,6) else 
           round((HedgeLocal/decode(HedgeFcy,0,1,HedgeFcy)),2) end) HedgeRate,
      round(MarketRate,6) MarketRate,Amountfcy Amountfcy,Amountlocal Amountlocal
     from( 
     select   CompanyCode,DueMonth,DueDate_monthEnd,
      Sum(case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
                           where DCIF_RECORD_STATUS not in (10200005,10200006)
                           and DCIF_DASHBOARD_NAME='HedgeStatus'
                           and DCIF_TRANS_TYPE='Budget'
                           and DCIF_INFLOW_OUTFLOW= 90200001)then abs(Amountfcy) else 0 end) BudgetFcy,
      sum(case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
                           where DCIF_RECORD_STATUS not in (10200005,10200006)
                           and DCIF_DASHBOARD_NAME='HedgeStatus'
                           and DCIF_TRANS_TYPE='Budget'
                           and DCIF_INFLOW_OUTFLOW= 90200001)
                           then abs(Amountlocal) else 0 end) Budgetlocal,  

     sum(case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
                           where DCIF_RECORD_STATUS not in (10200005,10200006)
                           and DCIF_DASHBOARD_NAME='HedgeStatus'
                           and DCIF_TRANS_TYPE='Actuals'
                           and DCIF_INFLOW_OUTFLOW= 90200001)then abs(Amountfcy) else 0 end) Actual,
    sum(case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
                           where DCIF_RECORD_STATUS not in (10200005,10200006)
                           and DCIF_DASHBOARD_NAME='HedgeStatus'
                           and DCIF_TRANS_TYPE='Hedge'
                           and DCIF_INFLOW_OUTFLOW= 90200001)then abs(Amountfcy) else 0 end) HedgeFcy,

    sum(case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
                           where DCIF_RECORD_STATUS not in (10200005,10200006)
                           and DCIF_DASHBOARD_NAME='HedgeStatus'
                           and DCIF_TRANS_TYPE='Hedge'
                           and DCIF_INFLOW_OUTFLOW= 90200001)then abs(Amountlocal) else 0 end) HedgeLocal,
       avg(MTMRateActual) MarketRate,                          
      sum(abs(Amountfcy))Amountfcy,Sum(abs(Amountlocal))Amountlocal
      from (select  posn_company_code CompanyCode,posn_currency_code CurrencyCode,posn_product_code ProductCode,
         POSN_SUBPRODUCT_CODE SubProductCode,posn_account_code AccountCode,to_char(posn_due_date,'Mon-yy')DueMonth ,
         last_day(posn_due_date) DueDate_monthEnd,
         Sum(CASE WHEN LENGTH(vartemp6)>8 THEN ABS(POSN_FUNCTIONAL_AMOUNT) ELSE Abs(Posn_Transaction_Amount) END)/1000000 Amountfcy,
        Sum((CASE WHEN LENGTH(vartemp6)>8 THEN ABS(POSN_LOCAL_AMOUNT) ELSE ABS(POSN_LOCAL_AMOUNT) END))/1000000 Amountlocal,
         avg( POSN_MTM_RATE) MTMRateActual
      from trsystem997
      where posn_transaction_amount!=0
      and POSN_ALLIN_RATE !=0
      -- and posn_due_date >='15-Oct-2018'
      group by posn_company_code,posn_currency_code,posn_product_code,POSN_SUBPRODUCT_CODE,posn_account_code,
      to_char(posn_due_date,'Mon-yy'), last_day(posn_due_date)
      )group by CompanyCode,DueMonth,DueDate_monthEnd)
--      WHERE CompanyCode=numcode1
--      and CurrencyCode=numcode6
 --  WHERE instr(vartemp,CompanyCode)>0 
    WHERE (CompanyCode = DECODE(vartemp,'ALL' ,NVL(CompanyCode,0)) OR
            INSTR(vartemp ,NVL(CompanyCode,0)) >0)
--   and instr(vartemp1,InflowOutflow)>0
--    and instr(vartemp2,LocationCode)>0
--    
--     and instr(vartemp4,Portfolio)>0
--    and instr(vartemp5,SubPortfolio)>0
--    and instr(vartemp6,CurrencyPair)>0
      --and BudgetFcy<>0
      order by DueDate_monthEnd;

--   select     
--      CompanyCode,CurrencyCode,ProductCode,SubProductCode,AccountCode,DueMonth,DueDate_monthEnd,
--      (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Budget'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then Sum(Amountfcy) else 0 end) Budget,
--      (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Budget'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then round(sum(Amountlocal)/decode(sum(Amountfcy),0,1,sum(Amountfcy)),2) else 0 end) BudgetRate,         
--     (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Actuals'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then sum(Amountfcy) else 0 end) Actual,
--    (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Hedge'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then sum(Amountfcy) else 0 end) HedgeAmount,
--    (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Hedge'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then round(sum(Amountlocal)/decode(sum(Amountfcy),0,1,sum(Amountfcy)),2) else 0 end) HedgeRate,
--    (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Hedge'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then round(sum(Amountlocal)/decode(sum(Amountfcy),0,1,sum(Amountfcy)),2) else 0 end) MarketRate,                           
--      sum(Amountfcy)Amountfcy,Sum(Amountlocal)Amountlocal
--      from (select  posn_company_code CompanyCode,posn_currency_code CurrencyCode,posn_product_code ProductCode,
--         POSN_SUBPRODUCT_CODE SubProductCode,posn_account_code AccountCode,to_char(posn_due_date,'Mon-yyyy')DueMonth ,
--         last_day(posn_due_date) DueDate_monthEnd,
--         Sum(CASE WHEN LENGTH('30400004')>8 THEN ABS(POSN_FUNCTIONAL_AMOUNT) ELSE Abs(Posn_Transaction_Amount) END)/1000000 Amountfcy,
--        Sum((CASE WHEN LENGTH('30400004')>8 THEN ABS(POSN_LOCAL_AMOUNT) ELSE ABS(POSN_LOCAL_AMOUNT) END))/1000000 Amountlocal
--      from trsystem997
--      where posn_transaction_amount!=0
--      and POSN_ALLIN_RATE !=0
--        
--      group by posn_company_code,posn_currency_code,posn_product_code,POSN_SUBPRODUCT_CODE,posn_account_code,
--      to_char(posn_due_date,'Mon-yyyy'), last_day(posn_due_date)
--      )group by CompanyCode,CurrencyCode,ProductCode,SubProductCode,AccountCode,DueMonth,DueDate_monthEnd;
       Goto Process_End;
  End if;  

 if numInfoTYpe = REFFXSETTLEMENT then
select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
     open GenCursor for      
--      select  Sdet.CompanyCode,Sdet.LocationCode,Sdet.SubProductCode,Sdet.ProductCode,
--        Sdet.Buysell, Sdet.CurrencyPair,Sdet.TransMonth,Sdet.MonthEndDate,Sdet.SettlementFCY,
--        Sdet.SettlementRate,Sdet.ProfitLoss,
--        round((((Sdet.SettlementFCY *Sdet.SettlementRate) + 
--        decode(Sdet.Buysell,25300001,Sdet.ProfitLoss,-1*Sdet.ProfitLoss))
--        /Sdet.SettlementFCY),6) SettlementRateWithPnL,
--        Bdet.BudgetFcy,Bdet.BudgetRate, Bdet.BudgetQuote,
--        Forward.ForwardFCY,Forward.ForwardRate,
--        0 FutureFCY, 0.00 FutureRate, 0 OptionFCY,
--        0.00 FuturepnL, 0.00 ForwardPnl, 0.00 OptionPNL
--            from (select deal_company_code CompanyCode,deal_location_code LocationCode,DEAL_INIT_CODE SubProductCode,
--                     DEAL_BACKUP_DEAL ProductCode ,deal_buy_Sell Buysell,
--                     pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2) CurrencyPair ,
--                     to_char(cdel_cancel_date,'Mon-YYYY') TransMonth, 
--                     last_day(cdel_cancel_date)MonthEndDate,
--                     sum(cdel_cancel_amount) SettlementFCY,
--                     round(sum(cdel_cancel_amount * cdel_cancel_rate) / decode(sum(cdel_cancel_amount),0,1,sum(cdel_cancel_amount)),6) SettlementRate,
--                     sum(cdel_profit_loss) ProfitLoss
--                from trtran006 inner join trtran001
--                on cdel_Deal_number= deal_deal_number
--                where cdel_Record_Status not in (10200005,10200006)
--                and deal_record_Status not in (10200005,10200006)
--                and cdel_cancel_date <=datworkdate
--                group by to_char(cdel_cancel_date,'Mon-YYYY'),
--                pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2),
--                deal_company_code,deal_location_code,DEAL_INIT_CODE,DEAL_BACKUP_DEAL,deal_buy_Sell,cdel_cancel_date) SDet
---- 155 for export and 154 for import 
--                    left outer join 
--                    (select trad_company_code CompanyCode ,trad_location_code LocationCode, 33399999 SubProductCode,33899999 ProductCode,
--                      decode(trad_import_export,25900154,25300001,25900155,25300002) Buysell, 
--                      pkgreturncursor.fncgetdescription(trad_trade_currency,2) || '/' || pkgreturncursor.fncgetdescription(trad_local_currency,2) CurrencyPair ,
--                      to_char(trad_maturity_date,'Mon-YYYY') TransMonth,
--                      last_day(trad_maturity_date)MonthEndDate,
--                      sum(trad_trade_fcy) BudgetFcy,round(sum(trad_trade_fcy*trad_trade_Rate)/sum(trad_trade_fcy),6) BudgetRate,
--                      sum(trad_trade_fcy*trad_trade_Rate) BudgetQuote
--                    from trtran002 where trad_import_export in (25900154,25900155)
--                    and trad_maturity_date <=datworkdate
--                    and trad_record_Status not in (10200005,10200006)
--                    group by trad_company_code,trad_location_code, trad_import_export, 
--                    trad_trade_currency,trad_local_currency, to_char(trad_reference_date,'Mon-YYYY'),trad_maturity_date)BDet
--                    on Sdet.CompanyCode=BDet.CompanyCode
--                    and Sdet.LocationCode=nvl(Bdet.LocationCode,30299999)
--                    and Sdet.Buysell=Bdet.Buysell
--                    and Sdet.CurrencyPair=Bdet.CurrencyPair
--                    and Sdet.TransMonth= Bdet.TransMonth
--            left outer join 
--            (select deal_company_code CompanyCode,deal_location_code LocationCode,DEAL_INIT_CODE SubProductCode,
--                 DEAL_BACKUP_DEAL ProductCode ,deal_buy_Sell Buysell,
--            pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2) CurrencyPair ,
--              to_char(Deal_maturity_date,'Mon-YYYY') MaturityMonth, 
--              last_day(Deal_maturity_date)MonthEndDate,
--            sum(deal_base_amount) ForwardFCY,
--            round(sum(deal_base_amount * deal_exchange_rate) / decode(sum(deal_base_amount),0,1,sum(deal_base_amount)),6) ForwardRate
--            from trtran001
--            where deal_record_Status not in (10200005,10200006)
--            and deal_Deal_type=25400001
--            and Deal_maturity_date <=datworkdate
--            group by to_char(deal_maturity_date,'Mon-YYYY'),
--            pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2),
--            deal_company_code,deal_location_code,DEAL_INIT_CODE,DEAL_BACKUP_DEAL,deal_buy_Sell,Deal_maturity_date) Forward
--            on Sdet.CompanyCode=Forward.CompanyCode
--            and Sdet.LocationCode=nvl(Forward.LocationCode,30299999)
--            and Sdet.Buysell=Forward.Buysell
--            and Sdet.CurrencyPair=Forward.CurrencyPair
--            and Sdet.TransMonth= Forward.MaturityMonth;
 select CompanyCode,LocationCode,SubProductCode,ProductCode,
        Buysell,TransMonth, CurrencyPair,MonthEndDate,
        round(sum(SettlementFCY/numdetail),2) SettlementFCY,
       max(SettlementRate) SettlementRate,round(sum(ProfitLoss/numdetail),2) ProfitLoss,
        max(round((((SettlementFCY *SettlementRate) + decode(Buysell,25300001,ProfitLoss,-1*ProfitLoss))/SettlementFCY),6)) SettlementRateWithPnL,
      round(sum(BudgetFCY/numdetail),2) BudgetFCY ,max(BudgetRate)BudgetRate, round(sum(BudgetQuote/numdetail),2) BudgetQuote ,
       round(sum(ForwardFCY/numdetail),2) ForwardFCY,max(ForwardRate) ForwardRate,
       0 FutureFCY, 0.00 FutureRate, 0 OptionFCY,
       0.00 FuturepnL, 0.00 ForwardPnl, 0.00 OptionPNL,
       round(sum((SettlementFCY * SettlementMTMRate))/
        sum(SettlementFCY),6) SettlementMTMRate
     -- avg(SettlementMTMRate) SettlementMTMRate
       --max(BudgetMTMRate) BudgetMTMRate,max(ForwardMTMRate)ForwardMTMRate
        from(
 select  Sdet.CompanyCode CompanyCode,Sdet.LocationCode LocationCode,Sdet.SubProductCode SubProductCode,Sdet.ProductCode ProductCode,
        Sdet.Buysell Buysell, Sdet.CurrencyPair CurrencyPair,Sdet.TransMonth TransMonth,Sdet.MonthEndDate MonthEndDate,Sdet.SettlementFCY SettlementFCY,
        Sdet.SettlementRate SettlementRate,Sdet.ProfitLoss ProfitLoss,
        round((((Sdet.SettlementFCY *Sdet.SettlementRate) + 
        decode(Sdet.Buysell,25300001,Sdet.ProfitLoss,-1*Sdet.ProfitLoss))
        /Sdet.SettlementFCY),6) SettlementRateWithPnL,
        Bdet.BudgetFcy BudgetFCY,Bdet.BudgetRate BudgetRate, Bdet.BudgetQuote BudgetQuote,
        Forward.ForwardFCY ForwardFCY,Forward.ForwardRate ForwardRate,
        0 FutureFCY, 0.00 FutureRate, 0 OptionFCY,
        0.00 FuturepnL, 0.00 ForwardPnl, 0.00 OptionPNL,SDet.SettlementMTMRate SettlementMTMRate,
--        sum((Sdet.SettlementFCY * SDet.SettlementMTMRate))/
--            sum(Sdet.SettlementFCY) SettlementMTMRate,
            BDet.BudgetMTMRate,Forward.ForwardMTMRate
            from (select deal_company_code CompanyCode, DEAL_DEAL_NUMBER ReferenceNumber,deal_location_code LocationCode,DEAL_INIT_CODE SubProductCode,
                     DEAL_BACKUP_DEAL ProductCode ,deal_buy_Sell Buysell,
                     pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2) CurrencyPair ,
                     to_char(cdel_cancel_date,'Mon-YYYY') TransMonth, 
                     last_day(cdel_cancel_date)MonthEndDate,
                     sum(cdel_cancel_amount) SettlementFCY,
                     round(sum(cdel_cancel_amount * cdel_cancel_rate) / decode(sum(cdel_cancel_amount),0,1,sum(cdel_cancel_amount)),6) SettlementRate,
                     sum(cdel_profit_loss) ProfitLoss,
                     avg(pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
                        cdel_cancel_date,deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
                        cdel_cancel_date,cdel_cancel_date)),
                        cdel_cancel_date)) SettlementMTMRate
                from trtran006 inner join trtran001
                on cdel_Deal_number= deal_deal_number
                where cdel_Record_Status not in (10200005,10200006)
                and deal_record_Status not in (10200005,10200006)
--                and cdel_cancel_date <=datworkdate
--                 and cdel_cancel_date >='01-Apr-18'
                group by to_char(cdel_cancel_date,'Mon-YYYY'),
                pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2),
                deal_company_code,deal_location_code,DEAL_INIT_CODE,DEAL_BACKUP_DEAL,deal_counter_party,
                deal_buy_Sell,cdel_cancel_date,DEAL_DEAL_NUMBER) SDet
-- 155 for export and 154 for import 
                    left outer join 
                    (select trad_company_code CompanyCode ,trad_location_code LocationCode, 33399999 SubProductCode,33899999 ProductCode,
                      decode(trad_import_export,25900154,25300001,25900155,25300002) Buysell, 
                      pkgreturncursor.fncgetdescription(trad_trade_currency,2) || '/' || pkgreturncursor.fncgetdescription(trad_local_currency,2) CurrencyPair ,
                      to_char(trad_maturity_date,'Mon-YYYY') TransMonth,
                      last_day(trad_maturity_date)MonthEndDate,
                      sum(trad_trade_fcy) BudgetFcy,round(sum(trad_trade_fcy*trad_trade_Rate)/sum(trad_trade_fcy),6) BudgetRate,
                      sum(trad_trade_fcy*trad_trade_Rate) BudgetQuote, 
                     45.56 BudgetMTMRate
                    from trtran002 where trad_import_export in (25900154,25900155)
                    and trad_maturity_date <=datworkdate
                    and trad_record_Status not in (10200005,10200006)
                    group by trad_company_code,trad_location_code, trad_import_export, 
                    trad_trade_currency,trad_local_currency, to_char(trad_reference_date,'Mon-YYYY'),trad_maturity_date)BDet
                    on Sdet.CompanyCode=BDet.CompanyCode
                    and Sdet.LocationCode=nvl(Bdet.LocationCode,30299999)
                    and Sdet.Buysell=Bdet.Buysell
                    and Sdet.CurrencyPair=Bdet.CurrencyPair
                    and Sdet.TransMonth= Bdet.TransMonth
            left outer join 
            (select deal_company_code CompanyCode,deal_location_code LocationCode,DEAL_INIT_CODE SubProductCode,
                 DEAL_BACKUP_DEAL ProductCode ,deal_buy_Sell Buysell,
            pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2) CurrencyPair ,
              to_char(Deal_maturity_date,'Mon-YYYY') MaturityMonth, 
              last_day(Deal_maturity_date)MonthEndDate,
            sum(deal_base_amount) ForwardFCY,
            round(sum(deal_base_amount * deal_exchange_rate) / decode(sum(deal_base_amount),0,1,sum(deal_base_amount)),6) ForwardRate,
            43.56 ForwardMTMRate
            from trtran001
            where deal_record_Status not in (10200005,10200006)
            and deal_Deal_type in(25400001,25400006)
            --and Deal_maturity_date <=datworkdate
            group by to_char(deal_maturity_date,'Mon-YYYY'),
            pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2),
            deal_company_code,deal_location_code,DEAL_INIT_CODE,DEAL_BACKUP_DEAL,deal_buy_Sell,Deal_maturity_date) Forward
            on Sdet.CompanyCode=Forward.CompanyCode
            and Sdet.LocationCode=nvl(Forward.LocationCode,30299999)
            and Sdet.Buysell=Forward.Buysell
            and Sdet.CurrencyPair=Forward.CurrencyPair
            and Sdet.TransMonth= Forward.MaturityMonth)
            where CompanyCode=30100001
--            and LocationCode=30200001
--            and Buysell=25300002
--            and BudgetFCY is not null
--            and BudgetRate is not null
            and ProductCode=33300001
            and SubProductCode=33800002
            --and rownum<20
            --and TransMonth in('Apr-2018','May-2018','Aug-2018','Jun-2018','Jul-2018','Sep-2018','Oct-2018','Nov-2018','Dec-2018','Jan-2019','Feb-2019','Mar-2019');
          group by CompanyCode,LocationCode,SubProductCode,ProductCode,
        Buysell,TransMonth, CurrencyPair,MonthEndDate
        order by MonthEndDate;
          Goto Process_End;
  End if;

   if numinfotype=REFSTOPLOSS then     
   open gencursor for 
   SELECT SystemReference,Currency,Bank,BuySell,DealerName,ExecuteDate,BaseAmount,OutstandingAmount
  SpotRate,ForwardRate,MarginRate,AllinRate,MaturityDate,Instrument,MTMPandL,MTMRate,BenchMarkType,
  --BuySellCode,
  TakeProfitRate,StopLossRate,TakeProfitPnL,StopLossPnL
  FROM(
  SELECT 
  DEAL_DEAL_NUMBER SystemReference,
  Pkgreturncursor.Fncgetdescription(DEAL_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(DEAL_OTHER_CURRENCY,2)Currency,
  Pkgreturncursor.Fncgetdescription(DEAL_COUNTER_PARTY,2)Bank,
  Pkgreturncursor.Fncgetdescription(DEAL_BUY_SELL,2)BuySell,
  DEAL_DEALER_NAME DealerName,
  deal_execute_date ExecuteDate,
  DEAL_BASE_AMOUNT BaseAmount,
  pkgForexProcess.fncGetOutstandingTransaction(deal_deal_number,deal_serial_number,1,1,'08-nov-18')OutstandingAmount,
  Deal_spot_rate SpotRate,
  Deal_forward_rate ForwardRate,
  deal_margin_rate MarginRate,
  deal_exchange_rate AllinRate,
  deal_maturity_date MaturityDate,
  'FORWARD' Instrument,
  Round(pkgreturnreport.fncgetprofitloss(pkgForexProcess.fncGetOutstandingTransaction(deal_deal_number,
            deal_serial_number,1,1,'08-nov-18'),
            pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
            '08-nov-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
            '08-nov-18',deal_maturity_date)),
            deal_maturity_date),
             DEAL_EXCHANGE_RATE, deal_buy_sell) *
            decode(deal_other_currency,30400003,1, pkgforexprocess.fncGetRate(deal_other_currency,30400003,
            '08-nov-18',deal_buy_sell,pkgForexProcess.fncAllotMonth(deal_counter_party,
            '08-nov-18',deal_maturity_date),deal_maturity_date)),2)MTMPandL,

   Round(pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
            '08-nov-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
            '08-nov-18',deal_maturity_date)),deal_maturity_date),6)MTMRate,
   'ALL' BenchMarkType,
  DEAL_BUY_SELL BuySellCode,
  decode (DEAL_BUY_SELL,25300001,DEAL_EXCHANGE_RATE + 0.50,25300002,DEAL_EXCHANGE_RATE - 0.50)TakeProfitRate,
  decode (DEAL_BUY_SELL,25300001,DEAL_EXCHANGE_RATE - 0.50,25300002,DEAL_EXCHANGE_RATE + 0.50)StopLossRate,
  0 TakeProfitPnL,
   0 StopLossPnL
  FROM TRTRAN001 
   WHERE DEAL_EXECUTE_DATE <= '08-nov-18'
  AND ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >'08-nov-18')
                            or DEAL_PROCESS_COMPLETE = 12400002)
  AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
  UNION ALL
  SELECT 
  CFUT_DEAL_NUMBER SystemReference,
  Pkgreturncursor.Fncgetdescription(CFUT_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(CFUT_OTHER_CURRENCY,2)Currency,
  Pkgreturncursor.Fncgetdescription(CFUT_EXCHANGE_CODE,2)Bank,
  Pkgreturncursor.Fncgetdescription(CFUT_BUY_SELL,2)BuySell,
  CFUT_DEALER_NAME DealerName,
  CFUT_EXECUTE_DATE ExecuteDate,
  CFUT_BASE_AMOUNT BaseAmount,
  (Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'08-nov-18' )*1000)OutstandingAmount,
  CFUT_SPOT_RATE SpotRate,
  CFUT_FORWARD_RATE ForwardRate,
  CFUT_BANK_MARGIN MarginRate,
  CFUT_EXCHANGE_RATE AllinRate,
  CFUT_MATURITY_DATE MaturityDate,
  'FUTURES' Instrument,
  ROUND(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'08-nov-18' )*1000),
            Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'08-nov-18'),
            Cfut_Exchange_Rate,Cfut_Buy_Sell) *
            Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
            CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, '08-nov-18')),2)MTMPandL,
  Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'08-nov-18') MTMRate,
  'ALL' BenchMarkType,
  CFUT_BUY_SELL BuySellCode,
  decode (CFUT_BUY_SELL,25300001,CFUT_EXCHANGE_RATE + 0.50,25300002,CFUT_EXCHANGE_RATE - 0.50)TakeProfitRate,
  decode (CFUT_BUY_SELL,25300001,CFUT_EXCHANGE_RATE - 0.50,25300002,CFUT_EXCHANGE_RATE + 0.50)StopLossRate ,
  0 TakeProfitPnL,
   0 StopLossPnL
  FROM TRTRAN061
  WHERE CFUT_EXECUTE_DATE <= datWorkDate
  AND ((CFUT_PROCESS_COMPLETE = 12400001  and CFUT_COMPLETE_DATE >'08-nov-18')
                            or CFUT_PROCESS_COMPLETE = 12400002)
                            AND CFUT_RECORD_STATUS NOT IN(10200005,10200006)
  AND CFUT_RECORD_STATUS NOT IN(10200005,10200006))
  WHERE ((BenchMarkType = 'StopLoss' 
  AND ((BuySellCode = 25300001 and MTMRate <= StopLossRate) OR (BuySellCode = 25300002 and MTMRate >= StopLossRate)))
  OR (BenchMarkType = 'TakeProfit' 
  AND ((BuySellCode = 25300001 and MTMRate >= TakeProfitRate) OR (BuySellCode = 25300002 and MTMRate <= TakeProfitRate)))
  OR  (BenchMarkType = 'ALL'));
     Goto Process_End;
 end if;


    if numinfotype=REFDashboardBudget then

     varOperation := 'Get Number to convert the Amount FCY into';
     select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

 open gencursor for
     select DEPN_DEALER_ActualNAME DEPN_DEALER_NAME,
     DEPN_DEALER_NAME "DealerId",
           ROUND(nvl( sum(( case when DEPN_instrument=32200001 then depn_Postion_USD else 0 end)) ,0)/numdetail, 2) FWDPostion,
            ROUND(nvl( sum(( case when DEPN_instrument=32200002 then depn_Postion_USD else 0 end)),0)/numdetail, 2) FURPostion,
             ROUND(nvl( sum(( case when DEPN_instrument=32200003 then depn_Postion_USD else 0 end)),0)/numdetail, 2) OPTPostion,
             ROUND(sum(depn_Postion_USD)/numdetail, 2) TotalPosition,
              ROUND(nvl(DEPN_Dealer_budget,0)/numdetail, 2) DealerBudget,
              ROUND(abs(nvl(DEPN_Dealer_budget,0)- sum(depn_Postion_USD))/numdetail, 2) OverByBudget
--               sum(DEPN_TOTAL_POSITION*depn_Position_RATE) TotalPosition,
--              DEPN_Dealer_budget- sum(DEPN_TOTAL_POSITION*depn_Position_RATE) OverByBudget
   from TRSYSTEM997_DEALERPOSITION
   where DEPN_DEALER_NAME not in ('ALL','Pawan')
   group by DEPN_DEALER_NAME,DEPN_DEALER_ActualNAME,DEPN_Dealer_budget;
     Goto Process_End;
 end if;

   if numinfotype=refDashboardPosition then
     varOperation := 'NOP Dash Board Data Extract';
    --    prcDealerPostion('05-OCT-18');
    BEGIN
           vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',vartemp,GConst.TYPENODEPATH);
    exception
       when others then
       vartemp:='ALL';
    end;

    BEGIN
          vartemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',vartemp,GConst.TYPENODEPATH);
    exception
      when others then
       vartemp1:='ALL';
    end;

    BEGIN
        vartemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',vartemp,GConst.TYPENODEPATH);
    exception
      when others then
       vartemp4:='ALL';
    end;    

    BEGIN
          vartemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',vartemp,GConst.TYPENODEPATH);
    exception
       when others then
       vartemp2:='ALL';
    end;    

    BEGIN
          vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',vartemp,GConst.TYPENODEPATH);
    exception
      when others then
       vartemp3:='ALL';
    end;    


    prcDealerPostion (datWorkdate,vartemp,vartemp1,vartemp4,varUserId,vartemp2, vartemp3,varEntity);

     varOperation := 'Get Number to convert the Amount FCY into';
      select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

 open gencursor for
    SELECT 
--         Pkgreturncursor.Fncgetdescription(DEPN_CURRENCY_CODE,2)||Pkgreturncursor.Fncgetdescription(DEPN_OTHER_CURRENCY,2)"Currency",
         Pkgreturncursor.Fncgetdescription(DEPN_CURRENCY_CODE,2)|| '/' ||Pkgreturncursor.Fncgetdescription(DEPN_OTHER_CURRENCY,2)"Currency",
         DEPN_DEALER_ActualNAME "DealerName",
         DEPN_DEALER_NAME "DealerId",
         NVL(ROUND(SUM(DEPN_OPEN_POSITION*DEPN_HOLDING_RATE)/SUM(DEPN_OPEN_POSITION),6),0) "HoldingRate",
         ROUND(NVL(SUM(DEPN_OPEN_POSITION)/numdetail,0),2) "OpenPosition",
         ROUND(NVL(SUM(DEPN_TOTAL_SELL),0)/numdetail,2) "TotalSell",
         ROUND(NVL(SUM(DEPN_TOTAL_BUY),0)/numdetail,2) "TotalBuy",
         ROUND(NVL(SUM(DEPN_TOTAL_POSITION),0)/numdetail,2) "TotalPostion",
         ROUND(NVL(SUM(DEPN_MTMPANDL_INR),0)/numdetail, 2) "MTMPandL",
         ROUND(NVL(SUM(DEPN_DTD),0)/numdetail, 2) "PLDTD",
         ROUND(NVL(SUM(DEPN_MTD),0)/numdetail,2) "PLMTD",
         ROUND(NVL(SUM(DEPN_QTD),0)/numdetail,2) "PLQTD",
         ROUND(NVL(SUM(DEPN_YTD),0)/numdetail,2) "PLYTD",
         ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_TOTAL_POSITION else 0 end),0)/numdetail, 2) FWDPostion,
         ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_TOTAL_POSITION else 0 end),0)/numdetail, 2) FURPostion,
         ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_TOTAL_POSITION else 0 end),0)/numdetail, 2) OPTPostion,
         ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) MTMFWD,
         ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) MTMFUR,
         ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) MTMOPT,
         ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_YTD else 0 end),0)/numdetail, 2) PLFWD,
         ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_YTD else 0 end),0)/numdetail, 2) PLFUR,
         ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_YTD else 0 end),0)/numdetail, 2) PLOPT
        FROM TRSYSTEM997_DEALERPOSITION
       -- where DEPN_DEALER_NAME not in ('Pawan')
        GROUP BY DEPN_CURRENCY_CODE,DEPN_OTHER_CURRENCY,DEPN_DEALER_ActualNAME, DEPN_DEALER_NAME;
     Goto Process_End;
 end if;     
if numinfotype=REFDashboardDealer then

     varOperation := 'Get Number to convert the Amount FCY into';
       select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

 open gencursor for
     select  DEPN_DEALER_ActualNAME DEPN_DEALER_NAME,
            ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) MTMFWD,
            ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) MTMFUR,
            ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) MTMOPT,
            ROUND(sum(DEPN_MTMPANDL_INR)/numdetail, 2) MTMTOT,
            ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_YTD else 0 end),0)/numdetail, 2) PLFWD,
            ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_YTD else 0 end),0)/numdetail, 2) PLFUR,
            ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_YTD else 0 end),0)/numdetail, 2) PLOPT,
            ROUND(sum(nvl(DEPN_YTD,0))/numdetail, 2) PLTOT
   from TRSYSTEM997_DEALERPOSITION
   where DEPN_DEALER_NAME not in ('ALL','Pawan')
   group by DEPN_DEALER_ActualNAME;
     Goto Process_End;
 end if;




     if numinfotype=REFDashboardPortfolio then

     varOperation := 'Get Number to convert the Amount FCY into';
       select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

 open gencursor for
    select pkgreturncursor.fncgetdescription(DEPN_BACKUP_DEAL,2) Book,
          --  pkgreturncursor.fncgetdescription(DEPN_INIT_CODE,2) Strategy,
           ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_YTD else 0 end) ,0)/numdetail, 2) FWDYTD,
           ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_YTD else 0 end),0)/numdetail, 2) FURYTD,
           ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_YTD else 0 end),0)/numdetail, 2) OPTYTD,
           ROUND(sum(DEPN_YTD) /numdetail, 2) TotalYTD,
           ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_MTMPANDL_INR else 0 end) ,0)/numdetail, 2) FWDMTM,
           ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) FURMTM,
           ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) OPTMTM,
           ROUND(sum(DEPN_MTMPANDL_INR) /numdetail, 2) TotalMTM
   from TRSYSTEM997_DEALERPOSITION
   where DEPN_DEALER_NAME != 'ALL'
   group by DEPN_BACKUP_DEAL,DEPN_INIT_CODE;
     Goto Process_End;
 end if;




--   if numinfotype=REFDashboardPosition_detail then
--     varOperation := 'NOP Dash Board Data Extract';
--     --'15-oct-18' := trunc('15-oct-18');
--     open gencursor for 
--        SELECT 
--        DEAL_DEAL_NUMBER "SystemReference",
--        Pkgreturncursor.Fncgetdescription(DEAL_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(DEAL_OTHER_CURRENCY,2)"Currency",
--        Pkgreturncursor.Fncgetdescription(DEAL_COUNTER_PARTY,2)"Bank",
--        Pkgreturncursor.Fncgetdescription(DEAL_BUY_SELL,2)"BuySell",
--        DEAL_DEALER_NAME "DealerName",
--        deal_execute_date "ExecuteDate",
--        DEAL_BASE_AMOUNT "BaseAmount",
--        pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'15-oct-18')"OutstandingAmount",
--        Deal_spot_rate "SpotRate",
--        Deal_forward_rate "ForwardRate",
--        deal_margin_rate "MarginRate",
--        deal_exchange_rate "AllinRate",
--        deal_maturity_date "MaturityDate",
--        'FORWARD' "Instrument",
--        'OpenPosition' "OpenPosition",
--         pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
--                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
--                  '15-oct-18',deal_maturity_date)),
--                  deal_maturity_date)"MTMRate", 
--        ROUND(PKGRETURNREPORT.fncgetprofitloss(pkgForexProcess.fncGetOutstanding(deal_deal_number,
--                  deal_serial_number,1,1,'15-oct-18'),
--                  pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
--                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
--                  '15-oct-18',deal_maturity_date)),
--                  deal_maturity_date),
--                   DEAL_EXCHANGE_RATE, deal_buy_sell),2)"MTMPandL",                  
--         DECODE(deal_other_currency, 30400003,1, pkgforexprocess.fncgetrate(deal_other_currency, 30400003,'15-oct-18',
--         deal_buy_sell,pkgforexprocess.fncAllotMonth (DEAL_COUNTER_PARTY, '15-oct-18', deal_maturity_date),deal_maturity_date))"WashRate",       
--        Round(PKGRETURNREPORT.fncgetprofitloss(pkgForexProcess.fncGetOutstanding(deal_deal_number,
--                  deal_serial_number,1,1,'15-oct-18'),
--                  pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
--                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
--                  '15-oct-18',deal_maturity_date)),
--                  deal_maturity_date),
--                   DEAL_EXCHANGE_RATE, deal_buy_sell) *
--                  decode(deal_other_currency,30400003,1, pkgforexprocess.fncGetRate(deal_other_currency,30400003,
--                  '15-oct-18',deal_buy_sell,pkgForexProcess.fncAllotMonth(deal_counter_party,
--                  '15-oct-18',deal_maturity_date),deal_maturity_date)),2)"MTMPandLINR"
--        FROM TRTRAN001 
--         WHERE (((  'OpenPosition' = 'OpenPosition') and  (DEAL_EXECUTE_DATE <= '15-oct-18'))
--                or ((  'Buy' = 'Buy') and  (DEAL_EXECUTE_DATE = '15-oct-18'))
--                or ((  'Sell' = 'Sell') and  (DEAL_EXECUTE_DATE = '15-oct-18')))
--        AND ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >'15-oct-18')
--                                  or DEAL_PROCESS_COMPLETE = 12400002)
--        AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--        UNION ALL
--        SELECT 
--        CFUT_DEAL_NUMBER "SystemReference",
--        Pkgreturncursor.Fncgetdescription(CFUT_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(CFUT_OTHER_CURRENCY,2)"Currency",
--        Pkgreturncursor.Fncgetdescription(CFUT_EXCHANGE_CODE,2)"Bank",
--        Pkgreturncursor.Fncgetdescription(CFUT_BUY_SELL,2)"BuySell",
--        CFUT_DEALER_NAME "DealerName",
--        CFUT_EXECUTE_DATE "ExecuteDate",
--        CFUT_BASE_AMOUNT "BaseAmount",
--        (Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000)"OutstandingAmount",
--        CFUT_SPOT_RATE "SpotRate",
--        CFUT_FORWARD_RATE "ForwardRate",
--        CFUT_BANK_MARGIN "MarginRate",
--        CFUT_EXCHANGE_RATE "AllinRate",
--        CFUT_MATURITY_DATE "MaturityDate",
--        'FUTURES' "Instrument",
--        'OpenPosition' "OpenPosition",
--        Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18') "MTMRate", 
--        Round(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000),
--                  Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18'),
--                  Cfut_Exchange_Rate,Cfut_Buy_Sell),2)"MTMPandL",        
--         Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
--                  CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, '15-oct-18')) "WashRate",       
--        ROUND(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000),
--                  Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18'),
--                  Cfut_Exchange_Rate,Cfut_Buy_Sell) *
--                  Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
--                  CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, '15-oct-18')),2)"MTMPandL"
--        FROM TRTRAN061
--        WHERE (((  'OpenPosition' = 'OpenPosition') and  (CFUT_EXECUTE_DATE <= '15-oct-18'))
--                or ((  'Buy' = 'Buy') and  (CFUT_EXECUTE_DATE = '15-oct-18'))
--                or ((  'Sell' = 'Sell') and  (CFUT_EXECUTE_DATE = '15-oct-18')))
--        AND ((CFUT_PROCESS_COMPLETE = 12400001  and CFUT_COMPLETE_DATE >'15-oct-18')
--                                  or CFUT_PROCESS_COMPLETE = 12400002)
--                                  AND CFUT_RECORD_STATUS NOT IN(10200005,10200006)
--        AND CFUT_RECORD_STATUS NOT IN(10200005,10200006);
--
--     Goto Process_End;
-- end if;
 if numinfotype=REFDashboardPosition_detail then
     varOperation := 'Dealer Position Dash Board Data Extract';
     --'15-oct-18' := trunc('15-oct-18');
          BEGIN
           vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/Currency',vartemp,GConst.TYPENODEPATH); --currencypair
           Exception
            when others then
              vartemp := 'NA';
       End;
        BEGIN
           vartemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/DealerName',vartemp1,GConst.TYPENODEPATH);--DealerName
           Exception
            when others then
              vartemp1 := 'NA';
       End;
       BEGIN
           vartemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/BuySell',vartemp2,GConst.TYPENODEPATH);--BuySell
           Exception
            when others then
              vartemp2 := 'NA';
       End;
        BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/Position',vartemp3,GConst.TYPENODEPATH);--Openposition
           Exception
            when others then
              vartemp3 := 'NA';
       End;      
      -- insert into temp values(vartemp||vartemp1||vartemp2||vartemp3,'Haritest');commit;
     open gencursor for 
     select "SystemReference","Currency","Bank","BuySell","DealerName","ExecuteDate","BaseAmount","OutstandingAmount","SpotRate","ForwardRate",
                "MarginRate","AllinRate","MaturityDate","Instrument","OpenPosition","MTMRate","MTMPandL","WashRate","MTMPandLINR" from(
        SELECT 
        DEAL_DEAL_NUMBER "SystemReference",
        Pkgreturncursor.Fncgetdescription(DEAL_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(DEAL_OTHER_CURRENCY,2)"Currency",
        Pkgreturncursor.Fncgetdescription(DEAL_COUNTER_PARTY,2)"Bank",
        Pkgreturncursor.Fncgetdescription(DEAL_BUY_SELL,2)"BuySell",
        DEAL_DEALER_NAME "DealerName",
        deal_execute_date "ExecuteDate",
        DEAL_BASE_AMOUNT "BaseAmount",
        pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'15-oct-18')"OutstandingAmount",
        Deal_spot_rate "SpotRate",
        Deal_forward_rate "ForwardRate",
        deal_margin_rate "MarginRate",
        deal_exchange_rate "AllinRate",
        deal_maturity_date "MaturityDate",
        'FORWARD' "Instrument",
        'OpenPosition' "OpenPosition",
         pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
                  '15-oct-18',deal_maturity_date)),
                  deal_maturity_date)"MTMRate", 
        ROUND(PKGRETURNREPORT.fncgetprofitloss(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                  deal_serial_number,1,1,'15-oct-18'),
                  pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
                  '15-oct-18',deal_maturity_date)),
                  deal_maturity_date),
                   DEAL_EXCHANGE_RATE, deal_buy_sell),2)"MTMPandL",                  
         DECODE(deal_other_currency, 30400003,1, pkgforexprocess.fncgetrate(deal_other_currency, 30400003,'15-oct-18',
         deal_buy_sell,pkgforexprocess.fncAllotMonth (DEAL_COUNTER_PARTY, '15-oct-18', deal_maturity_date),deal_maturity_date))"WashRate",       
        Round(PKGRETURNREPORT.fncgetprofitloss(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                  deal_serial_number,1,1,'15-oct-18'),
                  pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
                  '15-oct-18',deal_maturity_date)),
                  deal_maturity_date),
                   DEAL_EXCHANGE_RATE, deal_buy_sell) *
                  decode(deal_other_currency,30400003,1, pkgforexprocess.fncGetRate(deal_other_currency,30400003,
                  '15-oct-18',deal_buy_sell,pkgForexProcess.fncAllotMonth(deal_counter_party,
                  '15-oct-18',deal_maturity_date),deal_maturity_date)),2)"MTMPandLINR"
        FROM TRTRAN001 
         WHERE (((  'OpenPosition' = 'OpenPosition') and  (DEAL_EXECUTE_DATE <= '15-oct-18'))
                or ((  'Buy' = 'Buy') and  (DEAL_EXECUTE_DATE = '15-oct-18'))
                or ((  'Sell' = 'Sell') and  (DEAL_EXECUTE_DATE = '15-oct-18')))
        AND ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >'15-oct-18')
                                  or DEAL_PROCESS_COMPLETE = 12400002)
        AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
        UNION ALL
        SELECT 
        CFUT_DEAL_NUMBER "SystemReference",
        Pkgreturncursor.Fncgetdescription(CFUT_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(CFUT_OTHER_CURRENCY,2)"Currency",
        Pkgreturncursor.Fncgetdescription(CFUT_EXCHANGE_CODE,2)"Bank",
        Pkgreturncursor.Fncgetdescription(CFUT_BUY_SELL,2)"BuySell",
        CFUT_DEALER_NAME "DealerName",
        CFUT_EXECUTE_DATE "ExecuteDate",
        CFUT_BASE_AMOUNT "BaseAmount",
        (Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000)"OutstandingAmount",
        CFUT_SPOT_RATE "SpotRate",
        CFUT_FORWARD_RATE "ForwardRate",
        CFUT_BANK_MARGIN "MarginRate",
        CFUT_EXCHANGE_RATE "AllinRate",
        CFUT_MATURITY_DATE "MaturityDate",
        'FUTURES' "Instrument",
        'OpenPosition' "OpenPosition",
        Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18') "MTMRate", 
        Round(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000),
                  Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18'),
                  Cfut_Exchange_Rate,Cfut_Buy_Sell),2)"MTMPandL",        
         Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
                  CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, '15-oct-18')) "WashRate",       
        ROUND(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000),
                  Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18'),
                  Cfut_Exchange_Rate,Cfut_Buy_Sell) *
                  Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
                  CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, '15-oct-18')),2)"MTMPandL"
        FROM TRTRAN061
        WHERE (((  'OpenPosition' = 'OpenPosition') and  (CFUT_EXECUTE_DATE <= '15-oct-18'))
                or ((  'Buy' = 'Buy') and  (CFUT_EXECUTE_DATE = '15-oct-18'))
                or ((  'Sell' = 'Sell') and  (CFUT_EXECUTE_DATE = '15-oct-18')))
        AND ((CFUT_PROCESS_COMPLETE = 12400001  and CFUT_COMPLETE_DATE >'15-oct-18')
                                  or CFUT_PROCESS_COMPLETE = 12400002)
                                  AND CFUT_RECORD_STATUS NOT IN(10200005,10200006)
        AND CFUT_RECORD_STATUS NOT IN(10200005,10200006)) 
        where  "Currency"=decode(vartemp,'NA',"Currency",vartemp)
            and "OpenPosition"=decode(vartemp3,'NA',"OpenPosition",vartemp3)
            and "BuySell"=decode(vartemp2,'NA',"BuySell",vartemp2)
            and "DealerName"=decode(vartemp1,'NA',"DealerName",vartemp1);
     Goto Process_End;
 end if;

 if numinfotype=REFPOSITIONGAPVIEWNEW then
    varOperation := 'Extraction Position GAP View';
--    vartemp1 := gconst_tr.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
--    vartemp := gconst_tr.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
--    vartemp3 := gconst_tr.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
--    vartemp4 := gconst_tr.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
--    vartemp5 := gconst_tr.fncxmlextract(xmldoc, 'LocationCode', vartemp5);
--    numCode1 := gconst_tr.fncxmlextract(xmldoc, 'ConvertInto', numCode1);
--    numCode2 := gconst_tr.fncxmlextract(xmldoc, 'LocalCurrency', numCode2);

--    numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate,
--                 vartemp,vartemp1,vartemp3,vartemp4,vartemp5,
--                 numCode1,numCode2);



  Open GenCursor for  
 select (case when ExposureType='Inflow' then 1 
               when ExposureType='Hedge Sell' then 2 
               when exposureType='Outflow' then 1 
               when exposureType ='Hedge Buy' then 2 end ) "ExposureOrder",
           (case when ExposureType='Inflow' then 1 
               when ExposureType='Hedge Sell' then 1 
               when exposureType='Outflow' then 2 
               when exposureType ='Hedge Buy' then 2 end ) "ExposureSubOrder",
        ExposureType as "ExposureType",
        sum(Forward1) "Forward1",
        Nvl(case when sum(AmountLocal1) > 0 then
        Round(sum(AmountLocal1)/sum(AmountFCY1),6)
        end,0) as "BenchmarkRate1" ,
        Nvl(Round(case when sum(AmountMTMLocal1) > 0 then
        Round(sum(AmountMTMLocal1)/sum(AmountFCY1),6) 
        End,6),0) as "MTMRate1",
        sum(Forward2) "Forward2",
        Nvl(case when sum(AmountLocal2) > 0 then
        Round(sum(AmountLocal2)/sum(AmountFCY2),6) 
        end,0)  as "BenchmarkRate2" ,
        Nvl(case when sum(AmountMTMLocal2) > 0 then        
        Round(sum(AmountMTMLocal2)/sum(AmountFCY2),6) end,0) as "MTMRate2",
        sum(Forward3) "Forward3",
        Nvl(case when sum(AmountLocal3) > 0 then
        Round(sum(AmountLocal3)/sum(AmountFCY3),6) end,0) as "BenchmarkRate3" ,
        Nvl(case when sum(AmountMTMLocal3) > 0 then        
        Round(sum(AmountMTMLocal3)/sum(AmountFCY3),6) end,0) as "MTMRate3",

        sum(Forward4) "Forward4",
        Nvl(case when sum(AmountLocal4) > 0 then        
        Round(sum(AmountLocal4)/sum(AmountFCY4),6) end,0) as "BenchmarkRate4" ,
        Nvl(case when sum(AmountMTMLocal4) > 0 then        
        Round(sum(AmountMTMLocal4)/sum(AmountFCY4),6)end,0) as "MTMRate4",

        sum(Forward5) "Forward5",
        Nvl(case when sum(AmountLocal5) > 0 then          
        Round(sum(AmountLocal5)/sum(AmountFCY5),6) end,0) as "BenchmarkRate5" ,
        Nvl(case when sum(AmountMTMLocal5) > 0 then  
        Round(sum(AmountMTMLocal5)/sum(AmountFCY5),6) end,0) as "MTMRate5",

        sum(Forward6) "Forward6",
        Nvl(case when sum(AmountLocal6) > 0 then 
        Round(sum(AmountLocal6)/sum(AmountFCY6),6) end,0) as "BenchmarkRate6" ,
        Nvl(case when sum(AmountMTMLocal6) > 0 then 
        Round(sum(AmountMTMLocal6)/sum(AmountFCY6),6) end,0) as "MTMRate6",

        sum(Forward7) "Forward7",
        Nvl(case when sum(AmountLocal7) > 0 then 
        Round(sum(AmountLocal7)/sum(AmountFCY7),6) end,0) as "BenchmarkRate7",
        Nvl(case when sum(AmountMTMLocal7) > 0 then 
        Round(sum(AmountMTMLocal7)/sum(AmountFCY7),6) end,0) as "MTMRate7",

        sum(Forward8) "Forward8",
        Nvl(case when sum(AmountLocal8) > 0 then 
        Round(sum(AmountLocal8)/sum(AmountFCY8),6) end,0) as "BenchmarkRate8",
        Nvl(case when sum(AmountMTMLocal8) > 0 then 
        Round(sum(AmountMTMLocal8)/sum(AmountFCY8),6) end,0) as "MTMRate8",    

        sum(Forward9) "Forward9",
        Nvl(case when sum(AmountLocal9) > 0 then 
        Round(sum(AmountLocal9)/sum(AmountFCY9),6) end,0) as "BenchmarkRate9",
        Nvl(case when sum(AmountMTMLocal9) > 0 then 
        Round(sum(AmountMTMLocal9)/sum(AmountFCY9),6) end,0) as "MTMRate9",        

        sum(Forward10) "Forward10",
        Nvl(case when sum(AmountLocal10) > 0 then 
        Round(sum(AmountLocal10)/sum(AmountFCY10),6) end,0) as "BenchmarkRate10",
        Nvl(case when sum(AmountMTMLocal10) > 0 then 
        Round(sum(AmountMTMLocal10)/sum(AmountFCY10),6) end,0) as "MTMRate10",     

        sum(Forward11) "Forward11",
        Nvl(case when sum(AmountLocal11) > 0 then 
        Round(sum(AmountLocal11)/sum(AmountFCY11),6) end,0) as "BenchmarkRate11",
        Nvl(case when sum(AmountMTMLocal11) > 0 then 
        Round(sum(AmountMTMLocal11)/sum(AmountFCY11),6) end,0) as "MTMRate11", 

        sum(Forward12) "Forward12",
        Nvl(case when sum(AmountLocal12) > 0 then 
        Round(sum(AmountLocal12)/sum(AmountFCY12),6) end,0) as "BenchmarkRate12",
        Nvl(case when sum(AmountMTMLocal12) > 0 then 
        Round(sum(AmountMTMLocal12)/sum(AmountFCY12),6) end,0) as "MTMRate12",
        sum(Forward1 + Forward2 + Forward3 + Forward4 + Forward5 + Forward6 +
        Forward7 + Forward8 + Forward9 + Forward10 +Forward11 + Forward12) as "Total"
        from(
    select 
     ExposureType ExposureType ,
      (decode( DueDays,0,AmountFCY,0)) Forward1,
      decode(DueDays,0,AmountLocal,0)AmountLocal1,
      decode(DueDays,0,AmountFCY,0) AmountFCY1,
      decode(DueDays,0,AmountMTMLocal,0)AmountMTMLocal1,

      (decode( DueDays,1,AmountFCY,0)) Forward2,
      decode(DueDays,1,AmountLocal,0)AmountLocal2,
      decode(DueDays,1,AmountFCY,0) AmountFCY2,
      decode(DueDays,1,AmountMTMLocal,0) AmountMTMLocal2,

      (decode( DueDays,2,AmountFCY,0)) Forward3,
      decode( DueDays,2,AmountLocal,0) AmountLocal3,
      decode( DueDays,2,AmountFCY,0) AmountFCY3,
      decode( DueDays,2,AmountMTMLocal,0)AmountMTMLocal3,

      (decode( DueDays,3,AmountFCY,0)) Forward4,
      decode( DueDays,3,AmountLocal,0) AmountLocal4,
      decode( DueDays,3,AmountFCY,0) AmountFCY4,
      decode( DueDays,3,AmountMTMLocal,0)AmountMTMLocal4,

      (decode( DueDays,4,AmountFCY,0)) Forward5,
      decode( DueDays,4,AmountLocal,0)AmountLocal5,
      decode( DueDays,4,AmountFCY,0) AmountFCY5,
      decode( DueDays,4,AmountMTMLocal,0) AmountMTMLocal5,

      (decode( DueDays,5,AmountFCY,0)) Forward6,
      decode( DueDays,5,AmountLocal,0)AmountLocal6,
      decode( DueDays,5,AmountFCY,0) AmountFCY6,
      decode( DueDays,5,AmountMTMLocal,0)AmountMTMLocal6,

      (decode( DueDays,6,AmountFCY,0)) Forward7,
      decode( DueDays,6,AmountLocal,0)AmountLocal7,
      decode( DueDays,6,AmountFCY,0) AmountFCY7,
      decode( DueDays,6,AmountMTMLocal,0)AmountMTMLocal7,

      (decode( DueDays,7,AmountFCY,0)) Forward8,
      decode( DueDays,7,AmountLocal,0)AmountLocal8,
      decode( DueDays,7,AmountFCY,0) AmountFCY8,
      decode( DueDays,7,AmountMTMLocal,0)AmountMTMLocal8,


      (decode( DueDays,8,AmountFCY,0)) Forward9,
      decode( DueDays,8,AmountLocal,0)AmountLocal9,
      decode( DueDays,8,AmountFCY,0) AmountFCY9,
      decode( DueDays,8,AmountMTMLocal,0) AmountMTMLocal9,

      (decode( DueDays,9,AmountFCY,0)) Forward10,
      decode( DueDays,9,AmountLocal,0)AmountLocal10,
      decode( DueDays,9,AmountFCY,0) AmountFCY10,
      decode( DueDays,9,AmountMTMLocal,0)AmountMTMLocal10,

      (decode( DueDays,10,AmountFCY,0)) Forward11,
      decode( DueDays,10,AmountLocal,0)AmountLocal11,
      decode( DueDays,10,AmountFCY,0) AmountFCY11,
      decode( DueDays,10,AmountMTMLocal,0)AmountMTMLocal11,

      (decode( DueDays,11,AmountFCY,0)) Forward12,
      decode( DueDays,11,AmountLocal,0) AmountLocal12, 
      decode( DueDays,11,AmountFCY,0) AmountFCY12,
      decode( DueDays,11,AmountMTMLocal,0)AmountMTMLocal12
    from (select posn_company_code CompanyCode,posn_currency_code CurrencyCode,posn_product_code ProductCode,
         POSN_SUBPRODUCT_CODE SubProductCode,
         Posn_Account_Code Accountcode,
         Sum(CASE WHEN LENGTH(30400004)>8 THEN ABS(POSN_FUNCTIONAL_AMOUNT) ELSE Abs(Posn_Transaction_Amount) END)/1000000 Amountfcy,
        Sum((CASE WHEN LENGTH(30400004)>8 THEN ABS(POSN_LOCAL_AMOUNT) ELSE ABS(POSN_LOCAL_AMOUNT) END))/1000000 Amountlocal,
       nvl(sum((case when length(30400004)>8 then ABS(POSN_LOCAL_AMOUNT) else ABS(posn_transaction_amount)*POSN_MTM_RATE end)),0)/1000000 AmountMTMLocal,
         (case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
                      else
                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) DueDays,
         (case
           when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                      25900014,25900015,25900011,25900012) then 'Hedge Buy'
           when posn_account_code between 25900001 and 25900050 then  'Inflow'
           --    in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900026) then 'Inflow'
           when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                      25900085,25900074,25900075) then 'Hedge Sell'
            when posn_account_code between 25900051 and 25900099 then  'Outflow' end) ExposureType 
          --  in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900091) then 'Outflow' end) ExposureType
  from trsystem997
  where posn_transaction_amount!=0
  and POSN_ALLIN_RATE !=0
  AND POSN_ACCOUNT_CODE NOT IN(25900155,25900154,25900020,25900021,25900022,25900023,25900082,25900083,25900084,
                                      25900085,25900075)
 -- and instr(vartemp1,posn_currency_code)>0
 -- and posn_company_code=numcode2
 -- and posn_currency_code=numcode1
 -- and posn_product_code= decode( numcode3,33300000,posn_product_code,numcode3)
 -- and POSN_SUBPRODUCT_CODE= decode( numCode4,33800000,POSN_SUBPRODUCT_CODE,numCode4)

  group by posn_company_code,posn_currency_code,posn_product_code,POSN_SUBPRODUCT_CODE,posn_account_code,(case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
                      else
                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) ))
  group by ExposureType
  --group by CompanyCode,CurrencyCode,ExposureType,ProductCode,SubProductCode
  ORDER BY 1 ASC;



  goto process_end;

 end if;  

--  if numInfoType=REFPOSITIONGAPVIEWGRIDNEW then
--
--    --insert into temp values  ('Taken Values','FDd') ; commit;
--
--    varOperation := 'Extraction Position GAP View into new grid';
--    vartemp1 := gconst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
--    vartemp := gconst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
--    vartemp3 := gconst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
--    vartemp4 := gconst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
--
--
--       Open GenCursor for  
--          select (case when ExposureType='Export' then 1 
--               when ExposureType='Hedge Sell' then 2 
--               when exposureType='Import' then 1 
--               when exposureType ='Hedge Buy' then 2 end ) "ExposureOrder",
--           (case when ExposureType='Export' then 1 
--               when ExposureType='Hedge Sell' then 1
--               when exposureType='Import' then 2 
--               when exposureType ='Hedge Buy' then 2 end ) "ExposureSubOrder",
--            ExposureType "ExposureType",PKGRETURNCURSOR.fncgetdescription(POSN_COMPANY_CODE,2) "Company",
--                  PKGRETURNCURSOR.fncgetdescription(POSN_CURRENCY_CODE,2) "Currency",
--                  PKGRETURNCURSOR.fncgetdescription(posn_product_code,2) "Product",
--                  PKGRETURNCURSOR.fncgetdescription(POSN_SUBPRODUCT_CODE,2) "SubProduct",
--                  PKGRETURNCURSOR.fncgetdescription(POSN_ACCOUNT_CODE,2) "Account",
--                  POSN_REFERENCE_NUMBER "ReferenceNumber",
--                  POSN_REFERENCE_SERIAL "SerialNumber",
--                  POSN_REFERENCE_DATE "ReferenceDate",
--                  POSN_DEALER_ID "DealerID",
--                  PKGRETURNCURSOR.fncgetdescription(POSN_COUNTER_PARTY,2) "CounterParty",
--                  POSN_TRANSACTION_AMOUNT "TransactionAmount",
--                  POSN_ALLIN_RATE "FCYRate",
--                  POSN_USD_RATE "USDRate",
--                  POSN_LOCAL_AMOUNT "INRValue",
--                  POSN_FUNCTIONAL_AMOUNT "USDValue",
--                  POSN_M2M_USDRATE "M2MUSDRate",
--                  POSN_M2M_INRRATE "M2MINRRate",
--                  POSN_FUNCTIONAL_AMOUNT "RevalueUSD",
--                  POSN_LOCAL_AMOUNT "RevalueINR",
--                  POSN_POSITION_USD "PositionUSD",
--                  POSN_POSITION_INR "PositionINR",
--                  POSN_DUE_DATE "DueDate",
--                  --POSN_MATURITY_MONTH "MaturityMonth",
--                  PKGRETURNCURSOR.fncgetdescription(POSN_PRODUCT_CODE,2) "ProductCode",
--                  POSN_USER_ID "UserID",
--                  to_char(POSN_DUE_DATE,'MON-YY') "DueDate"
--                  from (select trsystem997.*,(case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900026) then 'Export'
--                           when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
--                                                      25900014,25900015,25900011,25900012) then 'Hedge Buy'
--                           when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900091) then 'Import'
--                           when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
--                                                      25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType
--                        from trsystem997
--                         where posn_transaction_amount!=0
--                          and POSN_ALLIN_RATE !=0
--                          and instr(vartemp1,posn_currency_code)>0);
--
--
--   --insert into temp values  ('Taken Values','FDd') ; commit;
--
--   Goto Process_End;
--
--  end if;

--    if  numInfoType = REFNOPDashBoardCurrenypairConsolidate then
--   varOperation := 'NOP Dash Board Data Extract';
--       BEGIN
--           varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           varTemp1 :='ALL';
--       End; 
--           BEGIN
--           varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           varTemp2 := 'ALL';
--       End; 
--           BEGIN
--           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp3,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           vartemp3 := 'ALL';
--       End; 
--           BEGIN
--           varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           varTemp4 := 'ALL';
--       End; 
--           BEGIN
--           varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           varTemp5 := 'ALL';
--       End; 
--
--
--       select PICK_SHORT_DESCRIPTION
--        into numdetail
--        from TRMASTER001
--        where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
--                            from TRSYSTEM051);
--        BEGIN
--           numcode1 := GConst.fncXMLExtract(xmlDoc,'//Param/BasisType',numcode1,GConst.TYPENODEPATH);
--        Exception
--        when others then
--           numcode1 := 5;
--        End; 
--        
--        BEGIN
--           numcode2 := GConst.fncXMLExtract(xmlDoc,'//Param/BasisTypeParam',numcode2,GConst.TYPENODEPATH);
--           if numcode2 = 91000001 then
--                numcode1 := 11;
--           elsif numcode2 = 91000002 then
--                numcode1 := 5;
--           elsif numcode2 = 91000003 then
--                numcode1 := 10;
--           elsif numcode2 = 91000004 then
--                numcode1 := 12; 
--           end if; 
--           GLOG.LOG_Write('numcode2 - ' || numcode2 );
--        Exception
--        when others then
--           numcode2 := 5;
--           GLOG.LOG_Write('numcode2 - ' || numcode2 );
--        End; 
--                   GLOG.LOG_Write('numcode1 - ' || numcode1 );
--     --   numdetail:=1000000;
--     prcNOP_DashBoard(varTemp3, numcode1);
--     
--   open gencursor for
-- select MaturityMonth  as "MaturityMonth" ,
--       round((Inflow/numdetail),2) "Inflow",round(Outflow/numdetail,2) "Outflow",
--        round((Inflow_Hedge/numdetail),2) "Inflow_Hedge" ,
--        round((Outflow_Hedge/numdetail),2) "Outflow_Hedge" ,
--        round((InflowCONV/numdetail),2) "InflowCONV",round(OutflowCONV/numdetail,2) "OutflowCONV",
--        round((Inflow_HedgeConv/numdetail),2) "Inflow_HedgeConv" ,
--        round((Outflow_HedgeConv/numdetail),2) "Outflow_HedgeConv" ,
--        (round((Inflow/numdetail),2) -round((Inflow_Hedge/numdetail),2) ) "InflowUnhedge",
--        (round(Outflow/numdetail,2)-round((Outflow_Hedge/numdetail),2))  "OutflowUnhedge",
--        round((Exposure_Gap/numdetail),2) "Exposure_Gap",
--        round((Hedge_Gap/numdetail),2) "Hedge_Gap",
--        round((OverAllGap/numdetail),2) "OverAllGap" ,HedgeRatio "HedgeRatio",
--        (case when Inflow_Budget_Rate!=0 then nvl(Inflow_Budget_Rate,MTMRate) else MTMRate end) "Inflow_Budget_Rate",
--        (case when Outflow_Budget_Rate!=0 then nvl(Outflow_Budget_Rate,MTMRate) else MTMRate end) "Outflow_Budget_Rate",
--        (case when Hedge_Buy_Rate!=0 then nvl(Hedge_Buy_Rate,MTMRate) else MTMRate end) "Hedge_Buy_Rate",
--        (case when Hedge_Sell_Rate!=0 then nvl(Hedge_Sell_Rate,MTMRate) else MTMRate end) "Hedge_Sell_Rate",
--        (case when Exposure_Rate!=0 then nvl(Exposure_Rate,MTMRate) else MTMRate end) "Exposure_Rate",
--        (case when Exposure_Hedge_Rate!=0 then nvl(Exposure_Hedge_Rate,MTMRate) else MTMRate end)  "Exposure_Hedge_Rate",
--        MTMRate "MTMRate",ExposureType "ExposureType",ImportExport "ImportExport",
--        MonthOrder "MonthOrder",
--        round((((Inflow_Budget_Rate-MTMRate)* 
--           (case when (Inflow-Inflow_Hedge)<0 then 0 else (Inflow-Inflow_Hedge) end) )/numdetail),2) "InflowPL",
--        round((((MTMRate-Outflow_Budget_Rate)* 
--             (case when (Outflow-Outflow_Hedge)<0 then 0 else (Outflow-Outflow_Hedge) end))/numdetail),2) "OutflowPL",
--        round((((Hedge_Sell_Rate-MTMRate)* Inflow_Hedge)/numdetail),2) "InflowHedgePL",
--        round((((MTMRate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "OutflowHedgePL",
--        round(((case when ExposureType='Inflow' then
--             (MTMRate-Exposure_Hedge_Rate)* Hedge_Gap
--             else (Exposure_Hedge_Rate-MTMRate)* Hedge_Gap end)/numdetail),2) "HedgeGapPL",
--        round(((case when ExposureType='OutFlow' then
--         (MTMRate-Exposure_Rate)* OverAllGap
--         else (Exposure_Rate-MTMRate)* OverAllGap end)/numdetail),2) "OverAllGapPL",
--         35 "RiskLimitFrom",
--         75 "RiskLimitTo",
--         round(case when NVL(Inflow_Hedge,0) != 0 and NVL(Inflow,0) !=0 then
--           ABS(((NVL(Inflow_Hedge,0)) / (NVL(Inflow,0))))*100 else 0 end) "InflowRatio",
--         round(case when (NVL(Outflow_Hedge,0)) != 0 and (NVL(Outflow,0)) !=0 then
--           ABS(((NVL(Outflow_Hedge,0)) / (NVL(Outflow,0))))*100 else 0 end) "OutflowRatio",
--           CurrencyPair "CurrencyPair",
--           pkgreturncursor.fncgetdescription(CurrencyPair,2) "CurrencyPairDesc",
--           (Hedge_Sell_Rate-Inflow_Budget_Rate)*Inflow_Hedge "InflowHedgeVsBudgetPL",
--                    (Inflow_Budget_Rate-Hedge_Buy_Rate)*Outflow_Hedge "OutflowHedgeVsBudgetPL",  
--                    (((Hedge_Sell_Rate-Inflow_Budget_Rate)*Inflow_Hedge)+
--                    (Inflow_Budget_Rate-Hedge_Buy_Rate)*Outflow_Hedge) "HedgeVsBudgetPL",
--                    round(((case when ExposureType='Inflow' then
--                    ((SPOTRATE-Inflow_Budget_Rate)* Exposure_Gap)
--                    else ((Outflow_Budget_Rate-SPOTRATE)* Exposure_Gap) end)/numdetail),2) "ExposureGapVsSpot",
--                    ((SPOTRATE-Inflow_Budget_Rate)* inflow)/numdetail "InflowVsSpot",
--                    ((Outflow_Budget_Rate-SPOTRATE)* outflow)/numdetail "OutflowVsSpot", 
--                    round(((case when ExposureType='Inflow' then
--                    ((nvl(SPOTRATE,0) * 0.95)-Exposure_Hedge_Rate)* Exposure_Gap
--                    else (Exposure_Hedge_Rate-(nvl(SPOTRATE,0) * 0.95))* Exposure_Gap end)/numdetail),2) "Impacton5PercAppreciationonGapinEXRate",
--                    round(((((nvl(SPOTRATE,0) * 0.95)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercAppInflowHedgeinEXRate",
--                    round(((( Hedge_Buy_Rate-(nvl(SPOTRATE,0) * 0.95))* inflow)/numdetail),2) "Impa5PercAppOutflowHedgeinEXRate",
--                    round(((((nvl(SPOTRATE,0) * 1.05)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercDepreInflowHedgeinEXRate",
--                    round(((( Hedge_Buy_Rate-(nvl(SPOTRATE,0) * 1.05))* inflow)/numdetail),2) "Impa5PercDepreOutflowHedgeinEXRate", 
--                    round(((case when ExposureType='Inflow' then
--                    ((nvl(SPOTRATE,0) * 1.05)-Exposure_Hedge_Rate)* Exposure_Gap
--                    else (Exposure_Hedge_Rate-(nvl(SPOTRATE,0) * 1.05))* Exposure_Gap end)/numdetail),2) "Impacton5PercDepreciationGapinExcRate",
--                    pkgreturncursor.fncgetdescription(AccountCodeGroup,2) "AccountCodeGroup"
--   from(
--      SELECT  POSN_MATURITY_MONTH MaturityMonth,
--           (ABS(NVL(POSN_INFLOW_AMOUNT,0))) Inflow,
--           (ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) Outflow,
--
--           (ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) Inflow_Hedge,
--           (ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) Outflow_Hedge,
--           (ABS(NVL(POSN_INFLOW_AMOUNTCONV,0))) InflowCONV,
--           (ABS(NVL(POSN_OUTFLOW_AMOUNTCONV,0))) OutflowCONV,
--
--           (ABS(NVL(POSN_INFLOWHEDGE_AMOUNTCONV,0))) Inflow_HedgeCONV,
--           (ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNTCONV,0))) Outflow_HedgeCONV,
--           (NVL(POSN_EXPOSURE_GAP,0)) Exposure_Gap,
--           (NVL(POSN_HEDGE_GAP,0)) Hedge_Gap,
--           (NVL(POSN_EXPOSURE_GAP,0)) + (NVL(POSN_HEDGE_GAP,0))OverAllGap,
--           round(case when (NVL(POSN_EXPOSURE_GAP,0)) != 0 and (NVL(POSN_HEDGE_GAP,0)) !=0 then
--           ABS(((NVL(POSN_HEDGE_GAP,0)) / (NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) HedgeRatio,
----           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) Inflow_Budget_Rate,
----           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  Outflow_Budget_Rate,
----           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))) Hedge_Buy_Rate,
----           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))) Hedge_Sell_Rate,
----           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  Exposure_Rate,
----           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) Exposure_Hedge_Rate,
----           avg(POSN_MTM_RATE) MTMRate,        
--       POSN_INFLOW_RATE Inflow_Budget_Rate,POSN_OUTFLOW_RATE Outflow_Budget_Rate,POSN_HEDGEBUY_RATE Hedge_Buy_Rate,
--       POSN_HEDGESELL_RATE Hedge_Sell_Rate,POSN_EXPOSURE_RATE Exposure_Rate,POSN_OVERALLHEDGE_RATE Exposure_Hedge_Rate,
--       POSN_MTM_RATE MTMRate,
--           --avg( pkgforexprocess.fncGPOSN_INFLOW_RATEetRate(30400004,30400003,'24-Jun-2020',25300001,0, to_date('01-' || POSN_MATURITY_MONTH),1)) MTMRate,
--           decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
--           0 ImportExport,
--           to_number(posn_month_order) MonthOrder,
--           POSN_CURRENCY_CODE CurrencyCode,POSN_FOR_CURRENCY ForCurrency,
--           POSN_CURRENCY_PAIR CurrencyPair,
--           pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,sysdate,25399999) SpotRate,
--           POSN_ACCOUNT_CODEGROUP AccountCodeGroup
--        FROM trsystem997_NOP
--        where (POSN_INFLOW_AMOUNT !=0 
--          or POSN_OUTFLOW_AMOUNT !=0 
--          or POSN_INFLOWHEDGE_AMOUNT!=0 
--          or POSN_OUTFLOWHEDGE_AMOUNT!=0)
--          and POSN_MATURITY_MONTH is not null)
----        --temp commented by hari  and posn_month_order >= to_char(sysdate,'YYYYMM')
----        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
----          group by to_number(posn_month_order),POSN_MATURITY_MONTH,POSN_IMPort_export,
----            POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,POSN_CURRENCY_PAIR)
--          ORDER BY to_number(MonthOrder);
--
--      Goto Process_End;
--  end if;


    -- added by supriya on 01/02/2022
 if numInfoType = REFGETFXHEDGEANALYSISDATA then
        varOperation := 'FX Hedge Analysis';  

        BEGIN
           varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp1 :='ALL';
       End; 
           BEGIN
           varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp2 := 'ALL';
       End; 
           BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp3,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp3 := 'ALL';
       End; 
           BEGIN
           varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp4 := 'ALL';
       End; 
           BEGIN
           varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp5 := 'ALL';
       End; 

        BEGIN
           dattemp := GConst.fncXMLExtract(xmlDoc,'//Param/AsonDate',dattemp,GConst.TYPENODEPATH);
        Exception
        when others then
           dattemp := trunc(sysdate);
        End; 

        BEGIN
           numcode2 := GConst.fncXMLExtract(xmlDoc,'//Param/BasisTypeParam',numcode2,GConst.TYPENODEPATH);
           if numcode2 = 91000001 then
                numcode1 := 13;
           elsif numcode2 = 91000002 then
                numcode1 := 6;
           elsif numcode2 = 91000003 then
                numcode1 := 6;
           elsif numcode2 = 91000004 then
                numcode1 := 9; 
           end if; 
           GLOG.LOG_Write('numcode2 - ' || numcode2 );
        Exception
        when others then
           numcode1 := 6;
           GLOG.LOG_Write('numcode2 - ' || numcode2 );
        End; 

		BEGIN
			dattemp1 := GConst.fncXMLExtract(xmlDoc,'//Param/FromDate',dattemp,GConst.TYPENODEPATH);
		Exception
		when others then
		   dattemp1 := null;
		End; 

		BEGIN
		   dattemp2 := GConst.fncXMLExtract(xmlDoc,'//Param/ToDate',dattemp,GConst.TYPENODEPATH);
		Exception
		when others then
		   dattemp2 := null;
		End;

        numcode := PKGFOREXPROCESS.fncPositionGenerate(to_date(dattemp),'ALL',varTemp1,varTemp3,varTemp4,varTemp5,varTemp2);
        prcNOP_DashBoard(varUserID, numcode1, dattemp1, dattemp2);

        select PICK_SHORT_DESCRIPTION into numdetail
        from TRMASTER001
        where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
        from TRSYSTEM051);

--        open gencursor for
--           select MaturityMonth  as "MaturityMonth" ,
--                    round((Inflow/numdetail),2) "Inflow",round(Outflow/numdetail,2) "Outflow",
--                    round((Inflow_Hedge/numdetail),2) "Inflow_Hedge" ,
--                    round((Outflow_Hedge/numdetail),2) "Outflow_Hedge" ,
--                    round((InflowCONV/numdetail),2) "InflowCONV",round(OutflowCONV/numdetail,2) "OutflowCONV",
--                    round((Inflow_HedgeConv/numdetail),2) "Inflow_HedgeConv" ,
--                    round((Outflow_HedgeConv/numdetail),2) "Outflow_HedgeConv" ,
--                    (round((Inflow/numdetail),2) -round((Inflow_Hedge/numdetail),2) ) "InflowUnhedge",
--                    (round(Outflow/numdetail,2)-round((Outflow_Hedge/numdetail),2))  "OutflowUnhedge",
--                    round((Exposure_Gap/numdetail),2) "Exposure_Gap",
--                    round((Hedge_Gap/numdetail),2) "Hedge_Gap",
--                    round((OverAllGap/numdetail),2) "OverAllGap" ,HedgeRatio "HedgeRatio",
----                    (case when Inflow_Budget_Rate!=0 then nvl(Inflow_Budget_Rate,MTMRate) else MTMRate end) "Inflow_Budget_Rate",
----                    (case when Outflow_Budget_Rate!=0 then nvl(Outflow_Budget_Rate,MTMRate) else MTMRate end) "Outflow_Budget_Rate",
----                    (case when Hedge_Buy_Rate!=0 then nvl(Hedge_Buy_Rate,MTMRate) else MTMRate end) "Hedge_Buy_Rate",
----                    (case when Hedge_Sell_Rate!=0 then nvl(Hedge_Sell_Rate,MTMRate) else MTMRate end) "Hedge_Sell_Rate",
----                    (case when Exposure_Rate!=0 then nvl(Exposure_Rate,MTMRate) else MTMRate end) "Exposure_Rate",
----                    (case when Exposure_Hedge_Rate!=0 then nvl(Exposure_Hedge_Rate,MTMRate) else MTMRate end)  "Exposure_Hedge_Rate",
--                    Inflow_Budget_Rate "Inflow_Budget_Rate",
--                    Outflow_Budget_Rate "Outflow_Budget_Rate",
--                    Hedge_Buy_Rate "Hedge_Buy_Rate",
--                    Hedge_Sell_Rate "Hedge_Sell_Rate",
--                    Exposure_Rate "Exposure_Rate",
--                    Exposure_Hedge_Rate  "Exposure_Hedge_Rate",
--                    MTMRate "MTMRate",ExposureType "ExposureType",ImportExport "ImportExport",
--                    MonthOrder "MonthOrder",
--                    round((((Inflow_Budget_Rate-MTMRate)*
--                    (case when (Inflow-Inflow_Hedge)<0 then 0 else (Inflow-Inflow_Hedge) end) )/numdetail),2) "InflowMTMPL",
--                    round((((MTMRate-Outflow_Budget_Rate)*
--                    (case when (Outflow-Outflow_Hedge)<0 then 0 else (Outflow-Outflow_Hedge) end))/numdetail),2) "OutflowMTMPL",
--                    round((((Hedge_Sell_Rate-MTMRate)* Inflow_Hedge)/numdetail),2) "InflowHedgeMTMPL",
--                    round((((MTMRate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "OutflowHedgeMTMPL",
--                    round((((Hedge_Sell_Rate-Inflow_Budget_Rate)* Inflow_Hedge)/numdetail),2) "InflowHedgeTragetPL",
--                    round((((Outflow_Budget_Rate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "OutflowHedgeTargetPL",
--                    round(((case when ExposureType='Inflow' then
--                    (MTMRate-Exposure_Hedge_Rate)* Hedge_Gap
--                    else (Exposure_Hedge_Rate-MTMRate)* Hedge_Gap end)/numdetail),2) "HedgeGapPL",
--                    round(((case when ExposureType='OutFlow' then
--                    (MTMRate-Exposure_Rate)* OverAllGap
--                    else (Exposure_Rate-MTMRate)* OverAllGap end)/numdetail),2) "OverAllGapPL",
--                    round(case when NVL(Inflow_Hedge,0) != 0 and NVL(Inflow,0) !=0 then
--                    ABS(((NVL(Inflow_Hedge,0)) / (NVL(Inflow,0))))*100 else 0 end) "InflowRatio",
--                    round(case when (NVL(Outflow_Hedge,0)) != 0 and (NVL(Outflow,0)) !=0 then
--                    ABS(((NVL(Outflow_Hedge,0)) / (NVL(Outflow,0))))*100 else 0 end) "OutflowRatio",
--                    CurrencyPair "CurrencyPair",
--                    pkgreturncursor.fncgetdescription(CurrencyPair,2) "CurrencyPairDesc",           
--                    round((Hedge_Sell_Rate-Inflow_Budget_Rate)*Inflow_Hedge/numdetail,2) "InflowHedgeVsBudgetPL",
--                    round((Inflow_Budget_Rate-Hedge_Buy_Rate)*Outflow_Hedge/numdetail,2) "OutflowHedgeVsBudgetPL",  
--                    round((((Hedge_Sell_Rate-Inflow_Budget_Rate)*Inflow_Hedge)+
--                    (Inflow_Budget_Rate-Hedge_Buy_Rate)*Outflow_Hedge)/numdetail,2) "HedgeVsBudgetPL",
--                    round(((case when ExposureType='Inflow' then
--                    ((SPOTRATE-Inflow_Budget_Rate)* Exposure_Gap)
--                    else ((Outflow_Budget_Rate-SPOTRATE)* Exposure_Gap) end)/numdetail),2) "ExposureGapVsSpot",
--                    round((SPOTRATE-Inflow_Budget_Rate)* inflow/numdetail,2) "InflowVsSpot",
--                    round((Outflow_Budget_Rate-SPOTRATE)* outflow/numdetail,2) "OutflowVsSpot", 
--                    round(((case when ExposureType='Inflow' then
--                    ((nvl(BudgetRate,0) * 0.95)-Exposure_Hedge_Rate)* Exposure_Gap
--                    else (Exposure_Hedge_Rate-(nvl(BudgetRate,0) * 0.95))* Exposure_Gap end)/numdetail),2) "Impacton5PercAppreciationonGapinEXRate",
--                    round(((((nvl(BudgetRate,0) * 0.95)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercAppInflowHedgeinEXRate",
--                    round(((( Hedge_Buy_Rate-(nvl(SPOTRATE,0) * 0.95))* inflow)/numdetail),2) "Impa5PercAppOutflowHedgeinEXRate",
--                    round(((((nvl(BudgetRate,0) * 1.05)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercDepreInflowHedgeinEXRate",
--                    round(((( Hedge_Buy_Rate-(nvl(BudgetRate,0) * 1.05))* inflow)/numdetail),2) "Impa5PercDepreOutflowHedgeinEXRate", 
--                    round(((case when ExposureType='Inflow' then
--                    ((nvl(BudgetRate,0) * 1.05)-Exposure_Hedge_Rate)* Exposure_Gap
--                    else (Exposure_Hedge_Rate-(nvl(BudgetRate,0) * 1.05))* Exposure_Gap end)/numdetail),2) "Impacton5PercDepreciationGapinExcRate",
--                    SPOTRATE "SpotRate",
--                    BudgetRate "BudgetRate"
--            from(SELECT  POSN_MATURITY_MONTH MaturityMonth,
--                    (ABS(NVL(POSN_INFLOW_AMOUNT,0))) Inflow,
--                    (ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) Outflow,
--                    
--                    (ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) Inflow_Hedge,
--                    (ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) Outflow_Hedge,
--                    (ABS(NVL(POSN_INFLOW_AMOUNTCONV,0))) InflowCONV,
--                    (ABS(NVL(POSN_OUTFLOW_AMOUNTCONV,0))) OutflowCONV,
--                    
--                    (ABS(NVL(POSN_INFLOWHEDGE_AMOUNTCONV,0))) Inflow_HedgeCONV,
--                    (ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNTCONV,0))) Outflow_HedgeCONV,
--                    (NVL(POSN_EXPOSURE_GAP,0)) Exposure_Gap,
--                    (NVL(POSN_HEDGE_GAP,0)) Hedge_Gap,
--                    (NVL(POSN_EXPOSURE_GAP,0)) - (NVL(POSN_HEDGE_GAP,0))OverAllGap,
--                    round(case when (NVL(POSN_EXPOSURE_GAP,0)) != 0 and (NVL(POSN_HEDGE_GAP,0)) !=0 then
--                    ABS(((NVL(POSN_HEDGE_GAP,0)) / (NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) HedgeRatio,
--                    --           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) Inflow_Budget_Rate,
--                    --           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  Outflow_Budget_Rate,
--                    --           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))) Hedge_Buy_Rate,
--                    --           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))) Hedge_Sell_Rate,
--                    --           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  Exposure_Rate,
--                    --           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) Exposure_Hedge_Rate,
--                    --           avg(POSN_MTM_RATE) MTMRate,        
--                    POSN_INFLOW_RATE Inflow_Budget_Rate,POSN_OUTFLOW_RATE Outflow_Budget_Rate,POSN_HEDGEBUY_RATE Hedge_Buy_Rate,
--                    POSN_HEDGESELL_RATE Hedge_Sell_Rate,POSN_EXPOSURE_RATE Exposure_Rate,POSN_OVERALLHEDGE_RATE Exposure_Hedge_Rate,
--                    POSN_MTM_RATE MTMRate,
--                    --avg( pkgforexprocess.fncGPOSN_INFLOW_RATEetRate(30400004,30400003,'24-Jun-2020',25300001,0, to_date('01-' || POSN_MATURITY_MONTH),1)) MTMRate,
--                    decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
--                    0 ImportExport,
--                    to_number(posn_month_order) MonthOrder,
--                    POSN_CURRENCY_CODE CurrencyCode,POSN_FOR_CURRENCY ForCurrency,
--                    POSN_CURRENCY_PAIR CurrencyPair,
--                    pkgreturncursor.fncgetdescription(POSN_CURRENCY_PAIR,2) CurrencyPairDesc,
----                    pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999) SpotRate
--                    pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999,0,null,1,81599999) SpotRate,
--                    pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999,0,null,1,81500008) BudgetRate
--                    FROM trsystem997_NOP
--                    where (POSN_INFLOW_AMOUNT !=0
--                    or POSN_OUTFLOW_AMOUNT !=0
--                    or POSN_INFLOWHEDGE_AMOUNT!=0
--                    or POSN_OUTFLOWHEDGE_AMOUNT!=0)
--                    and POSN_MATURITY_MONTH is not null)
--            --        --temp commented by hari  and posn_month_order >= to_char(sysdate,'YYYYMM')
--            --        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
--            --          group by to_number(posn_month_order),POSN_MATURITY_MONTH,POSN_IMPort_export,
--            --            POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,POSN_CURRENCY_PAIR)
--            ORDER BY CurrencyPairDesc,to_number(MonthOrder);

        open gencursor for
           select MaturityMonth  as "MaturityMonth" ,
                    round((Inflow/numdetail),2) "Inflow",round(Outflow/numdetail,2) "Outflow",
                    round((Inflow_Hedge/numdetail),2) "Inflow_Hedge" ,
                    round((Outflow_Hedge/numdetail),2) "Outflow_Hedge" ,
                    round((InflowCONV/numdetail),2) "InflowCONV",round(OutflowCONV/numdetail,2) "OutflowCONV",
                    round((Inflow_HedgeConv/numdetail),2) "Inflow_HedgeConv" ,
                    round((Outflow_HedgeConv/numdetail),2) "Outflow_HedgeConv" ,
                    (round((Inflow/numdetail),2) -round((Inflow_Hedge/numdetail),2) ) "InflowUnhedge",
                    (round(Outflow/numdetail,2)-round((Outflow_Hedge/numdetail),2))  "OutflowUnhedge",
                    round((Exposure_Gap/numdetail),2) "Exposure_Gap",
                    round((Hedge_Gap/numdetail),2) "Hedge_Gap",
                    round((OverAllGap/numdetail),2) "OverAllGap" ,HedgeRatio "HedgeRatio",
--                    (case when Inflow_Budget_Rate!=0 then nvl(Inflow_Budget_Rate,MTMRate) else MTMRate end) "Inflow_Budget_Rate",
--                    (case when Outflow_Budget_Rate!=0 then nvl(Outflow_Budget_Rate,MTMRate) else MTMRate end) "Outflow_Budget_Rate",
--                    (case when Hedge_Buy_Rate!=0 then nvl(Hedge_Buy_Rate,MTMRate) else MTMRate end) "Hedge_Buy_Rate",
--                    (case when Hedge_Sell_Rate!=0 then nvl(Hedge_Sell_Rate,MTMRate) else MTMRate end) "Hedge_Sell_Rate",
--                    (case when Exposure_Rate!=0 then nvl(Exposure_Rate,MTMRate) else MTMRate end) "Exposure_Rate",
--                    (case when Exposure_Hedge_Rate!=0 then nvl(Exposure_Hedge_Rate,MTMRate) else MTMRate end)  "Exposure_Hedge_Rate",
                    BudgetRate "Inflow_Budget_Rate",
                    BudgetRate "Outflow_Budget_Rate",
                    Hedge_Buy_Rate "Hedge_Buy_Rate",
                    Hedge_Sell_Rate "Hedge_Sell_Rate",
                    Exposure_Rate "Exposure_Rate",
                    Exposure_Hedge_Rate  "Exposure_Hedge_Rate",
                    MTMRate "MTMRate",ExposureType "ExposureType",ImportExport "ImportExport",
                    MonthOrder "MonthOrder",
                    round((((Inflow_Budget_Rate-MTMRate)*
                    (case when (Inflow-Inflow_Hedge)<0 then 0 else (Inflow-Inflow_Hedge) end) )/numdetail),2) "InflowMTMPL",
                    round((((MTMRate-Outflow_Budget_Rate)*
                    (case when (Outflow-Outflow_Hedge)<0 then 0 else (Outflow-Outflow_Hedge) end))/numdetail),2) "OutflowMTMPL",
                    round((((Hedge_Sell_Rate-MTMRate)* Inflow_Hedge)/numdetail),2) "InflowHedgeMTMPL",
                    round((((MTMRate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "OutflowHedgeMTMPL",
                    round((((Hedge_Sell_Rate-Inflow_Budget_Rate)* Inflow_Hedge)/numdetail),2) "InflowHedgeTragetPL",
                    round((((Outflow_Budget_Rate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "OutflowHedgeTargetPL",
                    round(((case when ExposureType='Inflow' then
                    (MTMRate-Exposure_Hedge_Rate)* Hedge_Gap
                    else (Exposure_Hedge_Rate-MTMRate)* Hedge_Gap end)/numdetail),2) "HedgeGapPL",
                    round(((case when ExposureType='OutFlow' then
                    (MTMRate-Exposure_Rate)* OverAllGap
                    else (Exposure_Rate-MTMRate)* OverAllGap end)/numdetail),2) "OverAllGapPL",
                    round(case when NVL(Inflow_Hedge,0) != 0 and NVL(Inflow,0) !=0 then
                    ABS(((NVL(Inflow_Hedge,0)) / (NVL(Inflow,0))))*100 else 0 end) "InflowRatio",
                    round(case when (NVL(Outflow_Hedge,0)) != 0 and (NVL(Outflow,0)) !=0 then
                    ABS(((NVL(Outflow_Hedge,0)) / (NVL(Outflow,0))))*100 else 0 end) "OutflowRatio",
                    CurrencyPair "CurrencyPair",
                    pkgreturncursor.fncgetdescription(CurrencyPair,2) "CurrencyPairDesc",           
                    round((Hedge_Sell_Rate-BudgetRate)*Inflow_Hedge/numdetail,2) "InflowHedgeVsBudgetPL",
                    round((BudgetRate-Hedge_Buy_Rate)*Outflow_Hedge/numdetail,2) "OutflowHedgeVsBudgetPL",  
                    round((((Hedge_Sell_Rate-BudgetRate)*Inflow_Hedge)+
                    (BudgetRate-Hedge_Buy_Rate)*Outflow_Hedge)/numdetail,2) "HedgeVsBudgetPL",

                    round(((case when ExposureType='Inflow' then
                    ((SPOTRATE-BudgetRate)* OverAllGap)
                    else ((BudgetRate-SPOTRATE)* OverAllGap) end)/numdetail),2) "ExposureGapVsSpot",
                    round((SPOTRATE-BudgetRate)* inflow/numdetail,2) "InflowVsSpot",
                    round((BudgetRate-SPOTRATE)* outflow/numdetail,2) "OutflowVsSpot", 

                    round(((case when ExposureType='Inflow' then
                    ((nvl(SPOTRATE,0) * 0.95)-BudgetRate)* OverAllGap
                    else (BudgetRate-(nvl(SPOTRATE,0) * 0.95))* OverAllGap end)/numdetail),2) "Impacton5PercAppreciationonGapinEXRate",

                    round(((((nvl(BudgetRate,0) * 0.95)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercAppInflowHedgeinEXRate",
                    round(((( Hedge_Buy_Rate-(nvl(SPOTRATE,0) * 0.95))* inflow)/numdetail),2) "Impa5PercAppOutflowHedgeinEXRate",
                    round(((((nvl(BudgetRate,0) * 1.05)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercDepreInflowHedgeinEXRate",
                    round(((( Hedge_Buy_Rate-(nvl(BudgetRate,0) * 1.05))* inflow)/numdetail),2) "Impa5PercDepreOutflowHedgeinEXRate", 
                    round(((case when ExposureType='Inflow' then
                    ((nvl(SPOTRATE,0) * 1.05)-BudgetRate)* OverAllGap
                    else (BudgetRate-(nvl(SPOTRATE,0) * 1.05))* OverAllGap end)/numdetail),2) "Impacton5PercDepreciationGapinExcRate",
--                    round((((nvl(SPOTRATE,0) * 1.05)-BudgetRate)* OverAllGap)/numdetail,2) "Impacton5PercDepreciationGapinExcRate",
--                    round((((nvl(SPOTRATE,0) * 0.95)-BudgetRate)* OverAllGap)/numdetail,2) "Impacton5PercAppreciationonGapinEXRate",
                    SPOTRATE "SpotRate",
                    BudgetRate "BudgetRate"
            from(SELECT  POSN_MATURITY_MONTH MaturityMonth,
                    (ABS(NVL(POSN_INFLOW_AMOUNT,0))) Inflow,
                    (ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) Outflow,

                    (ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) Inflow_Hedge,
                    (ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) Outflow_Hedge,
                    (ABS(NVL(POSN_INFLOW_AMOUNTCONV,0))) InflowCONV,
                    (ABS(NVL(POSN_OUTFLOW_AMOUNTCONV,0))) OutflowCONV,

                    (ABS(NVL(POSN_INFLOWHEDGE_AMOUNTCONV,0))) Inflow_HedgeCONV,
                    (ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNTCONV,0))) Outflow_HedgeCONV,
                    (NVL(POSN_EXPOSURE_GAP,0)) Exposure_Gap,
                    (NVL(POSN_HEDGE_GAP,0)) Hedge_Gap,
                    (NVL(POSN_EXPOSURE_GAP,0)) - (NVL(POSN_HEDGE_GAP,0))OverAllGap,
                    round(case when (NVL(POSN_EXPOSURE_GAP,0)) != 0 and (NVL(POSN_HEDGE_GAP,0)) !=0 then
                    ABS(((NVL(POSN_HEDGE_GAP,0)) / (NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) HedgeRatio,
                    --           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) Inflow_Budget_Rate,
                    --           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  Outflow_Budget_Rate,
                    --           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))) Hedge_Buy_Rate,
                    --           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))) Hedge_Sell_Rate,
                    --           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  Exposure_Rate,
                    --           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) Exposure_Hedge_Rate,
                    --           avg(POSN_MTM_RATE) MTMRate,        
                    POSN_INFLOW_RATE Inflow_Budget_Rate,POSN_OUTFLOW_RATE Outflow_Budget_Rate,POSN_HEDGEBUY_RATE Hedge_Buy_Rate,
                    POSN_HEDGESELL_RATE Hedge_Sell_Rate,POSN_EXPOSURE_RATE Exposure_Rate,POSN_OVERALLHEDGE_RATE Exposure_Hedge_Rate,
                    POSN_MTM_RATE MTMRate,
                    --avg( pkgforexprocess.fncGPOSN_INFLOW_RATEetRate(30400004,30400003,'24-Jun-2020',25300001,0, to_date('01-' || POSN_MATURITY_MONTH),1)) MTMRate,
                    decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
                    0 ImportExport,
                    to_number(posn_month_order) MonthOrder,
                    POSN_CURRENCY_CODE CurrencyCode,POSN_FOR_CURRENCY ForCurrency,
                    POSN_CURRENCY_PAIR CurrencyPair,
                    pkgreturncursor.fncgetdescription(POSN_CURRENCY_PAIR,2) CurrencyPairDesc,
--                    pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999) SpotRate
                    pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999,0,null,1,81599999) SpotRate,
                    pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999,0,null,1,81500006) BudgetRate
                    FROM trsystem997_NOP
                    where (POSN_INFLOW_AMOUNT !=0
                    or POSN_OUTFLOW_AMOUNT !=0
                    or POSN_INFLOWHEDGE_AMOUNT!=0
                    or POSN_OUTFLOWHEDGE_AMOUNT!=0)
                    and POSN_MATURITY_MONTH is not null)
            --        --temp commented by hari  and posn_month_order >= to_char(sysdate,'YYYYMM')
            --        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
            --          group by to_number(posn_month_order),POSN_MATURITY_MONTH,POSN_IMPort_export,
            --            POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,POSN_CURRENCY_PAIR)
            ORDER BY CurrencyPairDesc,to_number(MonthOrder);
        Goto Process_End;


       -- Goto Process_End;
    end if;

----------------------------------------------------------------------

if  numInfoType = REFNOPDashBoardCurrenypairConsolidate then
    varOperation := 'NOP Dash Board Data Extract';
    BEGIN
        varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp1 :='ALL';
    End;

    BEGIN
        varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp2 := 'ALL';
    End;

    BEGIN
    vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp3,GConst.TYPENODEPATH);
    Exception
    when others then
    vartemp3 := 'ALL';
    End;
    BEGIN
        varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp4 := 'ALL';
    End;

    BEGIN
        varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp5 := 'ALL';
    End;


    select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
    from TRSYSTEM051);

    BEGIN
        numcode1 := GConst.fncXMLExtract(xmlDoc,'//Param/BasisType',numcode1,GConst.TYPENODEPATH);
    Exception
    when others then
        numcode1 := 5;
    End;

    BEGIN
        numcode2 := GConst.fncXMLExtract(xmlDoc,'//Param/BasisTypeParam',numcode2,GConst.TYPENODEPATH);
        if numcode2 = 91000001 then
        numcode1 := 11;
        elsif numcode2 = 91000002 then
        numcode1 := 5;
        elsif numcode2 = 91000003 then
        numcode1 := 10;
        elsif numcode2 = 91000004 then
        numcode1 := 12;
        end if;
        GLOG.LOG_Write('numcode2 - ' || numcode2 );
    Exception
    when others then
        numcode2 := 5;
        GLOG.LOG_Write('numcode2 - ' || numcode2 );
    End;
        GLOG.LOG_Write('numcode1 - ' || numcode1 );
    --   numdetail:=1000000;

	BEGIN
		dattemp1 := GConst.fncXMLExtract(xmlDoc,'//Param/FromDate',dattemp,GConst.TYPENODEPATH);
	Exception
	when others then
	   dattemp1 := null;
	End; 

	BEGIN
	   dattemp2 := GConst.fncXMLExtract(xmlDoc,'//Param/ToDate',dattemp,GConst.TYPENODEPATH);
	Exception
	when others then
	   dattemp2 := null;
	End;

    BEGIN
           dattemp := GConst.fncXMLExtract(xmlDoc,'//Param/AsonDate',dattemp,GConst.TYPENODEPATH);
        Exception
        when others then
           dattemp := trunc(sysdate);
        End; 

    prcNOP_DashBoard(varTemp3, numcode1, dattemp1, dattemp2);

    open gencursor for
        select MaturityMonth  as "MaturityMonth" ,
        round((Inflow/numdetail),2) "Inflow",round(Outflow/numdetail,2) "Outflow",
        round((Inflow_Hedge/numdetail),2) "Inflow_Hedge" ,
        round((Outflow_Hedge/numdetail),2) "Outflow_Hedge" ,
        round((InflowCONV/numdetail),2) "InflowCONV",round(OutflowCONV/numdetail,2) "OutflowCONV",
        round((Inflow_HedgeConv/numdetail),2) "Inflow_HedgeConv" ,
        round((Outflow_HedgeConv/numdetail),2) "Outflow_HedgeConv" ,
        (round((Inflow/numdetail),2) -round((Inflow_Hedge/numdetail),2) ) "InflowUnhedge",
        (round(Outflow/numdetail,2)-round((Outflow_Hedge/numdetail),2))  "OutflowUnhedge",
        round((Exposure_Gap/numdetail),2) "Exposure_Gap",
        round((Hedge_Gap/numdetail),2) "Hedge_Gap",
        round((OverAllGap/numdetail),2) "OverAllGap" ,HedgeRatio "HedgeRatio",
--        (case when Inflow_Budget_Rate!=0 then nvl(Inflow_Budget_Rate,MTMRate) else MTMRate end) "Inflow_Budget_Rate",
--        (case when Outflow_Budget_Rate!=0 then nvl(Outflow_Budget_Rate,MTMRate) else MTMRate end) "Outflow_Budget_Rate",
--        (case when Hedge_Buy_Rate!=0 then nvl(Hedge_Buy_Rate,MTMRate) else MTMRate end) "Hedge_Buy_Rate",
--        (case when Hedge_Sell_Rate!=0 then nvl(Hedge_Sell_Rate,MTMRate) else MTMRate end) "Hedge_Sell_Rate",
--        (case when Exposure_Rate!=0 then nvl(Exposure_Rate,MTMRate) else MTMRate end) "Exposure_Rate",
--        (case when Exposure_Hedge_Rate!=0 then nvl(Exposure_Hedge_Rate,MTMRate) else MTMRate end)  "Exposure_Hedge_Rate",
        Inflow_Budget_Rate "Inflow_Budget_Rate",
        Outflow_Budget_Rate "Outflow_Budget_Rate",
        Hedge_Buy_Rate "Hedge_Buy_Rate",
        Hedge_Sell_Rate "Hedge_Sell_Rate",
        Exposure_Rate "Exposure_Rate",
        Exposure_Hedge_Rate  "Exposure_Hedge_Rate",
        MTMRate "MTMRate",ExposureType "ExposureType",ImportExport "ImportExport",
        MonthOrder "MonthOrder",
        round((((Inflow_Budget_Rate-MTMRate)*
        (case when (Inflow-Inflow_Hedge)<0 then 0 else (Inflow-Inflow_Hedge) end) )/numdetail),2) "InflowPL",
        round((((MTMRate-Outflow_Budget_Rate)*
        (case when (Outflow-Outflow_Hedge)<0 then 0 else (Outflow-Outflow_Hedge) end))/numdetail),2) "OutflowPL",
        round((((Hedge_Sell_Rate-MTMRate)* Inflow_Hedge)/numdetail),2) "InflowHedgePL",
        round((((MTMRate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "OutflowHedgePL",
        round(((case when ExposureType='Inflow' then
        (MTMRate-Exposure_Hedge_Rate)* Hedge_Gap
        else (Exposure_Hedge_Rate-MTMRate)* Hedge_Gap end)/numdetail),2) "HedgeGapPL",
        round(((case when ExposureType='OutFlow' then
        (MTMRate-Exposure_Rate)* OverAllGap
        else (Exposure_Rate-MTMRate)* OverAllGap end)/numdetail),2) "OverAllGapPL",
        35 "RiskLimitFrom",
        75 "RiskLimitTo",
        round(case when NVL(Inflow_Hedge,0) != 0 and NVL(Inflow,0) !=0 then
        ABS(((NVL(Inflow_Hedge,0)) / (NVL(Inflow,0))))*100 else 0 end) "InflowRatio",
        round(case when (NVL(Outflow_Hedge,0)) != 0 and (NVL(Outflow,0)) !=0 then
        ABS(((NVL(Outflow_Hedge,0)) / (NVL(Outflow,0))))*100 else 0 end) "OutflowRatio",
        CurrencyPair "CurrencyPair",
        pkgreturncursor.fncgetdescription(CurrencyPair,2) "CurrencyPairDesc",
        round((Hedge_Sell_Rate-BudgetRate)*Inflow_Hedge/numdetail,2) "InflowHedgeVsBudgetPL",
        round((BudgetRate-Hedge_Buy_Rate)*Outflow_Hedge/numdetail,2) "OutflowHedgeVsBudgetPL",  
        round((((Hedge_Sell_Rate-BudgetRate)*Inflow_Hedge)+
        (BudgetRate-Hedge_Buy_Rate)*Outflow_Hedge)/numdetail,2) "HedgeVsBudgetPL",
        round(((case when ExposureType='Inflow' then
        ((SPOTRATE-BudgetRate)* OverAllGap)
        else ((BudgetRate-SPOTRATE)* OverAllGap) end)/numdetail),2) "ExposureGapVsSpot",
        ((SPOTRATE-BudgetRate)* inflow/numdetail) "InflowVsSpot",
        ((BudgetRate-SPOTRATE)* outflow/numdetail) "OutflowVsSpot",
        round(((case when ExposureType='Inflow' then
        ((nvl(SPOTRATE,0) * 0.95)-BudgetRate)* OverAllGap
        else (BudgetRate-(nvl(SPOTRATE,0) * 0.95))* OverAllGap end)/numdetail),2) "Impacton5PercAppreciationonGapinEXRate",
        round(((((nvl(BudgetRate,0) * 0.95)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercAppInflowHedgeinEXRate",
        round(((( Hedge_Buy_Rate-(nvl(BudgetRate,0) * 0.95))* inflow)/numdetail),2) "Impa5PercAppOutflowHedgeinEXRate",
        round(((((nvl(BudgetRate,0) * 1.05)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercDepreInflowHedgeinEXRate",
        round(((( Hedge_Buy_Rate-(nvl(BudgetRate,0) * 1.05))* inflow)/numdetail),2) "Impa5PercDepreOutflowHedgeinEXRate",

--        round((((nvl(SPOTRATE,0) * 1.05)-BudgetRate)* OverAllGap)/numdetail,2) "Impacton5PercDepreciationGapinExcRate",
--        round((((nvl(SPOTRATE,0) * 0.95)-BudgetRate)* OverAllGap)/numdetail,2) "Impacton5PercAppreciationonGapinEXRate",

        round(((case when ExposureType='Inflow' then
        ((nvl(SPOTRATE,0) * 1.05)-BudgetRate)* OverAllGap
        else (BudgetRate-(nvl(SPOTRATE,0) * 1.05))* OverAllGap end)/numdetail),2) "Impacton5PercDepreciationGapinExcRate",
        pkgreturncursor.fncgetdescription(AccountCodeGroup,2) "AccountCodeGroup",
         SPOTRATE "SpotRate",
         BudgetRate "BudgetRate"
        from(
        SELECT  POSN_MATURITY_MONTH MaturityMonth,
        (ABS(NVL(POSN_INFLOW_AMOUNT,0))) Inflow,
        (ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) Outflow,

        (ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) Inflow_Hedge,
        (ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) Outflow_Hedge,
        (ABS(NVL(POSN_INFLOW_AMOUNTCONV,0))) InflowCONV,
        (ABS(NVL(POSN_OUTFLOW_AMOUNTCONV,0))) OutflowCONV,

        (ABS(NVL(POSN_INFLOWHEDGE_AMOUNTCONV,0))) Inflow_HedgeCONV,
        (ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNTCONV,0))) Outflow_HedgeCONV,
        (NVL(POSN_EXPOSURE_GAP,0)) Exposure_Gap,
        (NVL(POSN_HEDGE_GAP,0)) Hedge_Gap,
        (NVL(POSN_EXPOSURE_GAP,0)) - (NVL(POSN_HEDGE_GAP,0))OverAllGap,
        round(case when (NVL(POSN_EXPOSURE_GAP,0)) != 0 and (NVL(POSN_HEDGE_GAP,0)) !=0 then
        ABS(((NVL(POSN_HEDGE_GAP,0)) / (NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) HedgeRatio,
        --           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) Inflow_Budget_Rate,
        --           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  Outflow_Budget_Rate,
        --           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))) Hedge_Buy_Rate,
        --           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))) Hedge_Sell_Rate,
        --           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  Exposure_Rate,
        --           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) Exposure_Hedge_Rate,
        --           avg(POSN_MTM_RATE) MTMRate,        
        POSN_INFLOW_RATE Inflow_Budget_Rate,POSN_OUTFLOW_RATE Outflow_Budget_Rate,POSN_HEDGEBUY_RATE Hedge_Buy_Rate,
        POSN_HEDGESELL_RATE Hedge_Sell_Rate,POSN_EXPOSURE_RATE Exposure_Rate,POSN_OVERALLHEDGE_RATE Exposure_Hedge_Rate,
        POSN_MTM_RATE MTMRate,
        --avg( pkgforexprocess.fncGPOSN_INFLOW_RATEetRate(30400004,30400003,'24-Jun-2020',25300001,0, to_date('01-' || POSN_MATURITY_MONTH),1)) MTMRate,
        decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
        0 ImportExport,
        to_number(posn_month_order) MonthOrder,
        POSN_CURRENCY_CODE CurrencyCode,POSN_FOR_CURRENCY ForCurrency,
        POSN_CURRENCY_PAIR CurrencyPair,
        pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999,0,null,1,81599999) SpotRate,
        pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999,0,null,1,81500006) BudgetRate,
        POSN_ACCOUNT_CODEGROUP AccountCodeGroup
        FROM trsystem997_NOP
        where (POSN_INFLOW_AMOUNT !=0
        or POSN_OUTFLOW_AMOUNT !=0
        or POSN_INFLOWHEDGE_AMOUNT!=0
        or POSN_OUTFLOWHEDGE_AMOUNT!=0)
        and POSN_MATURITY_MONTH is not null)
        --        --temp commented by hari  and posn_month_order >= to_char(sysdate,'YYYYMM')
        --        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
        --          group by to_number(posn_month_order),POSN_MATURITY_MONTH,POSN_IMPort_export,
        --            POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,POSN_CURRENCY_PAIR)
     --   group by MaturityMonth
        ORDER BY to_number(MonthOrder);

    Goto Process_End;
end if;

if  numInfoType = RefNOPCURRENCYPAIRCONSOLIDATE then
    varOperation := 'NOP Dash Board Data Extract';
    BEGIN
        varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp1 :='ALL';
    End;

    BEGIN
        varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp2 := 'ALL';
    End;

    BEGIN
    vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp3,GConst.TYPENODEPATH);
    Exception
    when others then
    vartemp3 := 'ALL';
    End;
    BEGIN
        varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp4 := 'ALL';
    End;

    BEGIN
        varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp5 := 'ALL';
    End;

    select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
    from TRSYSTEM051);

    BEGIN
        numcode2 := GConst.fncXMLExtract(xmlDoc,'//Param/BasisTypeParam',numcode2,GConst.TYPENODEPATH);
        if numcode2 = 91000001 then
        numcode1 := 11;
        elsif numcode2 = 91000002 then
        numcode1 := 5;
        elsif numcode2 = 91000003 then
        numcode1 := 10;
        elsif numcode2 = 91000004 then
        numcode1 := 12;
        end if;
        GLOG.LOG_Write('numcode2 - ' || numcode2 );
    Exception
    when others then
        numcode2 := 5;
        GLOG.LOG_Write('numcode2 - ' || numcode2 );
    End;
        GLOG.LOG_Write('numcode1 - ' || numcode1 );
    --   numdetail:=1000000;

	BEGIN
		dattemp1 := GConst.fncXMLExtract(xmlDoc,'//Param/FromDate',dattemp,GConst.TYPENODEPATH);
	Exception
	when others then
	   dattemp1 := null;
	End; 

	BEGIN
	   dattemp2 := GConst.fncXMLExtract(xmlDoc,'//Param/ToDate',dattemp,GConst.TYPENODEPATH);
	Exception
	when others then
	   dattemp2 := null;
	End;

        BEGIN
           dattemp := GConst.fncXMLExtract(xmlDoc,'//Param/AsonDate',dattemp,GConst.TYPENODEPATH);
        Exception
        when others then
           dattemp := trunc(sysdate);
        End; 

    prcNOP_DashBoard(varTemp3, numcode1, dattemp1, dattemp2);

    open gencursor for
        select -- MaturityMonth  as "MaturityMonth" ,
            round((Inflow/numdetail),2) "Inflow",round(Outflow/numdetail,2) "Outflow",
            round((Inflow_Hedge/numdetail),2) "Inflow_Hedge" ,
            round((Outflow_Hedge/numdetail),2) "Outflow_Hedge" ,
            round((InflowCONV/numdetail),2) "InflowCONV",round(OutflowCONV/numdetail,2) "OutflowCONV",
            round((Inflow_HedgeConv/numdetail),2) "Inflow_HedgeConv" ,
            round((Outflow_HedgeConv/numdetail),2) "Outflow_HedgeConv" ,
            (round((Inflow/numdetail),2) -round((Inflow_Hedge/numdetail),2) ) "InflowUnhedge",
            (round(Outflow/numdetail,2)-round((Outflow_Hedge/numdetail),2))  "OutflowUnhedge",
            round((Exposure_Gap/numdetail),2) "Exposure_Gap",
            round((Hedge_Gap/numdetail),2) "Hedge_Gap",
            round((OverAllGap/numdetail),2) "OverAllGap" ,HedgeRatio "HedgeRatio",
--            (case when Inflow_Budget_Rate!=0 then nvl(Inflow_Budget_Rate,MTMRate) else MTMRate end) "Inflow_Budget_Rate",
--            (case when Outflow_Budget_Rate!=0 then nvl(Outflow_Budget_Rate,MTMRate) else MTMRate end) "Outflow_Budget_Rate",
--            (case when Hedge_Buy_Rate!=0 then nvl(Hedge_Buy_Rate,MTMRate) else MTMRate end) "Hedge_Buy_Rate",
--            (case when Hedge_Sell_Rate!=0 then nvl(Hedge_Sell_Rate,MTMRate) else MTMRate end) "Hedge_Sell_Rate",
--            (case when Exposure_Rate!=0 then nvl(Exposure_Rate,MTMRate) else MTMRate end) "Exposure_Rate",
--            (case when Exposure_Hedge_Rate!=0 then nvl(Exposure_Hedge_Rate,MTMRate) else MTMRate end)  "Exposure_Hedge_Rate",
            Inflow_Budget_Rate "Inflow_Budget_Rate",
            Outflow_Budget_Rate "Outflow_Budget_Rate",
            Hedge_Buy_Rate "Hedge_Buy_Rate",
            Hedge_Sell_Rate "Hedge_Sell_Rate",
            Exposure_Rate "Exposure_Rate",
            Exposure_Hedge_Rate "Exposure_Hedge_Rate",            
            MTMRate "MTMRate",ExposureType "ExposureType",ImportExport "ImportExport",
            --MonthOrder "MonthOrder",
            round((((Inflow_Budget_Rate-MTMRate)*
            (case when (Inflow-Inflow_Hedge)<0 then 0 else (Inflow-Inflow_Hedge) end) )/numdetail),2) "InflowPL",
            round((((MTMRate-Outflow_Budget_Rate)*
            (case when (Outflow-Outflow_Hedge)<0 then 0 else (Outflow-Outflow_Hedge) end))/numdetail),2) "OutflowPL",
            round((((Hedge_Sell_Rate-MTMRate)* Inflow_Hedge)/numdetail),2) "InflowHedgePL",
            round((((MTMRate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "OutflowHedgePL",
            round(((case when ExposureType='Inflow' then
            (MTMRate-Exposure_Hedge_Rate)* Hedge_Gap
            else (Exposure_Hedge_Rate-MTMRate)* Hedge_Gap end)/numdetail),2) "HedgeGapPL",
            round(((case when ExposureType='OutFlow' then
            (MTMRate-Exposure_Rate)* OverAllGap
            else (Exposure_Rate-MTMRate)* OverAllGap end)/numdetail),2) "OverAllGapPL",
            35 "RiskLimitFrom",
            75 "RiskLimitTo",
            round(case when NVL(Inflow_Hedge,0) != 0 and NVL(Inflow,0) !=0 then
            ABS(((NVL(Inflow_Hedge,0)) / (NVL(Inflow,0))))*100 else 0 end) "InflowRatio",
            round(case when (NVL(Outflow_Hedge,0)) != 0 and (NVL(Outflow,0)) !=0 then
            ABS(((NVL(Outflow_Hedge,0)) / (NVL(Outflow,0))))*100 else 0 end) "OutflowRatio",
            CurrencyPair "CurrencyPair",
            pkgreturncursor.fncgetdescription(CurrencyPair,2) "CurrencyPairDesc",
            round((Hedge_Sell_Rate-BudgetRate)*Inflow_Hedge/numdetail,2) "InflowHedgeVsBudgetPL",
            round((BudgetRate-Hedge_Buy_Rate)*Outflow_Hedge/numdetail,2) "OutflowHedgeVsBudgetPL",  
            round((((Hedge_Sell_Rate-BudgetRate)*Inflow_Hedge)+
            (BudgetRate-Hedge_Buy_Rate)*Outflow_Hedge)/numdetail,2) "HedgeVsBudgetPL",
            round(((case when ExposureType='Inflow' then
            ((SPOTRATE-BudgetRate)* OverAllGap)
            else ((BudgetRate-SPOTRATE)* OverAllGap) end)/numdetail),2) "ExposureGapVsSpot",
            ((SPOTRATE-BudgetRate)* inflow/numdetail) "InflowVsSpot",
            ((BudgetRate-SPOTRATE)* outflow/numdetail) "OutflowVsSpot",
            round(((case when ExposureType='Inflow' then
            ((nvl(SPOTRATE,0) * 0.95)-BudgetRate)* OverAllGap
            else (BudgetRate-(nvl(SPOTRATE,0) * 0.95))* OverAllGap end)/numdetail),2) "Impacton5PercAppreciationonGapinEXRate",
            round(((((nvl(BudgetRate,0) * 0.95)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercAppInflowHedgeinEXRate",
            round(((( Hedge_Buy_Rate-(nvl(BudgetRate,0) * 0.95))* inflow)/numdetail),2) "Impa5PercAppOutflowHedgeinEXRate",
--            round(((((BudgetRate,0) * 1.05)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercDepreInflowHedgeinEXRate",
             round(((((nvl(BudgetRate,0) * 1.05)-Hedge_Sell_Rate)* inflow)/numdetail),2) "Impa5PercDepreInflowHedgeinEXRate",
            round(((( Hedge_Buy_Rate-(nvl(BudgetRate,0) * 1.05))* inflow)/numdetail),2) "Impa5PercDepreOutflowHedgeinEXRate",
--            round((((nvl(SPOTRATE,0) * 1.05)-BudgetRate)* OverAllGap)/numdetail,2) "Impacton5PercDepreciationGapinExcRate",
--            round((((nvl(SPOTRATE,0) * 0.95)-BudgetRate)* OverAllGap)/numdetail,2) "Impacton5PercAppreciationonGapinEXRate",

            round(((case when ExposureType='Inflow' then
            ((nvl(SPOTRATE,0) * 1.05)-BudgetRate)* OverAllGap
            else (BudgetRate-(nvl(SPOTRATE,0) * 1.05))* OverAllGap end)/numdetail),2) "Impacton5PercDepreciationGapinExcRate",
            pkgreturncursor.fncgetdescription(AccountCodeGroup,2) "AccountCodeGroup",
             SPOTRATE "SpotRate",
              BudgetRate "BudgetRate"
        from(SELECT sum((ABS(NVL(POSN_INFLOW_AMOUNT,0)))) Inflow,
            sum((ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))) Outflow,
            sum((ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))) Inflow_Hedge,
            sum((ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))) Outflow_Hedge,
            sum((ABS(NVL(POSN_INFLOW_AMOUNTCONV,0)))) InflowCONV,
            sum((ABS(NVL(POSN_OUTFLOW_AMOUNTCONV,0)))) OutflowCONV,
            sum((ABS(NVL(POSN_INFLOWHEDGE_AMOUNTCONV,0)))) Inflow_HedgeCONV,
            sum((ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNTCONV,0)))) Outflow_HedgeCONV,
            sum((NVL(POSN_EXPOSURE_GAP,0))) Exposure_Gap,
            sum((NVL(POSN_HEDGE_GAP,0))) Hedge_Gap,
            sum((NVL(POSN_EXPOSURE_GAP,0)) - (NVL(POSN_HEDGE_GAP,0))) OverAllGap,
            sum(round(case when (NVL(POSN_EXPOSURE_GAP,0)) != 0 and (NVL(POSN_HEDGE_GAP,0)) !=0 then
            ABS(((NVL(POSN_HEDGE_GAP,0)) / (NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end)) HedgeRatio,
            sum(POSN_INFLOW_RATE) Inflow_Budget_Rate,sum(POSN_OUTFLOW_RATE) Outflow_Budget_Rate,
            sum(POSN_HEDGEBUY_RATE) Hedge_Buy_Rate,
            sum(POSN_HEDGESELL_RATE) Hedge_Sell_Rate,sum(POSN_EXPOSURE_RATE) Exposure_Rate,
            sum(POSN_OVERALLHEDGE_RATE) Exposure_Hedge_Rate,
            avg(POSN_MTM_RATE) MTMRate,
            decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
            0 ImportExport,
            POSN_CURRENCY_PAIR CurrencyPair,
--            sum(pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999)) SpotRate,
            pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999,0,null,1,81599999) SpotRate,
           pkgforexprocess.fncgetrate(POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,dattemp,25399999,0,null,1,81500006) BudgetRate,
            POSN_ACCOUNT_CODEGROUP AccountCodeGroup
        FROM trsystem997_NOP
        where (POSN_INFLOW_AMOUNT !=0
        or POSN_OUTFLOW_AMOUNT !=0
        or POSN_INFLOWHEDGE_AMOUNT!=0
        or POSN_OUTFLOWHEDGE_AMOUNT!=0)
        and POSN_MATURITY_MONTH is not null
        group by POSN_CURRENCY_PAIR,POSN_ACCOUNT_CODEGROUP,POSN_IMPort_export,POSN_CURRENCY_CODE,POSN_FOR_CURRENCY);
    Goto Process_End;
END IF;
----------------------------------------------------------------------------------


    if  numInfoType = REFNOPDashBoardCurrenypairWise then
   varOperation := 'NOP Dash Board Data Extract';
       BEGIN
           varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp1 :='ALL';
       End; 
           BEGIN
           varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp2 := 'ALL';
       End; 
           BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp3,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp3 := 'ALL';
       End; 
           BEGIN
           varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp4 := 'ALL';
       End; 
           BEGIN
           varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp5 := 'ALL';
       End; 

        BEGIN
           numcode1 := GConst.fncXMLExtract(xmlDoc,'//Param/BasisType',numcode1,GConst.TYPENODEPATH);
        Exception
        when others then
           numcode1 := 6;
        End; 
     numcode := PKGFOREXPROCESS.fncPositionGenerate(to_date(trunc(sysdate)),'ALL',varTemp1,varTemp3,varTemp4,varTemp5,varTemp2);
     prcNOP_DashBoard(varTemp3, numcode1);


       select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
     --   numdetail:=1000000;

   open gencursor for
 select MaturityMonth  as "MaturityMonth" ,
       round((Inflow/numdetail),2) "Inflow",round(Outflow/numdetail,2) "Outflow",
        round((Inflow_Hedge/numdetail),2) "Inflow_Hedge" ,
        round((Outflow_Hedge/numdetail),2) "Outflow_Hedge" ,
        round((InflowCONV/numdetail),2) "InflowCONV",round(OutflowCONV/numdetail,2) "OutflowCONV",
        round((Inflow_HedgeConv/numdetail),2) "Inflow_HedgeConv" ,
        round((Outflow_HedgeConv/numdetail),2) "Outflow_HedgeConv" ,
        (round((Inflow/numdetail),2) -round((Inflow_Hedge/numdetail),2) ) "InflowUnhedge",
        (round(Outflow/numdetail,2)-round((Outflow_Hedge/numdetail),2))  "OutflowUnhedge",
        round((Exposure_Gap/numdetail),2) "Exposure_Gap",
        round((Hedge_Gap/numdetail),2) "Hedge_Gap",
        round((OverAllGap/numdetail),2) "OverAllGap" ,HedgeRatio "HedgeRatio",
        (case when Inflow_Budget_Rate!=0 then nvl(Inflow_Budget_Rate,MTMRate) else MTMRate end) "Inflow_Budget_Rate",
        (case when Outflow_Budget_Rate!=0 then nvl(Outflow_Budget_Rate,MTMRate) else MTMRate end) "Outflow_Budget_Rate",
        (case when Hedge_Buy_Rate!=0 then nvl(Hedge_Buy_Rate,MTMRate) else MTMRate end) "Hedge_Buy_Rate",
        (case when Hedge_Sell_Rate!=0 then nvl(Hedge_Sell_Rate,MTMRate) else MTMRate end) "Hedge_Sell_Rate",
        (case when Exposure_Rate!=0 then nvl(Exposure_Rate,MTMRate) else MTMRate end) "Exposure_Rate",
        (case when Exposure_Hedge_Rate!=0 then nvl(Exposure_Hedge_Rate,MTMRate) else MTMRate end)  "Exposure_Hedge_Rate",
        MTMRate "MTMRate",ExposureType "ExposureType",ImportExport "ImportExport",
        MonthOrder "MonthOrder",
        round((((Inflow_Budget_Rate-MTMRate)* 
           (case when (Inflow-Inflow_Hedge)<0 then 0 else (Inflow-Inflow_Hedge) end) )/numdetail),2) "InflowPL",
        round((((MTMRate-Outflow_Budget_Rate)* 
             (case when (Outflow-Outflow_Hedge)<0 then 0 else (Outflow-Outflow_Hedge) end))/numdetail),2) "OutflowPL",
        round((((Hedge_Sell_Rate-MTMRate)* Inflow_Hedge)/numdetail),2) "InflowHedgePL",
        round((((MTMRate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "OutflowHedgePL",
        round(((case when ExposureType='Inflow' then
             (MTMRate-Exposure_Hedge_Rate)* Hedge_Gap
             else (Exposure_Hedge_Rate-MTMRate)* Hedge_Gap end)/numdetail),2) "HedgeGapPL",
        round(((case when ExposureType='OutFlow' then
         (MTMRate-Exposure_Rate)* OverAllGap
         else (Exposure_Rate-MTMRate)* OverAllGap end)/numdetail),2) "OverAllGapPL",
         35 "RiskLimitFrom",
         75 "RiskLimitTo",
         round(case when NVL(Inflow_Hedge,0) != 0 and NVL(Inflow,0) !=0 then
           ABS(((NVL(Inflow_Hedge,0)) / (NVL(Inflow,0))))*100 else 0 end) "InflowRatio",
         round(case when (NVL(Outflow_Hedge,0)) != 0 and (NVL(Outflow,0)) !=0 then
           ABS(((NVL(Outflow_Hedge,0)) / (NVL(Outflow,0))))*100 else 0 end) "OutflowRatio",
           CurrencyPair "CurrencyPair",
           pkgreturncursor.fncgetdescription(CurrencyPair,2) "CurrencyPairDesc"
   from(
      SELECT  POSN_MATURITY_MONTH MaturityMonth,
           (ABS(NVL(POSN_INFLOW_AMOUNT,0))) Inflow,
           (ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) Outflow,

           (ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) Inflow_Hedge,
           (ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) Outflow_Hedge,
           (ABS(NVL(POSN_INFLOW_AMOUNTCONV,0))) InflowCONV,
           (ABS(NVL(POSN_OUTFLOW_AMOUNTCONV,0))) OutflowCONV,
           (ABS(NVL(POSN_INFLOWHEDGE_AMOUNTCONV,0))) Inflow_HedgeCONV,
           (ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNTCONV,0))) Outflow_HedgeCONV,
           (NVL(POSN_EXPOSURE_GAP,0)) Exposure_Gap,
           (NVL(POSN_HEDGE_GAP,0)) Hedge_Gap,
           (NVL(POSN_EXPOSURE_GAP,0)) + (NVL(POSN_HEDGE_GAP,0))OverAllGap,
           round(case when (NVL(POSN_EXPOSURE_GAP,0)) != 0 and (NVL(POSN_HEDGE_GAP,0)) !=0 then
           ABS(((NVL(POSN_HEDGE_GAP,0)) / (NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) HedgeRatio,
--           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) Inflow_Budget_Rate,
--           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  Outflow_Budget_Rate,
--           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))) Hedge_Buy_Rate,
--           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))) Hedge_Sell_Rate,
--           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  Exposure_Rate,
--           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) Exposure_Hedge_Rate,
--           avg(POSN_MTM_RATE) MTMRate,          
       POSN_INFLOW_RATE Inflow_Budget_Rate,POSN_OUTFLOW_RATE Outflow_Budget_Rate,POSN_HEDGEBUY_RATE Hedge_Buy_Rate,
       POSN_HEDGESELL_RATE Hedge_Sell_Rate,POSN_EXPOSURE_RATE Exposure_Rate,POSN_OVERALLHEDGE_RATE Exposure_Hedge_Rate,
       POSN_MTM_RATE MTMRate,
           --avg( pkgforexprocess.fncGetRate(30400004,30400003,'24-Jun-2020',25300001,0, to_date('01-' || POSN_MATURITY_MONTH),1)) MTMRate,
           decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
           0 ImportExport,
           to_number(posn_month_order) MonthOrder,
           POSN_CURRENCY_CODE CurrencyCode,POSN_FOR_CURRENCY ForCurrency,
           POSN_CURRENCY_PAIR CurrencyPair
        FROM trsystem997_NOP
        where (POSN_INFLOW_AMOUNT !=0 
          or POSN_OUTFLOW_AMOUNT !=0 
          or POSN_INFLOWHEDGE_AMOUNT!=0 
          or POSN_OUTFLOWHEDGE_AMOUNT!=0)
          and POSN_MATURITY_MONTH is not null)
        --temp commented by hari  and posn_month_order >= to_char(sysdate,'YYYYMM')
        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
--          group by to_number(posn_month_order),POSN_MATURITY_MONTH,POSN_IMPort_export,
--            POSN_CURRENCY_CODE,POSN_FOR_CURRENCY,POSN_CURRENCY_PAIR)
          ORDER BY to_number(MonthOrder);

      Goto Process_End;
  end if;
------------------------------------------------------------------------------------
    if  numInfoType = REFNOPDashBoard then
   varOperation := 'NOP Dash Board Data Extract';
       BEGIN
           varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp1 :='ALL';
       End; 
           BEGIN
           varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp2 := 'ALL';
       End; 
           BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp3,GConst.TYPENODEPATH);
           Exception
           when others then
           vartemp3 := 'ALL';
       End; 
           BEGIN
           varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp4 := 'ALL';
       End; 
           BEGIN
           varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
           Exception
           when others then
           varTemp5 := 'ALL';
       End; 

     numcode := PKGFOREXPROCESS.fncPositionGenerate(to_date(trunc(sysdate)),'ALL',varTemp1,varTemp3,varTemp4,varTemp5,varTemp2);
--    --prcNOP_DashBoard();
    BEGIN
           numcode1:= GConst.fncXMLExtract(xmlDoc,'//Param/BasisType',numcode1,GConst.TYPENODEPATH);
           Exception
           when others then
           numcode1 := 3;
       End; 
       prcNOP_DashBoard(varTemp3,numcode1);

   --open gencursor for
--     SELECT  POSN_MATURITY_MONTH "MaturityMonth",
--           sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))) "Inflow",
--           Sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) "Outflow",
--           Sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) "Inflow_Hedge",
--           Sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) "Outflow_Hedge",
--           Sum(NVL(POSN_EXPOSURE_GAP,0)) "Exposure_Gap",
--           Sum(NVL(POSN_HEDGE_GAP,0)) "Hedge_Gap",
--           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) "Inflow_Budget_Rate",
--           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  "Outflow_Budget_Rate",
--           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))))  "Hedge_Buy_Rate",
--           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))))  "Hedge_Sell_Rate",
--           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  "Exposure_Rate",
--           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) "Exposure_Hedge_Rate",
--           POSN_IMPORT_EXPORT "ImportExport"
--        FROM trsystem997_NOP
--        where (POSN_INFLOW_AMOUNT !=0 
--          or POSN_OUTFLOW_AMOUNT !=0 
--          or POSN_INFLOWHEDGE_AMOUNT!=0 
--          or POSN_OUTFLOWHEDGE_AMOUNT!=0)
--          and POSN_MATURITY_MONTH is not null
--        AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
--          group by POSN_MATURITY_MONTH,POSN_IMPORT_EXPORT;

--     SELECT  POSN_MATURITY_MONTH "MaturityMonth",
--           sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))) "Inflow",
--           Sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) "Outflow",
--           Sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) "Inflow_Hedge",
--           Sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) "Outflow_Hedge",
--           abs(Sum(NVL(POSN_EXPOSURE_GAP,0))) "Exposure_Gap",
--           abs(Sum(NVL(POSN_HEDGE_GAP,0))) "Hedge_Gap",
--           Sum(NVL(POSN_EXPOSURE_GAP,0)) + Sum(NVL(POSN_HEDGE_GAP,0))"OverAllGap",
--           round(case when Sum(NVL(POSN_EXPOSURE_GAP,0)) != 0 and Sum(NVL(POSN_HEDGE_GAP,0)) !=0 then
--           ABS((Sum(NVL(POSN_HEDGE_GAP,0)) / Sum(NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) "HedgeRatio",
--           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) "Inflow_Budget_Rate",
--           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  "Outflow_Budget_Rate",
--           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))))  "Hedge_Buy_Rate",
--           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))))  "Hedge_Sell_Rate",
--           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  "Exposure_Rate",
--           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) "Exposure_Hedge_Rate",
--           avg(POSN_MTM_RATE) MTMRate,
--           decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
--           0 "ImportExport",
--           to_number(posn_month_order) MonthOrder
--        FROM trsystem997_NOP
--        where (POSN_INFLOW_AMOUNT !=0 
--          or POSN_OUTFLOW_AMOUNT !=0 
--          or POSN_INFLOWHEDGE_AMOUNT!=0 
--          or POSN_OUTFLOWHEDGE_AMOUNT!=0)
--          and POSN_MATURITY_MONTH is not null
--          and posn_month_order >= to_char(sysdate,'YYYYMM')
--        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
--          group by to_number(posn_month_order),POSN_MATURITY_MONTH,POSN_IMPort_export
--          ORDER BY to_number(posn_month_order);


       select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
     --   numdetail:=1000000;

   open gencursor for
 select MaturityMonth  as "MaturityMonth" ,
       round((Inflow/numdetail),2) "Inflow",round(Outflow/numdetail,2) "Outflow",
        round((Inflow_Hedge/numdetail),2) "Inflow_Hedge" ,
        round((Outflow_Hedge/numdetail),2) "Outflow_Hedge" ,
        round((InflowCONV/numdetail),2) "InflowCONV",round(OutflowCONV/numdetail,2) "OutflowCONV",
        round((Inflow_HedgeConv/numdetail),2) "Inflow_HedgeConv" ,
        round((Outflow_HedgeConv/numdetail),2) "Outflow_HedgeConv" ,
        (round((Inflow/numdetail),2) -round((Inflow_Hedge/numdetail),2) ) "InflowUnhedge",
        (round(Outflow/numdetail,2)-round((Outflow_Hedge/numdetail),2))  "OutflowUnhedge",
        round((Exposure_Gap/numdetail),2) "Exposure_Gap",
        round((Hedge_Gap/numdetail),2) "Hedge_Gap",
        round((OverAllGap/numdetail),2) "OverAllGap" ,HedgeRatio "HedgeRatio",
        (case when Inflow_Budget_Rate!=0 then nvl(Inflow_Budget_Rate,Hedge_Sell_Rate) else MTMRate end) "Inflow_Budget_Rate",
        (case when Outflow_Budget_Rate!=0 then nvl(Outflow_Budget_Rate,Hedge_Buy_Rate) else MTMRate end) "Outflow_Budget_Rate",
        nvl(Hedge_Buy_Rate,0) "Hedge_B_Rate",nvl(Hedge_Sell_Rate,0) "Hedge_S_Rate",
        (case when Hedge_Buy_Rate!=0 then nvl(Hedge_Buy_Rate,Outflow_Budget_Rate) else MTMRate end) "Hedge_Buy_Rate",
        (case when Hedge_Sell_Rate!=0 then nvl(Hedge_Sell_Rate,Inflow_Budget_Rate) else MTMRate end) "Hedge_Sell_Rate",
        (case when Exposure_Rate!=0 then nvl(Exposure_Rate,MTMRate) else MTMRate end) "Exposure_Rate",
        (case when Exposure_Hedge_Rate!=0 then nvl(Exposure_Hedge_Rate,MTMRate) else MTMRate end)  "Exposure_Hedge_Rate",
        MTMRate "MTMRate",ExposureType "ExposureType",ImportExport "ImportExport",
        MonthOrder "MonthOrder",
        round((((Inflow_Budget_Rate-MTMRate)* 
           (case when (Inflow-Inflow_Hedge)<0 then 0 else (Inflow-Inflow_Hedge) end) )/numdetail),2) "InflowPL",
        round((((MTMRate-Outflow_Budget_Rate)* 
             (case when (Outflow-Outflow_Hedge)<0 then 0 else (Outflow-Outflow_Hedge) end))/numdetail),2) "OutflowPL",
        round((((Hedge_Sell_Rate-MTMRate)* Inflow_Hedge)/numdetail),2) "InflowHedgePL",
        round((((MTMRate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "OutflowHedgePL",
        round(((case when ExposureType='Inflow' then
             (MTMRate-Exposure_Hedge_Rate)* Hedge_Gap
             else (Exposure_Hedge_Rate-MTMRate)* Hedge_Gap end)/numdetail),2) "HedgeGapPL",
        round(((case when ExposureType='OutFlow' then
         (MTMRate-Exposure_Rate)* OverAllGap
         else (Exposure_Rate-MTMRate)* OverAllGap end)/numdetail),2) "OverAllGapPL",
         35 "RiskLimitFrom",
         75 "RiskLimitTo",
         round(case when NVL(Inflow_Hedge,0) != 0 and NVL(Inflow,0) !=0 then
           ABS(((NVL(Inflow_Hedge,0)) / (NVL(Inflow,0))))*100 else 0 end) "InflowRatio",
         round(case when (NVL(Outflow_Hedge,0)) != 0 and (NVL(Outflow,0)) !=0 then
           ABS(((NVL(Outflow_Hedge,0)) / (NVL(Outflow,0))))*100 else 0 end) "OutflowRatio"
   from(
      SELECT  POSN_MATURITY_MONTH MaturityMonth,
           sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))) Inflow,
           Sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) Outflow,

           Sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) Inflow_Hedge,
           Sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) Outflow_Hedge,
           sum(ABS(NVL(POSN_INFLOW_AMOUNTCONV,0))) InflowCONV,
           Sum(ABS(NVL(POSN_OUTFLOW_AMOUNTCONV,0))) OutflowCONV,

           Sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNTCONV,0))) Inflow_HedgeCONV,
           Sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNTCONV,0))) Outflow_HedgeCONV,
           Sum(NVL(POSN_EXPOSURE_GAP,0)) Exposure_Gap,
           Sum(NVL(POSN_HEDGE_GAP,0)) Hedge_Gap,
           Sum(NVL(POSN_EXPOSURE_GAP,0)) + Sum(NVL(POSN_HEDGE_GAP,0))OverAllGap,
           round(case when Sum(NVL(POSN_EXPOSURE_GAP,0)) != 0 and Sum(NVL(POSN_HEDGE_GAP,0)) !=0 then
           ABS((Sum(NVL(POSN_HEDGE_GAP,0)) / Sum(NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) HedgeRatio,
           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) Inflow_Budget_Rate,
           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  Outflow_Budget_Rate,
           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))) Hedge_Buy_Rate,
           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))) Hedge_Sell_Rate,
           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  Exposure_Rate,
           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) Exposure_Hedge_Rate,
           avg(POSN_MTM_RATE) MTMRate,          
           --avg( pkgforexprocess.fncGetRate(30400004,30400003,'24-Jun-2020',25300001,0, to_date('01-' || POSN_MATURITY_MONTH),1)) MTMRate,
           decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
           0 ImportExport,
           to_number(posn_month_order) MonthOrder
        FROM trsystem997_NOP
        where (POSN_INFLOW_AMOUNT !=0 
          or POSN_OUTFLOW_AMOUNT !=0 
          or POSN_INFLOWHEDGE_AMOUNT!=0 
          or POSN_OUTFLOWHEDGE_AMOUNT!=0)
          and POSN_MATURITY_MONTH is not null
        --temp commented by hari  and posn_month_order >= to_char(sysdate,'YYYYMM')
        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
          group by to_number(posn_month_order),POSN_MATURITY_MONTH,POSN_IMPort_export)
          ORDER BY to_number(MonthOrder);

      Goto Process_End;
  end if;




if numinfotype = REFGETVOUCHERNUMBERS then
 varTemp3 := gconst.fncxmlextract(xmldoc,'Param/ReferenceNumbers', varTemp3);

   OPEN Gencursor FOR 
         select BCAC_VOUCHER_REFERENCE "VoucherReference",BCAC_VOUCHER_NUMBER "VoucherNumber",bcac_reference_serial "ReferenceSerial"
         from TRTRAN008 where
         --BCAC_VOUCHER_REFERENCE in (varTemp3)

         BCAC_VOUCHER_REFERENCE in (select regexp_substr(varTemp3,'[^,]+', 1, level) from dual
                                connect by regexp_substr(varTemp3, '[^,]+', 1, level) is not null)
         AND BCAC_RECORD_STATUS NOT in (10200005,10200006);
   Goto Process_End; 
end if;

if numinfotype = REFGETVOUCHERFORDATESUMMARY then
 numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);  
  numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode1);
  numCode2 := gconst.fncxmlextract(xmldoc,'Param/Portfolio', numCode2);  
  numCode3 := gconst.fncxmlextract(xmldoc,'Param/SubPortfolio', numCode3);
 --  numCode2 := gconst.fncxmlextract(xmldoc,'Param/VoucherType', numCode2);  
   -- numtemp := gconst.fncxmlextract(xmldoc,'Param/ReferenceSerial', numtemp);
   --  varReference := gconst.fncxmlextract(xmldoc,'Param/VoucherReference', varReference);
   dattemp := gconst.fncxmlextract(xmldoc,'Param/VoucherDate', dattemp);

   OPEN Gencursor FOR
--         select
--         --rownum "Rownum",
----        BCAC_ACCOUNT_HEAD  "AccountHead",
----        pkgreturncursor.fncGetDescription(BCAC_ACCOUNT_HEAD,2)  "AccountHeadDesc",
----        BCAC_VOUCHER_FCY "VoucherFcy",
----        BCAC_VOUCHER_RATE "ExRate",
----        BCAC_VOUCHER_INR "VoucherLcy",
----        BCAC_VOUCHER_INR "OverrideAmount",
----     pkgreturncursor.fncGetDescription(BCAC_CRDR_CODE,2) "CrDr",
----        BCAC_VOUCHER_NUMBER "VoucherNumber",
----        BCAC_REFERENCE_SERIAL "ReferenceSerial",
--        BCAC_VOUCHER_REFERENCE "VoucherReference",
----        BCAC_VOUCHER_TYPE "VoucherType",
--      --  pkgreturncursor.fncGetDescription(BCAC_VOUCHER_TYPE,2)  "VoucherTypeDesc",
--        pkgreturncursor.fncGetDescription(BCAC_LOCATION_CODE,2)  "LocationCodeDesc",
--        pkgreturncursor.fncGetDescription(BCAC_PORTFOLIO_CODE,2)  "PortfolioDesc",
--        pkgreturncursor.fncGetDescription(BCAC_COMPANY_CODE,2)  "CompanyCodeDesc",
--        pkgreturncursor.fncGetDescription(BCAC_SUBPORTFOLIO_CODE,2)  "SubPortfolioDesc",
--        BCAC_VOUCHER_DATE "VoucherDate"
--        from TRTRAN008
       select rownum "Rownum", a.*
       from (select  
        BCAC_VOUCHER_REFERENCE "VoucherReference",
        bcac_reference_serial "VoucherSerial",
        pkgreturncursor.fncGetDescription(BCAC_LOCATION_CODE,2)  "LocationCodeDesc",
        pkgreturncursor.fncGetDescription(BCAC_PORTFOLIO_CODE,2)  "PortfolioDesc",
        pkgreturncursor.fncGetDescription(BCAC_COMPANY_CODE,2)  "CompanyCodeDesc",
        pkgreturncursor.fncGetDescription(BCAC_SUBPORTFOLIO_CODE,2)  "SubPortfolioDesc",
        pkgreturncursor.fncGetDescription(BCAC_VOUCHER_TYPE,2)  "VoucherType",
        BCAC_VOUCHER_DATE "VoucherDate",
        sum(case when  BCAC_CRDR_CODE=14600001 then BCAC_VOUCHER_INR else 0 end) "Credit",
        sum(case when  BCAC_CRDR_CODE=14600002 then BCAC_VOUCHER_INR else 0 end) "Debit" 

       -- (select sum(BCAC_VOUCHER_FCY) from MMPRODNEW.TRTRAN008 where BCAC_VOUCHER_DATE = '30-SEP-2021' and BCAC_CRDR_CODE=14600001) as "Credit"
        from TRTRAN008  
        where  BCAC_VOUCHER_DATE = dattemp
        AND BCAC_COMPANY_CODE = numCode
        AND BCAC_LOCATION_CODE = numCode1
        AND BCAC_PORTFOLIO_CODE = numCode2
        AND BCAC_SUBPORTFOLIO_CODE = numCode3  
        AND (
        (numUserActionType = Gconst.UNCONFIRMLOAD AND BCAC_RECORD_STATUS IN (10200003)) 
        OR (numUserActionType = Gconst.CONFIRMLOAD AND BCAC_RECORD_STATUS NOT IN (10200003))) 
        AND BCAC_RECORD_STATUS NOT in (10200005,10200006)        
         GROUP BY BCAC_COMPANY_CODE,    
         BCAC_LOCATION_CODE,BCAC_PORTFOLIO_CODE,BCAC_SUBPORTFOLIO_CODE,
        BCAC_VOUCHER_DATE,BCAC_VOUCHER_REFERENCE,BCAC_VOUCHER_TYPE,bcac_reference_serial) a;
   Goto Process_End;
end if;

   if numInfoType = REFFXSUMMARYLOCWISE then
   varOperation := 'FX Summary';  
    BEGIN
           numcode1:= GConst.fncXMLExtract(xmlDoc,'//Param/BasisType',numcode1,GConst.TYPENODEPATH);
           Exception
           when others then
           numcode1 := 4;
       End;  
       prcNOP_DashBoard(varUserID,4);
    BEGIN
           numcode:= GConst.fncXMLExtract(xmlDoc,'//Param/Category',numcode,GConst.TYPENODEPATH);
           Exception
           when others then
           numcode := 31799999;
    End; 
      select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
   open gencursor for
 select  round((Inflow/numdetail),2) "Inflow",round(Outflow/numdetail,2) "Outflow",
        round((Inflow_Hedge/numdetail),2) "Inflow_Hedge" ,
        round((Outflow_Hedge/numdetail),2) "Outflow_Hedge" ,
        round((Exposure_Gap/numdetail),2) "Exposure_Gap",
        round((Hedge_Gap/numdetail),2) "Hedge_Gap",
        round((OverAllGap/numdetail),2) "OverAllGap" ,HedgeRatio "HedgeRatio",
        round(Inflow_Budget_Rate,4) "Inflow_Budget_Rate",round(Outflow_Budget_Rate,4) "Outflow_Budget_Rate",
        round(nvl(Hedge_Buy_Rate,MTMRATE),2) "Hedge_Buy_Rate", round(nvl(Hedge_Sell_Rate,MTMRATE),4) "Hedge_Sell_Rate",
        round(Exposure_Rate,4) "Exposure_Rate",round(Exposure_Hedge_Rate,4) "Exposure_Hedge_Rate",
        round(MTMRate,4) "MTMRate",
        --ExposureType "ExposureType",
        ImportExport "ImportExport",       
        round((((MTMRate-Inflow_Budget_Rate)* Inflow)/numdetail),2) "InflowPL",
        round((((Outflow_Budget_Rate-MTMRate)* Outflow)/numdetail),2) "OutflowPL",
        round((((MTMRate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "InflowHedgePL",
        round((((Hedge_Sell_Rate-MTMRate)* Outflow_Hedge)/numdetail),2) "OutflowHedgePL",
--        round(((case when ExposureType='Inflow' then
--             (MTMRate-Exposure_Hedge_Rate)* Hedge_Gap
--             else (Exposure_Hedge_Rate-MTMRate)* Hedge_Gap end)/numdetail),2) "HedgeGapPL",
--        round(((case when ExposureType='OutFlow' then
--         (MTMRate-Exposure_Rate)* OverAllGap
        -- else (Exposure_Rate-MTMRate)* OverAllGap end)/numdetail),2) "OverAllGapPL",
          Location1 "Location1"
   from(
      SELECT  
           sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))) Inflow,
           Sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) Outflow,
           Sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) Inflow_Hedge,
           Sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) Outflow_Hedge,
           abs(Sum(NVL(POSN_EXPOSURE_GAP,0))) Exposure_Gap,
           abs(Sum(NVL(POSN_HEDGE_GAP,0))) Hedge_Gap,
           Sum(NVL(POSN_EXPOSURE_GAP,0)) + Sum(NVL(POSN_HEDGE_GAP,0))OverAllGap,
           round(case when Sum(NVL(POSN_EXPOSURE_GAP,0)) != 0 and Sum(NVL(POSN_HEDGE_GAP,0)) !=0 then
           ABS((Sum(NVL(POSN_HEDGE_GAP,0)) / Sum(NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) HedgeRatio,
           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) Inflow_Budget_Rate,
           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  Outflow_Budget_Rate,
           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))) Hedge_Buy_Rate,
           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))) Hedge_Sell_Rate,
           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  Exposure_Rate,
           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) Exposure_Hedge_Rate,
           avg(POSN_MTM_RATE) MTMRate,
           --decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
           0 ImportExport,          
           pkgreturncursor.fncgetdescription(POSN_LOCATION_CODE,2) Location1
        FROM trsystem997_NOP
        where (POSN_INFLOW_AMOUNT !=0 
          or POSN_OUTFLOW_AMOUNT !=0 
          or POSN_INFLOWHEDGE_AMOUNT!=0 
          or POSN_OUTFLOWHEDGE_AMOUNT!=0)
          --and POSN_MATURITY_MONTH is not null
        --temp commented by hari  and posn_month_order >= to_char(sysdate,'YYYYMM')
        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
          group by POSN_LOCATION_CODE);

      Goto Process_End;
  end if;


--    if numInfoType = REFFXSUMMARYFWDOPT then
--   varOperation := 'FX Summary Forward Vs Options';     
--       select nvl(PRMC_Convert_AmountInto,1)
--         into numdetail
--       from trsystem051;
--   open gencursor for
--  SELECT  TO_CHAR(Posn_due_date,'Mon-yy') MaturityMonth,
--   round(sum((case when length('30400004,30400003')< 8 then abs(POSN_FUNCTIONAL_AMOUNT) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
--    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
--    'FWDBUY' BuySell,
--    'FWD'TransactionType,   
--    round(sum(abs(POSN_ALLIN_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate    
--    from trsystem997 a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
--                                                    where erel_entity_type=919 and erel_main_entity=91900005 )b
--                                                    on a.posn_account_code=b.erel_entity_relation                                                    
--                             where posn_transaction_amount!=0
--                             and posn_due_date >= SYSDATE
--                              and POSN_ALLIN_RATE !=0
--                              and b.erel_main_entity in (91900005)
--    GROUP BY TO_CHAR(Posn_due_date,'Mon-yy'), TO_CHAR(Posn_due_date,'YYYYMM'),b.erel_main_entity 
--    union all
--         SELECT  TO_CHAR(Posn_due_date,'Mon-yy') MaturityMonth,
--   round(sum((case when length('30400004,30400003') < 8 then abs(POSN_FUNCTIONAL_AMOUNT) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
--    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
--     'FWDSell' BuySell,
--    'FWD'TransactionType,
--    round(sum(abs(POSN_ALLIN_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
--    from trsystem997 a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
--                                                    where erel_entity_type=919 and erel_main_entity=91900006)b
--                                                    on a.posn_account_code=b.erel_entity_relation                                                    
--                             where posn_transaction_amount!=0
--                             and posn_due_date >= SYSDATE
--                              and POSN_ALLIN_RATE !=0
--                              and b.erel_main_entity in (91900006)
--    GROUP BY TO_CHAR(Posn_due_date,'Mon-yy'), TO_CHAR(Posn_due_date,'YYYYMM'),b.erel_main_entity   
--       union all
--         SELECT  TO_CHAR(Posn_due_date,'Mon-yy') MaturityMonth,
--   round(sum((case when length('30400004,30400003')<8 then abs(POSN_FUNCTIONAL_AMOUNT) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
--    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
--     'OPTBUY' BuySell,
--    'OPT'TransactionType ,
--     round(sum(abs(POSN_ALLIN_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
--    from trsystem997 a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
--                                                    where erel_entity_type=919 and erel_main_entity=91900007)b
--                                                    on a.posn_account_code=b.erel_entity_relation                                                    
--                             where posn_transaction_amount!=0
--                             and posn_due_date >= SYSDATE
--                              and POSN_ALLIN_RATE !=0
--                              and b.erel_main_entity in (91900007)
--    GROUP BY TO_CHAR(Posn_due_date,'Mon-yy'), TO_CHAR(Posn_due_date,'YYYYMM'),b.erel_main_entity 
--
--       union all
--         SELECT  TO_CHAR(Posn_due_date,'Mon-yy') MaturityMonth,
--   round(sum((case when length('30400004,30400003')<8 then abs(POSN_FUNCTIONAL_AMOUNT) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
--    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
--     'OPTSELL' BuySell,
--    'OPT'TransactionType  ,
--     round(sum(abs(POSN_ALLIN_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
--    from trsystem997 a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
--                                                    where erel_entity_type=919 and erel_main_entity=91900008 )b
--                                                    on a.posn_account_code=b.erel_entity_relation                                                    
--                             where posn_transaction_amount!=0
--                             and posn_due_date >= SYSDATE
--                              and POSN_ALLIN_RATE !=0
--                              and b.erel_main_entity in (91900008)
--    GROUP BY TO_CHAR(Posn_due_date,'Mon-yy'), TO_CHAR(Posn_due_date,'YYYYMM'),b.erel_main_entity 
--    ORDER BY 1;
--
--      Goto Process_End;
--  end if;
    if numInfoType = REFFXSUMMARYFWDOPT then
       BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp3,GConst.TYPENODEPATH);
           Exception
       when others then
           vartemp3 := 'ALL';
       End; 

   varOperation := 'FX Summary Forward Vs Options';     
      select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
   open gencursor for
  SELECT  TO_CHAR(Posn_due_date,'Mon-yy') MaturityMonth,
   round(sum((case when ((length(vartemp3)>9) or (vartemp3='ALL')) then abs(POSN_FUNCTIONAL_AMOUNT) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
    'FWDBUY' BuySell,
    'FWD'TransactionType,   
    round(sum(abs(POSN_ALLIN_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate    
    from trsystem997 
    WHERE POSN_transaction_TYPE=32200001
    AND posn_buy_SELL=25300001

--    a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
--                                                    where erel_entity_type=919 and erel_main_entity=91900005 )b
--                                                    on a.posn_account_code=b.erel_entity_relation                                                    
--                             where posn_transaction_amount!=0
--                             and posn_due_date >= SYSDATE
--                              and POSN_ALLIN_RATE !=0
--                              and b.erel_main_entity in (91900005)
    GROUP BY TO_CHAR(Posn_due_date,'Mon-yy'), TO_CHAR(Posn_due_date,'YYYYMM')
    union all
         SELECT  TO_CHAR(Posn_due_date,'Mon-yy') MaturityMonth,
   round(sum((case when ((length(vartemp3)>9) or (vartemp3='ALL')) then abs(POSN_FUNCTIONAL_AMOUNT) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
     'FWDSell' BuySell,
    'FWD'TransactionType,
    round(sum(abs(POSN_ALLIN_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
    from trsystem997 
    WHERE POSN_transaction_TYPE=32200001
    AND posn_buy_SELL=25300002
--    a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
--                                                    where erel_entity_type=919 and erel_main_entity=91900006)b
--                                                    on a.posn_account_code=b.erel_entity_relation                                                    
--                             where posn_transaction_amount!=0
--                             and posn_due_date >= SYSDATE
--                              and POSN_ALLIN_RATE !=0
--                              and b.erel_main_entity in (91900006)
    GROUP BY TO_CHAR(Posn_due_date,'Mon-yy'), TO_CHAR(Posn_due_date,'YYYYMM') 
       union all
         SELECT  TO_CHAR(Posn_due_date,'Mon-yy') MaturityMonth,
   round(sum((case when ((length(vartemp3)>9) or (vartemp3='ALL')) then abs(POSN_FUNCTIONAL_AMOUNT) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
     'OPTBUY' BuySell,
    'OPT'TransactionType ,
     round(sum(abs(POSN_ALLIN_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
    from trsystem997 
    WHERE POSN_transaction_TYPE=32200003
    AND posn_buy_SELL=25300001
--    a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
--                                                    where erel_entity_type=919 and erel_main_entity=91900007)b
--                                                    on a.posn_account_code=b.erel_entity_relation                                                    
--                             where posn_transaction_amount!=0
--                             and posn_due_date >= SYSDATE
--                              and POSN_ALLIN_RATE !=0
--                              and b.erel_main_entity in (91900007)
    GROUP BY TO_CHAR(Posn_due_date,'Mon-yy'), TO_CHAR(Posn_due_date,'YYYYMM')

       union all
         SELECT  TO_CHAR(Posn_due_date,'Mon-yy') MaturityMonth,
   round(sum((case when ((length(vartemp3)>9) or (vartemp3='ALL')) then abs(POSN_FUNCTIONAL_AMOUNT) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
     'OPTSELL' BuySell,
    'OPT'TransactionType  ,
     round(sum(abs(POSN_ALLIN_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
    from trsystem997 
    WHERE POSN_transaction_TYPE=32200003
    AND posn_buy_SELL=25300002
--    a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
--                                                    where erel_entity_type=919 and erel_main_entity=91900008 )b
--                                                    on a.posn_account_code=b.erel_entity_relation                                                    
--                             where posn_transaction_amount!=0
--                             and posn_due_date >= SYSDATE
--                              and POSN_ALLIN_RATE !=0
--                              and b.erel_main_entity in (91900008)
    GROUP BY TO_CHAR(Posn_due_date,'Mon-yy'), TO_CHAR(Posn_due_date,'YYYYMM')
  union
  SELECT  TO_CHAR(Posn_due_date,'Mon-yy') MaturityMonth,
   round(sum((case when ((length(vartemp3)>9) or (vartemp3='ALL')) then abs(POSN_FUNCTIONAL_AMOUNT) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
     'FURBUY' BuySell,
    'FUR'TransactionType ,
     round(sum(abs(POSN_ALLIN_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
    from trsystem997 
    WHERE POSN_transaction_TYPE=32200002
    AND posn_buy_SELL=25300001
--    a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
--                                                    where erel_entity_type=919 and erel_main_entity=91900009)b
--                                                    on a.posn_account_code=b.erel_entity_relation                                                    
--                             where posn_transaction_amount!=0
--                             and posn_due_date >= SYSDATE
--                              and POSN_ALLIN_RATE !=0
--                              and b.erel_main_entity in (91900009)
    GROUP BY TO_CHAR(Posn_due_date,'Mon-yy'), TO_CHAR(Posn_due_date,'YYYYMM')
   union all
         SELECT  TO_CHAR(Posn_due_date,'Mon-yy') MaturityMonth,
   round(sum((case when ((length(vartemp3)>9) or (vartemp3='ALL')) then abs(POSN_FUNCTIONAL_AMOUNT) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
     'FURSELL' BuySell,
    'FUR'TransactionType  ,
     round(sum(abs(POSN_ALLIN_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
    from trsystem997 a 
    WHERE POSN_transaction_TYPE=32200002
    AND posn_buy_SELL=25300002
--    left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
--                                                    where erel_entity_type=919 and erel_main_entity=91900010 )b
--                                                    on a.posn_account_code=b.erel_entity_relation                                                    
--                             where posn_transaction_amount!=0
--                             and posn_due_date >= SYSDATE
--                              and POSN_ALLIN_RATE !=0
--                              and b.erel_main_entity in (91900010)
    GROUP BY TO_CHAR(Posn_due_date,'Mon-yy'), TO_CHAR(Posn_due_date,'YYYYMM')
    ORDER BY 1;

      Goto Process_End;
  end if;
  if  numInfoType = REFGRIDSCHEMA then   
     vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CursorType',vartemp,GConst.TYPENODEPATH);
    open gencursor for 
        select GRID_CURSOR_NAME "CursorName",
                Grid_Cursor_Number CursorNumber, 
                --pkgreturncursor.fncgetdescription(GRID_LANGUAGE_CODE,2) LanguageCode,--- en English French fr 903
                GRID_COLUMN_NAME ColumnName,
                pkgreturncursor.fncgetdescription(GRID_COLUMN_TYPE,2) ColumnType , -- New Pick Code --STRING, NUMBER, DATE ColumnDataType 904
                GRID_DISPLAY_NAME DisplayName,
                pkgreturncursor.fncgetdescription(Nvl(GRID_DISPLAY_YN,12400002),2) DisplayYN,
                to_char(nvl(GRID_COLUMN_WIDTH,100)) Width,
                nvl(GRID_TEXT_LENGTH,'99999') "TextLength",
                pkgreturncursor.fncgetdescription(nvl(GRID_AGGREGATE_YN,12400002),2) AggregateYN,
                GRID_AGGREGATE_FUNCTION AggregateFunction, -- New Pick Code -- SUM, AVG, Etc.. -905
                pkgreturncursor.fncgetdescription(nvl(GRID_EDITABLE_YN,12400002),2) EditableYN,
                nvl(GRID_Decimal_scale,'0') FormatString
              --  to_char(nvl(GRID_PICK_GROUP,0)) PickGroup
                from TRSYSTEM999C
                where instr(vartemp,Grid_Cursor_Number)>0;
        Goto Process_End;
    end if;   

--------------------ADDED BY SUPRIYA 18/11/2020-----------------------------------------------
if numinfotype =REFGETDATAUPLOADSYNONYMS then
    OPEN Gencursor FOR 
          select LOAD_DATA_NAME SynonymName, LOAD_FILENAME_INCLUDE FileNameInclude
          from trsystem969;
    Goto Process_End; 
end if;

-------------------------------------------ADDED BY SUPRIYA ON 23/04/2020------------------------------------------
--if  numInfoType = REFGETCASHFLOWCATEGORIES then      
--    vartemp1 := gconst.fncxmlextract(xmldoc,'CommandSet/Entity', vartemp1); 
--    open gencursor for 
--        SELECT CASM_PICK_CODE "ID", CASM_SHORT_DESCRIPTION "ShortDescription",
--               CASM_LONG_DESCRIPTION "Name", CASM_CATEGORY1 "Category1",
--               CASM_CATEGORY2 "Category2", CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
--               CASM_INFLOW_OUTFLOW "InflowOutflowCode", pkgreturncursor.fncgetdescription(CASM_INFLOW_OUTFLOW,2) "InflowOutflow"
--        FROM TRMASTER150
--        WHERE CASM_RECORD_STATUS NOT IN (10200005,10200006);
--       
--    Goto Process_End;
--end if; 

if  numInfoType = REFGETCASHFLOWCATEGORIES then      
    vartemp1 := gconst.fncxmlextract(xmldoc,'CommandSet/Entity', vartemp1); 
     begin
        numUserActionType:= nvl(gconst.fncxmlextract(xmldoc,'UserActionType',numUserActionType),0);
    exception 
      when others then
        numUserActionType:=101;
    end;
  --  insert into temp values('UserActionType',numUserActionType);commit;
    if (numUserActionType IN (101,102) and vartemp1 != 'CASHFLOWERPMAPPING') then
        select FLDP_COLUMN_NAME 
          into varTemp2
        from trsystem999
        where fldp_table_synonym =vartemp1
        and FLDP_PICK_GROUP=150;

       select FLDP_COLUMN_NAME 
          into varTemp3
        from trsystem999
        where fldp_table_synonym =vartemp1
        and FLDP_XML_FIELD='RecordStatus';

        varQuery:= 'SELECT CASM_PICK_CODE "ID", CASM_SHORT_DESCRIPTION "ShortDescription",
                   CASM_LONG_DESCRIPTION "Name", CASM_CATEGORY1 "Category1",
                   CASM_CATEGORY2 "Category2", CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
                   CASM_INFLOW_OUTFLOW "InflowOutflowCode", pkgreturncursor.fncgetdescription(CASM_INFLOW_OUTFLOW,2) "InflowOutflow"
            FROM TRMASTER150
            WHERE CASM_RECORD_STATUS NOT IN (10200005,10200006)' ||
           ' and casm_pick_code not in ( select ' || varTemp2 || ' from  ' || vartemp1 || ' where ' || varTemp3 || ' not in (10200005,10200006))';

           GLOG.LOG_Write(varQuery );
        open gencursor for varQuery;
        Goto Process_End;
    else
        open gencursor for
            SELECT CASM_PICK_CODE "ID", CASM_SHORT_DESCRIPTION "ShortDescription",
                   CASM_LONG_DESCRIPTION "Name", CASM_CATEGORY1 "Category1",
                   CASM_CATEGORY2 "Category2", CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
                   CASM_INFLOW_OUTFLOW "InflowOutflowCode", pkgreturncursor.fncgetdescription(CASM_INFLOW_OUTFLOW,2) "InflowOutflow"
            FROM TRMASTER150
            WHERE CASM_RECORD_STATUS NOT IN (10200005,10200006);
        Goto Process_End;
    end if;  
end if; 

if numinfotype =REFGETMATCHINGFILEPREFIXES then
    begin
        vartemp1 := gconst.fncxmlextract(xmldoc,'Param/FileNamePrefix', vartemp1);
    exception 
    when others then
        vartemp1 := '';
    end;

    OPEN Gencursor FOR 
--          select LOAD_DATA_NAME "SynonymName", LOAD_FILENAME_INCLUDE "FileNameInclude", LOAD_DISPLAY_NAME "DisplayName"
--          from trsystem969
--          where upper(LOAD_FILENAME_INCLUDE) = decode(vartemp1,null,LOAD_FILENAME_INCLUDE,upper(vartemp1));
        select LOAD_DATA_NAME "SynonymName", LOAD_FILENAME_INCLUDE "FileNameInclude", LOAD_DISPLAY_NAME "DisplayName",
                LOAD_SHEET_NAME sheetname, LOAD_STARTHEADER_ROW startheaderrow,
                LOAD_HEADER_ROWCOUNT headercount, LOAD_DATASOURCE_TYPE "DataSourceType"
        from trsystem969
        where (((varentity = 'DROPBOX' or varentity = 'INBOUNDDATAINTERFACE') 
        AND INSTR(upper(vartemp1), upper(LOAD_FILENAME_INCLUDE)) <> 0) or
        (varentity = 'DATAUPLOADCONFIG' and upper(LOAD_FILENAME_INCLUDE) = upper(vartemp1)));
    Goto Process_End; 
end if;
--------------------------------------------------ADDED BY SUPRIYA ON 05/06/2020------------------------------------------------------------------- 
if  numInfoType = REFGETPRINCIPALSCHEDULEIRS then   
vartemp1 := gconst.fncxmlextract(xmldoc,'Param/SystemReference', vartemp1); 

    select count(*)
    into numcode
    FROM TRTRAN091C
    WHERE IIRN_IRS_NUMBER = vartemp1
    AND IIRN_RECORD_STATUS NOT IN (10200005,10200006);

    if numcode = 0 then 
        open gencursor for
            SELECT rownum "Rownum", IIRS_IRS_NUMBER "IrsNumber", 1 "LegSerial", 1 "SerialNumber", 
                   IIRS_START_DATE "EffectiveDate", 1 "RecordStatus", IIRS_NOTIONAL_AMOUNT "NotionalRecieptAmt",
                   IIRS_NOTIONAL_AMOUNT "ReceiptAmount", IIRS_NOTIONAL_AMOUNT "OutstandingReceipt",
                   0 "NotionalPaymentAmt", 0 "PaymentAmount", 0 "OutstandingPayment"                   
            FROM TRTRAN091 
            WHERE IIRS_IRS_NUMBER = vartemp1
            AND IIRS_RECORD_STATUS NOT IN (10200005,10200006)
             and IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
        Goto Process_End;
    else
        open gencursor for
            SELECT rownum "Rownum", IIRN_IRS_NUMBER "IrsNumber", IIRN_LEG_SERIAL "LegSerial",  
                   IIRN_SERIAL_NUMBER "SerialNumber", IIRN_EFFECTIVE_DATE "EffectiveDate", 
                   0 "NotionalRecieptAmt", 0 "NotionalPaymentAmt",
                   IIRN_EFFECTIVE_AMOUNT "ReceiptAmount", IIRN_OUTSTANDING_AMOUNT "OutstandingReceipt",
                   IIRN_PAYMENT_AMOUNT "PaymentAmount", IIRN_OUTSTANDING_PAYMENT "OutstandingPayment",
                   2 "RecordStatus"
            FROM TRTRAN091C
            WHERE IIRN_IRS_NUMBER = vartemp1
            AND IIRN_RECORD_STATUS NOT IN (10200005,10200006) ;
       Goto Process_End;
    end if;
end if; 

--------------------------------------------------ADDED BY SUPRIYA ON 16/06/2020------------------------------------------------------------------- 
if  numInfoType = REFGETPRINCIPALSCHEDULECSS then   
vartemp1 := gconst.fncxmlextract(xmldoc,'Param/SystemReference', vartemp1);    

    select count(*)
    into numcode
    FROM TRTRAN091C
    WHERE IIRN_IRS_NUMBER = vartemp1
    AND IIRN_RECORD_STATUS NOT IN (10200005,10200006);

    if numcode = 0 then 
        open gencursor for
            SELECT rownum "Rownum", IIRS_IRS_NUMBER "IrsNumber", 2 "LegSerial", 
                1 "SerialNumber", IIRS_START_DATE "EffectiveDate", 
                pkgreturncursor.fncgetdescription(nvl(ReceiptCurrency,30499999),2) "ReceiptCurrency", 
                ReceiptAmount "NotionalRecieptAmt", ReceiptAmount "ReceiptAmount", ReceiptAmount "OutstandingReceipt", 
                pkgreturncursor.fncgetdescription(nvl(PaymentCurrency,30499999),2) "PaymentCurrency",
                PaymentAmount "NotionalPaymentAmt", PaymentAmount "PaymentAmount", PaymentAmount "OutstandingPayment",
                1 "RecordStatus"
            FROM TRTRAN091 left outer join (SELECT IIRL_IRS_NUMBER,
                sum(case when IIRL_LEG_SERIAL = 1 then IIRL_NOTIONAL_AMOUNT else 0 end) ReceiptAmount,
                sum(case when IIRL_LEG_SERIAL = 1 then IIRL_CURRENCY_CODE else 0 end) ReceiptCurrency,
                sum(case when IIRL_LEG_SERIAL = 2 then IIRL_NOTIONAL_AMOUNT else 0 end) PaymentAmount,
                sum(case when IIRL_LEG_SERIAL = 2 then IIRL_CURRENCY_CODE else 0 end) PaymentCurrency
                FROM TRTRAN091A
                WHERE IIRL_RECORD_STATUS NOT IN (10200005,10200006)
                group by IIRL_IRS_NUMBER)a
            on IIRS_IRS_NUMBER = a.IIRL_IRS_NUMBER
            WHERE IIRS_IRS_NUMBER = vartemp1
            AND IIRS_RECORD_STATUS NOT IN (10200005,10200006)
            and IIRS_COMPANY_CODE in(select usco_company_code from trsystem022a
            where UPPER(usco_user_id) = varUserid
            AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
            and IIRS_LOCATION_CODE in(select USLO_ENTITY from trsystem022d
            where UPPER(USLO_USER_ID) = varUserid
            and USLO_RECORD_STATUS NOT IN (10200005,10200006));
        Goto Process_End;
    else
        open gencursor for
            SELECT rownum "Rownum", IIRN_IRS_NUMBER "IrsNumber", IIRN_LEG_SERIAL "LegSerial",  
                    IIRN_SERIAL_NUMBER "SerialNumber", IIRN_EFFECTIVE_DATE "EffectiveDate", 
                    pkgreturncursor.fncgetdescription(nvl(ReceiptCurrency,30499999),2) "ReceiptCurrency", 
                    0 "NotionalRecieptAmt", 0"NotionalPaymentAmt",
                    IIRN_EFFECTIVE_AMOUNT "ReceiptAmount", IIRN_OUTSTANDING_AMOUNT "OutstandingReceipt",
                    IIRN_PAYMENT_AMOUNT "PaymentAmount", IIRN_OUTSTANDING_PAYMENT "OutstandingPayment",
                    pkgreturncursor.fncgetdescription(nvl(PaymentCurrency,30499999),2) "PaymentCurrency",
                    2 "RecordStatus"
            FROM TRTRAN091C left outer join (SELECT IIRL_IRS_NUMBER,
                            sum(case when IIRL_LEG_SERIAL = 1 then IIRL_CURRENCY_CODE else 0 end) ReceiptCurrency,
                            sum(case when IIRL_LEG_SERIAL = 2 then IIRL_CURRENCY_CODE else 0 end) PaymentCurrency
                            FROM TRTRAN091A
                            WHERE IIRL_RECORD_STATUS NOT IN (10200005,10200006)
                            group by IIRL_IRS_NUMBER)a
            on IIRN_IRS_NUMBER = a.IIRL_IRS_NUMBER
            WHERE IIRN_IRS_NUMBER = vartemp1
            AND IIRN_RECORD_STATUS NOT IN (10200005,10200006);
--            SELECT rownum "Rownum", IIRN_IRS_NUMBER "IrsNumber", IIRN_LEG_SERIAL "LegSerial",  
--                   IIRN_SERIAL_NUMBER "SerialNumber", IIRN_EFFECTIVE_DATE "EffectiveDate", 
--                   pkgreturncursor.fncgetdescription(nvl((SELECT IIRL_CURRENCY_CODE 
--                   FROM TRTRAN091A
--                   WHERE IIRL_IRS_NUMBER = vartemp1 AND IIRL_LEG_SERIAL = 1
--                   AND IIRL_RECORD_STATUS NOT IN (10200005,10200006)),0),2) "ReceiptCurrency", 
--                   0 "NotionalRecieptAmt",0"NotionalPaymentAmt",
--                   IIRN_EFFECTIVE_AMOUNT "ReceiptAmount", IIRN_OUTSTANDING_AMOUNT "OutstandingReceipt",
--                   IIRN_PAYMENT_AMOUNT "PaymentAmount", IIRN_OUTSTANDING_PAYMENT "OutstandingPayment",
--                   pkgreturncursor.fncgetdescription(nvl((SELECT IIRL_CURRENCY_CODE 
--                   FROM TRTRAN091A
--                   WHERE IIRL_IRS_NUMBER = vartemp1 AND IIRL_LEG_SERIAL = 2
--                   AND IIRL_RECORD_STATUS NOT IN (10200005,10200006)),0),2) "PaymentCurrency",
--                   2 "RecordStatus"
--            FROM TRTRAN091C
--            WHERE IIRN_IRS_NUMBER = vartemp1
--            AND IIRN_RECORD_STATUS NOT IN (10200005,10200006);
       Goto Process_End;
    end if;
end if; 
--------------------------------------------------ADDED BY SUPRIYA ON 28/05/2020------------------------------------------------------------------- 
if  numInfoType = REFGETMATURITYSCHEDULE then      

     begin
        vartemp1 := gconst.fncxmlextract(xmldoc,'Param/SystemReference', vartemp1);
        --numUserActionType:= nvl(gconst.fncxmlextract(xmldoc,'UserActionType',numUserActionType),0);
    exception 
      when others then
        vartemp1 := null;
    end; 

--    if vartemp1 = null then        
--        open gencursor for       
--            SELECT rownum "Rownum", IIRM_IRS_NUMBER "SystemReference", IIRM_LEG_SERIAL "LegSerial", IIRM_SERIAL_NUMBER "SerialNumber", 
--                   IIRM_INTSTART_DATE "IntStartDate", IIRM_SETTLEMENT_DATE "SettlementDate",
--                   IIRM_INTEND_DATE "IntEndDate", IIRM_INTFIXING_DATE "IntFixingDate", IIRM_AMOUNT_FCY "AmountFCY",
--                   IIRM_PROCESS_COMPLETE "ProcessComplete", 1 "RecordStatus"
--            FROM TRTRAN091BB
--            WHERE IIRM_RECORD_STATUS NOT IN (10200005,10200006);
--        Goto Process_End;
--    else     
        open gencursor for
            SELECT IIRM_IRS_NUMBER "SystemReference", IIRM_LEG_SERIAL "LegSerial", IIRM_SERIAL_NUMBER "SerialNumber", 
                   IIRM_INTSTART_DATE "IntStartDate", IIRM_SETTLEMENT_DATE "SettlementDate",
                   IIRM_INTEND_DATE "IntEndDate", IIRM_INTFIXING_DATE "IntFixingDate",
                   IIRM_AMOUNT_FCY "AmountFCY", IIRM_PROCESS_COMPLETE "ProcessComplete", to_char(1) "RecordStatus"
            FROM TRTRAN091BB
            WHERE IIRM_IRS_NUMBER = vartemp1
            AND IIRM_RECORD_STATUS NOT IN (10200005,10200006)
            AND IIRM_PROCESS_COMPLETE != 12400001;

--                        SELECT IIRM_IRS_NUMBER "SystemReference", IIRM_LEG_SERIAL "LegSerial", IIRM_SERIAL_NUMBER "SerialNumber", 
--                   to_char(IIRM_INTSTART_DATE,'dd-MON-YYYY') "IntStartDate", to_char(IIRM_SETTLEMENT_DATE,'dd-MON-YYYY') "SettlementDate",
--                   to_char(IIRM_INTEND_DATE,'dd-MON-YYYY') "IntEndDate", to_char(IIRM_INTFIXING_DATE,'dd-MON-YYYY') "IntFixingDate",
--                   IIRM_AMOUNT_FCY "AmountFCY", IIRM_PROCESS_COMPLETE "ProcessComplete", to_char(1) "RecordStatus"
--            FROM TRTRAN091BB
--            WHERE IIRM_IRS_NUMBER = vartemp1
--            AND IIRM_RECORD_STATUS NOT IN (10200005,10200006)
--            AND IIRM_PROCESS_COMPLETE != 12400001;

        Goto Process_End;
    --end if; 
end if; 

--------------------------------------ADDED BY SUPRIYA ON 16/06/2020-------------------------------------------------

if  numInfoType = REFGETMAXSETTLEMENTDATE then 
    begin
         varreference := gconst.fncxmlextract(xmldoc,'Param/SystemReference',varreference);
    exception 
      when others then
        varreference := null;
    end; 

    open gencursor for       
         Select * from 
            (SELECT IIRM_IRS_NUMBER "SystemReference", IIRM_LEG_SERIAL "LegSerial", IIRM_SERIAL_NUMBER "SerialNumber", 
                  to_char(IIRM_SETTLEMENT_DATE,'dd-MON-YYYY') "SettlementDate"
                  FROM TRTRAN091BB
                  WHERE IIRM_IRS_NUMBER = varreference 
                  AND IIRM_RECORD_STATUS NOT IN (10200005,10200006)
                  AND IIRM_PROCESS_COMPLETE = 12400001 order by IIRM_SETTLEMENT_DATE desc)
         where rownum in (1,2);  
    Goto Process_End;
end if; 

-------------------------------------------ADDED BY SUPRIYA ON 23/04/2020------------------------------------------
if  numInfoType = REFGETBANKBRANCHDETAILS then  

    begin
        numcode1:= GConst.fncXMLExtract(xmlDoc,'//Param/PaymentBank',numcode1,GConst.TYPENODEPATH);
    exception
    when others then
        numcode1:= 0;
    end;

    open gencursor for 
            SELECT pkgreturncursor.fncgetdescription(BRNH_COMPANY_CODE,1) "Company",
                   pkgreturncursor.fncgetdescription(BRNH_LOCATION_CODE,1) "Location",
                   pkgreturncursor.fncgetdescription(BRNH_BANK_CODE,1) "Bank",
                   BRNH_SHORT_DESCRIPTION "ShortDescription", BRNH_LONG_DESCRIPTION "LongDescription",
                   ACCT_ACCOUNT_NUMBER "AccountNumber", pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,1) "AccountType",
                   BRNH_ICONTACT_PERSON "InternalContact", BRNH_ECONTACT_PERSON "ExternalContact", BRNH_ADDRESS_1 "Address1",
                   BRNH_ADDRESS_2 "Address2", BRNH_ADDRESS_3 "Address3", BRNH_ADDRESS_4 "Address4",
                   BRNH_PHONE_NUMBERS "Phonenumber", BRNH_FAX_NUMBERS "Faxnumber", BRNH_EMAIL_ID "EmailID",
                   BRNH_IFSC_CODE "IFSC", BRNH_SAP_CODE "SAP", BRNH_SWIFT_CODE "Swift", 
                   pkgreturncursor.fncgetdescription(BRNH_HOST_HOST,1) "Host", BRNH_HOST_HOST "HostCode",
                   BRNH_MINIMUM_BALANCE "MinBal", BRNH_ACCOUNT_TYPE "AccountTypeCode",
                   BRNH_COMPANY_CODE "CompanyCode", BRNH_BANK_CODE "BankCode", BRNH_LOCATION_CODE "LocationCode"
            FROM TRMASTER306A inner join TRMASTER306B
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE and ACCT_RECORD_STATUS not in (10200005,10200006)
            WHERE BRNH_BANK_CODE = numcode1
            and BRNH_RECORD_STATUS NOT IN (10200005,10200006)
            -- added By manjunath Reddy
            and ACCT_ACCOUNT_STATUS=14400001
            AND BRNH_COMPANY_CODE  in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
            AND BRNH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)) ;
    Goto Process_End;
end if; 
---------------------------------------------ADDED BY SUPRIYA ON 23/04/2020------------------------------------------
--if  numInfoType = REFGETCURWISEBRANCHDETAILS then 
--    begin
--        numcode2:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyCode',numcode1,GConst.TYPENODEPATH);
--    exception
--    when others then
--        numcode2:= 0;
--    end;
--
--    begin
--       numcode1:= GConst.fncXMLExtract(xmlDoc,'//Param/FromBankCode',numcode1,GConst.TYPENODEPATH);
--    exception
--    when others then
--        numcode1:= 0 ;
--    end;
--
--    if numcode1 = 0 then
--        begin
--            numcode1:= GConst.fncXMLExtract(xmlDoc,'//Param/ToBankCode',numcode1,GConst.TYPENODEPATH);
--        exception
--        when others then
--            numcode1:= 0;
--        end;
--       open gencursor for 
--         SELECT pkgreturncursor.fncgetdescription(BRNH_COMPANY_CODE,1) "Company",
--                   pkgreturncursor.fncgetdescription(BRNH_LOCATION_CODE,1) "Location",
--                   pkgreturncursor.fncgetdescription(BRNH_BANK_CODE,1) "Bank",
--                   BRNH_SHORT_DESCRIPTION "ShortDescription", BRNH_LONG_DESCRIPTION "LongDescription",
--                   BRNH_ACCOUNT_NUMBER "AccountNumber", pkgreturncursor.fncgetdescription(BRNH_ACCOUNT_TYPE,1) "AccountType",
--                   BRNH_ICONTACT_PERSON "InternalContact", BRNH_ECONTACT_PERSON "ExternalContact", BRNH_ADDRESS_1 "Address1",
--                   BRNH_ADDRESS_2 "Address2", BRNH_ADDRESS_3 "Address3", BRNH_ADDRESS_4 "Address4",
--                   BRNH_PHONE_NUMBERS "Phonenumber", BRNH_FAX_NUMBERS "Faxnumber", BRNH_EMAIL_ID "EmailID",
--                   BRNH_IFSC_CODE "IFSC", BRNH_SAP_CODE "SAP", BRNH_SWIFT_CODE "Swift", 
--                   pkgreturncursor.fncgetdescription(BRNH_HOST_HOST,1) "Host", BRNH_HOST_HOST "HostCode",
--                   BRNH_MINIMUM_BALANCE "MinBal", BRNH_ACCOUNT_TYPE "AccountTypeCode",
--                   BRNH_COMPANY_CODE "CompanyCode", BRNH_BANK_CODE "BankCode", BRNH_LOCATION_CODE "LocationCode"
--            FROM TRMASTER306A
--            WHERE BRNH_BANK_CODE = numcode1 and BRNH_CURRENCY_CODE = numcode2
--            and nvl(BRNH_CONCENTRATION_ACCOUNTS,12400002) = 12400001 
--            and BRNH_RECORD_STATUS NOT IN (10200005,10200006)
--             and BRNH_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                    where UPPER(usco_user_id) = varUserid
--            AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
--           and BRNH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
--       Goto Process_End;
--    else
--       open gencursor for 
--         SELECT pkgreturncursor.fncgetdescription(BRNH_COMPANY_CODE,1) "Company",
--                   pkgreturncursor.fncgetdescription(BRNH_LOCATION_CODE,1) "Location",
--                   pkgreturncursor.fncgetdescription(BRNH_BANK_CODE,1) "Bank",
--                   BRNH_SHORT_DESCRIPTION "ShortDescription", BRNH_LONG_DESCRIPTION "LongDescription",
--                   BRNH_ACCOUNT_NUMBER "AccountNumber", pkgreturncursor.fncgetdescription(BRNH_ACCOUNT_TYPE,1) "AccountType",
--                   BRNH_ICONTACT_PERSON "InternalContact", BRNH_ECONTACT_PERSON "ExternalContact", BRNH_ADDRESS_1 "Address1",
--                   BRNH_ADDRESS_2 "Address2", BRNH_ADDRESS_3 "Address3", BRNH_ADDRESS_4 "Address4",
--                   BRNH_PHONE_NUMBERS "Phonenumber", BRNH_FAX_NUMBERS "Faxnumber", BRNH_EMAIL_ID "EmailID",
--                   BRNH_IFSC_CODE "IFSC", BRNH_SAP_CODE "SAP", BRNH_SWIFT_CODE "Swift", 
--                   pkgreturncursor.fncgetdescription(BRNH_HOST_HOST,1) "Host", BRNH_HOST_HOST "HostCode",
--                   BRNH_MINIMUM_BALANCE "MinBal", BRNH_ACCOUNT_TYPE "AccountTypeCode",
--                   BRNH_COMPANY_CODE "CompanyCode", BRNH_BANK_CODE "BankCode", BRNH_LOCATION_CODE "LocationCode"
--            FROM TRMASTER306A
--            WHERE BRNH_BANK_CODE = numcode1 and BRNH_CURRENCY_CODE = numcode2
--            and BRNH_RECORD_STATUS NOT IN (10200005,10200006)
--             and BRNH_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                    where UPPER(usco_user_id) = varUserid
--		  AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
--          and BRNH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
--       Goto Process_End;
--    end if;
--end if; 

-------------------------------------------ADDED BY SUPRIYA ON 23/04/2020------------------------------------------
if  numInfoType = REFGETCURWISEBRANCHDETAILS then 
    begin
        numcode2:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyCode',numcode1,GConst.TYPENODEPATH);
    exception
    when others then
        numcode2:= 0;
    end;

    begin
       numcode1:= GConst.fncXMLExtract(xmlDoc,'//Param/FromBankCode',numcode1,GConst.TYPENODEPATH);
    exception
    when others then
        numcode1:= 0 ;
    end;

    begin
        numcode3:= GConst.fncXMLExtract(xmlDoc,'//Param/ToBankCode',numcode3,GConst.TYPENODEPATH);
    exception
    when others then
        numcode3:= 0;
    end;

    open gencursor for 
         SELECT pkgreturncursor.fncgetdescription(BRNH_COMPANY_CODE,1) "Company",
                   pkgreturncursor.fncgetdescription(BRNH_LOCATION_CODE,1) "Location",
                   pkgreturncursor.fncgetdescription(BRNH_BANK_CODE,1) "Bank",
                   BRNH_SHORT_DESCRIPTION "ShortDescription", BRNH_LONG_DESCRIPTION "LongDescription",
                   ACCT_ACCOUNT_NUMBER "AccountNumber", pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,1) "AccountType",
                   BRNH_ICONTACT_PERSON "InternalContact", BRNH_ECONTACT_PERSON "ExternalContact", BRNH_ADDRESS_1 "Address1",
                   BRNH_ADDRESS_2 "Address2", BRNH_ADDRESS_3 "Address3", BRNH_ADDRESS_4 "Address4",
                   BRNH_PHONE_NUMBERS "Phonenumber", BRNH_FAX_NUMBERS "Faxnumber", BRNH_EMAIL_ID "EmailID",
                   BRNH_IFSC_CODE "IFSC", BRNH_SAP_CODE "SAP", BRNH_SWIFT_CODE "Swift", 
                   pkgreturncursor.fncgetdescription(BRNH_HOST_HOST,1) "Host", BRNH_HOST_HOST "HostCode",
                   BRNH_MINIMUM_BALANCE "MinBal", ACCT_ACCOUNT_TYPE "AccountTypeCode",
                   BRNH_COMPANY_CODE "CompanyCode", BRNH_BANK_CODE "BankCode", BRNH_LOCATION_CODE "LocationCode"
            FROM TRMASTER306A inner join TRMASTER306B
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE and ACCT_RECORD_STATUS not in (10200005,10200006)
            WHERE BRNH_BANK_CODE = decode(numcode1,0,numcode3,numcode1) 
            and BRNH_CURRENCY_CODE = numcode2
            and ACCT_CONCENTRATION_ACCOUNT = decode(numcode1,0,ACCT_CONCENTRATION_ACCOUNT,12400001) 
            and BRNH_RECORD_STATUS NOT IN (10200005,10200006)
             and BRNH_COMPANY_CODE in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid
            AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
           and BRNH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
    Goto Process_End;
end if; 
--------------------------------------------------------------------------------------------------------------------- 

  if  numInfoType = REFRiskMonitoring then   
    -- vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CursorType',vartemp,GConst.TYPENODEPATH);
    open gencursor for 
      select pkgreturncursor.fncgetdescription(RiskTriggered.RiskType,1) RiskType,
            RiskTriggered.Triggered,
           (case when (RiskTriggered.Triggered < EarlierTriggered.Earlier) then 
           EarlierTriggered.Earlier-RiskTriggered.Triggered else 0 end) ActionaTaken,
           RiskTriggered.Triggered - (case when (RiskTriggered.Triggered < EarlierTriggered.Earlier) then 
           EarlierTriggered.Earlier-RiskTriggered.Triggered else 0 end)
           PendingForAction
            from (select rdel_risk_type RiskType,count(*) Triggered
            from trtran011
            group by rdel_risk_type) RiskTriggered
            left outer join
            (select rdel_risk_type RiskType,count(*) Earlier
            from trtran011
            group by rdel_risk_type) EarlierTriggered
            on RiskTriggered.RiskType= EarlierTriggered.RiskType;
        Goto Process_End;
    end if; 
  if numinfoType=REFRiskMonitoring_detail then
    open gencursor for 
          SELECT  rdel_risk_reference RiskReference, rdel_deal_number DealNumber,    rdel_serial_number "SerialNumber",
            pkgreturncursor.fncgetdescription(rdel_risk_type,1) RiskType,
            rdel_risk_date RiskDate,  rdel_limit_usd "Limit", rdel_amount_excess ExcessAmount,
            rdel_action_taken Action, rdel_stake_holder stakeHolders,
            rdel_location_code "Location",rdel_company_code Company, rdel_product_code Book,
            rdel_subproduct_code Strategy
        FROM  trtran011;
        Goto Process_End;
    end if; 
 -- added by manjunath reddy on 02/04/2019 to take care for returing the transaction data in other than add load 
 if numinfoType=REFGETLOADDATA then
 -- insert into rtemp(TT,TT2) values ('Get Loan Data ',numinfoType); commit;
   vartemp4:= PKGMASTERMAINTENANCE.fncBuildQuery(ParamData);
 --  delete from temp; commit;
--   insert into temp values ('1',ParamData);
--   insert into temp values ('Get  Data',vartemp4); commit;

   open gencursor for vartemp4;
        Goto Process_End;
 end if; 

if numinfoType = REFGETCONFIRMREMARKS THEN
numtemp := 0; 
vartemp4 := ' where ';
For curFields in
            (select fldp_column_name, fldp_xml_field,
                fldp_key_no, fldp_data_type
                from trsystem999
               where fldp_table_synonym = varentity   
                AND FLDP_PROCESS_YN=12400001
                and fldp_key_no >0
                order by fldp_column_id)

              Loop

                if numtemp > 0 then
                  vartemp4:= vartemp4|| ' and ';
                end if;

                vartemp3 := GConst.fncReturnParam(ParamData, curFields.fldp_xml_field);
                vartemp4:= vartemp4|| ' ' || curFields.fldp_column_name || ' = ';

                if curFields.fldp_data_type = 'DATE' then
                    vartemp4:= vartemp4|| ' to_date(' || '''' || substr(vartemp3 ,1,10) || '''' || ',';
                    vartemp4:= vartemp4|| '''' || 'dd/mm/yyyy' || '''' || ')';
                elsif curFields.fldp_data_type <> 'NUMBER' then
                    vartemp4:= vartemp4|| '''' || vartemp3 || '''';
                else
                  vartemp4:= vartemp4|| vartemp3;
                end if;

                numtemp := numtemp + 1;

           End Loop;

        --   GLOG.log_write('4038------' || vartemp4 );
        open gencursor for
          SELECT 
          rownum "Rownum", 
          pkgreturncursor.fncgetdescription(CONF_APPROVAL_STATUS,1) "Status", CONF_APPROVAL_REMARKS "Remarks" FROM TRTRAN100 
          WHERE CONF_ENTITY_NAME = varentity AND CONF_KEY_VALUES = vartemp4
          ORDER BY CONF_REJECTED_TIMESTAMP DESC;
        Goto Process_End;
 END IF;

 IF NUMINFOTYPE=refGetCurrencyPairDetails THEN
  --begin
    numcode:= GCONST.FNCXMLEXTRACT(XMLDOC,'CurrencyPair',numcode);
--  exception
--  when others then
--    numcode := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/BaseCurrency',numcode);
--  end ;  
--  begin 
--    numcode1:= GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',numcode1);
--    exception
--  when others then
--    numcode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/OtherCurrency',numcode1);
--  end ; 


     open gencursor for
      SELECT CNDI_BASE_CURRENCY "BaseCurrency", 
             CNDI_OTHER_CURRENCY "OtherCurrency",
             CNDI_DIRECT_INDIRECT "DirectInDirect", 
             CNDI_OUTSTANDING_TRACKING "DealWritingIn", 
             CNDI_MTM_PERUNIT "MTMPerUnit"
      FROM TRMASTER256
      WHERE CNDI_PICK_CODE=numCode
      and  CNDI_RECORD_STATUS NOT IN(10200005,10200006);

  GOTO PROCESS_END;
 END IF; 
 IF NUMINFOTYPE=refGetDirectIndirect THEN

  begin
    numcode:= GCONST.FNCXMLEXTRACT(XMLDOC,'BaseCurrency',numcode);
  exception
  when others then
--    numcode := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/BaseCurrency',numcode);
  numcode :=0;
  end ;  
  begin 
    numcode1:= GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',numcode1);
    exception
  when others then
   -- numcode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/OtherCurrency',numcode1);
   numcode1 := 0;
  end ; 
  begin 
    numcode2:= GCONST.FNCXMLEXTRACT(XMLDOC,'CurrencyPair',numcode2);
    exception
  when others then
    numcode2 := 0;
  end ;

      SELECT count(*)
      into numcode2       
      FROM TRMASTER256
      WHERE ((CNDI_BASE_CURRENCY=numCode
      and CNDI_OTHER_CURRENCY=numcode1) or (CNDI_PICK_CODE = numcode2))
      and  CNDI_RECORD_STATUS NOT IN(10200005,10200006);
      
    if (numcode2!=0) then
     open gencursor for
      SELECT CNDI_BASE_CURRENCY "BaseCurrency", 
             CNDI_OTHER_CURRENCY "OtherCurrency",
             CNDI_DIRECT_INDIRECT "DirectInDirect", 
             CNDI_OUTSTANDING_TRACKING "DealWritingIn", 
             CNDI_MTM_PERUNIT "MTMPerUnit"
      FROM TRMASTER256
      WHERE ((CNDI_BASE_CURRENCY=numCode
      and CNDI_OTHER_CURRENCY=numcode1) or (CNDI_PICK_CODE = numcode2))
      and  CNDI_RECORD_STATUS NOT IN(10200005,10200006);
    else 
      open gencursor for
      SELECT CNDI_BASE_CURRENCY "BaseCurrency", 
             CNDI_OTHER_CURRENCY "OtherCurrency",
             CNDI_DIRECT_INDIRECT "DirectInDirect", 
             CNDI_OUTSTANDING_TRACKING "DealWritingIn", 
             CNDI_MTM_PERUNIT "MTMPerUnit"
      FROM TRMASTER256
      WHERE ((CNDI_BASE_CURRENCY=numcode1
      and CNDI_OTHER_CURRENCY=numCode))
      and  CNDI_RECORD_STATUS NOT IN(10200005,10200006);
    end if;


  GOTO PROCESS_END;
 END IF;  

   IF NUMINFOTYPE=REFUserDataFormat THEN

--     open gencursor for 
--      SELECT FORMAT_PICK_CODE PickCode,
--             FORMAT_DATA_TYPE DataType,
--             FORMAT_FORMAT_STRING FormatString,
--             nvl(FORMAT_DECIMAL_SCALE,0) DecimalScale
--      FROM TRGLOBALMAS914 inner join USERMASTER
--       on FORMAT_PICK_CODE=nvl(USER_FORMAT_CODE,91499999)
--       where UPPER(User_user_id)=varUserId
--       and User_record_status not in (10200005,10200006)
--       and FORMAT_record_status not in (10200005,10200006);
        open genCursor for 
              SELECT FORMAT_PICK_CODE PickCode,
                     pkgreturncursor.fncgetdescription(FORMAT_PICK_CODE,2) cultureInfoName,
                     FORMAT_DATA_TYPE DataType,
                     FORMAT_FORMAT_STRING FormatString,
                     nvl(FORMAT_DECIMAL_SCALE,0) DecimalScale
              FROM TRGLOBALMAS914 inner join USERMASTER
               on FORMAT_PICK_CODE=nvl(USER_FORMAT_CODE,91499999)
               -- and format_pick_code =Glog.LanguageCode
               where UPPER(User_user_id)=varUserId
               and User_record_status not in (10200005,10200006)
               and FORMAT_record_status not in (10200005,10200006);

  GOTO PROCESS_END;
 END IF; 
 if numinfoType = REFEntityTABList then

      --Commented by supriya
--      SELECT TABS_TAB_CODE TabCode,
--            TABS_DISPLAY_NAME DisplayName,
--            pkgreturncursor.fncgetdescription(TABS_TAB_CODE,1) TabName,
--            TABS_ORDER_SEQUENCE OrderSequence,
--            TABS_VALIDATION_ON_ADD ValidationOnAdd,
--            TABS_VALIDATION_ON_EDIT ValidationOnEdit,
--            TABS_VALIDATION_ON_CONFIRM ValidationOnConfirm,
--            TABS_PARTIALVIEWPATH PartialViewPath,
--            TABS_JSFILEPATH JSFilePath
--      FROM TRSYSTEM999E 
--       where TABS_PROGRAM_UNIT=varEntity
--       and TABS_RECORD_STATUS not in (10200005,10200006);
    -- added by supriya on 01/03/2021
    select NVL(LMOD_DOCUMENT_UPLOAD,12400001)
    INTO numcode 
    from CLOUDDB_MASTER.TRLICENSE002 INNER JOIN CLOUDDB_MASTER.TRLICENSE001A 
    ON LMDU_MODREFERENCE_NUMBER = LMOD_REFERENCE_NUMBER 
    where LMDU_COMREFERENCE_NUMBER = (select PRMC_LICENSE_REFERENCE 
        from trsystem051)
    AND Lmdu_Record_Status NOT IN (10200005, 10200006) AND LMOD_RECORD_STATUS NOT IN (10200005, 10200006);
    open gencursor for 
        SELECT TABS_TAB_CODE TabCode,
                TABS_DISPLAY_NAME DisplayName,
                pkgreturncursor.fncgetdescription(TABS_TAB_CODE,1) TabName,
                TABS_ORDER_SEQUENCE OrderSequence,
                TABS_VALIDATION_ON_ADD ValidationOnAdd,
                TABS_VALIDATION_ON_EDIT ValidationOnEdit,
                TABS_VALIDATION_ON_CONFIRM ValidationOnConfirm,
                TABS_PARTIALVIEWPATH PartialViewPath,
                (case when TABS_TAB_CODE = 91300006 
                then (select TABS_JSFILEPATH 
                      from TRSYSTEM999E 
                      where TABS_PROGRAM_UNIT = varEntity
                      and TABS_RECORD_STATUS not in (10200005,10200006)
                      and TABS_ORDER_SEQUENCE = 1) 
                else TABS_JSFILEPATH end) JSFilePath
          FROM TRSYSTEM999E 
          where TABS_PROGRAM_UNIT = varEntity 
          AND ((numcode = 12400002 AND Tabs_Tab_Code != 91300100) 
          OR (numcode = 12400001 AND Tabs_Tab_Code = Tabs_Tab_Code))         
          and TABS_RECORD_STATUS not in (10200005,10200006);
  GOTO PROCESS_END;
 end if;

 if numinfotype = REFPROGRAMUNITVALIDATION then
    open gencursor for 
        select VALD_PROGRAM_UNIT ProgramUnit ,VALD_VALIDATION_NAME ValidationName,
            VALD_VALIDATION_DISPLAYMESSAGE  DisplayMessage,VALD_ADD_ACTION ADD_APPLICABLE ,
            VALD_EDIT_ACTION EDIT_APPLICABLE, VALD_CONFIRM_ACTION CONFIRM_APPLICABLE
        from TRSYSTEM999F
        where VALD_PROGRAM_UNIT= 'HEDGEDEA'
        --where VALD_PROGRAM_UNIT= 'HEDGEDEALREGISTER'
        and VALD_USER_GROUP in 
            (select USER_GROUP_CODE from USERMASTER
               where User_record_status not in (10200005,10200006)
               and USER_USER_ID='admin')
        and VALD_RECORD_STATUS not in (10200005,10200006)
        union all 
        select VALD_PROGRAM_UNIT ProgramUnit ,VALD_VALIDATION_NAME ValidationName,
            VALD_VALIDATION_DISPLAYMESSAGE  DisplayMessage,VALD_ADD_ACTION ADD_APPLICABLE ,
            VALD_EDIT_ACTION EDIT_APPLICABLE, VALD_CONFIRM_ACTION CONFIRM_APPLICABLE
        from TRSYSTEM999F
         where VALD_PROGRAM_UNIT= 'HEDGEDEA'
        --where VALD_PROGRAM_UNIT= 'HEDGEDEALREGISTER'
        and VALD_USER_GROUP=14299999
        and VALD_RECORD_STATUS not in (10200005,10200006);

  GOTO PROCESS_END;
 end if;

  --Added by Rishi for user alert messages on 31-Aug-2019
  if numinfotype = REFUSERALERTS then
    open gencursor for 
     SELECT ALRT_TITLE as "AlertTitle",
            ALRT_MESSAGE AS "Message",
            ALRT_NOOF_TRANSACTION AS "NoofTransaction",
            ALRT_REFERENCE_NUMBER "ReferenceNumber",
            Pkgreturncursor.Fncgetdescription(Alrt_Alert_TYPE,1) "AlertTypeDescription",
            Alrt_Alert_TYPE "AlertType",
            ALRT_RISK_LEVEL "RiskLevel",
            Pkgreturncursor.Fncgetdescription(ALRT_RISK_LEVEL,1) "AlertLevelDescription"
        from tralert001 
        where alrt_record_status not in (10200005,10200006)
          and instr(UPPER(alrt_user_IDs),varUserId)>0
          and trunc(alrt_create_date)=trunc(sysdate);

  GOTO PROCESS_END;
 end if;

 if numinfoType = REFUSERALERTS_Details then
      NumCode:=gconst.fncxmlextract(xmldoc,'Param/AlertType',NumCode);
      VarTemp:=gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber',VarTemp);

      if numCode =91800001 then -- DueDate Alert

        select listagg ( dued_xml_field || ' as ' || nvl(dued_xml_field,dued_label_name),',')
            within group (order by duec_orderby_serial)
        into varTemp4
        from trsystem961A 
        where duec_system_Referece =varTemp
        and dued_record_Status not in (10200005,10200006);

        Glog.log_write(varTemp4);

        select alrt_program_unit, ' where ' || alrt_date_column || ' between ' ||  (case when duem_alert_fordays<=0 then 
                                             ' sysdate - ' || duem_alert_fordays || ' and ' || ' sysdate '
                                            else 
                                              ' sysdate  and  sysdate+' || duem_alert_fordays
                                            end)
        into varTemp2, varTemp5
        from trsystem961 inner join trmaster147
        on duem_alert_code=alrt_pick_code
        and alrt_record_status not in (10200005,10200006)
        and duem_record_Status not in (10200005,10200006)
        where DUEM_SYSTEM_REFERENCE =varTemp;

        Glog.log_write(varTemp2|| ' '|| varTemp5);

        varTemp6:= ' open gencursor for select ' || varTemp4 || ' from ' || varTemp2 || varTemp5;

        Glog.log_write(varTemp6);
        execute immediate varTemp6;
      else
          open gencursor for 
             SELECT MAIL_BANK_NAME as "Bank", MAIL_CURRENCY_NAME as "Currency",
                    MAIL_TRANSACTION_TYPE "TransType",MAIL_EXECUTE_DATE "ExecuteDate",
                    MAIL_SUPPLIER_NAME "SupplierName", MAIL_BUY_SELL "BuySell",
                    MAIL_OPTION_TYPE "OptionType",
                    MAIL_AMOUNT_FCY "Amount",
                    MAIL_EXCHANGE_RATE "ExchangeRate",
                    MAIL_INTEREST_AMOUNT "InterestAmount", MAIL_REPAYMENT_AMOUNT "RepaymentAmount",
                    MAIL_DUE_DATE "MaturityDate", MAIL_REFERENCE_NUMBER "ReferenceNumber",
                    MAIL_BACKUP_DEAL "Prortfolio", MAIL_INIT_CODE "SubPortfolio",       
                    MAIL_EXCHANGE_CODE "Exchange",MAIL_ALERT_REFERENCE AlertReference
                from Trsystem960
                where  mail_alert_reference=VarTemp
                  and mail_execute_date=trunc(sysdate);
      end if;

  GOTO PROCESS_END;
 end if;
 -- For Forward Rollover 

  if numinfotype=REFROLLOVERDELETE then

          BEGIN           

           varTemp := gconst.fncxmlextract(xmldoc,'DealNumber',varTemp);

         EXCEPTION

           WHEN OTHERS THEN

             VARTEMP:=NULL ;

         END;

           BEGIN           

           varTemp1 := gconst.fncxmlextract(xmldoc,'ReferenceNummber',varTemp1);

         EXCEPTION

           WHEN OTHERS THEN

             VARTEMP1:=NULL ;

         END;

     update trtran001ra set DEAR_RECORD_STATUS =10200006  where  DEAR_REFERENCE_NUMBER =varTemp;

     update trtran001rb set DEAB_RECORD_STATUS =10200006  where  DEAB_REFERENCE_NUMBER =varTemp;

     update trtran006 set cdel_RECORD_STATUS =10200006  where  CDEL_ROLLOVER_REFERENCE =varTemp;



update trtran001 set deal_process_complete =12400002 , deal_complete_date=null where deal_deal_number=(select cdel_deal_number from

trtran006 where CDEL_ROLLOVER_REFERENCE=varTemp);

OPEN GENCURSOR FOR

  SELECT 1 FROM DUAL;

    Goto Process_End;

  end if;

 if numinfotype=REFROLLOVERFORWARD then


      numaction:=gconst.fncxmlextract(xmldoc,'ActionMode',vartemp);
      numcode:= gconst.fncxmlextract(xmldoc,'CompanyCode',numcode);
      NUMCODE1:= GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',NUMCODE1);
      numcode2:= gconst.fncxmlextract(xmldoc,'BackupDeal',numcode2);
      numcode3:= gconst.fncxmlextract(xmldoc,'InitCode',numcode3);

   --   numcode4:= gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode4);
   --   NUMCODE5:= GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',NUMCODE5);
      Dattemp:= gconst.fncxmlextract(xmldoc,'MaturityFrom',Dattemp);
      dattemp1:= gconst.fncxmlextract(xmldoc,'MaturityTo',dattemp1);
      NUMCODE6:=GCONST.FNCXMLEXTRACT(XMLDOC,'CounterParty',NUMCODE6);   
      numcode8:=gconst.fncxmlextract(xmldoc,'BuySell',numcode8);
      BEGIN            
           numcode4:= gconst.fncxmlextract(xmldoc,'CurrencyPair',numcode4);
         EXCEPTION
           WHEN OTHERS THEN
             numcode4:=0;
        END;

      BEGIN            
           varTemp := gconst.fncxmlextract(xmldoc,'DealNumber',varTemp);
         EXCEPTION
           WHEN OTHERS THEN
             VARTEMP:=NULL ;
         END;
  IF NUMACTION IN (101) THEN  
  open gencursor for
      select      rownum "Rownum", deal_deal_number "DealNumber",  
                  fncgetdescription(deal_base_currency,2) "BaseCurrency", 
                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
                  DEAL_EXECUTE_DATE "ExecuteDate",
                  deal_base_amount "BaseAmount",               
                  pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
                  pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "AdjustingAmount", 
                  ( (case when CNDI_DIRECT_INDIRECT = 12400002 then deal_other_amount  else deal_base_amount end) - nvl((pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
--                    (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
                  round(nvl(deal_spot_rate,0),4) "SpotRate",
                  round(nvl(deal_forward_rate,0),4) "FrwRate",
                  round (nvl(deal_margin_rate,0),4) "MarginRate",
                  deal_exchange_rate "ExchangeRate",
                  Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BusinessUnit",
                  Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "ProfitCentre",
		              fncgetdescription(deal_counter_party,2) "CounterParty",
                  fncgetdescription(deal_buy_sell,1) "BuySell",                  
		              Deal_maturity_from "ExpiryDate", 
                  deal_maturity_date "DeliveryDate", 
                  (nvl((pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",nvl(deal_local_rate,0) "LocalRate", 
                  (nvl((pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal", 
                  Deal_Hedge_Trade "HedgeTradeCode",                  
                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
                  deal_time_stamp "DealTimeStamp", 
                  deal_other_currency "OtherCurrencyCode",deal_dealer_remarks "Remarks",
                  deal_record_status "RecordStatus",deal_counter_party "Counterpartycode", 
                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
                 Deal_Bank_Reference "BankReference", 
                fncgetdescription(Deal_Hedge_Trade,2) "HedgeTrade",
                deal_dealer_name "DealerName",
                DEAL_COUNTER_DEALER "CounterDealer",
                deal_dealer_remarks "DealerRemarks",
                deal_company_code "CompanyCode",
                deal_location_code "LocationCode",
                Deal_Backup_Deal "BackupDealCode",
                Deal_Init_Code "InitCode",
                0 "ProfitLoss",
                0 "ConvertedPandL",
                0 "EarlyDeliveryCharges",
                deal_maturity_date "CashFlowDate",
                0 "NetPresentValue",
                0 "IRRRate"
         from trtran001 left Outer join TRMASTER256
         on CNDI_BASE_CURRENCY = deal_base_currency and CNDI_OTHER_CURRENCY = deal_other_currency 
          where deal_hedge_trade in(gconst.HEDGEDEAL,GCONST.FTDEAL)
          and deal_process_complete = GConst.OPTIONNO 
            and deal_Company_Code in( select usco_company_code from trsystem022a
                                        WHERE UPPER(usco_user_id) =VARUSERID
		    AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))   
           and deal_company_code=decode(numcode,30199999,deal_company_code,numcode)
           and deal_location_code=decode(numcode1,30299999,deal_location_code,numcode1)
           and deal_backup_deal=decode(numcode2,33399999,deal_backup_deal,numcode2)
           and deal_init_code=decode(numcode3,33899999,deal_init_code,numcode3)
           and DEAL_CURRENCY_PAIR=decode(numcode4,25699999,DEAL_CURRENCY_PAIR,numcode4)
         --  and deal_base_currency=decode(numcode4,30499999,deal_base_currency,numcode4)
        --   and deal_other_currency=decode(numcode5,30499999,deal_other_currency,numcode5)
           and deal_counter_party=decode(numcode6,30699999,deal_counter_party,numcode6)
           and deal_buy_sell=decode(numcode8,25399999,deal_buy_sell,numcode8)
           and deal_maturity_date between Dattemp and dattemp1
--          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
          AND DEAL_RECORD_STATUS NOT IN (GCONST.STATUSINACTIVE,GCONST.STATUSDELETED,GCONST.STATUSPOSTCANCEL)
          AND pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) > 0;
 else
  open gencursor for      
       select     rownum "Rownum", deal_deal_number "DealNumber",  
                  fncgetdescription(deal_base_currency,2) "BaseCurrency", 
                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
                  DEAL_EXECUTE_DATE "ExecuteDate",
                  deal_base_amount "BaseAmount",               
                  pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--                    pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "AdjustingAmount",
                  CDEL_CANCEL_AMOUNT "AdjustingAmount",
                    ((case when CNDI_DIRECT_INDIRECT = 12400002 then deal_other_amount else deal_base_amount end)-nvl((pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
                  round(nvl(deal_spot_rate,0),4) "SpotRate",
                  round(nvl(deal_forward_rate,0),4) "FrwRate",
                  round (nvl(deal_margin_rate,0),4) "MarginRate",
                  deal_exchange_rate "ExchangeRate",
                  Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BusinessUnit",
                  Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "ProfitCentre",
		              fncgetdescription(deal_counter_party,2) "CounterParty",
                  fncgetdescription(deal_buy_sell,1) "BuySell",                  
		              Deal_maturity_from "ExpiryDate", 
                  deal_maturity_date "DeliveryDate", 
                  (nvl((pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",nvl(deal_local_rate,0) "LocalRate", 
                  (nvl((pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal", 
                  Deal_Hedge_Trade "HedgeTrade",                  
                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
                  deal_time_stamp "DealTimeStamp", 
                  deal_other_currency "OtherCurrencyCode",deal_dealer_remarks "Remarks",
                  deal_record_status "RecordStatus",deal_counter_party "Counterpartycode", 
                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
                 Deal_Bank_Reference "BankReference", 
                FNCGETDESCRIPTION(DEAL_HEDGE_TRADE,2) "Hedge Trade",
                deal_dealer_name "DealerName",
                DEAL_COUNTER_DEALER "CounterDealer",
                deal_dealer_remarks "DealerRemarks",
                   deal_company_code "CompanyCode",
                deal_location_code "LocationCode",
                Deal_Backup_Deal "BackupDealCode",
                Deal_Init_Code "InitCode",
                0 "ProfitLoss",
                0 "ConvertedPandL",
                CDEL_EDC_CHARGE "EarlyDeliveryCharges",
                CDEL_CASHFLOW_DATE "CashFlowDate",
                CDEL_NPV_VALUE "NetPresentValue",
                CDEL_IRR_RATE "IRRRate"
         FROM TRTRAN001  
          LEFT OUTER JOIN trtran006 
         ON cdel_deal_number=DEAL_DEAL_NUMBER
         and CDEL_ROLLOVER_REFERENCE=vartemp
         left Outer join TRMASTER256
         on CNDI_BASE_CURRENCY = deal_base_currency and CNDI_OTHER_CURRENCY = deal_other_currency 
          WHERE DEAL_HEDGE_TRADE IN(GCONST.HEDGEDEAL,GCONST.FTDEAL)
         -- and deal_process_complete = GConst.OPTIONNO 
          and deal_Company_Code in( select usco_company_code from trsystem022a
                                        WHERE UPPER(usco_user_id) =VARUSERID
		    AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
           and   CDEL_COMPANY_CODE in
                (select usco_company_code from trsystem022a
                  where UPPER(usco_user_id) =varUserid
            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
                  and CDEL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))     
--          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
          AND DEAL_RECORD_STATUS NOT IN (GCONST.STATUSINACTIVE,GCONST.STATUSDELETED,GCONST.STATUSPOSTCANCEL)
           AND DEAL_DEAL_NUMBER IN (SELECT cdel_deal_number FROM trtran006 WHERE 
           CDEL_ROLLOVER_REFERENCE=vartemp AND cdel_record_status NOT IN (10200005,10200006))
          ;

  End if;
      Goto Process_End;
  End If;

  if numInfoType =REFROLLOVERFUTUREDEALS then

     VAROPERATION := 'Extracting Information of Outstanding Deals ';

      numaction:=gconst.fncxmlextract(xmldoc,'ActionMode',vartemp);
      numcode:= gconst.fncxmlextract(xmldoc,'CompanyCode',numcode);
      NUMCODE1:= GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',NUMCODE1);
      numcode2:= gconst.fncxmlextract(xmldoc,'BackupDeal',numcode2);
      numcode3:= gconst.fncxmlextract(xmldoc,'InitCode',numcode3);
--      numcode4:= gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode4);
--      NUMCODE5:= GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',NUMCODE5);
      Dattemp:= gconst.fncxmlextract(xmldoc,'MaturityFrom',Dattemp);
--      numcode6:=gconst.fncxmlextract(xmldoc,'CounterParty',numcode6);
      numcode7:=gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode7);
      numcode8:=gconst.fncxmlextract(xmldoc,'BuySell',numcode8);
      numcode9:=gconst.fncxmlextract(xmldoc,'ProductCode',numcode9);
--      INSERT INTO TEMP VALUES('Company' ||numcode,NUMCODE1);COMMIT;
--      INSERT INTO TEMP VALUES('BackUp' ||numcode2,numcode3);COMMIT;
--      INSERT INTO TEMP VALUES('Currency' ||numcode4,NUMCODE5);COMMIT;
--      INSERT INTO TEMP VALUES(Dattemp,numcode7);COMMIT;
--       INSERT INTO TEMP VALUES(numcode8,numcode9);COMMIT;
      BEGIN

           varTemp := gconst.fncxmlextract(xmldoc,'DealNumber',varTemp);
         EXCEPTION
           WHEN OTHERS THEN
             VARTEMP:=NULL ;
         END;
         --INSERT INTO TEMP VALUES (numaction,varTemp);COMMIT;
  IF NUMACTION IN (101) THEN 
     OPEN GENCURSOR FOR  
        SELECT rownum "Rownum",
          cfut_deal_number "DealNumber" ,
          pkgreturncursor.fncgetdescription(cfut_product_code,2) "Currency",
          cfut_execute_date "ExecuteDate",
          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "BusinessUnit",
          PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_INIT_CODE,2) "ProfitCentre",
          fncGetDescription(CFUT_EXCHANGE_CODE,2) "Exchange",
          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "Broker",
          pkgreturncursor.fncgetdescription(Cfut_Buy_Sell,2) "Buy_Sell",
          CFUT_LOT_NUMBERS "NoOfLots", 
          pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "OutstandingLots", 
                    pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "AdjustingLots", 
          CFUT_LOT_NUMBERS- pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "AdjustedLots",
          CPRO_TRADE_UNIT "LotSize",
          cfut_base_amount "TradeAmount",
          CFUT_SPOT_RATE "SpotRate", CFUT_FORWARD_RATE "ForwardRate",CFUT_MARGIN_RATE  "MarginRate",
          CFUT_EXCHANGE_RATE "All_in_Rate",
          CFUT_Maturity_From "ExpairyDate",
          Cfut_Maturity_Date "DeliveryDate",
        --  0 "LotQuantity",
         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
          cfut_base_amount "TradeAmount",
          --cfut_margin_amount "MarginAmount",
         -- cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
         -- pkgreturncursor.fncgetdescription(Cfut_Buy_Sell,2) "Buysell_Desc",
        --   PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_HEDGE_TRADE,2) "hedgetrade",
           cfut_dealer_name "DealerName",cfut_counter_dealer "CounterDealer",
         cfut_DEALER_REMARK "DealerRemarks",
          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "CounterParty",
          --Cfut_Product_Code "productCode",
          Cfut_Record_Status "RecordStatus",
          CFUT_BANK_REFERENCE "BankReference",
           CFUT_DEALER_NAME "DealerName",
           CFUT_COUNTER_DEALER "CounterDealer",
          NULL "ProfitLoss",
              null "ConvertedPandL",
              pkgforexprocess.fncGetOutstandingTransaction(CFUT_DEAL_NUMBER, 0,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "AdjustingAmount"
          --CFUT_COMPANY_CODE "CompanyCode"
          --CPRO_TRADE_UNIT "TradeUnit",
         -- Cfut_Buy_Sell "Buysell"
       from trtran061 left outer join trmaster503
         on CFUT_PRODUCT_CODE= CPRO_PICK_CODE
       where cfut_process_complete= gconst.optionNo
       and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid 
		AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
         and CFUT_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))  
       --   And Cfut_Exchange_Code= Numcode
       AND CFUT_COMPANY_CODE= DECODE(NUMCODE,30199999,CFUT_COMPANY_CODE,NUMCODE)
       and cfut_location_code=decode(numcode1,30299999,cfut_location_code,numcode1)
         and cfut_backup_deal=decode(numcode2,33399999,cfut_backup_deal,numcode2)
         AND CFUT_INIT_CODE=DECODE(NUMCODE3,33899999,CFUT_INIT_CODE,NUMCODE3)
--         and cfut_base_currency=decode(numcode4,30499999,cfut_base_currency,numcode4)
--         AND CFUT_OTHER_CURRENCY=DECODE(NUMCODE5,30499999,CFUT_OTHER_CURRENCY,NUMCODE5)
--         AND CFUT_COUNTER_PARTY=NUMCODE6
         and CFUT_EXCHANGE_CODE=numcode7
         and Cfut_Buy_Sell=DECODE(numcode8,25399999,Cfut_Buy_Sell,numcode8)        
         AND CFUT_MATURITY_DATE = DATTEMP
         and cfut_product_code=numcode9
--         and cfut_hedge_trade in (26000001,26000003)
         --and cfut_record_status not in (10200006, 10200005)
         and cfut_record_status not in (GCONST.STATUSINACTIVE,GCONST.STATUSDELETED,GCONST.STATUSPOSTCANCEL)
         AND CPRO_RECORD_STATUS NOT IN (10200006,10200005)       
         AND PKGFOREXPROCESS.fncGetOutstandingTransaction(CFUT_DEAL_NUMBER, 0,GCONST.UTILFUTUREDEAL,GCONST.AMOUNTFCY, DATWORKDATE) >0
         ;

else

 OPEN GENCURSOR FOR  
        SELECT rownum "Rownum",
          cfut_deal_number "DealNumber" ,
          pkgreturncursor.fncgetdescription(cfut_product_code,2) "Currency",
          cfut_execute_date "ExecuteDate",
          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "BusinessUnit",
          PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_INIT_CODE,2) "ProfitCentre",
          fncGetDescription(CFUT_EXCHANGE_CODE,2) "Exchange",
          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "Broker",
          pkgreturncursor.fncgetdescription(Cfut_Buy_Sell,2) "Buy_Sell",
          CFUT_LOT_NUMBERS "NoOfLots", 
          pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "OutstandingLots", 
          --CFUB_ADJUSTING_LOTS  "AdjustingLots", 
          pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "AdjustingLots",
          CFUT_LOT_NUMBERS- nvl((pkgforexprocess.fncGetOutstandingTransaction(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)),0) "AdjustedLots",
          CPRO_TRADE_UNIT "LotSize",
         -- (cfut_lot_quantity /nvl(CPRO_Trade_unit,1000))* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",
          CFUT_SPOT_RATE "SpotRate", CFUT_FORWARD_RATE "ForwardRate",CFUT_MARGIN_RATE  "MarginRate",
          CFUT_EXCHANGE_RATE "All_in_Rate",
          CFUT_Maturity_From "ExpairyDate",
          CFUT_MATURITY_DATE "DeliveryDate",
        --  0 "LotQuantity",
         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
          cfut_base_amount "TradeAmount",
          --cfut_margin_amount "MarginAmount",
        --  cfut_brokerage_amount "BrokerageAmount",
         -- cfut_transaction_cost "TransactionCost",
       --   pkgreturncursor.fncgetdescription(Cfut_Buy_Sell,2) "Buysell_Desc",
       --    PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_HEDGE_TRADE,2) "hedgetrade",
            cfut_dealer_name "DealerName",cfut_counter_dealer "CounterDealer",
            cfut_DEALER_REMARK "DealerRemarks",
            pkgreturncursor.fncGetDescription(cfut_counter_party,2) "CounterParty",  
            Cfut_Record_Status "RecordStatus",  
            CFUT_BANK_REFERENCE "BankReference",
             CFUT_DEALER_NAME "DealerName",
           CFUT_COUNTER_DEALER "CounterDealer",
          --  cfub_profit_loss  "ProfitLoss",
          --      cfub_pandl_usd "ConvertedPandL",
             0  "ProfitLoss",
                0 "ConvertedPandL",
                pkgforexprocess.fncGetOutstandingTransaction(CFUT_DEAL_NUMBER, 0,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "AdjustingAmount"
--          Cfut_Product_Code "productCode",
--           Cfut_Company_Code "CompanyCode",

      --    CPRO_TRADE_UNIT "TradeUnit",
        --  Cfut_Buy_Sell "Buysell"
       from trtran061 left outer join trmaster503
         on CFUT_PRODUCT_CODE= CPRO_PICK_CODE
         LEFT OUTER JOIN TRTRAN063 
         ON CFRV_DEAL_NUMBER=CFUT_DEAL_NUMBER
         and CFRV_ROLLOVER_REFERENCE=vartemp
       where  cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid 
		AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
         and CFUT_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))  
       --   And Cfut_Exchange_Code= Numcode
       --  and cfut_hedge_trade in (26000001,26000003)
        -- and cfut_record_status not in (10200006, 10200005)GCONST.STATUSINACTIVE,GCONST.STATUSDELETED,GCONST.STATUSPOSTCANCEL
        and cfut_record_status not in (GCONST.STATUSINACTIVE,GCONST.STATUSDELETED,GCONST.STATUSPOSTCANCEL)
         AND CPRO_RECORD_STATUS NOT IN (10200006,10200005) 
          AND CFUT_DEAL_NUMBER IN (SELECT CFRV_DEAL_NUMBER FROM TRTRAN063 WHERE 
         CFRV_ROLLOVER_REFERENCE=vartemp AND CFRV_RECORD_STATUS NOT IN (10200005,10200006))
         ;
     --    and pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) >0;
   end if;
  Goto Process_End;
  end if; 

--   if numinfotype = REFMONTHLYSETTLEMENT then
--   varOperation := 'Monthly Settlement Dashboard';     
--       select nvl(PRMC_Convert_AmountInto,1)
--         into numdetail
--       from trsystem051;  
--      if (to_char(to_date(datworkdate),'MM') < 4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(to_date(datworkdate),'YYYY'))-1);
--              dattemp1:= '31-MAR-' ||to_char(to_date(datworkdate),'YYYY');
--              tempvar:= 'FY'|| to_char(to_number(to_char(to_date(datworkdate),'YY'))-1) || '-' || to_char(to_date(datworkdate),'YY');
--         else
--          tempDate:= '01-apr-' || to_char(to_date(datworkdate),'YYYY');
--        dattemp1:= '31-MAR-' || to_char(to_number(to_char(to_date(datworkdate),'YYYY'))+1);
--         tempvar:= 'FY'|| to_char(to_date(datworkdate),'YY') || '-' || to_char(to_number(to_char(to_date(datworkdate),'YY'))+1);
--       end if;
-- -- numRecords:=2;
--  --numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,to_date(datworkdate));commit;
--  -- pkgreportprograms.prcFxForcastReportPopulate(to_date(datworkdate));   
--   open gencursor for
--             select  MaturityMonth,datDateAsOn,BaseAmount,
--             BASEAMOUNTINR,Nvl(GAINLOSS,0) GAINLOSS, WTDAVGRATE,
--             WTDAVGBASEAMOUNT,WTDAVGRATE1,
--             (WTDAVGRATE1-WTDAVGRATE)*BaseAmount CashratePandL,
--             Cashamountfcy,Cashamountinr,Frwdamountfcy,Frwdamountinr,Round(Spotrate,2) As Spotrate,
--             Srno
--      from (  (select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
--              sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
--              avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
--              sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
--              sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
--              avg(SpotRate)SpotRate,SrNo
--      from (select  to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth,
--                   to_char(cdel_cancel_DATE,'YYYYMM') MonthOrder,
--              to_date(datworkdate) datDateAsOn,
----              (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
----               Else Round(Sum(Cdel_Cancel_Amount)/1000000,2) End) Baseamount,
--              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
--               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
--              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
--              --sum(cdel_cancel_amount*cdel_cancel_RATE) - nvl(Pandl.Pandl,0) BASEAMOUNTINR, 
--              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
----              -
----              sum(CASE WHEN cdel_cancel_type = 27000002
----                  THEN CDEL_PROFIT_LOSS end)
--              Pandl.pandl  GAINLOSS,
--                round  ((sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
--                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
--                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      cdel_cancel_amount/1000000
--                  end) as CashAmountFcy,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end) as CashAmountINR,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      cdel_cancel_amount/1000000
--                  end) as FrwdAmountFcy,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end )as FrwdAmountINR,
--                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),1,tempDate,to_date(datworkdate)) SpotRate,
--                          2 SrNo
--               from    trtran002 inner join trtran006 a1
--                       on trad_trade_reference=cdel_trade_reference
--                       inner join trtran001 b1
--                       on cdel_deal_number= deal_deal_number
--                       left outer join 
--                      (select to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
--                              sum(cdel_cancel_amount) as FwdAmount
--                        from trtran006 a2, trtran001 b2
--                       where cdel_deal_number= deal_deal_number
--                        --  and  deal_backup_deal=33300001
--                          and cdel_cancel_date  between tempDate and to_date(datworkdate)
--                          and deal_base_currency=30400004
--                          and deal_other_currency =30400003
--                          and cdel_cancel_type=27000001
--                          and cdel_record_status not in (10200005,10200006)
--                          group by to_char(cdel_cancel_DATE,'YYYYMM') ) PandL
--                    On Pandl.Maturitymonth = To_Char(Cdel_Cancel_Date,'YYYYMM')
--                       where cdel_RECORD_STATUS not in(10200005,10200006) 
--                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
--                        --and trad_product_category =33300001
--                        and trad_record_status in (10200005,10200001,10200003,10200004)
--                        and trad_product_category=33300001 
--                        and cdel_trade_reference is not null 
--                       -- and cdel_cancel_type =27000001
--                        and cdel_cancel_date  between tempDate and to_date(datworkdate)
--                        And Deal_Base_Currency=30400004
--                     --   AND CDEL_CANCEL_DATE <='30-APR-17'
--                   group by to_char(cdel_cancel_DATE,'YYYYMM'),cdel_COMPANY_CODE,deal_base_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
--                              to_char(cdel_cancel_DATE,'MON-yy'),pandl.pandl
-- 
--                              UNION ALL
--             ( select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
--              sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
--              avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
--              sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
--              sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
--              avg(SpotRate)SpotRate,SrNo FROM (           
--                     select  --to_char(cdel_cancel_DATE,'MON-yy')
--                      fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,1)  MaturityMonth,
--                   --to_char(cdel_cancel_DATE,'YYYYMM')
--                      fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2) MonthOrder,
--                      to_date(datworkdate) datDateAsOn,
----                      (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
----                        else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
----                      round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR,
--              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
--               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
--              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
--              --sum(cdel_cancel_amount*cdel_cancel_RATE)  - nvl(Pandl.Pandl,0) BASEAMOUNTINR, 
--              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
----              -
----              sum(CASE WHEN cdel_cancel_type = 27000002
----                  THEN CDEL_PROFIT_LOSS end)BASEAMOUNTINR, 
--                      Pandl.pandl  GAINLOSS,
--                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
--                           (Nvl(Pandl.Pandl,0)/1000000))/Sum(Cdel_Cancel_Amount/1000000),2) Wtdavgrate,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
--                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      cdel_cancel_amount/1000000
--                  end) as CashAmountFcy,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end) as CashAmountINR,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      cdel_cancel_amount/1000000
--                  end) as FrwdAmountFcy,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end )as FrwdAmountINR,
--                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),3,tempDate,tempDate) SpotRate,
--                          1 SrNo
--               from    trtran002 inner join trtran006 a1
--                       on trad_trade_reference=cdel_trade_reference
--                       inner join trtran001 b1
--                       on cdel_deal_number= deal_deal_number
--                       left outer join 
--                      (select fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2) MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
--                      sum(cdel_cancel_amount) as FwdAmount
--                        from trtran006 a2, trtran001 b2
--                       where cdel_deal_number= deal_deal_number
--                          --and  deal_backup_deal=33300001
--                          and cdel_cancel_date  < tempDate
--                          and cdel_cancel_date > '31-MAR-2017'
--                          and deal_base_currency=30400004
--                          and deal_other_currency =30400003
--                          and cdel_record_status not in (10200005,10200006)                          
--                          and cdel_cancel_type=27000001
--                          group by fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2)--to_char(cdel_cancel_DATE,'YYYYMM')
--                          ) PandL
--                    on PandL.MaturityMonth = fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2)
--                       where cdel_RECORD_STATUS not in(10200005,10200006) 
--                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
--                        --and trad_product_category =33300001
--                        and trad_record_status in (10200005,10200001,10200003,10200004)
--                        and trad_product_category=33300001 
--                        and cdel_trade_reference is not null 
--                       -- and cdel_cancel_type =27000001
--                        and cdel_cancel_date  < tempDate
--                        and cdel_cancel_date > '31-MAR-2017'
--                        and deal_base_currency=30400004
--                     --   AND CDEL_CANCEL_DATE <='30-APR-17'
--                   group by fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,'YYYYMM'),
--                   cdel_COMPANY_CODE,deal_base_CURRENCY,
--                   --to_char(cdel_cancel_DATE,'YYYYMM'),
--                   fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2),
--                   fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),3,tempDate,tempDate),
--                    --          to_char(cdel_cancel_DATE,'MON-yy')
--                              pandl.pandl
--                                       union all 
--            SELECT   fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,1) MaturityMonth,
--                          fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,2) MonthOrder,
--                     to_date(datworkdate) datDateAsOn,
--                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
--                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
--                          0 GAINLOSS,
--                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
--                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
--                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
--                            1 SrNo
--                          FROM trtran002,trtran003,
--                               trtran010,TRTRAN045
--                          where  trad_trade_reference  = brel_trade_reference
--                         -- and brel_entry_date between  tempDate and to_date(datworkdate)
--                          AND brel_trade_reference    = loln_trade_reference
--                           and trad_maturity_date  < tempDate
--                        and trad_maturity_date > '31-MAR-2017'
--                        and trad_trade_currency=30400004
--                          AND trad_record_status NOT IN(10200006)
--                          AND trad_import_export NOT IN(25900025)
--                          AND brel_record_status NOT IN(10200006)
--                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
--                         -- and trad_product_category =33300001
--                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                          group by   fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,1),
--                                      fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,2),trad_company_code,trad_trade_currency)
--                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo                              
--              UNION ALL
--                  (select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
--                  sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
--                  avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
--                  sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
--                  sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
--                  avg(SpotRate)SpotRate,SrNo FROM (                
--                      select  --to_char(cdel_cancel_DATE,'MON-yy')
--                      fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,1)  MaturityMonth,
--                   --to_char(cdel_cancel_DATE,'YYYYMM')
--                      fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2) MonthOrder,
--                     to_date(datworkdate) datDateAsOn,
----                      (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
----                        else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
----                      round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
--              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
--               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
--              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
--              --sum(cdel_cancel_amount*cdel_cancel_RATE)  - nvl(Pandl.Pandl,0) BASEAMOUNTINR, 
--              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
----              -
----              sum(CASE WHEN cdel_cancel_type = 27000002
----                  THEN CDEL_PROFIT_LOSS end)BASEAMOUNTINR,
--                      Pandl.pandl GAINLOSS,
--                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
--                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
--                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      cdel_cancel_amount/1000000
--                  end) as CashAmountFcy,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end) as CashAmountINR,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      cdel_cancel_amount/1000000
--                  end) as FrwdAmountFcy,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end )as FrwdAmountINR,
--                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),2,tempDate,to_date(datworkdate)) SpotRate,
--                          3 SrNo
--               from    trtran002 inner join trtran006 a1
--                       on trad_trade_reference=cdel_trade_reference
--                       inner join trtran001 b1
--                       on cdel_deal_number= deal_deal_number
--                       left outer join 
--                      (select fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2) MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
--                      sum(cdel_cancel_amount) as FwdAmount
--                        from trtran006 a2, trtran001 b2
--                       where cdel_deal_number= deal_deal_number
--                         -- And  Deal_Backup_Deal=33300001
--                          and cdel_cancel_date between tempDate and to_date(datworkdate)
--                          --and cdel_cancel_date > '31-MAR-2014'
--                          and deal_base_currency=30400004
--                          and deal_other_currency =30400003
--                          and cdel_cancel_type=27000001
--                          and cdel_record_status not in (10200005,10200006)
--                          group by fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2)--to_char(cdel_cancel_DATE,'YYYYMM')
--                          ) PandL
--                    on PandL.MaturityMonth = fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2)
--                       where cdel_RECORD_STATUS not in(10200005,10200006) 
--                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
--                       -- and trad_product_category =33300001
--                        and trad_record_status in (10200005,10200001,10200003,10200004)
--                        --and trad_product_category=33300001 
--                        and cdel_trade_reference is not null 
--                       -- and cdel_cancel_type =27000001
--                        and cdel_cancel_date between tempDate and to_date(datworkdate)
--                        --and cdel_cancel_date > '31-MAR-2014'
--                        and deal_base_currency=30400004
--                     --   AND CDEL_CANCEL_DATE <='30-APR-17'
--                     
--                   group by fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,'YYYYMM'),
--                   cdel_COMPANY_CODE,deal_base_CURRENCY
--                   --to_char(cdel_cancel_DATE,'YYYYMM'),
--                   ,fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2),
--                   fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),2,tempDate,to_date(datworkdate)),
--                    --          to_char(cdel_cancel_DATE,'MON-yy')
--                              pandl.pandl
--                                                  union all 
--            SELECT  fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,1) MaturityMonth,
--                         fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,2) MonthOrder,
--                     to_date(datworkdate) datDateAsOn,
--                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
--                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
--                          0 GAINLOSS,
--                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
--                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
--                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
--                            3 SrNo
--                          FROM trtran002,trtran003,
--                               trtran010,TRTRAN045
--                          where  trad_trade_reference  = brel_trade_reference                         
--                          AND brel_trade_reference    = loln_trade_reference
--                            and trad_maturity_date between tempDate and to_date(datworkdate)              
--                          and trad_trade_currency=30400004
--                          AND trad_record_status NOT IN(10200006)
--                          AND trad_import_export NOT IN(25900025)
--                          AND brel_record_status NOT IN(10200006)
--                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
--                          --and trad_product_category =33300001
--                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                          group by   fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,1),
--                                      fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,2),trad_company_code,trad_trade_currency)
--                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo)           
--                              )
--                    Order by  MonthOrder,MaturityMonth,SrNo; 
--   Goto Process_End;
--  end if;

-----------------------------------------------------------------------------

 if numinfoType = REFGetSynonymsList then

      open gencursor for 
      select Distinct(FLDP_TABLE_SYNONYM) "ID", MENU_DESCRIPTION "Name"
          FROM TRSYSTEM999, MenuFile
          WHERE FLDP_TABLE_SYNONYM = MENU_PROGRAM_UNIT
          and FLDP_TABLE_SYNONYM in (select actl_program_unit 
                                      from trsystem006
                                      where actl_record_status not in (10200005,10200006)
                                      and UPPER(case when actl_user_id = '.' then varUserid else actl_user_id end) = varUserid
                                      and actl_group_code =(select user_group_code from USERMASTER
                                                              where UPPER(user_user_id) = varUserid
                                                              and USER_RECORD_STATUS not in  (10200005,10200006)))
          and FLDP_TABLE_SYNONYM not in ('DISTINCTSYNONYMS','EMAILCONFIGURATION','DOCUMENTTYPES','PARAMETERSCONFIGURATION')
          --Added by lakshmi, for showing menus based on modules added for license.   
          and exists 
          (select 'x' from  clouddb_master.Trlicense002a 
             inner join clouddb_master.trlicense001a
             on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
          where nvl(Menu_Program_Unit,'NA') = Lmdd_Program_Unit 
          and lmdd_record_Status not in (10200005,10200006)
          and lmdu_record_status not in (10200005,10200006)
          and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051))
          order by MENU_DESCRIPTION;            

  GOTO PROCESS_END;
 end if;



 if numinfoType = REFGETSYNONYMS then      
open gencursor for 
   select Distinct(DOUP_SYNONYM_NAME) "SYNONYMS"
        from tftran101a
        where DOUP_RECORD_STATUS not in (10200005,10200006);
GOTO PROCESS_END;
 end if;
 -----------------------------------------------------------------------------------

  if numinfoType = REFGetSynonymScreenData then
      varOperation := 'Extracting 999 Table Details';
      varTemp := gconst.fncXMLExtract(xmldoc,'Param/SynonymName', varTemp); 
      open gencursor for 
       select to_char(rownum) "Rownum", FLDP_TABLE_SYNONYM "Synonym", FLDP_COLUMN_NAME "ColumnName", 
                FLDP_XML_FIELD "XMLField", FLDP_DATA_TYPE "DataType", 
                to_char(NVL(FLDP_DISPLAY_YN,12400002)) "DisplayYN",
                pkgreturncursor.fncgetdescription(NVL(FLDP_DISPLAY_YN,12400002),1) "DisplayYNDesc",
                to_char(NVL(FLDP_SHOW_YN,12400002)) "ShowYN",
                pkgreturncursor.fncgetdescription(NVL(FLDP_SHOW_YN,12400002),1) "ShowYNDesc",
                to_char(NVL(FLDP_PICK_ALLREQUIRED,12400002)) "PickAllRequired",
                pkgreturncursor.fncgetdescription(NVL(FLDP_PICK_ALLREQUIRED,12400002),1) "PickAllRequiredDesc",
                to_char(NVL(FLDP_TEXT_CASE,92299999)) "TextCase", 
                pkgreturncursor.fncgetdescription(NVL(FLDP_TEXT_CASE,92299999), 1) "TextCaseDesc", 
                (case when (varTemp = 'DISTINCTSYNONYMS') then to_char(FLDP_TEXT_FORMAT_Code) 
                else  to_char(NVL(FLDP_TEXT_FORMAT_Code, 90499999))  end) "TextFormat", 
                pkgreturncursor.fncgetdescription(NVL(FLDP_TEXT_FORMAT_Code, 90499999), 1) "TextFormatDesc",        
                to_char(NVL(FLDP_DESCRIPTION_TYPE,92100002)) "DescriptionType", 
                pkgreturncursor.fncgetdescription(NVL(FLDP_DESCRIPTION_TYPE,92100002), 1) "DescriptionTypeDesc",
                to_char(NVL(FLDP_CASCADE_TYPE,90800003)) "CascadeType", 
                pkgreturncursor.fncgetdescription(NVL(FLDP_CASCADE_TYPE,90800003), 1) "CascadeTypeDesc",
                to_char(NVL(FLDP_ENABLE_DISABLE,12400002)) "Editable", 
                pkgreturncursor.fncgetdescription(NVL(FLDP_ENABLE_DISABLE,12400002),1) "EditableDesc",
                to_char(NVL(FLDP_ENABLE_DISABLE_EDIT,12400002)) "EditableInEditMode",
                pkgreturncursor.fncgetdescription(NVL(FLDP_ENABLE_DISABLE_EDIT,12400002),1) "EditableInEditModeDesc",
                to_char(NVL(FLDP_MANDATORY_FIELD,12400002)) "Required", 
                pkgreturncursor.fncgetdescription(NVL(FLDP_MANDATORY_FIELD,12400002),1) "RequiredDesc",        
                to_char(NVL(FLDP_ALLOW_NEGATIVEVALUE,12400002)) "AllowNegativeValues",
                pkgreturncursor.fncgetdescription(NVL(FLDP_ALLOW_NEGATIVEVALUE,12400002),1) "AllowNegativeValuesDesc",
                to_char(nvl(FLDP_PERIOD_CHECK,12400002)) "PeriodCheck",
                pkgreturncursor.fncgetdescription(nvl(FLDP_PERIOD_CHECK,12400002),1) "PeriodCheckDesc",
                FLDP_FIELD_SORT "SortingOrder", FLDP_PICK_GROUP "PickGroup", 
                FLDP_TOOLTIP_TEXT "TooltipText", FLDP_DEFAULT_VALUE "DefaultValue",
                (case when FLDP_PICK_GROUP > 0 then 
                pkgreturncursor.fncgetdescription(FLDP_DEFAULT_VALUE,1)
                else null end) "DefaultValueDesc",
                --to_char(NVL(FLDP_HOLIDAY_CHECK,12400002)) "HolidayCheck",
                FLDP_LABEL_TEXT "LabelText"
        from TRSYSTEM999 left outer join TRGLOBALMAS914
        on FORMAT_DATA_TYPE =FLDP_TEXT_FORMAT_CODE
         and format_pick_code =Glog.LanguageCode
        and FORMAT_record_status not in (10200005,10200006)
        where FLDP_TABLE_SYNONYM = varTemp
        --and FLDP_SHOW_YN = '12400001'
        and nvl(FLDP_TAB_NUMBER,0) > 0
        order by FLDP_FIELD_SORT;  
  GOTO PROCESS_END;
 end if;

---------------------------------------------------------------------------------
if numinfoType = REFGETSYNONYMDATA then
      varOperation := 'Extracting 999 Table Details';
      numCode := gconst.fncXMLExtract(xmldoc,'Param/SynonymName', numCode); 

      SELECT EMIL_PROGRAMUNIT_VIEW, EMIL_PARENT_PROGRAMUNIT, EMIL_PROGRAMUNIT_VIEWSOURCE, EMIL_PARENT_PROGRAMUNITSOURCE
      into varTemp, varTemp1,numCode1,numCode2
      FROM TRMASTER148 WHERE EMIL_PICK_CODE = numCode
      and EMIL_RECORD_STATUS NOT IN (10200005, 10200006);

  --    if numCode1 = 39900001 then
      open gencursor for       
       select rownum "Rownum", a.* from(
       select FLDP_TABLE_SYNONYM "Synonym", 
       FLDP_XML_FIELD "XMLField",
       FLDP_LABEL_TEXT "ColumnDisplayName",
       MENU_DESCRIPTION "ScreenName",
       FLDP_PICK_GROUP "PickGroup",
       FLDP_DATA_TYPE "DataType",
       FLDP_FIELD_SORT "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem999  LEFT OUTER JOIN MENUFILE ON 
             FLDP_TABLE_SYNONYM = MENU_PROGRAM_UNIT            
          where FLDP_TABLE_SYNONYM IN (varTemp,varTemp1)
          and FLDP_SHOW_YN='12400001'
          and FLDP_RECORD_STATUS NOT IN (10200005,10200006)
           and nvl(FLDP_TAB_NUMBER,0) > 0           

        UNION
         select 
        -- rownum "Rownum", 
       VIEW_VIEW_NAME "Synonym", 
       VIEW_COLUMN_NAME "XMLField",
       VIEW_DISPLAY_NAME "ColumnDisplayName",
       NVL(MENU_DESCRIPTION,VIEW_VIEW_NAME) "ScreenName",
       VIEW_PICK_CODE "PickGroup",
       VIEW_DATA_TYPE "DataType",
       VIEW_OREDER_BY "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem999V  LEFT OUTER JOIN MENUFILE ON 
             VIEW_VIEW_NAME = MENU_PROGRAM_UNIT            
          where VIEW_VIEW_NAME IN (varTemp,varTemp1)
          and VIEW_SHOW_YN='12400001'
          and VIEW_RECORD_STATUS NOT IN (10200005,10200006)

        UNION
        select 
      --  rownum "Rownum", 
       LOCL_DATA_NAME "Synonym", 
       LOCL_DESTINATION_COLUMN "XMLField",
       LOCL_DISPLAY_NAME "ColumnDisplayName",
       NVL(MENU_DESCRIPTION,LOCL_DATA_NAME) "ScreenName",
       LOCL_PICK_GROUP "PickGroup",
       --LOCL_DATA_TYPE "DataType"
       pkgreturncursor.fncgetdescription(NVL(LOCL_DATA_TYPE, 90499999), 1) "DataType",
       LOCL_COLUMN_ID "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem968  LEFT OUTER JOIN MENUFILE ON 
             LOCL_DATA_NAME = MENU_PROGRAM_UNIT            
          where LOCL_DATA_NAME IN (varTemp,varTemp1)
          and LOCL_SHOW_YN='12400001'  
          and LOCL_RECORD_STATUS NOT IN (10200005,10200006)
          order by 7) a;         
  GOTO PROCESS_END;
 --  end if;
 end if; 

 if numinfoType = REFGETSYNONYMDATAFORTEMPLATE then
      varOperation := 'Extracting 999 Table Details';
      numCode := gconst.fncXMLExtract(xmldoc,'Param/SynonymName', numCode); 

      SELECT EMIL_PROGRAMUNIT_VIEW, EMIL_PARENT_PROGRAMUNIT, EMIL_PROGRAMUNIT_VIEWSOURCE, EMIL_PARENT_PROGRAMUNITSOURCE
      into varTemp, varTemp1,numCode1,numCode2
      FROM TRMASTER148 WHERE EMIL_PICK_CODE = numCode
      and EMIL_RECORD_STATUS NOT IN (10200005, 10200006);

  --    if numCode1 = 39900001 then
      open gencursor for       
       select rownum "Rownum", a.* from(
       select FLDP_TABLE_SYNONYM "Synonym", 
       FLDP_XML_FIELD "XMLField",
       FLDP_LABEL_TEXT "ColumnDisplayName",
       MENU_DESCRIPTION "ScreenName",
       FLDP_PICK_GROUP "PickGroup",
       FLDP_DATA_TYPE "DataType",
       FLDP_FIELD_SORT "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem999  LEFT OUTER JOIN MENUFILE ON 
             FLDP_TABLE_SYNONYM = MENU_PROGRAM_UNIT            
          where FLDP_TABLE_SYNONYM IN (varTemp,varTemp1)
       --   and FLDP_SHOW_YN='12400001'
          and FLDP_RECORD_STATUS NOT IN (10200005,10200006)
           and nvl(FLDP_TAB_NUMBER,0) > 0           

        UNION
         select 
        -- rownum "Rownum", 
       VIEW_VIEW_NAME "Synonym", 
       VIEW_COLUMN_NAME "XMLField",
       VIEW_DISPLAY_NAME "ColumnDisplayName",
       NVL(MENU_DESCRIPTION,VIEW_VIEW_NAME) "ScreenName",
       VIEW_PICK_CODE "PickGroup",
       VIEW_DATA_TYPE "DataType",
       VIEW_OREDER_BY "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem999V  LEFT OUTER JOIN MENUFILE ON 
             VIEW_VIEW_NAME = MENU_PROGRAM_UNIT            
          where VIEW_VIEW_NAME IN (varTemp,varTemp1)
          and  VIEW_PICK_CODE IS NULL
          and VIEW_SHOW_YN='12400001'
          and VIEW_RECORD_STATUS NOT IN (10200005,10200006)

        UNION
        select 
      --  rownum "Rownum", 
       LOCL_DATA_NAME "Synonym", 
       LOCL_DESTINATION_COLUMN "XMLField",
       LOCL_DISPLAY_NAME "ColumnDisplayName",
       NVL(MENU_DESCRIPTION,LOCL_DATA_NAME) "ScreenName",
       LOCL_PICK_GROUP "PickGroup",
       --LOCL_DATA_TYPE "DataType"
       pkgreturncursor.fncgetdescription(NVL(LOCL_DATA_TYPE, 90499999), 1) "DataType",
       LOCL_COLUMN_ID "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem968  LEFT OUTER JOIN MENUFILE ON 
             LOCL_DATA_NAME = MENU_PROGRAM_UNIT            
          where LOCL_DATA_NAME IN (varTemp,varTemp1)
       --    and LOCL_SHOW_YN='12400001'  
          and LOCL_RECORD_STATUS NOT IN (10200005,10200006)
          order by 7) a;         
  GOTO PROCESS_END;
 --  end if;
 end if; 

 if numinfoType = REFGETSCREENXMLLIST then
      varOperation := 'Extracting 999 Table Details';
      varTemp := gconst.fncXMLExtract(xmldoc,'Param/SynonymName', varTemp); 



  --    if numCode1 = 39900001 then
      open gencursor for       
       select rownum "Rownum", a.* from(
       select FLDP_TABLE_SYNONYM "Synonym", 
       FLDP_XML_FIELD "XMLField",
       FLDP_LABEL_TEXT "ColumnDisplayName",
       MENU_DESCRIPTION "ScreenName",
       FLDP_PICK_GROUP "PickGroup",
       FLDP_DATA_TYPE "DataType",
       FLDP_FIELD_SORT "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem999  LEFT OUTER JOIN MENUFILE ON 
             FLDP_TABLE_SYNONYM = MENU_PROGRAM_UNIT            
          where FLDP_TABLE_SYNONYM IN (varTemp)
       --   and FLDP_SHOW_YN='12400001'
          and FLDP_RECORD_STATUS NOT IN (10200005,10200006)
           and nvl(FLDP_TAB_NUMBER,0) > 0           

        UNION
         select 
        -- rownum "Rownum", 
       VIEW_VIEW_NAME "Synonym", 
       VIEW_COLUMN_NAME "XMLField",
       VIEW_DISPLAY_NAME "ColumnDisplayName",
       NVL(MENU_DESCRIPTION,VIEW_VIEW_NAME) "ScreenName",
       VIEW_PICK_CODE "PickGroup",
       VIEW_DATA_TYPE "DataType",
       VIEW_OREDER_BY "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem999V  LEFT OUTER JOIN MENUFILE ON 
             VIEW_VIEW_NAME = MENU_PROGRAM_UNIT            
          where VIEW_VIEW_NAME IN (varTemp)
          and  VIEW_PICK_CODE IS NULL
          and VIEW_SHOW_YN='12400001'
          and VIEW_RECORD_STATUS NOT IN (10200005,10200006)

        UNION
        select 
      --  rownum "Rownum", 
       LOCL_DATA_NAME "Synonym", 
       LOCL_DESTINATION_COLUMN "XMLField",
       LOCL_DISPLAY_NAME "ColumnDisplayName",
       NVL(MENU_DESCRIPTION,LOCL_DATA_NAME) "ScreenName",
       LOCL_PICK_GROUP "PickGroup",
       --LOCL_DATA_TYPE "DataType"
       pkgreturncursor.fncgetdescription(NVL(LOCL_DATA_TYPE, 90499999), 1) "DataType",
       LOCL_COLUMN_ID "SortOrder"
     --  FLDP_KEY_NO "PrimaryKey"
        from trsystem968  LEFT OUTER JOIN MENUFILE ON 
             LOCL_DATA_NAME = MENU_PROGRAM_UNIT            
          where LOCL_DATA_NAME IN (varTemp)
       --    and LOCL_SHOW_YN='12400001'  
          and LOCL_RECORD_STATUS NOT IN (10200005,10200006)
          order by 7) a;         
  GOTO PROCESS_END;
 --  end if;
 end if; 


-- if numinfoType = REFGETSYNONYMKEYDATA then
--      varOperation := 'Extracting KEY fields Details';
--      numCode := gconst.fncXMLExtract(xmldoc,'Param/SynonymName', numCode); 
--      
--      if numCode != 0 then
--      SELECT EMIL_PROGRAMUNIT_VIEW, EMIL_PARENT_PROGRAMUNIT,EMIL_PROGRAMUNIT_VIEWSOURCE
--      into varTemp, varTemp1,numCode1
--      FROM TRMASTER148 WHERE EMIL_PICK_CODE = numCode
--      and EMIL_RECORD_STATUS NOT IN (10200005, 10200006);
--      
--      if numCode1 = 39900001 then
--      open gencursor for       
--       select rownum "Rownum", 
--       FLDP_TABLE_SYNONYM "Synonym", 
--       FLDP_XML_FIELD "XMLField",
--       FLDP_COLUMN_DISPLAYNAME "ColumnDisplayName",
--       MENU_DESCRIPTION "ScreenName",
--       FLDP_PICK_GROUP "PickGroup",
--       FLDP_DATA_TYPE "DataType",
--       varTemp "ProgramUnitView",
--       varTemp1 "ParentProgramUnit",
--       '' ParentProgramUnitKeys,
--       '' ProgramUnitViewKeys
--        from trsystem999  LEFT OUTER JOIN MENUFILE ON 
--             FLDP_TABLE_SYNONYM = MENU_PROGRAM_UNIT            
--          where FLDP_TABLE_SYNONYM IN (varTemp,varTemp1)
--          and FLDP_SHOW_YN='12400001'
--           and nvl(FLDP_TAB_NUMBER,0) > 0
--           and nvl(FLDP_KEY_NO,0) > 0
--          order by FLDP_FIELD_SORT;         
--  GOTO PROCESS_END;
--   end if;
--   end if;
-- end if;

if numinfoType = REFGETSYNONYMKEYSPARENT then
      varOperation := 'Extracting KEY fields Details';     
      varTemp1 := gconst.fncXMLExtract(xmldoc,'Param/ParentProgramUnit', varTemp1);      
      numCode1 := gconst.fncXMLExtract(xmldoc,'Param/ParentProgramUnitSource', numCode1);


   --   if numCode1 = 39900001 then
      open gencursor for       
       select rownum "Rownum", 
    --   FLDP_TABLE_SYNONYM "Synonym", 
       FLDP_COLUMN_NAME "ColumnName",
       FLDP_COLUMN_DISPLAYNAME "ColumnDisplayName"

        from trsystem999            
          where FLDP_TABLE_SYNONYM IN (varTemp1)         
           and nvl(FLDP_KEY_NO,0) > 0        
  --   GOTO PROCESS_END;  
 --    end if;
    UNION 
 --  elsif numCode1 = 39900002 then
   --   open gencursor for       
       select rownum "Rownum", 
   --    FLDP_TABLE_SYNONYM "Synonym", 
       VIEW_COLUMN_NAME "ColumnName",
       VIEW_DISPLAY_NAME "ColumnDisplayName"    
        from trsystem999v            
          where VIEW_VIEW_NAME IN (varTemp1)
         -- and VIEW_SHOW_YN='12400001'
          -- and nvl(FLDP_TAB_NUMBER,0) > 0
           and nvl(VIEW_PRIMARY_KEY,0) > 0 
     UNION   
       select rownum "Rownum", 
        LOCL_DESTINATION_COLUMN "ColumnName",
        LOCL_DISPLAY_NAME "ColumnDisplayName"    
          from trsystem968            
            where LOCL_DATA_NAME IN (varTemp1)
             and LOCL_PRIMARY_KEY=12400001
             and LOCL_RECORD_STATUS not in (10200005,10200006); 

      GOTO PROCESS_END;
    --   end if;

 END IF;

 if numinfoType = REFGETSYNONYMKEYSPROGUNIT then
      varOperation := 'Extracting KEY fields Details';
      varTemp := gconst.fncXMLExtract(xmldoc,'Param/ProgramUnit', varTemp);       
      numCode := gconst.fncXMLExtract(xmldoc,'Param/ProgramUnitSource', numCode);

  --    if numCode = 39900001 then
      open gencursor for       
       select rownum "Rownum", 
   --    FLDP_TABLE_SYNONYM "Synonym", 
       FLDP_COLUMN_NAME "ColumnName",
       FLDP_COLUMN_DISPLAYNAME "ColumnDisplayName"    
        from trsystem999            
          where FLDP_TABLE_SYNONYM IN (varTemp)
          --and FLDP_SHOW_YN='12400001'
          -- and nvl(FLDP_TAB_NUMBER,0) > 0
           and nvl(FLDP_KEY_NO,0) > 0        

  --    GOTO PROCESS_END;
  --     end if;
       UNION
  --  elsif numCode = 39900002 then
  --    open gencursor for       
       select rownum "Rownum", 
   --    FLDP_TABLE_SYNONYM "Synonym", 
       VIEW_COLUMN_NAME "ColumnName",
       VIEW_DISPLAY_NAME "ColumnDisplayName"    
        from trsystem999v            
          where VIEW_VIEW_NAME IN (varTemp)
          --and VIEW_SHOW_YN='12400001'
          -- and nvl(FLDP_TAB_NUMBER,0) > 0
           and nvl(VIEW_PRIMARY_KEY,0) > 0         

       UNION

        select rownum "Rownum", 
          LOCL_DESTINATION_COLUMN "ColumnName",
          LOCL_DISPLAY_NAME "ColumnDisplayName"    
            from trsystem968            
             where LOCL_DATA_NAME IN (varTemp)
             and LOCL_PRIMARY_KEY=12400001
             and LOCL_RECORD_STATUS NOT IN (10200005,10200006); 

      GOTO PROCESS_END;


  END IF;

 if numinfoType = REFGETSYNONYMKEYDATA then
      varOperation := 'Extracting KEY fields Details';
      begin
      numCode := gconst.fncXMLExtract(xmldoc,'Param/AlertType', numCode);
      exception
      when others then
      numCode :=0;
      end;

    open gencursor for       
      select EMIC_PARENT_COLUMN "ParentProgramUnitKeys",
       EMIC_PROGRAM_COLUMN "ProgramUnitViewKeys"
        FROM TRMASTER148A WHERE EMIC_PICK_CODE = numCode
      and EMIC_RECORD_STATUS NOT IN (10200005, 10200006);  
    GOTO PROCESS_END;  
 end if;

-- if numinfoType = REFGETEMAILTYPEDATA then
--      varOperation := 'Extracting 148 Table Details';
--      numCode := gconst.fncXMLExtract(xmldoc,'Param/SynonymName', numCode); 
--    
--     open gencursor for   
--      SELECT EMIL_PROGRAMUNIT_VIEW "ProgramUnitView", EMIL_PARENT_PROGRAMUNIT  "ParentProgramUnit"    
--      FROM TRMASTER148 WHERE EMIL_PICK_CODE = numCode
--      and EMIL_RECORD_STATUS NOT IN (10200005, 10200006);      
--    GOTO PROCESS_END;
--   end if;
--   
 if numinfoType = REFGETSYNONYMCOLUMN then
varTemp := gconst.fncXMLExtract(xmldoc,'Param/SynonymName', varTemp); 
OPEN GENCURSOR FOR
        select Fldp_Column_name "ColumnName", fldp_label_text "LabelText"
        from trsystem999
        where fldp_table_synonym=varTemp
        --and fldp_xml_field='CompanyCode'
        and fldp_pick_group=301
        AND FLDP_TABLE_SYNONYM NOT IN ('ENTITYINFO')
        union
        select null "ColumnName" , 'NA' "LabelText"
        from dual;
 GOTO PROCESS_END;
 end if;
if numinfoType = REFGETFORWARDDATA then
      open gencursor for 
      select rownum "Rownum",pkgreturncursor.fncgetdescription(DRAD_CURRENCY_CODE,2) "BaseCurrency",
      pkgreturncursor.fncgetdescription(DRAD_FOR_CURRENCY,2) "QuoteCurrency",
      DRAD_ASK_RATE "AskRate",
      DRAD_BID_RATE "BIDRate", 
      DRAD_CONTRACT_MONTH "ContractMonth"
      from trtran013a
          where DRAD_RECORD_STATUS NOT IN (10200005,10200006);
  GOTO PROCESS_END;
 end if;

if numinfoType = REFGETXMLFIELDDATA then
      varOperation := 'Extracting 967A Table Details';
      varTemp := gconst.fncXMLExtract(xmldoc,'ReferenceNo', varTemp); 
      open gencursor for 
        select rownum "Rownum", TERD_XML_FIELD "XMLField",
        TRED_SYNONYM_NAME "Synonym",TRED_CONDITION "Condition",
        TRED_ORDER_BY "SortOrder",
        TERD_LABEL_NAME "LabelName"
       -- FLDP_COLUMN_DISPLAYNAME "ColumnDisplayName" 
        from trsystem967a inner join trsystem967
        on TREM_REFERENCE_NUMBER=TRED_REFERENCE_NUMBER
        and TREM_SERIAL_NUMBER = TRED_SERIAL_NUMBER
--        left outer  join trsystem999
--        on FLDP_TABLE_SYNONYM=TRED_SYNONYM_NAME
        where 
        --TERD_XML_FIELD=FLDP_XML_FIELD
      --  and FLDP_SHOW_YN='12400001'
         TRED_RECORD_STATUS NOT IN (10200005,10200006) 
       and TREM_RECORD_STATUS NOT IN (10200005,10200006) 
        and TRED_REFERENCE_NUMBER=varTemp;
 GOTO PROCESS_END;
 end if;

 if numinfoType = REFGETXMLFIELDTEMPLATEDATA then
      varOperation := 'Extracting 965A Table Details';
      varTemp := gconst.fncXMLExtract(xmldoc,'TemplateReference', varTemp); 
   --  GLog.Log_write( 'Template Reference  ' || varTemp || ' To ' || dattemp1);

      open gencursor for 
        select rownum "Rownum", TEMD_XML_FIELD "XMLField",
        TEMD_SYNONYM_NAME "Synonym",
        --TEMD_CONDITION "Condition",
        TEMD_ORDER_BY "SortOrder",
        TEMD_LABEL_NAME "LabelName"
       -- FLDP_COLUMN_DISPLAYNAME "ColumnDisplayName" 
        from trsystem965a inner join trsystem965
        on TEMP_TEMPLATE_REFERENCE=TEMD_TEMPLATE_REFERENCE
        and TEMP_SERIAL_NUMBER = TEMD_SERIAL_NUMBER
--        left outer  join trsystem999
--        on FLDP_TABLE_SYNONYM=TEMD_SYNONYM_NAME
        where 
        --TERD_XML_FIELD=FLDP_XML_FIELD
      --  and FLDP_SHOW_YN='12400001'
         TEMD_RECORD_STATUS NOT IN (10200005,10200006) 
       and TEMP_RECORD_STATUS NOT IN (10200005,10200006) 
        and TEMD_TEMPLATE_REFERENCE=varTemp;
 GOTO PROCESS_END;
 end if;


-- if numinfoType = REFGETXMLFIELDTRANCONFIG then
--      varOperation := 'Extracting 963A Table Details';
--      vartemp1 := gconst.fncXMLExtract(xmldoc,'ReferenceNo', vartemp1); 
--    GLog.Log_write( 'Template Reference  ' || vartemp1 );
--      
--      open gencursor for 
--        select rownum "Rownum", MTXC_XML_FIELD "XMLField",
--        MTXC_SYNONYM_NAME "Synonym",
--       
--        MTXC_ORDER_BY "SortOrder",
--        MTXC_LABEL_NAME "LabelName"
--        from trsystem963a inner join trsystem963
--        on MTRX_REFERENCE_NUMBER=MTXC_REFERENCE_NUMBER
--       and MTRX_SERIAL_NUMBER = MTXC_SERIAL_NUMBER 
--        where  
--         MTXC_RECORD_STATUS NOT IN (10200005,10200006) 
--       and MTRX_RECORD_STATUS NOT IN (10200005,10200006) 
--        and MTXC_REFERENCE_NUMBER=vartemp1;
-- GOTO PROCESS_END;
-- end if;

---------------------------------------------------------------------------------
 if numinfoType = RefGetEntityDetails then
      varOperation := 'Extracting 999 Table Details';
      varTemp := gconst.fncXMLExtract(xmldoc,'Param/SynonymName', varTemp); 
      open gencursor for 
        select to_char(rownum) "Rownum", FLDP_TABLE_SYNONYM "Synonym",FLDP_COLUMN_NAME "ColumnName", 
        FLDP_XML_FIELD "XMLField", FLDP_DATA_TYPE "DataType", 
        to_char(NVL(FLDP_DISPLAY_YN,12400002)) "DisplayYN", to_char(NVL(FLDP_SHOW_YN,12400002)) "ShowYN",
        to_char(NVL(FLDP_PICK_ALLREQUIRED,12400002)) "PickAllRequired", to_char(NVL(FLDP_TEXT_CASE,92299999)) "TextCase", 
        FORMAT_FORMAT_STRING "TextFormat",  FLDP_TEXT_LENGTH "TextLength",
        FLDP_TOOLTIP_TEXT "TooltipText", FLDP_DEFAULT_VALUE "DefaultValue", 
        to_char(NVL(FLDP_DESCRIPTION_TYPE,92100002)) "DescriptionType", FLDP_LABEL_TEXT "LabelText", 
        to_char(NVL(FLDP_ENABLE_DISABLE,12400002)) "Editable", to_char(NVL(FLDP_ENABLE_DISABLE_EDIT,12400002)) "EditableInEditMode",
        to_char(NVL(FLDP_MANDATORY_FIELD,12400002)) "Required", FLDP_FIELD_SORT "SortingOrder",
        FLDP_PICK_GROUP "PickGroup", 
        to_char(NVL(FLDP_ALLOW_NEGATIVEVALUE,12400002)) "AllowNegativeValues",
        to_char(NVL(FLDP_PERIOD_CHECK,12400002)) "PeriodCheck"
        from TRSYSTEM999 left outer join TRGLOBALMAS914
          on FORMAT_DATA_TYPE =FLDP_TEXT_FORMAT_CODE
          and format_pick_code =Glog.LanguageCode
          and FORMAT_record_status not in (10200005,10200006)
          where FLDP_TABLE_SYNONYM = varTemp
           and nvl(FLDP_TAB_NUMBER,0) > 0
          order by FLDP_FIELD_SORT;  

  GOTO PROCESS_END;
 end if;
-----------------------------------------------------------------------------
-- FOR DMS 
if numinfoType = REFDMSSYNONYMS then      
      open gencursor for 
      select distinct MENU_DESCRIPTION "Description", MENU_PROGRAM_UNIT "KeyValue"
      from tftran101 inner join MenuFile
        on imag_entity_name = menu_program_unit
        where imag_record_status not in (10200005,10200006)
        and menu_record_status not in (10200005,10200006)
        and menu_program_unit in (select actl_program_unit from trsystem006 where
        UPPER(case when actl_user_id = '.' then varUserid else actl_user_id end) = varUserid
                        --    (case when  actl_user_id='.' then 'Demo' else  actl_user_id  end)='Demo'
                          and actl_group_code = (select user_group_code from USERMASTER
                          where UPPER(user_user_id) = varUserid and User_record_Status not in (10200005,10200006)))
        --Added by lakshmi, for showing menus based on modules added for license.   
        and exists 
          (select 'x' from  clouddb_master.Trlicense002a 
             inner join clouddb_master.trlicense001a
             on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
          where nvl(Menu_Program_Unit,'NA') = Lmdd_Program_Unit 
          and lmdd_record_Status not in (10200005,10200006)
          and lmdu_record_status not in (10200005,10200006)
          and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051))
            and IMAG_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and IMAG_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            and MENU_COMPANY_CODE  in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))   ;      

  GOTO PROCESS_END;
 end if;

 ----------------------------------------------------------------------------
if numinfoType = REFDMSDETAILS then  



      varOperation := 'Extracting DMS Details';
      --varTemp := gconst.fncXMLExtract(xmldoc,'Param/EventEntityName', varTemp);
      begin
        varTemp1 := gconst.fncXMLExtract(xmldoc,'Param/DocumentReference', varTemp1);
      exception
        when others then
        vartemp1:= null;
      end;
      begin
          varTemp2 := gconst.fncXMLExtract(xmldoc,'Param/DocumentName', varTemp2);
      exception
        when others then
          varTemp2:=null;
      end;
--      
--       begin
--        varcom := gconst.fncXMLExtract(xmldoc,'Param/CompanyCode', varcom);
--      exception
--        when others then
--        varcom:= null;
--      end;
--      begin
--          varloc := gconst.fncXMLExtract(xmldoc,'Param/LocationCode', varloc);
--      exception
--        when others then
--          varloc:=null;
--      end;
--       begin
--        varbank := gconst.fncXMLExtract(xmldoc,'Param/BankCode', varbank);
--      exception
--        when others then
--        varbank:= null;
--      end;
      begin
          vardoctype := gconst.fncXMLExtract(xmldoc,'Param/DocumentType', vardoctype);
      exception
        when others then
          vardoctype:=null;
      end;
       begin
          vardocentity := gconst.fncXMLExtract(xmldoc,'Param/EventEntityName', vardocentity);
      exception
        when others then
          vardocentity:=null;
      end;
      begin
          dattemp := gconst.fncXMLExtract(xmldoc,'Param/FromDate', dattemp);
      exception
        when others then
          dattemp:=sysdate;
      end;
       begin
          dattemp1 := gconst.fncXMLExtract(xmldoc,'Param/ToDate', dattemp1);
      exception
        when others then
          dattemp1:=sysdate;
      end;
      --numcode:= gconst.fncxmlextract(xmldoc,'Param/CompanyCode',numcode);
      --numcode1:= GCONST.fncxmlextract(xmldoc,'Param/LocationCode',numcode1);
      --numcode2:= gconst.fncxmlextract(xmldoc,'Param/BankCode',numcode2);
      --numcode3:= gconst.fncxmlextract(xmldoc,'Param/DocumentType',numcode3);

      open gencursor for      

select   pkgreturncursor.fncgetdescription(IMAG_COMPANY_CODE,2)"Company",
         pkgreturncursor.fncgetdescription(IMAG_LOCATION_CODE,2) "Location",
         pkgreturncursor.fncgetdescription(IMAG_BANK_CODE,2)"Bank",
         pkgreturncursor.fncgetdescription((case when IMAG_DOCUMENT_TYPE = 0 then 90100008 else IMAG_DOCUMENT_TYPE end),2) "DocumentTypeName",
         IMAG_COMPANY_CODE "CompanyCode",
         IMAG_LOCATION_CODE "LocationCode",
         IMAG_BANK_CODE "BankCode",
         IMAG_DOCUMENT_TYPE "DocumentType",
         IMAG_ENTITY_NAME "EventEntityName",
         IMAG_DOCUMENT_REFERENCE "DocumentReference",
         IMAG_DOCUMENT_NAME "DocumentName",        
         IMAG_REFERENCE_NUMBER "ReferenceNumber",
         IMAG_REFERENCE_SERIAL "ReferenceSerial"
        -- IMAG_DOCUMENT_IMAGE "DocumentImage"
      from tftran101     

       where imag_record_status not in (10200005,10200006)
       and IMAG_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and IMAG_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--       and 
--       (((varcom is not null) 
--              and instr(gconst.fncxmlextract(xmldoc,'Param/CompanyCode',varcom), IMAG_COMPANY_CODE)>0)
--              or (varcom is null))
--     --  instr(gconst.fncxmlextract(xmldoc,'Param/CompanyCode',varTemp), IMAG_COMPANY_CODE)>0
--     and
--     (((varloc is not null) 
--              and instr(GCONST.fncxmlextract(xmldoc,'Param/LocationCode',varloc), IMAG_LOCATION_CODE)>0)
--              or (varloc is null))
     --  and instr(GCONST.fncxmlextract(xmldoc,'Param/LocationCode',varTemp), IMAG_LOCATION_CODE)>0
--     and
--     (((varbank is not null) 
--              and instr(GCONST.fncxmlextract(xmldoc,'Param/BankCode',varbank), IMAG_BANK_CODE)>0)
--              or (varbank is null))
      --  and instr(GCONST.fncxmlextract(xmldoc,'Param/BankCode',varTemp), IMAG_BANK_CODE)>0
      and
      (((vardoctype is not null) 
              and instr(vardoctype, to_char(nvl(IMAG_DOCUMENT_TYPE,0)))>0)
              or (vardoctype is null))
       -- and instr(gconst.fncxmlextract(xmldoc,'Param/DocumentType',varTemp), IMAG_DOCUMENT_TYPE)>0
      and  
        (((vardocentity is not null) 
              and instr(vardocentity, nvl(IMAG_ENTITY_NAME,'NA'))>0)
              or (vardocentity is null))
      -- and instr(gconst.fncxmlextract(xmldoc,'Param/EventEntityName',varTemp), IMAG_ENTITY_NAME)>0
        and (((varTemp1 is not null) 
              and (IMAG_DOCUMENT_REFERENCE like '%' || varTemp1 || '%'))
              or (varTemp1 is null))
        and (((varTemp2 is not null) 
              and (IMAG_DOCUMENT_NAME like '%' || varTemp2 || '%'))
              or (varTemp2 is null))
--(((vardoctype is not null) 
--              and (IMAG_DOCUMENT_TYPE IN vardoctype ))
--              or (vardoctype is null))
        and IMAG_CREATE_DATE BETWEEN dattemp and dattemp1;
GOTO PROCESS_END;
 end if;
-------------------------------------------------------------------------------
--   if numinfotype = REFFXSETTLEMENTNEW then  
--
--          BEGIN
--           varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           varTemp1 :='ALL';
--       End;
--           BEGIN
--           varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           varTemp2 := 'ALL';
--       End;
--           BEGIN
--           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp3,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           vartemp3 := 'ALL';
--       End;
--           BEGIN
--           varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           varTemp4 := 'ALL';
--       End;
--           BEGIN
--           varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
--           Exception
--           when others then
--           varTemp5 := 'ALL';
--       End;
--   
--    varOperation:='Extracting Financial Year';    
--    select PRMC_CALENDARYEAR_TYPE,PRMC_CONVERT_AMOUNTINTO
--      into numCode,Numcode1
--     from trsystem051;
--   
--    select PKGFUNCTIONS.FINANCIAL_Year_StartDate(sysdate,numCode),
--           PKGFUNCTIONS.FINANCIAL_Year_ENDDate(sysdate,numCode)
--      into dattemp,dattemp1
--     from dual;
----   select    to_date('01-04-'||EXTRACT (YEAR FROM ADD_MONTHS (datworkdate, -3)),'dd-mm-yyyy'),
----            to_date('31-03-'||EXTRACT (YEAR FROM ADD_MONTHS (datworkdate,  9)),'dd-mm-yyyy') into dattemp,dattemp1
----      from dual;
--
--      GLog.Log_write( 'Financial Year from ' || dattemp || ' To ' || dattemp1);
--      GLog.Log_write( 'varTemp1 ' || varTemp1 || ' varTemp2 ' || varTemp2 || ' varTemp3 ' || varTemp3 || ' varTemp4 ' || varTemp4 ||
--      ' varTemp5 ' || varTemp5);
--     
--select PICK_SHORT_DESCRIPTION
--    into numdetail
--    from TRMASTER001
--    where PICK_KEY_VALUE = Numcode1
--    and pick_record_Status not in (10200005,10200006);
--
--
--open gencursor for  
--
--  select MaturityMonth, MonthOrder,datDateAsOn,
--         BaseCurrency,OtherCurrency, CurrencyPair,
--         SettlementBasemount,CashAmount, HedgeAmount, round(HedgeRate,6)
--         UnHedgeAmount,0 UnHedgedRate, FWDCancelamount,FutureCancelAmount,OptionCancelAmount,
--         SettlementBasemountLocal,EarlyDeliveryPnL,
--         FRDCancelPnL,RollOverFWDCancelPnL,FutCancelPnL,
--         OptCancelPnL,FutRolloverPnL,OptRollOverPnL, TotalPnL,
--         SettlementRate,SettlementRate_withPnL, CashRateonSettlement,
--         InflowOutflow, BudgetRate,round(SpotRate,6),
--         round((case when InflowOutflow='Inflow' then
--            (SettlementRate-BudgetRate) * SettlementBasemount
--              when InflowOutflow='Outflow' then
--            (BudgetRate-SettlementRate) * SettlementBasemount end ),2) PLOverBudget,
--         round((case when InflowOutflow='Inflow' then
--            (SettlementRate-SpotRate) * SettlementBasemount
--              when InflowOutflow='Outflow' then
--            (SpotRate-SettlementRate) * SettlementBasemount end ),2) PLOverSpot,  
--         round((case when InflowOutflow='Inflow' then
--            (HedgeRate-BudgetRate) * HedgeAmount
--              when InflowOutflow='Outflow' then
--            (BudgetRate-SettlementRate) * HedgeAmount end ),2) PLOver_BudgetVsHedged,  
--         round((case when InflowOutflow='Inflow' then
--            (HedgeRate-BudgetRate) * UnHedgeAmount
--              when InflowOutflow='Outflow' then
--            (BudgetRate-SettlementRate) * UnHedgeAmount end ),2) PLOver_BudgetVsUnHedged
-- from (select Settlement.MaturityMonth, Settlement.MonthOrder,dattemp1 datDateAsOn,
--        pkgreturncursor.fncgetdescription(Settlement.BaseCurrency,2)BaseCurrency,
--        pkgreturncursor.fncgetdescription(Settlement.OtherCurrency,2)OtherCurrency,
--        pkgreturncursor.fncgetdescription(Settlement.BaseCurrency,2)||'/'||pkgreturncursor.fncgetdescription(Settlement.OtherCurrency,2) CurrencyPair,
--        round(SettlementBasemount/numdetail,2)SettlementBasemount,
--        round(CashAmount/numdetail,2) CashAmount,
--        round(HedgeAmount/numdetail,2) HedgeAmount,
--        (round(CashAmount/numdetail,2) -round(HedgeAmount/numdetail,2))  UnHedgeAmount,
--        round(nvl(FWDCancelamount,0)/numdetail,2)FWDCancelamount,
--        round(nvl(FutureCancelAmount,0)/numdetail,2)FutureCancelAmount,
--        round(nvl(OptionCancelAmount,0)/numdetail,2)OptionCancelAmount,
--        round(SettlementBasemountLocal/numdetail,2)SettlementBasemountLocal,round(EarlyDeliveryPnL/numdetail,2)EarlyDeliveryPnL,
--        round(FRDCancelPnL/numdetail,2)FRDCancelPnL,
--        round(RollOverFWDCancelPnL/numdetail,2)RollOverFWDCancelPnL,round(Fut.CancelPnL/numdetail,2)FutCancelPnL,
--        round(Opt.CancelPnL/numdetail,2)OptCancelPnL,round(Fut.RolloverPnL/numdetail,2)FutRolloverPnL,
--        round(Opt.RollOverPnL/numdetail,2)OptRollOverPnL,
--        round((nvl(EarlyDeliveryPnL,0)+nvl(FRDCancelPnL,0)+
--        nvl(RollOverFWDCancelPnL,0)+nvl(Fut.CancelPnL,0)+nvl(Opt.CancelPnL,0) +
--        nvl(Fut.RolloverPnL,0) + nvl(Opt.RollOverPnL,0))/numdetail,2) TotalPnL,
--        round((SettlementBasemountLocal/numdetail)/
--        (case when (SettlementBasemount/numdetail)=0 then 1 else (SettlementBasemount/numdetail) end),6)SettlementRate,
--        round(((SettlementBasemountLocal+EarlyDeliveryPnL+FRDCancelPnL+
--        RollOverFWDCancelPnL+Fut.CancelPnL +Opt.CancelPnL +Fut.RolloverPnL +
--        Opt.RollOverPnL))/(case when SettlementBasemount=0 then 1 else SettlementBasemount end),6)SettlementRate_withPnL,        
--        round((SettlementBasemount * SpotRate)/(case when SettlementBasemount=0 then 1 else (SettlementBasemount) end),6) CashRateonSettlement,
--        decode(Settlement.InflowOutflow,'Outflow','Outflow',Settlement.InflowOutflow,'Inflow','Inflow',      
--        FUT.InflowOutflow,'Outflow','Outflow',FUT.InflowOutflow,'Inflow','Inflow',
--        OPT.InflowOutflow,'Outflow','Outflow',OPT.InflowOutflow,'Inflow','Inflow')InflowOutflow,
--        Pkgforexprocess.Fncgetrate
--         (Settlement.BaseCurrency,Settlement.OtherCurrency,dattemp,25399999,0,
--         last_day(to_date('01-' || to_char(sysdate,'Mon-yy'))),0,81500006) BudgetRate,
--         SpotRate,HedgeRate
--      from (select  to_char(cdel_cancel_DATE,'Mon-yy') MaturityMonth,
--                   to_char(cdel_cancel_DATE,'YYYYMM') MonthOrder,
--                   DEAL_BASE_CURRENCY BaseCurrency,deal_other_currency OtherCurrency,
--                   sum(Case When CDEL_Cancel_TYPE=27000002 then nvl(Cdel_Cancel_Amount,0) else 0 end  ) SettlementBasemount,
--                   sum(Case When DEAL_DEAL_TYPE=25400001 then nvl(Cdel_Cancel_Amount,0) else 0 end  ) CashAmount,
--                   sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000002
--                       then nvl(Cdel_Cancel_Amount,0) else 0 end  ) HedgeAmount,
--                  (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000002
--                       then nvl(Cdel_Cancel_Amount,0)*deal_exchange_rate else 0 end)/
--                    (case when (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000002
--                       then nvl(Cdel_Cancel_Amount,0) else 0 end  ))=0 then 1
--                       else (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000002
--                       then nvl(Cdel_Cancel_Amount,0) else 0 end))end)) HedgeRate,
--                   sum(Case When CDEL_Cancel_TYPE=27000001 then nvl(Cdel_Cancel_Amount,0) else 0 end  ) FWDCancelamount,
--                   sum((Case When CDEL_Cancel_TYPE=27000002 then nvl(Cdel_Cancel_Amount,0) else 0 end  )*cdel_cancel_RATE) SettlementBasemountLocal,
----                   sum((Case When CDEL_DEAL_TYPEC=27000002 then Cdel_Cancel_Amount else 0 end  )*cdel_cancel_RATE/
----                       sum(Case When CDEL_DEAL_TYPEC=27000002 then Cdel_Cancel_Amount else 0 end  )) SettlWeightedRate,
--                   sum(Case When CDEL_Cancel_TYPE=27000002 then nvl(Cdel_Profit_loss,0) else 0 end  ) EarlyDeliveryPnL,
--                    sum(Case When CDEL_Cancel_TYPE=27000001 then  nvl(Cdel_Profit_loss,0) else 0 end  ) FRDCancelPnL,
--                    0 RollOverFWDCancelPnL, avg (Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,Deal_other_currency,cdel_cancel_date,deal_buy_sell,0,null,0,81599999)) SpotRate,
--                  decode(deal_buy_sell,25300001,'Outflow','Inflow') InflowOutflow,
--                  deal_buy_sell Buysell
--                 from  trtran006  inner join trtran001 b1
--                       on cdel_deal_number= deal_deal_number
--                  where cdel_cancel_date BETWEEN dattemp AND dattemp1                
--                  --and deal_buy_sell=25300002
--                   and cdel_record_status not in (10200005,10200006)
--                   and deal_record_status not in (10200005,10200006)
--                   and (deal_company_code = DECODE(varTemp1,'ALL' ,deal_company_code) OR
--                        INSTR(varTemp1 ,deal_company_code) >0)
--                     AND (DEAL_CURRENCY_PAIR= decode(vartemp3,'ALL',DEAL_CURRENCY_PAIR)
--                        or instr(vartemp3,DEAL_CURRENCY_PAIR)>0)
--                    AND   (NVL(deal_backup_deal,0) = DECODE(varTemp4,'ALL' ,NVL(deal_backup_deal,0)) OR
--                        INSTR(varTemp4 ,NVL(deal_backup_deal,0)) >0)
--                    AND   (NVL(DEAL_INIT_CODE,0) = DECODE(varTemp5,'ALL' ,NVL(DEAL_INIT_CODE,0)) OR
--                        INSTR(varTemp5 ,NVL(deal_init_code,0)) >0)
--                    AND  (NVL(Deal_Location_CODE,0) = DECODE(varTemp2,'ALL' ,NVL(deal_Location_CODE,0)) OR
--                        INSTR(varTemp2 ,NVL(deal_Location_CODE,0)) >0)
--                  group by  DEAL_BASE_CURRENCY,deal_other_currency,
--                  to_char(cdel_cancel_DATE,'Mon-yy'),
--                   to_char(cdel_cancel_DATE,'YYYYMM'),deal_buy_sell)Settlement
--              left outer join
--              (SELECT TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM') MonthOrder,
--                        SUM(nvl(Cfrv_Profit_Loss,0)) CancelPnL,
--                        SUM(nvl(CFRV_CANCEL_AMOUNT,0)) AS FutureCancelAmount,
--                        0 RollOverPnL,
--                        cfut_base_currency BaseCurrency,
--                        cfut_other_currency OtherCurrency,
--                        decode(CFUT_BUY_SELL,25300001,'Outflow','Inflow')InflowOutflow
--                      FROM Trtran063 a2,
--                        Trtran061 b2
--                      WHERE Cfrv_Deal_Number= cfut_deal_number
--                      AND CFRV_EXECUTE_DATE BETWEEN dattemp AND dattemp1
--                      --and CFUT_BUY_SELL=25300002
--                      AND cfrv_record_status NOT IN (10200005,10200006)
--                      and Cfut_Record_Status NOT IN (10200005,10200006)
--                      and (cfut_company_code = DECODE(varTemp1,'ALL' ,cfut_company_code) OR
--                            INSTR(varTemp1 ,cfut_company_code) >0)
--                      and ((vartemp3 = 'ALL') or
--                            exists (select 'x' from trmaster256
--                              where CNDI_BASE_CURRENCY=Cfut_Base_Currency
--                                and CNDI_OTHER_CURRENCY= Cfut_Other_Currency
--                                and instr(vartemp3,CNDI_PICK_CODE )>0
--                                and CNDI_RECORD_STATUS not in (10200005,10200006)))
--                       AND   (NVL(CFUT_BACKUP_DEAL,0) = DECODE(varTemp4,'ALL' ,NVL(CFUT_BACKUP_DEAL,0)) OR
--                            INSTR(varTemp4 ,NVL(CFUT_BACKUP_DEAL,0)) >0)
--                       AND   (NVL(CFUT_INIT_CODE,0) = DECODE(varTemp5,'ALL' ,NVL(CFUT_INIT_CODE,0)) OR
--                            INSTR(varTemp5 ,NVL(CFUT_INIT_CODE,0)) >0)
--                       AND  (NVL(cfut_Location_CODE,0) = DECODE(varTemp2,'ALL' ,NVL(cfut_Location_CODE,0)) OR
--                            INSTR(varTemp2 ,NVL(cfut_Location_CODE,0)) >0)
--
--                      GROUP BY TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM'),
--                        cfut_base_currency,cfut_other_currency,CFUT_BUY_SELL)FUT
--                   on FUT.BaseCurrency=Settlement.BaseCurrency
--                  and FUT.OtherCurrency=Settlement.OtherCurrency
--                  and FUT.MonthOrder=Settlement.MonthOrder
--                  and FUT.InflowOutflow=Settlement.InflowOutflow
--            Left outer join  
--                  (SELECT TO_CHAR(corv_exercise_date,'YYYYMM') MonthOrder,
--                              SUM(nvl(corv_pandl_usd,0)) CancelPnL,
--                              0 RollOverPnL,
--                              SUM((case when OPTI_NOTIONAL_AMOUNT_LEGWISE=12400001  then CORV_BASE_AMOUNT
--                                        when (OPTI_NOTIONAL_AMOUNT_LEGWISE=12400002 and CORV_SERIAL_NUMBER=1) then CORV_BASE_AMOUNT
--                                        end)) AS OptionCancelAmount,
--                              copt_base_currency BaseCurrency,
--                               COPT_other_currency OtherCurrency,
--                               ( case
--                               -- when cosu_buy_sell = 25300001 and cosu_option_type = 32400002 then 'Outflow'
--                                when cosu_buy_sell = 25300001 and cosu_option_type = 32400001 then 'Outflow'
--                                --when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 'Outflow'
--                                when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 'Inflow'
--                              End ) InflowOutflow
--                      FROM Trtran073 a2 inner join Trtran071 b2
--                         on copt_deal_number = corv_deal_number
--                         and copt_record_status not in (10200005,10200006)
--                         inner join trtran072 C2
--                         on Copt_Deal_Number=Cosu_Deal_Number
--                         and cosu_record_status not in (10200005,10200006)
--                         inner join trmaster323
--                         on OPTI_PICK_CODE=COPT_DEAL_TYPE
--                         and opti_record_status not in (10200005,10200006)
--                      WHERE corv_exercise_date BETWEEN dattemp AND dattemp1
--                      AND copt_record_status NOT IN (10200005,10200006)
--                      and corv_Record_Status NOT IN (10200005,10200006)
--                      And Cosu_Record_Status Not In (10200005,10200006)
--                      and (copt_company_code = DECODE(varTemp1,'ALL' ,copt_company_code) OR
--                            INSTR(varTemp1 ,copt_company_code) >0)
--                      AND (COPT_CURRENCY_PAIR= decode(vartemp3,'ALL',COPT_CURRENCY_PAIR)
--                            or instr(vartemp3,COPT_CURRENCY_PAIR)>0)
--                       AND   (NVL(COPT_BACKUP_DEAL,0) = DECODE(varTemp4,'ALL' ,NVL(COPT_BACKUP_DEAL,0)) OR
--                            INSTR(varTemp4 ,NVL(COPT_BACKUP_DEAL,0)) >0)
--                       AND   (NVL(COPT_INIT_CODE,0) = DECODE(varTemp5,'ALL' ,NVL(COPT_INIT_CODE,0)) OR
--                            INSTR(varTemp5 ,NVL(COPT_INIT_CODE,0)) >0)
--                       AND  (NVL(copt_Location_CODE,0) = DECODE(varTemp2,'ALL' ,NVL(copt_Location_CODE,0)) OR
--                            INSTR(varTemp2 ,NVL(copt_Location_CODE,0)) >0)
--                      GROUP BY TO_CHAR(corv_exercise_date,'YYYYMM'),
--                        copt_base_currency,COPT_other_currency,cosu_buy_sell,cosu_option_type) OPT
--                   on OPT.BaseCurrency=Settlement.BaseCurrency
--                  and OPT.OtherCurrency=Settlement.OtherCurrency
--                  and OPT.MonthOrder=Settlement.MonthOrder
--                  and OPT.InflowOutflow=Settlement.InflowOutflow);
--                  --where Settlement.SettlementBasemount>0;
--  Goto Process_End;
--  End if;  
--

if numinfotype = REFGETCURRENTFINANCIALYEAR then     
    varOperation:='Extracting Financial Year';    
    select PRMC_CALENDARYEAR_TYPE,PRMC_CONVERT_AMOUNTINTO
    into numCode,Numcode1
    from trsystem051;

    open gencursor for 
        select PKGFUNCTIONS.FINANCIAL_Year_StartDate(sysdate,numCode) "StartDate",
        PKGFUNCTIONS.FINANCIAL_Year_ENDDate(sysdate,numCode) "EndDate"
        from dual;    
    Goto Process_End;
End if; 

if numinfotype = REFFXSETTLEMENTNEW then 
    BEGIN
        varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp1 :='ALL';
    End;
    BEGIN
        varTemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',varTemp2,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp2 := 'ALL';
    End;
    BEGIN
        vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',varTemp3,GConst.TYPENODEPATH);
    Exception
    when others then
        vartemp3 := 'ALL';
    End;
    BEGIN
        varTemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',varTemp4,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp4 := 'ALL';
    End;
    BEGIN
        varTemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',varTemp5,GConst.TYPENODEPATH);
    Exception
    when others then
        varTemp5 := 'ALL';
    End;

    varOperation:='Extracting Financial Year';    
    select PRMC_CALENDARYEAR_TYPE,PRMC_CONVERT_AMOUNTINTO
    into numCode,Numcode1
    from trsystem051;

    select PKGFUNCTIONS.FINANCIAL_Year_StartDate(sysdate,numCode),
    PKGFUNCTIONS.FINANCIAL_Year_ENDDate(sysdate,numCode)
    into dattemp2,dattemp3
    from dual;

    BEGIN
       dattemp:= GConst.fncXMLExtract(xmlDoc,'//Param/FromDate',dattemp,GConst.TYPENODEPATH);
    Exception
    when others then
       dattemp := dattemp2;
    End;

    BEGIN
       dattemp1 := GConst.fncXMLExtract(xmlDoc,'//Param/ToDate',dattemp1,GConst.TYPENODEPATH);
    Exception
    when others then
       dattemp1 := dattemp3;
    End;

    BEGIN
       dattemp2 := GConst.fncXMLExtract(xmlDoc,'//Param/AsonDate',dattemp2,GConst.TYPENODEPATH);
    Exception
    when others then
       dattemp2 := sysdate;
    End;

    GLog.Log_write( 'Financial Year from ' || dattemp || ' To ' || dattemp1);
    GLog.Log_write( 'varTemp1 ' || varTemp1 || ' varTemp2 ' || varTemp2 || ' varTemp3 ' || varTemp3 || ' varTemp4 ' || varTemp4 ||
    ' varTemp5 ' || varTemp5);

    select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = Numcode1
    and pick_record_Status not in (10200005,10200006);

    open gencursor for 
        select MaturityMonth, MonthOrder,datDateAsOn,
            BaseCurrency,OtherCurrency, CurrencyPair,
            round(SettlementBasemount,2) SettlementBasemount, round(CashAmount,2) CashAmount,
            round(HedgeAmount,2) HedgeAmount, round(HedgeRate,6) HedgeRate,
            round(UnHedgeAmount,2) UnHedgeAmount,UnHedgeRate, round(FWDCancelamount,2) FWDCancelamount,
            round(FWDcancelHedgeRate,6) FWDcancelHedgeRate,
            round(FWDcancelRate,6) FWDCancelRate,
            round(EDCcharges,2) EDCcharges,
            round(FutureCancelAmount,2) FutureCancelAmount,round(OptionCancelAmount,2) OptionCancelAmount,
            round(SettlementBasemountLocal,2) SettlementBasemountLocal,round(EarlyDeliveryPnL,2) EarlyDeliveryPnL,
            round(FRDCancelPnL,2) FRDCancelPnL,round(RollOverFWDCancelPnL,2) RollOverFWDCancelPnL,
            round(FutCancelPnL,2) FutCancelPnL,round(OptRollOverPnL,2) OptRollOverPnL,
            round(OptCancelPnL,2) OptCancelPnL,round(FutRolloverPnL,2) FutRolloverPnL,
            round(TotalPnL,2) TotalPnL, round(CashRateonSettlement,2) CashRateonSettlement,
            round(SettlementRate,6) SettlementRate ,
            (case when SettlementBasemountLocal=0 then 0 else
            round(SettlementRate_withPnL,2) end) SettlementRate_withPnL,
            InflowOutflow, round(BudgetRate,6) BudgetRate,round(SpotRate,6) SpotRate,
            round((case when InflowOutflow='Inflow' then
            (SettlementRate-BudgetRate) * SettlementBasemount
            when InflowOutflow='Outflow' then
            (BudgetRate-SettlementRate) * SettlementBasemount end ),2) PLOverBudget,
            round((case when InflowOutflow='Inflow' then
            (SettlementRate-SpotRate) * SettlementBasemount
            when InflowOutflow='Outflow' then
            (SpotRate-SettlementRate) * SettlementBasemount end ),2) PLOverSpot,  
            round((case when InflowOutflow='Inflow' then
            (HedgeRate-BudgetRate) * HedgeAmount
            when InflowOutflow='Outflow' then
            (BudgetRate-HedgeRate) * HedgeAmount end ),2) PLOver_BudgetVsHedged,  
            round((case when InflowOutflow='Inflow' then
            (UnHedgeRate-BudgetRate) * UnHedgeAmount
            when InflowOutflow='Outflow' then
            (BudgetRate-UnHedgeRate) * UnHedgeAmount end ),2) PLOver_BudgetVsUnHedged
        from (select Settlement.MaturityMonth, Settlement.MonthOrder,dattemp1 datDateAsOn,
            pkgreturncursor.fncgetdescription(Settlement.BaseCurrency,2)BaseCurrency,
            pkgreturncursor.fncgetdescription(Settlement.OtherCurrency,2)OtherCurrency,
            pkgreturncursor.fncgetdescription(Settlement.BaseCurrency,2)||'/'||pkgreturncursor.fncgetdescription(Settlement.OtherCurrency,2) CurrencyPair,
            round(SettlementBasemount/numdetail,2)SettlementBasemount,
            round(CashAmount/numdetail,2) CashAmount,
            round(HedgeAmount/numdetail,2) HedgeAmount,
            round(CashAmount/numdetail,2)  UnHedgeAmount,
            round(UnHedgeRate,6) UnHedgeRate,
            round(nvl(FWDCancelamount,0)/numdetail,2)FWDCancelamount,
            round(FWDcancelHedgeRate,6) FWDcancelHedgeRate,
            round(FWDcancelRate,6) FWDCancelRate,
            round(EDCcharges,2) EDCcharges,
            round(nvl(FutureCancelAmount,0)/numdetail,2)FutureCancelAmount,
            round(nvl(OptionCancelAmount,0)/numdetail,2)OptionCancelAmount,
            round(SettlementBasemountLocal/numdetail,2)SettlementBasemountLocal,round(EarlyDeliveryPnL/numdetail,2)EarlyDeliveryPnL,
            round(FRDCancelPnL/numdetail,2)FRDCancelPnL,
            round(RollOverFWDCancelPnL/numdetail,2)RollOverFWDCancelPnL,round(Fut.CancelPnL/numdetail,2)FutCancelPnL,
            round(Opt.CancelPnL/numdetail,2)OptCancelPnL,round(Fut.RolloverPnL/numdetail,2)FutRolloverPnL,
            round(Opt.RollOverPnL/numdetail,2)OptRollOverPnL,
            round((nvl(EarlyDeliveryPnL,0)+nvl(FRDCancelPnL,0)+
            nvl(RollOverFWDCancelPnL,0)+nvl(Fut.CancelPnL,0)+nvl(Opt.CancelPnL,0) +
            nvl(Fut.RolloverPnL,0) + nvl(Opt.RollOverPnL,0)+nvl(EDCcharges,0))/numdetail,2) TotalPnL,
            round((SettlementBasemountLocal/numdetail)/
            (case when (SettlementBasemount/numdetail)=0 then 1 else (SettlementBasemount/numdetail) end),6)SettlementRate,
            round(((SettlementBasemountLocal+nvl(EarlyDeliveryPnL,0)+nvl(FRDCancelPnL,0)+
            nvl(RollOverFWDCancelPnL,0)+nvl(Fut.CancelPnL,0) +nvl(Opt.CancelPnL ,0)+nvl(Fut.RolloverPnL,0) +
            nvl(Opt.RollOverPnL,0)))/(case when SettlementBasemount=0 then 1 else SettlementBasemount end),6)SettlementRate_withPnL,        
            round((SettlementBasemount * SpotRate)/(case when SettlementBasemount=0 then 1 else (SettlementBasemount) end),6) CashRateonSettlement,
            decode(Settlement.InflowOutflow,'Outflow','Outflow',Settlement.InflowOutflow,'Inflow','Inflow',      
            FUT.InflowOutflow,'Outflow','Outflow',FUT.InflowOutflow,'Inflow','Inflow',
            OPT.InflowOutflow,'Outflow','Outflow',OPT.InflowOutflow,'Inflow','Inflow')InflowOutflow,
            Pkgforexprocess.Fncgetrate
            (Settlement.BaseCurrency,Settlement.OtherCurrency,dattemp,25399999,0,null,0,81500006) BudgetRate,
            SpotRate,HedgeRate
        from (select  to_char(cdel_cancel_DATE,'Mon-yy') MaturityMonth,
                to_char(cdel_cancel_DATE,'YYYYMM') MonthOrder,
                DEAL_BASE_CURRENCY BaseCurrency,deal_other_currency OtherCurrency,
                sum(Case When CDEL_Cancel_TYPE=27000002 then nvl(Cdel_Cancel_Amount,0) else 0 end  ) SettlementBasemount,
                sum(Case When DEAL_DEAL_TYPE=25400001 then nvl(Cdel_Cancel_Amount,0) else 0 end  ) CashAmount,
                sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000002
                then nvl(Cdel_Cancel_Amount,0) else 0 end  ) HedgeAmount,
                (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000002
                then nvl(Cdel_Cancel_Amount,0)*deal_exchange_rate else 0 end)/
                (case when (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000002
                then nvl(Cdel_Cancel_Amount,0) else 0 end  ))=0 then 1
                else (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000002
                then nvl(Cdel_Cancel_Amount,0) else 0 end))end)) HedgeRate,
                (sum(Case When DEAL_DEAL_TYPE =25400001 then nvl(Cdel_Cancel_Amount,0)*deal_exchange_rate else 0 end)/
                (case when (sum(Case When DEAL_DEAL_TYPE =25400001 then nvl(Cdel_Cancel_Amount,0) else 0 end  ))=0 then 1
                else (sum(Case When DEAL_DEAL_TYPE =25400001 then nvl(Cdel_Cancel_Amount,0) else 0 end))end)) UnHedgeRate,
                sum(Case When CDEL_Cancel_TYPE=27000001 then nvl(Cdel_Cancel_Amount,0) else 0 end  ) FWDCancelamount,
                 (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000001
                then nvl(Cdel_Cancel_Amount,0)*deal_exchange_rate else 0 end)/
                (case when (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000001
                then nvl(Cdel_Cancel_Amount,0) else 0 end  ))=0 then 1
                else (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000001
                then nvl(Cdel_Cancel_Amount,0) else 0 end))end)) FWDcancelHedgeRate,

                 (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000001
                then nvl(Cdel_Cancel_Amount,0)*cdel_Cancel_rate else 0 end)/
                (case when (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000001
                then nvl(Cdel_Cancel_Amount,0) else 0 end  ))=0 then 1
                else (sum(Case When DEAL_DEAL_TYPE !=25400001 and CDEL_Cancel_TYPE=27000001
                then nvl(Cdel_Cancel_Amount,0) else 0 end))end)) FWDcancelRate,
                sum(Case When CDEL_Cancel_TYPE=27000001 then nvl(CDEL_EDC_CHARGE,0) else 0 end  ) EDCcharges,

                sum((Case When CDEL_Cancel_TYPE=27000002 then nvl(Cdel_Cancel_Amount,0) else 0 end  )*cdel_cancel_RATE) SettlementBasemountLocal,
                --                   sum((Case When CDEL_DEAL_TYPEC=27000002 then Cdel_Cancel_Amount else 0 end  )*cdel_cancel_RATE/
                --                       sum(Case When CDEL_DEAL_TYPEC=27000002 then Cdel_Cancel_Amount else 0 end  )) SettlWeightedRate,
                sum(Case When CDEL_Cancel_TYPE=27000002 then nvl(Cdel_Profit_loss,0) else 0 end  ) EarlyDeliveryPnL,
                sum(Case When CDEL_Cancel_TYPE=27000001 then  nvl(Cdel_Profit_loss,0) else 0 end  ) FRDCancelPnL,
                0 RollOverFWDCancelPnL, avg (Pkgforexprocess.Fncgetrate
                (DEAL_BASE_CURRENCY,Deal_other_currency,cdel_cancel_date,deal_buy_sell,0,null,0,81599999)) SpotRate,
                decode(deal_buy_sell,25300001,'Outflow','Inflow') InflowOutflow,
                deal_buy_sell Buysell
            from  trtran006  inner join trtran001 b1
            on cdel_deal_number= deal_deal_number
            where cdel_cancel_date BETWEEN dattemp AND dattemp1                
            --and deal_buy_sell=25300002
            and cdel_record_status not in (10200005,10200006)
            and deal_record_status not in (10200005,10200006)
            and (deal_company_code = DECODE(varTemp1,'ALL' ,deal_company_code) OR
            INSTR(varTemp1 ,deal_company_code) >0)
            AND (DEAL_CURRENCY_PAIR= decode(vartemp3,'ALL',DEAL_CURRENCY_PAIR)
            or instr(vartemp3,DEAL_CURRENCY_PAIR)>0)
            AND   (NVL(deal_backup_deal,0) = DECODE(varTemp4,'ALL' ,NVL(deal_backup_deal,0)) OR
            INSTR(varTemp4 ,NVL(deal_backup_deal,0)) >0)
            AND   (NVL(DEAL_INIT_CODE,0) = DECODE(varTemp5,'ALL' ,NVL(DEAL_INIT_CODE,0)) OR
            INSTR(varTemp5 ,NVL(deal_init_code,0)) >0)
            AND  (NVL(Deal_Location_CODE,0) = DECODE(varTemp2,'ALL' ,NVL(deal_Location_CODE,0)) OR
            INSTR(varTemp2 ,NVL(deal_Location_CODE,0)) >0)
            group by  DEAL_BASE_CURRENCY,deal_other_currency,
            to_char(cdel_cancel_DATE,'Mon-yy'),
            to_char(cdel_cancel_DATE,'YYYYMM'),deal_buy_sell)Settlement
            left outer join
                (SELECT TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM') MonthOrder,
                    SUM(nvl(Cfrv_Profit_Loss,0)) CancelPnL,
                    SUM(nvl(CFRV_CANCEL_AMOUNT,0)) AS FutureCancelAmount,
                    0 RollOverPnL,
                    cfut_base_currency BaseCurrency,
                    cfut_other_currency OtherCurrency,
                    decode(CFUT_BUY_SELL,25300001,'Outflow','Inflow')InflowOutflow
                FROM Trtran063 a2,Trtran061 b2
                WHERE Cfrv_Deal_Number= cfut_deal_number
                AND CFRV_EXECUTE_DATE BETWEEN dattemp AND dattemp1
                --and CFUT_BUY_SELL=25300002
                AND cfrv_record_status NOT IN (10200005,10200006)
                and Cfut_Record_Status NOT IN (10200005,10200006)
                and (cfut_company_code = DECODE(varTemp1,'ALL' ,cfut_company_code) OR
                INSTR(varTemp1 ,cfut_company_code) >0)
                and ((vartemp3 = 'ALL') or
                exists (select 'x' from trmaster256
                        where CNDI_BASE_CURRENCY=Cfut_Base_Currency
                        and CNDI_OTHER_CURRENCY= Cfut_Other_Currency
                        and instr(vartemp3,CNDI_PICK_CODE )>0
                        and CNDI_RECORD_STATUS not in (10200005,10200006)))
                AND   (NVL(CFUT_BACKUP_DEAL,0) = DECODE(varTemp4,'ALL' ,NVL(CFUT_BACKUP_DEAL,0)) OR
                INSTR(varTemp4 ,NVL(CFUT_BACKUP_DEAL,0)) >0)
                AND   (NVL(CFUT_INIT_CODE,0) = DECODE(varTemp5,'ALL' ,NVL(CFUT_INIT_CODE,0)) OR
                INSTR(varTemp5 ,NVL(CFUT_INIT_CODE,0)) >0)
                AND  (NVL(cfut_Location_CODE,0) = DECODE(varTemp2,'ALL' ,NVL(cfut_Location_CODE,0)) OR
                INSTR(varTemp2 ,NVL(cfut_Location_CODE,0)) >0)
                GROUP BY TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM'),
                cfut_base_currency,cfut_other_currency,CFUT_BUY_SELL)FUT
                on FUT.BaseCurrency=Settlement.BaseCurrency
                and FUT.OtherCurrency=Settlement.OtherCurrency
                and FUT.MonthOrder=Settlement.MonthOrder
                and FUT.InflowOutflow=Settlement.InflowOutflow
            Left outer join  
                (SELECT TO_CHAR(corv_exercise_date,'YYYYMM') MonthOrder,
                    SUM(nvl(corv_pandl_usd,0)) CancelPnL,
                    0 RollOverPnL,
                    SUM((case when OPTI_NOTIONAL_AMOUNT_LEGWISE=12400001  then CORV_BASE_AMOUNT
                    when (OPTI_NOTIONAL_AMOUNT_LEGWISE=12400002 and CORV_SERIAL_NUMBER=1) then CORV_BASE_AMOUNT
                    end)) AS OptionCancelAmount,
                    copt_base_currency BaseCurrency,
                    COPT_other_currency OtherCurrency,
                    ( case
                    -- when cosu_buy_sell = 25300001 and cosu_option_type = 32400002 then 'Outflow'
                    when cosu_buy_sell = 25300001 and cosu_option_type = 32400001 then 'Outflow'
                    --when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 'Outflow'
                    when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 'Inflow'
                    End ) InflowOutflow
                FROM Trtran073 a2 inner join Trtran071 b2
                on copt_deal_number = corv_deal_number
                and copt_record_status not in (10200005,10200006)
                inner join trtran072 C2
                on Copt_Deal_Number=Cosu_Deal_Number
                and cosu_record_status not in (10200005,10200006)
                inner join trmaster323
                on OPTI_PICK_CODE=COPT_DEAL_TYPE
                and opti_record_status not in (10200005,10200006)
                WHERE corv_exercise_date BETWEEN dattemp AND dattemp1
                AND copt_record_status NOT IN (10200005,10200006)
                and corv_Record_Status NOT IN (10200005,10200006)
                And Cosu_Record_Status Not In (10200005,10200006)
                and (copt_company_code = DECODE(varTemp1,'ALL' ,copt_company_code) OR
                INSTR(varTemp1 ,copt_company_code) >0)
                AND (COPT_CURRENCY_PAIR= decode(vartemp3,'ALL',COPT_CURRENCY_PAIR)
                or instr(vartemp3,COPT_CURRENCY_PAIR)>0)
                AND   (NVL(COPT_BACKUP_DEAL,0) = DECODE(varTemp4,'ALL' ,NVL(COPT_BACKUP_DEAL,0)) OR
                INSTR(varTemp4 ,NVL(COPT_BACKUP_DEAL,0)) >0)
                AND   (NVL(COPT_INIT_CODE,0) = DECODE(varTemp5,'ALL' ,NVL(COPT_INIT_CODE,0)) OR
                INSTR(varTemp5 ,NVL(COPT_INIT_CODE,0)) >0)
                AND  (NVL(copt_Location_CODE,0) = DECODE(varTemp2,'ALL' ,NVL(copt_Location_CODE,0)) OR
                INSTR(varTemp2 ,NVL(copt_Location_CODE,0)) >0)
                GROUP BY TO_CHAR(corv_exercise_date,'YYYYMM'),
                copt_base_currency,COPT_other_currency,cosu_buy_sell,cosu_option_type) OPT
                on OPT.BaseCurrency=Settlement.BaseCurrency
                and OPT.OtherCurrency=Settlement.OtherCurrency
                and OPT.MonthOrder=Settlement.MonthOrder
                and OPT.InflowOutflow=Settlement.InflowOutflow
                where Settlement.BaseCurrency !=Settlement.OtherCurrency)
                -- As Requested By Client To Show the Complete Data 
                --and ((Settlement.SettlementBasemount!=0) or (Settlement.CashAmount !=0)))
        order by CurrencyPair, to_number(Monthorder);
        --where Settlement.SettlementBasemount>0;
    Goto Process_End;
End if;  

  if numinfoType =REFHOLIDAYCHECK then

    varOperation := 'Extracting Maturity Dates For the Execution Date';
    begin
        NumCode1 := gconst.fncxmlextract(xmldoc,'CompanyCode', NumCode1);

        if NumCode1 = 0 then 
            NumCode1 := 30199999;
        end if;
    exception 
    when others then
        NumCode1 := 30199999;
    end;

    begin
        NumCode2 := gconst.fncxmlextract(xmldoc,'LocationCode', NumCode2);

        if NumCode2 = 0 then 
            NumCode2 := 30299999;
        end if;
    exception 
    when others then
        NumCode2 := 30299999;
    end;

    begin
        NumCode3 := gconst.fncxmlextract(xmldoc,'CounterPartyCode', NumCode3);

        if NumCode3 = 0 then 
            NumCode3 := 30699999;
        end if;
    exception 
    when others then
        NumCode3 := 30699999;
    end;

    begin
        BaseCurrency := gconst.fncxmlextract(xmldoc,'BaseCurrency', BaseCurrency);

        if BaseCurrency = 0 then 
            BaseCurrency := 30499999;
        end if;
    exception 
    when others then
         BaseCurrency := 30499999;
    end;

    begin
        OtherCurrency := gconst.fncxmlextract(xmldoc,'OtherCurrency', OtherCurrency);

        if OtherCurrency = 0 then 
            OtherCurrency := 30499999;
        end if;
    exception 
    when others then
        OtherCurrency := 30499999;
    end;

    datTemp := gconst.fncxmlextract(xmldoc,'Date', datTemp);

    --The Logic is incase we are checking the Holiday for three Locations incase if we get row count as 3 then 
    -- it is not holiday in any of the location else it is holiday in any of the location 

--      select Count(*) ,max(hday_Calendar_date)
--        into numCode2,DatTemp
--        from trsystem001
--       where hday_record_status not in (10200005,10200006)
--       and hday_Calendar_date = datTemp
--       and hday_location_code in ( select Cncy_Location_code from trmaster304 
--                                   where cncy_Record_Status not in (10200005,10200006)
--                                   and CNCY_Pick_code = BaseCurrency
--                                   union 
--                                   select Cncy_Location_code from trmaster304 
--                                   where cncy_Record_Status not in (10200005,10200006)
--                                   and CNCY_Pick_code = OtherCurrency
--                                   union
--                                   select LBNK_BANK_LOCATION from trmaster306 
--                                   where lbnk_Record_Status not in (10200005,10200006)
--                                   and LBNK_Pick_code = NumCode)
--        and HDAY_DAY_STATUS not in (26400007,26400008,26400009);

--    if numCode2 =3 then 
--     open gencursor for 
--      select 'False' Holiday ,DatTemp as WorkingDay from dual;
--    else 
--      open gencursor for 
--        select 'True' Holiday,DatTemp as WorkingDay  from dual;
--    end if ;
      pkgfunctions.prcHolidayCheck(NumCode1, NumCode2, BaseCurrency, OtherCurrency, NumCode3, datTemp, dattemp1, vartemp);

        if (vartemp is null) then
            open gencursor for 
                 select 'False' "Holiday", vartemp "Message", to_char(sysdate, 'dd-Mon-yyyy') as "WorkingDay" 
                 from dual;
            Goto Process_End;
        else
            open gencursor for 
                 select 'True' "Holiday", vartemp "Message", to_char(dattemp1, 'dd-Mon-yyyy') as "WorkingDay" 
                 from dual;
            Goto Process_End;
        end if;
  end if;


  --added by supriya on 12/05/2021
  IF NUMINFOTYPE=REFVALIDATEHOLIDAY THEN
    begin
        numcode := gconst.fncxmlextract(xmldoc,'LocationCode', numcode);

        if numcode = 0 then 
            numcode := 30299999;
        end if;
    exception 
    when others then
        numcode := 30299999;
    end;

    datTemp := gconst.fncxmlextract(xmldoc,'CalendarDate', datTemp);

    OPEN GENCURSOR FOR 
        SELECT * from trsystem001
        where HDAY_LOCATION_CODE = numcode and HDAY_CALENDAR_DATE = dattemp;
    goto process_end;  
  END IF; 

   if numinfotype=REFVALUATIONRESULT then
     DATTEMP:= GCONST.FNCXMLEXTRACT(XMLDOC, 'EffectiveDate', DATTEMP); 
  --   PKGOPTIONVALUVATION.PRCOPTIONVALUVATION(DATTEMP);
     PKGOPTIONVALUVATION.prcOption_Calculator_Schedule(DATTEMP);

    VAROPERATION := 'Extraction Position GAP View';    
    OPEN GENCURSOR FOR
    SELECT OPVA_DEAL_NUMBER "SystemReference",  OPVA_SERIAL_NUMBER "SerialNumber",
            OPV_SUB_SERIAL "SubSerial",  pkgreturncursor.fncgetdescription( OPVA_BUY_SELL,2) "BuySell",
            OPVA_EXECUTE_DATE "ExecuteDate", pkgreturncursor.fncgetdescription(OPVA_OPTION_TYPE,2) "OptionType",
            pkgreturncursor.fncgetdescription(OPVA_BASE_CURRENCY,2) "BaseCurrency",
            pkgreturncursor.fncgetdescription(OPVA_OTHER_CURRENCY,2) "QuoteCurrency",
            OPVA_EXPIRY_DATE "ExpiryDate",  OPVA_DELIVERY_DATE "DeliveryDate", 
            OPVA_BASE_AMOUNT "BaseAmount", OPVA_OTHER_AMOUNT "OtherAmount",
            OPVA_STRIKE_PRICE "StrikePrice",  OPVA_SPOT_RATE "SpotRate",
            OPVA_FORWARD_RATE "ForwardRate", OPVA_BASE_INTEREST "BaseInterest",
            OPVA_OTHER_INTEREST "QuoteInterest", 
            OPVA_10P_VOLS "TenPVols",  OPVA_25P_VOLS "TwentyFivePVols", OPVA_ATM_VOL "ATMVols",
            OPVA_25C_VOLS "TwentyFiveCVols",  OPVA_10C_VOLS "TenCVols",
            OPVA_10P_90C_STRIKE "TenPNintyCStrike", OPVA_25P_75D_STRIKE "TwentyFivePSeventyFiveCStrike",
            OPVA_50P_50C_STRIKE "FiftyPFiftyPStrike", OPVA_75P_25D_STRIKE "SeventyFivePTwentyFiveCStrike",
            OPVA_90P_10D_STRIKE "NinetyPTenPStrike", OPVA_IMPLIED_VOL "ImpliedVol",
            OPVA_CAL_PREMIUM "CalPremium", OPVA_BASE_PREMIUMAMOUNT "BasePremiumAmount",
            OPVA_OTHER_PREMIUMAMOUNT " OtherPremiumAmount", OPVA_BASE_DELTA "BaseDelta",
            OPVA_BASE_VEGA "BaseVega", OPVA_BASE_GAMMA "BaseGamma",
            OPVA_OTHER_DELTA "QuoteDelta", OPVA_OTHER_VEGA "QuoteVega",
            OPVA_OTHER_GAMMA "QuoteGamma"
    FROM TRSYSTEM997G_OPTION ;

 goto process_end;  
 END IF;  

  IF NUMINFOTYPE=REFMarketFxRates THEN
    DATTEMP:= GCONST.FNCXMLEXTRACT(XMLDOC, 'EffectiveDate', DATTEMP); 

        OPEN GENCURSOR FOR 
            SELECT PKGRETURNCURSOR.FNCGETDESCRIPTION(DRAT_CURRENCY_CODE,2) AS "BaseCurrency",
            PKGRETURNCURSOR.FNCGETDESCRIPTION(DRAT_FOR_CURRENCY,2) AS "OtherCurrency",
            DRAT_SPOT_ASK "SpotAsk",DRAT_SPOT_BID "SpotBid",
            DRAT_CASH_ASK "CashAsk",DRAT_CASH_BID "CashBid",
            DRAT_TOM_ASK "TomAsk",DRAT_TOM_BID "TomBid",
            DRAT_MONTH1_ASK "Month1Ask",DRAT_MONTH1_BID "Month1Bid",
            DRAT_MONTH2_ASK "Month2Ask",DRAT_MONTH2_BID "Month2Bid",
            DRAT_MONTH3_ASK "Month3Ask",DRAT_MONTH3_BID "Month3Bid",
            DRAT_MONTH4_ASK "Month4Ask",DRAT_MONTH4_BID "Month4Bid",
            DRAT_MONTH5_ASK "Month5Ask",DRAT_MONTH5_BID "Month5Bid",
            DRAT_MONTH6_ASK "Month6Ask",DRAT_MONTH6_BID "Month6Bid",
            DRAT_MONTH7_ASK "Month7Ask",DRAT_MONTH7_BID "Month7Bid",
            DRAT_MONTH8_ASK "Month8Ask",DRAT_MONTH8_BID "Month8Bid",
            DRAT_MONTH9_ASK "Month9Ask",DRAT_MONTH9_BID "Month9Bid",
            DRAT_MONTH10_ASK "Month10Ask",DRAT_MONTH10_BID "Month10Bid",
            DRAT_MONTH11_ASK "Month11Ask",DRAT_MONTH11_BID "Month11Bid",
            DRAT_MONTH12_ASK "Month12Ask",DRAT_MONTH12_BID "Month12Bid"
            FROM TRTRAN012 WHERE  DRAT_EFFECTIVE_DATE=DATTEMP 
            AND DRAT_SERIAL_NUMBER =(SELECT MAX(DRAT_SERIAL_NUMBER) FROM 
            TRTRAN012 WHERE DRAT_EFFECTIVE_DATE=DATTEMP);              

   goto process_end;  
 END IF; 


  IF NUMINFOTYPE=REFMarketInterest THEN
    DATTEMP:= GCONST.FNCXMLEXTRACT(XMLDOC, 'EffectiveDate', DATTEMP); 

        OPEN GENCURSOR FOR      
              SELECT 
              PKGRETURNCURSOR.FNCGETDESCRIPTION(IRAT_INTEREST_TYPE,1) as "InterestType",
              PKGRETURNCURSOR.FNCGETDESCRIPTION(IRAT_CURRENCY_CODE,2) AS "BaseCurrency",
              IRAT_SETTLEMENT_DATE "SettlementDate",
              IRAT_SETTLEMENT_PRICE "SettlementPrice"
              FROM clouddb_master.TRTRAN094 WHERE IRAT_EFFECTIVE_DATE=DATTEMP
              AND  IRAT_SERIAL_NUMBER=(SELECT MAX(IRAT_SERIAL_NUMBER) FROM 
              TRTRAN094 WHERE IRAT_EFFECTIVE_DATE=DATTEMP);

   goto process_end;  
 END IF; 


  IF NUMINFOTYPE=REFMarketVols THEN
    DATTEMP:= GCONST.FNCXMLEXTRACT(XMLDOC, 'EffectiveDate', DATTEMP); 

        OPEN GENCURSOR FOR
              SELECT 
              PKGRETURNCURSOR.FNCGETDESCRIPTION(VOLS_BASE_CURRENCY,2) AS "BaseCurrency",
              PKGRETURNCURSOR.FNCGETDESCRIPTION(VOLS_OTHER_CURRENCY,2) AS "OtherCurrency",
              PKGRETURNCURSOR.FNCGETDESCRIPTION(VOLS_SURFACE_TYPE,2) AS "SurfaceType",
              VOLS_RATE_VALID "ValidDate",
              VOLS_SURFACE_LEVEL "SurfaceLevel",
              VOLS_VOLS_BUYRATE "Bid",
              VOLS_VOLS_SELLRATE "Ask"
              FROM Clouddb_master.TRTRAN012D WHERE VOLS_EFFECTIVE_DATE=DATTEMP
              AND VOLS_SERIAL_NUMBER = (SELECT MAX(VOLS_SERIAL_NUMBER) 
              FROM Clouddb_master.TRTRAN012D WHERE VOLS_EFFECTIVE_DATE=DATTEMP);

   goto process_end;  
 END IF; 


  IF NUMINFOTYPE=REFMarketSmileCurved THEN
    DATTEMP:= GCONST.FNCXMLEXTRACT(XMLDOC, 'EffectiveDate', DATTEMP); 

        OPEN GENCURSOR FOR                 
              select P10.EffectiveDate "EffectiveDate", p10.ValidUpto "ValidUpto",
              PKGRETURNCURSOR.FNCGETDESCRIPTION(P10.BaseCurrency,2) "BaseCurrency",
              PKGRETURNCURSOR.FNCGETDESCRIPTION(P10.QuoteCurrency,2) "QuoteCurrency",
               P10.OptionType "OptionType", P10.P10_BIDVols "PTenBIDVols", P10.P10_AskVols "PTenAskVols",
                  p25.BIDVols "PTwentyFiveBIDVols" ,p25.AskVols "PTwentyFiveAskVols",
                  C10.BIDVols "ATMBIDVols", C10.AskVols "ATMAskVols",
                  C10.BIDVols "CTenBIDVols", C10.AskVols "CTenAskVols",
                  C25.BIDVols "CTwentyFiveBIDVols", C25.AskVols "CTwentyFiveAskVols"
              from 
              (select SMIL_EFFECTIVE_DATE EffectiveDate, SMIL_Valid_upto ValidUpto,
                     Smil_Base_Currency BaseCurrency, SMIL_Other_curreny QuoteCurrency,
                     Smil_Option_Type OptionType, SMIL_SUr_BUyValue P10_BIDVols, SMIL_SUR_SellValue P10_AskVols
              from trsystem997J_Smile 
              where smil_effective_date =DATTEMP
              and smil_Surface_level=10
              and smil_option_type=32400001) P10
              inner join 
              (select  SMIL_EFFECTIVE_DATE EffectiveDate, SMIL_Valid_upto ValidUpto,
                     Smil_Base_Currency BaseCurrency, SMIL_Other_curreny QuoteCurrency,
                     SMIL_SUr_BUyValue BIDVols, SMIL_SUR_SellValue AskVols
              from trsystem997J_Smile 
              where smil_effective_date =DATTEMP
              and smil_Surface_level=25
              and smil_option_type=32400001) P25
              on p10.EffectiveDate=p25.EffectiveDate
              and p10.ValidUpto= p25.ValidUpto
              and p10.BaseCurrency= p25.BaseCurrency
              and p10.QuoteCurrency=p25.QuoteCurrency
              inner join 
              (select  SMIL_EFFECTIVE_DATE EffectiveDate, SMIL_Valid_upto ValidUpto,
                     Smil_Base_Currency BaseCurrency, SMIL_Other_curreny QuoteCurrency,
                     SMIL_SUr_BUyValue BIDVols, SMIL_SUR_SellValue AskVols
              from trsystem997J_Smile 
              where smil_effective_date =DATTEMP
              and smil_Surface_level=25
              and smil_option_type=32400001) C10
              on C10.EffectiveDate=p25.EffectiveDate
              and C10.ValidUpto= p25.ValidUpto
              and C10.BaseCurrency= p25.BaseCurrency
              and C10.QuoteCurrency=p25.QuoteCurrency
              inner join 
              (select  SMIL_EFFECTIVE_DATE EffectiveDate, SMIL_Valid_upto ValidUpto,
                     Smil_Base_Currency BaseCurrency, SMIL_Other_curreny QuoteCurrency,
                     SMIL_SUr_BUyValue BIDVols, SMIL_SUR_SellValue AskVols
              from trsystem997J_Smile 
              where smil_effective_date =DATTEMP
              and smil_Surface_level=25
              and smil_option_type=32400001) C25
              on C10.EffectiveDate=C25.EffectiveDate
              and C10.ValidUpto= C25.ValidUpto
              and C10.BaseCurrency= C25.BaseCurrency
              and C10.QuoteCurrency=C25.QuoteCurrency
              inner join 
              (select  VOLS_EFFECTIVE_DATE EffectiveDate, VOLS_RATE_VALID ValidUpto,
                     VOLS_BASE_CURRENCY BaseCurrency, VOLS_OTHER_CURRENCY QuoteCurrency,
                     VOLS_VOLS_BUYRATE BIDVols, VOLS_VOLS_SELLRATE AskVols
              from Clouddb_master.trtran012D 
              where VOLS_EFFECTIVE_DATE =DATTEMP
              and VOLS_SURFACE_LEVEL=0
              and VOLS_SURFACE_TYPE=38000001) ATM
              on C25.EffectiveDate=ATM.EffectiveDate
              and C25.ValidUpto= ATM.ValidUpto
              AND C25.BASECURRENCY= ATM.BASECURRENCY
              AND C25.QUOTECURRENCY=ATM.QUOTECURRENCY;

   goto process_end;  
 END IF; 

  IF NUMINFOTYPE=REFOptionCalculator THEN
     DATTEMP:= GCONST.FNCXMLEXTRACT(XMLDOC, 'EffectiveDate', DATTEMP); 

     delete from TRSYSTEM997G_Option;

  insert into TRSYSTEM997G_Option(OPVA_DEAL_NUMBER ,OPVA_SERIAL_NUMBER,OPV_SUB_SERIAL,
          OPVA_BUY_SELL , OPVA_OPTION_TYPE, OPVA_BASE_CURRENCY,OPVA_OTHER_CURRENCY,
          OPVA_EXPIRY_DATE , OPVA_DELIVERY_date, OPVA_BASE_AMOUNT, 
          OPVA_STRIKE_Price,opva_Execute_date,OPVA_SPOT_RATE,opva_Forward_rate,
          OPVA_Base_Interest,OPVA_Other_Interest,OPVA_IMPLIED_VOL)
     values( 1 ,1,1,
         GCONST.FNCXMLEXTRACT(XMLDOC, 'BuySell', numcode),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'CallPut', numcode),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'BaseCurrency', numcode),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'OtherCurrency', numcode),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'ExpiryDate', dattemp),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'ExpiryDate', dattemp),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'NotionalAmount', numCode),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'StrikePrice', numCode),
         DATTEMP,
         GCONST.FNCXMLEXTRACT(XMLDOC, 'SpotRate', numCode),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'SpotRate', numCode),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'BaseInterest', numCode),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'QuoteInterest', numCode),
         GCONST.FNCXMLEXTRACT(XMLDOC, 'Volatility', numCode)); 
         commit;

      PKGOPTIONVALUVATION.prcOption_Calculator(datTemp);

      open gencursor for
      select OPVA_CAL_PREMIUM "Premium",OPVA_BASE_PremiumAMount "BasePremium",
              OPVA_Other_PremiumAMount "QuotePremium",OPVA_BASE_DELTA "BaseDelta",
              OPVA_OTHER_DELTA "QuoteDelta",OPVA_Base_VEGA "BaseVega",OPVA_OTHER_VEGA "QuoteVega",
              OPVA_Base_gamma "BaseGamma",OPVA_Other_gamma "OtherGamma",TRSYSTEM997G_Option.*
         from TRSYSTEM997G_Option;

      goto process_end;
 end if;  
 IF NUMINFOTYPE=REFEMAILCONFIG THEN
   open gencursor for
     select PRMC_MAIL_USERID FromUserID,PRMC_PASSWORD_KEY PassKey, 
           PRMC_PASSWORD_CODE Passcode, PRMC_SMTP_SERVER SMTPServer,
           PRMC_SMTP_PORT SMTpPort,PRMC_MAIL_USER MailUser
           from trsystem051;
   goto process_end;
 end if; 
 if NUMINFOTYPE=REFPASSWORDSTATUS then 
   open gencursor for
      select PSWD_PASSWORD_STATUS PasswordStatus,PSWD_SERIAL_NUMBER SerialNumber
       from trsystem023
        where Upper(PSWD_USER_ID)=Upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'UserID', varTemp))
        and PSWD_RECORD_STATUS not in (10200005,10200006)
        and PSWD_SERIAL_NUMBER= (select max(PSWD_SERIAL_NUMBER) from trsystem023
                                 where upper(PSWD_USER_ID)=upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'UserID', varTemp))
                                   and PSWD_RECORD_STATUS not in (10200005,10200006));

   goto process_end;
  end if; 

  if NUMINFOTYPE = REFSCREENSAUDIT then 
       open gencursor for
       select distinct (Menu_Program_Unit) as "ID", Menu_Description AS "Name" 
       from MenuFile
       where Menu_Program_Unit IS NOT NULL AND MENU_RECORD_STATUS NOT IN(10200005,10200006)
       --Company code is not required to be check
--        AND MENU_COMPANY_CODE  in( select usco_company_code from trsystem022a
--                                           where upper(usco_user_id) = varUserid
--                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
       and exists (select 'x' from trsystem015 
          where AUDT_TABLE_ID=MENU_PROGRAM_UNIT 
           and AUDT_RECORD_STATUS not in (10200005,10200006))

        --Added by lakshmi, for showing menus based on modules added for license.   
        and exists 
          (select 'x' from  clouddb_master.Trlicense002a 
             inner join clouddb_master.trlicense001a
             on LMDD_MODULE_REFERENCE= Lmdu_Modreference_Number            
          where nvl(Menu_Program_Unit,'NA') = Lmdd_Program_Unit 
          and lmdd_record_Status not in (10200005,10200006)
          and lmdu_record_status not in (10200005,10200006)
          and Lmdu_Comreference_Number= (SELECT PRMC_LICENSE_REFERENCE FROM TRSYSTEM051))
          order by Menu_Description;
   goto process_end;
  end if;

 if NUMINFOTYPE=REFGETREPORTCOLUMNS then 
  varTemp := gconst.fncxmlextract(xmldoc, 'Param/EntityName', varTemp);
  GLOG.LOG_Trace_Request('O',ProcessData,'REFGETREPORTCOLUMNS ' || varTemp  );

   open gencursor for
      select REPO_PROGRAM_UNIT "CursorName", REPO_COLUMN_NAME "ColumnName", REPO_SERIAL_NUMBER "SerialNumber",
             FORMAT_FORMAT_STRING "FormatString", pkgreturncursor.fncgetdescription(FORMAT_DATA_TYPE,2) "ColumnType",
             REPO_DISPLAY_NAME "DisplayName", 
             to_char((case when (SELECT count(*) FROM TRSYSTEM999U
                                      where UFLD_TABLE_SYNONYM = REPO_PROGRAM_UNIT 
                                      and UFLD_COLUMN_NAME = REPO_COLUMN_NAME
                                      and upper(UFLD_USER_ID) = varUserid
                                      and UFLD_RECORD_STATUS not in (10200005,10200006)) = 0 
                             then pkgreturncursor.fncgetdescription(nvl(REPO_DISPLAY_YN,12400002),1) 
                             else (SELECT pkgreturncursor.fncgetdescription(nvl(UFLD_DISPLAY_YN,12400002),1)
                                   FROM TRSYSTEM999U where UFLD_TABLE_SYNONYM =REPO_PROGRAM_UNIT 
                                      and UFLD_COLUMN_NAME = REPO_COLUMN_NAME
                                      and upper(UFLD_USER_ID) = varUserid
                                      and UFLD_RECORD_STATUS not in (10200005,10200006)) end)) "DisplayYN",                                      
              to_char(case when (SELECT count(*) FROM TRSYSTEM999U
                              where UFLD_TABLE_SYNONYM = REPO_PROGRAM_UNIT 
                              and UFLD_COLUMN_NAME = REPO_COLUMN_NAME
                              and upper(UFLD_USER_ID) = varUserid
                              and UFLD_RECORD_STATUS not in (10200005,10200006)) = 0 
                     then REPO_DISPLAY_ORDER
                     else (SELECT UFLD_DISPLAY_ORDER FROM TRSYSTEM999U
                              where UFLD_TABLE_SYNONYM = REPO_PROGRAM_UNIT 
                              and UFLD_COLUMN_NAME = REPO_COLUMN_NAME
                              and upper(UFLD_USER_ID) = varUserid
                              and UFLD_RECORD_STATUS not in (10200005,10200006)) end) "DisplayOrder",
                REPO_COLUMN_WIDTH "Width", REPO_DECIMAL_SCALE "DecimalScale", 
                pkgreturncursor.fncgetdescription(nvl(REPO_EDITABLE_YN,12400002),1) "EditableYN",
                RPLK_PARAMETER_LINKNAME "ParameterLinkName", RPPP_URL_LINK "URLLink",
                    RPPP_PROGRAM_UNIT "ProgramUnit", 
                    (select listagg(RPLP_PARAMETER_NAME, ',') within group (order by RPLP_PARAMETER_NAME)
                      from TRSYSTEM999HP
                      where RPLP_PARAMETER_LINKNAME = RPLK_PARAMETER_LINKNAME
                      and RPLP_RECORD_STATUS not in (10200005,10200006)) "ParameterName",
                     (select listagg(RPLP_PARAMETER_FIELD, ',') within group (order by RPLP_PARAMETER_FIELD)
                      from TRSYSTEM999HP
                      where RPLP_PARAMETER_LINKNAME = RPLK_PARAMETER_LINKNAME
                      and RPLP_RECORD_STATUS not in (10200005,10200006)) "ParameterField",
                      (select PUNT_WEBCONTROL_NAME from CLOUDDB_MASTER.TRSYSTEM005
                      where PUNT_PROGRAM_UNIT = RPPP_PROGRAM_UNIT and PUNT_RECORD_STATUS not in (10200005,10200006)) "ControllerName",
                      'ActionExecute' "ActionMethod",
                      (select nvl(RPPP_ACTION_METHOD,'View') from TRSYSTEM999HPP
                      where RPPP_PARAMETER_LINKNAME = RPLK_PARAMETER_LINKNAME
                      and RPPP_RECORD_STATUS not in (10200005,10200006)) "ActionType"
      from TRSYSTEM999H left outer join TRGLOBALMAS914
          on FORMAT_DATA_TYPE = REPO_COLUMN_TYPE
           and format_pick_code =Glog.LanguageCode
          and FORMAT_RECORD_STATUS not in (10200005,10200006)
      left outer join TRSYSTEM999HL
        on REPO_PROGRAM_UNIT = RPLK_PROGRAM_UNIT AND 
        RPLK_COLUMN_NAME = REPO_COLUMN_NAME 
        AND RPLK_RECORD_STATUS not in (10200005,10200006)
        left outer join trsystem999HPP
        on RPPP_PARAMETER_LINKNAME = RPLK_PARAMETER_LINKNAME
        and RPPP_RECORD_STATUS not in (10200005,10200006)
      where REPO_PROGRAM_UNIT = varTemp
      and REPO_RECORD_STATUS not in (10200005,10200006)
      order by case when (SELECT count(*) FROM TRSYSTEM999U
                              where UFLD_TABLE_SYNONYM = REPO_PROGRAM_UNIT 
                              and UFLD_COLUMN_NAME = REPO_COLUMN_NAME
                              and upper(UFLD_USER_ID) = varUserid
                              and UFLD_RECORD_STATUS not in (10200005,10200006)) = 0 
                     then REPO_DISPLAY_ORDER
                     else (SELECT UFLD_DISPLAY_ORDER FROM TRSYSTEM999U
                              where UFLD_TABLE_SYNONYM = REPO_PROGRAM_UNIT 
                              and UFLD_COLUMN_NAME = REPO_COLUMN_NAME
                              and upper(UFLD_USER_ID) = varUserid
                              and UFLD_RECORD_STATUS not in (10200005,10200006)) end asc ;
   goto process_end;
  end if; 

   if NUMINFOTYPE=REFGETREPORTAGGREGATES then 
  varTemp := gconst.fncxmlextract(xmldoc, 'Param/EntityName', varTemp);
    GLOG.LOG_Trace_Request('O',ProcessData,'REFGETREPORTAGGREGATES ' || varTemp  );
   open gencursor for
      select REPT_PROGRAM_UNIT "ProgramUnit", REPT_COLUMN_NAME "ColumnName", 
             REPT_SERIAL_NUMBER "SerialNumber", PICK_SHORT_DESCRIPTION "AggregateFunction"
      from TRSYSTEM999G left outer join TRMASTER001
          on PICK_KEY_VALUE = REPT_AGGREGATE_FUNCTION
          and PICK_RECORD_STATUS not in (10200005,10200006)
      where REPT_PROGRAM_UNIT = varTemp
      and REPT_RECORD_STATUS not in (10200005,10200006);
   goto process_end;
  end if; 

 if NUMINFOTYPE=REFUSERVALIDATE then 
       open gencursor for
          select USER_USER_ID UserID, user_email_id EmailID,
                 PSWD_SERIAL_NUMBER SerialNumber
           from USERMASTER left outer join trsystem023
           on PSWD_USER_ID=USER_USER_ID
            where upper(USER_USER_ID)=Upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/UserID', varTemp))
            and USER_RECORD_STATUS not in (10200005,10200006) 
            and  PSWD_SERIAL_NUMBER= (select max(PSWD_SERIAL_NUMBER) from trsystem023
                                 where upper(PSWD_USER_ID)=upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/UserID', varTemp))
                                   and PSWD_RECORD_STATUS not in (10200005,10200006))
            and PSWD_RECORD_STATUS not in (10200005,10200006);
   goto process_end;
  end if;   

   if NUMINFOTYPE=REFLoggedUser then 
    varOperation := 'Extracting Login Information for: ' || varUserID;
    --varTemp1 := gconst.fncxmlextract(xmldoc,   'UserID',   varTemp1);
        open GenCursor for
        select
            USER_COMPANY_CODE CompanyId,  user_user_id "UserId", user_user_name "UserName", 
            user_terminal_id "TerminalId", 
            user_status_code "UserStatus", user_last_login  "LastLogin",
            user_email_id "EmailId", user_mobile_phone "MobilePhone", 
            user_user_designation "UserDesignation", user_group_code "GroupCode",
            null LoginCheckRemarks, SPLC_LOGIN_LOGOFFPERIOD LogoffPeriod,
            USPF_DASHBOARD_PROGRAMUNIT "DefaultDashBoard"
          from UserMaster inner join trsystem021 on
           SPLC_POLICY_GROUP=USER_GROUP_CODE
           left outer join trsystem022c on 
           user_user_id=USPF_USER_ID
           and uspf_record_status not in (10200005,10200006)
          where UPPER(user_user_id) = (varUserID)
          and SPLC_record_status not in (10200005,10200006)
          and user_record_status not in (10200005,10200006);
    goto process_end;      
  end if;   

  if NUMINFOTYPE = REFCHECKEMAILEXISTS then 
       open gencursor for
       SELECT USER_EMAIL_ID 
          FROM UserMaster
       WHERE Upper(USER_EMAIL_ID) = upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/Email', varTemp))
      AND USER_RECORD_STATUS NOT IN(10200005,10200006);         
   goto process_end;
  end if;


 if NUMINFOTYPE = REFCHECKUSEREXISTS then 
       open gencursor for
       SELECT USER_USER_ID 
          FROM UserMaster
       WHERE Upper(USER_USER_ID) = upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/User', varTemp))
      AND USER_RECORD_STATUS NOT IN(10200005,10200006);         
   goto process_end;
  end if;

if NUMINFOTYPE = REFGETDATATYPEFORMATS then 
       open gencursor for
            SELECT FORMAT_DATA_TYPE FROM TRGLOBALMAS914
            WHERE FORMAT_DATA_TYPE = GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/DataType', numcode)
            and format_pick_code =Glog.LanguageCode
            AND FORMAT_RECORD_STATUS NOT IN(10200005,10200006);      
   goto process_end;
  end if;  

  ------------------ADDED BY SUPRIYA 19/05/2020---------------------
   if NUMINFOTYPE = REFGETPOLICYGROUP then 
       open gencursor for
            SELECT SPLC_POLICY_GROUP FROM TRSYSTEM021
            WHERE SPLC_POLICY_GROUP = GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/SecurityGroup', numcode)
            AND SPLC_RECORD_STATUS NOT IN(10200005,10200006)
            and SPLC_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) );       
   goto process_end;
  end if;  

  ------------------ADDED BY SUPRIYA 28/09/2020---------------------
   if NUMINFOTYPE = REFCHECKACCOUNTEXISTS then 
       open gencursor for
           SELECT ACCT_ACCOUNT_NUMBER 
           FROM TRMASTER306B -- BRANCHMASTER
           WHERE Upper(ACCT_ACCOUNT_NUMBER) = upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/AccountNumber', varTemp))
           and ACCT_ACCOUNT_STATUS=14400001
           -- Added By Manjunath Reddy 
           and ACCT_RECORD_STATUS Not in (10200005,10200006);
--            AND BRNH_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                           where upper(usco_user_id) = varUserid
--                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--          AND BRNH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
           --AND BRNH_RECORD_STATUS NOT IN(10200005,10200006);                 
   goto process_end;
  end if;

   ------------------ADDED BY SUPRIYA 28/09/2020---------------------
   if NUMINFOTYPE = REFCHECKCATEGORYEXISTS then 
       open gencursor for
--           SELECT * FROM TRMASTER150
--           WHERE CASM_INFLOW_OUTFLOW = GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/InflowOutflow', numcode)
--           AND Upper(CASM_CATEGORY1) = upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/Category1', varTemp))
--           AND Upper(CASM_CATEGORY2) = upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/Category2', varTemp1))
--           AND Upper(CASM_PARTICULAR) = upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/Particular', varTemp2))
--           AND Upper(CASM_DETAILS) = upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/Details', varTemp3))
--           AND CASM_RECORD_STATUS NOT IN(10200005,10200006);             
            SELECT * FROM TRMASTER150
            where upper(CASM_LONG_DESCRIPTION) = upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/LongDescription', varTemp))
            AND CASM_RECORD_STATUS NOT IN(10200005,10200006); 
   goto process_end;
  end if;

------------------ADDED BY SUPRIYA 06/11/2021---------------------
if NUMINFOTYPE = REFCHECKCASHFLOWCOMPANYEXISTS then 
    open gencursor for        
        SELECT * FROM TRMASTER151
        where upper(CMAP_LONG_DESCRIPTION) = upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/LongDescription', varTemp))
        AND CMAP_RECORD_STATUS NOT IN(10200005,10200006); 
    goto process_end;
end if;

   ------------------ADDED BY SUPRIYA 08/10/2020---------------------
   if NUMINFOTYPE = REFCHECKERPEXISTS then 

      begin
        numcode:= GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/CurrencyCode', numcode);
    exception 
      when others then
        numcode:=0;
    end;

     begin
        numcode1:= GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/CreditDebit', numcode1);
    exception 
      when others then
        numcode1:=101;
    end;

     begin
        numcode2 := GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/GroupCode', numcode2);
    exception 
      when others then
        numcode2:=0;
    end;

    begin
        varTemp:= upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/GLHead', varTemp));
        --varQuery1 := ' and Upper(CMAP_GL_HEAD) = ' || '''' || varTemp || '''' ;
    exception 
      when others then
        varTemp:='0';
    end;

    begin
        varTemp1:= upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/SpecialGlIndicator', varTemp1));
        --varQuery1 := varQuery1 || ' and Upper(CMAP_SPECIAL_GLINDICATOR) = ' || '''' || varTemp1 || '''' ;
    exception 
      when others then
        varTemp1:='0';
    end;

    begin
        varTemp2:= upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/DocumentType', varTemp2));
        --varQuery1 := varQuery1 || ' and Upper(CMAP_DOCUMENT_TYPE) = ' || '''' || varTemp2 || '''' ;
    exception 
      when others then
        varTemp2:='0';
    end;

    begin
        varTemp3:= upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/CostCentre', varTemp3));
        --varQuery1 := varQuery1 || ' and Upper(CMAP_COST_CENTRE) = ' || '''' || varTemp3 || '''' ;
    exception 
      when others then
        varTemp3:='0';
    end;

    begin
        varTemp4:= upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/SIONumber', varTemp4));
        --varQuery1 := varQuery1 || ' and Upper(CMAP_SIO_NUMBER) = ' || '''' || varTemp4 || '''' ;
    exception 
      when others then
        varTemp4:='0';
    end;

     begin
        varTemp5:= upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/PostingKey', varTemp5));
        --varQuery1 := varQuery1 || ' and Upper(CMAP_POSTING_KEY) = ' || '''' || varTemp5 || '''' ;
    exception 
      when others then
        varTemp5:='0';
    end;

     begin
        varTemp6:= upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/CustVendorERPCode', varTemp6));
        --varQuery1 := varQuery1 || ' and Upper(CMAP_CUSTVENDOR_ERPCODE) = ' || '''' || varTemp6 || '''' ;
    exception 
      when others then
        varTemp6:='0';
    end;

     begin
        varTemp7:= upper(GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/ProfitCenter', varTemp7));
        --varQuery1 := varQuery1 || ' and Upper(CMAP_PROFIT_CENTER) = ' || '''' || varTemp7 || '''' ;
    exception 
      when others then
        varTemp7:='0';
    end;
--    varQuery1 := varQuery1 || ';';
--    
--    varQuery:= 'SELECT * FROM TRMASTER150C
--           WHERE CMAP_CURRENCY_CODE = ' || numcode || ' AND CMAP_GROUP_CODE = ' || numcode2 || ' AND CMAP_CREDIT_DEBIT = ' || numcode1;
--        
--    GLOG.Log_write('REFCHECKERPEXISTS ' || varQuery || varQuery1);

--   open gencursor for  varQuery || varQuery1;
          open gencursor for 
           SELECT * FROM TRMASTER150C
           WHERE CMAP_CURRENCY_CODE = numcode
           AND Upper(nvl(CMAP_GL_HEAD,'0')) = varTemp
           AND Upper(nvl(CMAP_SPECIAL_GLINDICATOR,'0')) = varTemp1
           AND CMAP_CREDIT_DEBIT = numcode1
           AND Upper(nvl(CMAP_DOCUMENT_TYPE,'0')) = varTemp2
           AND Upper(nvl(CMAP_COST_CENTRE,'0')) = varTemp3
           AND Upper(nvl(CMAP_SIO_NUMBER,'0')) = varTemp4
           AND Upper(nvl(CMAP_POSTING_KEY,'0')) = varTemp5
           AND CMAP_GROUP_CODE = numcode2
           AND Upper(nvl(CMAP_CUSTVENDOR_ERPCODE,'0')) = varTemp6
           AND Upper(nvl(CMAP_PROFIT_CENTER,'0')) = varTemp7
           AND CMAP_RECORD_STATUS NOT IN(10200005,10200006)
           and CMAP_CASM_CODE = GCONST.FNCXMLEXTRACT(XMLDOC, 'Param/CategoryCode', numcode3);                 
   goto process_end;
  end if;
  ------------------------------------------------------------------

  If numinfotype = REFCUSTOMERDETAILS then
  varoperation := 'Extracting the information for the Customer Details ';
  --numcode := gconst.fncxmlextract(xmldoc,'CompanyCode',   numcode);
  begin
    varTemp1 := GCONST.FNCXMLEXTRACT(XMLDOC,'Param/Synonym',VarTemp1);
    varEntity := varTemp1;
    GLOG.Log_write('varTemp1: ' || varTemp1 || ' varEntity: ' || varEntity);
  exception
  when others then
    vartemp1:=null;
  end;

    GLOG.Log_write('varTemp1: ' || varTemp1 || ' varEntity: ' || varEntity);
  if((varEntity='EXPORTTRADEREGISTER') or(varEntity='EXPORTREGISTERREVERSAL')) then
       open gencursor for
            select cust_pick_code as "ID",cust_long_description as "Name",
                cust_short_description as "Shortdesc"
              from trmaster305
            where 
            --Decode(cust_company_code,10399999,numcode,cust_company_code) in (numcode,30199999)
            --and
             cust_Company_Code in( select usco_company_code from trsystem022a
                                        where UPPER(usco_user_id) = varUserID
		    AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
            AND CUST_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)) 
            and cust_customer_type in (GConst.BUYER, GConst.BOTHCUSTOMERS)
           and 
            cust_record_status not in (gconst.statusinactive,   gconst.statusdeleted)
            order by cust_pick_code;
  else
      open gencursor for
            select cust_pick_code as "ID",cust_long_description as "Name",
            cust_short_description as "Shortdesc"
            from trmaster305
            where 
            --Decode(cust_company_code,10399999,numcode,cust_company_code) in (numcode,30199999)
            --and
            cust_Company_Code in( select usco_company_code from trsystem022a
                                   where UPPER(usco_user_id) = varUserID
		    AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
             AND CUST_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            and  cust_customer_type in (GConst.SUPPLER, GConst.BOTHCUSTOMERS)
            and cust_record_status not in (gconst.statusinactive,   gconst.statusdeleted)
            order by cust_pick_code;
  end if;
 Goto Process_End;
end if;

 if numInfoType = REFDEALLINKING then
       varOperation := 'Extracting The Hegde Deal Linking Details For Delete Mode';
       vartemp  := Gconst.fncXMLExtract(xmldoc,'TradeReference',vartemp);
       vartemp1 := Gconst.fncXMLExtract(xmldoc,'DealNumber',vartemp);
       numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);
      -- numcode1 := Gconst.fncXMLExtract(xmldoc,'Trade',numcode);

               open Gencursor for
               ---hedge details
               select rownum "Rownum", a.* from
                  (select distinct deal_deal_number "DealNumber",deal_exchange_rate "ExchangeRate",
                      Deal_base_amount "BaseAmount",
                     (select sum(hedg_hedged_fcy)
                       from  trtran004 H
                       where H.hedg_trade_reference = vartemp
                        and  H.hedg_deal_number = vartemp1
                        and  H.hedg_deal_serial = numcode
                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                        "AdjustedAmount",
                        -- hedg_hedged_fcy  "AdjustedAmount",
                        (select sum(hedg_hedged_fcy)
                          from  trtran004 H
                          where H.hedg_trade_reference = vartemp
                           and  H.hedg_deal_number = vartemp1
                           and  H.hedg_deal_serial = numcode
                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                           "HedgingAmount",
                         fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
                         deal_other_amount "OtherAmount",deal_local_rate "LocalRate",
                         --pkgreturnreport.FNCCONVRS(deal_amount_local)      "AmountLocal",
                         deal_maturity_date "MaturityDate",hedg_deal_serial "SerialNumber",
                         pkgreturncursor.fncgetdescription(deal_counter_party,1) "CounterParty",
                         fncgetdescription(deal_hedge_trade,1) "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
                         fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
                         deal_time_stamp "DealTimeStamp",
                         pkgfunctions.fncgetusername(deal_user_id)  "UserName",
--                         (select user_user_name
--                           from usermaster
--                          where user_user_id=deal_user_id) "UserName",
                          deal_other_currency "OtherCurrencyCode",
                          --deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
                          deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
                          deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",deal_execute_date "ExecuteDate",
                          deal_counter_party "CounterPartyCode",
                          fncgetdescription(DEAL_BACKUP_DEAL,2) "CategoryCode",fncgetdescription(DEAL_INIT_CODE,2) "subCategoryCode",                          
                          fncgetdescription(HEDG_HEDGING_WITH,2) "HedgingWith"
                     from trtran004,trtran001
                    where deal_deal_number = hedg_deal_number
                      and deal_hedge_trade in(gconst.HEDGEDEAL,GCONST.FTDEAL)
                      and hedg_trade_reference = vartemp
                      and hedg_deal_number = vartemp1
                      and hedg_deal_serial = numcode
                      and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid )

                      and 
                      --deal_process_complete = GConst.OPTIONNO
                      (DEAL_PROCESS_COMPLETE = 12400002 or (DEAL_PROCESS_COMPLETE = 12400001 and HEDG_LINKED_DATE <= DEAL_COMPLETE_DATE ))
                      and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                    union all
                  select distinct cfut_deal_number "DealNumber",cfut_exchange_rate "ExchangeRate",
                      cfut_base_amount "BaseAmount",
                     (select sum(hedg_hedged_fcy)
                       from  trtran004 H
                       where H.hedg_trade_reference = vartemp
                        and  H.hedg_deal_number = vartemp1
                        and  H.hedg_deal_serial = numcode
                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                        "AdjustedAmount",
                        -- hedg_hedged_fcy  "AdjustedAmount",
                        (select sum(hedg_hedged_fcy)
                          from  trtran004 H
                          where H.hedg_trade_reference = vartemp
                           and  H.hedg_deal_number = vartemp1
                           and  H.hedg_deal_serial = numcode
                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                           "HedgingAmount",
                         fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
                         cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",
                         --pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
                         cfut_maturity_date "MaturityDate",hedg_deal_serial "SerialNumber",
                         pkgreturncursor.fncgetdescription(cfut_counter_party,1) "CounterParty",
                         fncgetdescription(cfut_hedge_trade,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
                         null "SwapOutright",null "DealType",
                         cfut_time_stamp "DealTimeStamp",
                          pkgfunctions.fncGetUserName(cfut_user_id) "UserName",
--                         (select user_user_name
--                           from usermaster
--                          where user_user_id=cfut_user_id) "UserName",
                          cfut_other_currency "OtherCurrencyCode",
                          --0 "HoldingRate",0 "HoldingRate1",
                          cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
                          cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode",cfut_execute_date "ExecuteDate",
                          cfut_counter_party "CounterPartyCode",
                          fncgetdescription(cfut_BACKUP_DEAL,2) "CategoryCode", fncgetdescription(cfut_INIT_CODE,2)  "subCategoryCode",
                          fncgetdescription(HEDG_HEDGING_WITH,2) "HedgingWith"
                     from trtran004,trtran061
                    where cfut_deal_number = hedg_deal_number
                      and cfut_hedge_trade in(gconst.HEDGEDEAL,GCONST.FTDEAL)
                      and hedg_trade_reference = vartemp
                      and hedg_deal_number = vartemp1
                      and hedg_deal_serial = numcode
                      and  CFUT_COMPANY_CODE in (select usco_company_code from trsystem022a
                            where UPPER(usco_user_id) =varUserid
                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
                      and  CFUT_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))     
                      and  HEDG_COMPANY_CODE in (select usco_company_code from trsystem022a
                            where UPPER(usco_user_id) =varUserid
                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
                      and  HEDG_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))                      
                      and cfut_process_complete = GConst.OPTIONNO
                      and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                      UNION ALL
                  select distinct copt_deal_number "DealNumber",0 "ExchangeRate",
                      COPT_BASE_AMOUNT "BaseAmount",
                     (select sum(hedg_hedged_fcy)
                       from  trtran004 H
                       where H.hedg_trade_reference = vartemp
                        and  H.hedg_deal_number = vartemp1
                        and  H.hedg_deal_serial = numcode
                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                        "AdjustedAmount",
                        (select sum(hedg_hedged_fcy)
                          from  trtran004 H
                          where H.hedg_trade_reference = vartemp
                           and  H.hedg_deal_number = vartemp1
                           and  H.hedg_deal_serial = numcode
                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                           "HedgingAmount",
                         fncgetdescription(COPT_BASE_CURRENCY,2) "BaseCurrency", fncgetdescription(COPT_OTHER_CURRENCY,2) "OtherCurrency",
                         COPT_OTHER_AMOUNT "OtherAmount",1 "LocalRate",
                         --pkgreturnreport.FNCCONVRS(0)  "AmountLocal",
                         COPT_MATURITY_DATE "MaturityDate",hedg_deal_serial "SerialNumber",
                         pkgreturncursor.fncgetdescription(COPT_LOCAL_BANK,1) "CounterParty",
                         fncgetdescription(COPT_HEDGE_TRADE,1) "HedgeTrade",
                         null "BuySell",
                         null "SwapOutright",null "DealType",
                         COPT_TIME_STAMP "DealTimeStamp",
                          pkgfunctions.fncGetUserName(COPT_USER_ID) "UserName",
--                         (select user_user_name
--                           from usermaster
--                          where user_user_id=COPT_USER_ID) "UserName",
                          COPT_OTHER_CURRENCY "OtherCurrencyCode",
                          --0 "HoldingRate",0 "HoldingRate1",
                          COPT_DEALER_REMARK "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
                          COPT_BASE_CURRENCY "BaseCurrencyCode",0 as "BuySellCode",COPT_EXECUTE_DATE "ExecuteDate",
                          COPT_COUNTER_PARTY "CounterPartyCode",
                          fncgetdescription(COPT_BACKUP_DEAL,1) "CategoryCode",fncgetdescription(COPT_INIT_CODE,1) "subCategoryCode",
                          fncgetdescription(HEDG_HEDGING_WITH,1) "HedgingWith"
                     from trtran004,trtran071
                    where copt_deal_number = hedg_deal_number
                      and COPT_HEDGE_TRADE in(gconst.HEDGEDEAL,GCONST.FTDEAL)
                      and hedg_trade_reference = vartemp
                      and hedg_deal_number = vartemp1
                      and hedg_deal_serial = numcode
                      and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid )
                      and  COPT_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))                
                    --  and copt_process_complete = GConst.OPTIONNO
                      and  HEDG_COMPANY_CODE in (select usco_company_code from trsystem022a
                            where UPPER(usco_user_id) =varUserid
                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
                      and  HEDG_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
                      and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)) a;                      

              GOTO PROCESS_END;
        End if;

-- if numInfoType = REFDEALLINKING then
--       varOperation := 'Extracting The Hegde Deal Linking Details For Delete Mode';
--       vartemp  := Gconst.fncXMLExtract(xmldoc,'TradeReference',vartemp);
--       vartemp1 := Gconst.fncXMLExtract(xmldoc,'DealNumber',vartemp);
--       numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);
--      -- numcode1 := Gconst.fncXMLExtract(xmldoc,'Trade',numcode);
--
--               open Gencursor for
--               ---hedge details
--               select rownum "Rownum", a.* from
--                  (select distinct deal_deal_number "DealNumber",deal_exchange_rate "ExchangeRate",
--                      Deal_base_amount "BaseAmount",
--                     (select sum(hedg_hedged_fcy)
--                       from  trtran004 H
--                       where H.hedg_trade_reference = vartemp
--                        and  H.hedg_deal_number = vartemp1
--                        and  H.hedg_deal_serial = numcode
--                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                        "AdjustedAmount",
--                        -- hedg_hedged_fcy  "AdjustedAmount",
--                        (select sum(hedg_hedged_fcy)
--                          from  trtran004 H
--                          where H.hedg_trade_reference = vartemp
--                           and  H.hedg_deal_number = vartemp1
--                           and  H.hedg_deal_serial = numcode
--                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                           "HedgingAmount",
--                         fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                         deal_other_amount "OtherAmount",deal_local_rate "LocalRate",
--                         --pkgreturnreport.FNCCONVRS(deal_amount_local)      "AmountLocal",
--                         deal_maturity_date "MaturityDate",hedg_deal_serial "SerialNumber",
--                         pkgreturncursor.fncgetdescription(deal_counter_party,1) "CounterParty",
--                         fncgetdescription(deal_hedge_trade,1) "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
--                         fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                         deal_time_stamp "DealTimeStamp",
--                         pkgfunctions.fncgetusername(deal_user_id)  "UserName",
----                         (select user_user_name
----                           from usermaster
----                          where user_user_id=deal_user_id) "UserName",
--                          deal_other_currency "OtherCurrencyCode",
--                          --deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
--                          deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
--                          deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",deal_execute_date "ExecuteDate",
--                          deal_counter_party "CounterPartyCode",
--                          fncgetdescription(DEAL_BACKUP_DEAL,2) "CategoryCode",fncgetdescription(DEAL_INIT_CODE,2) "subCategoryCode",                          
--                          fncgetdescription(HEDG_HEDGING_WITH,2) "HedgingWith"
--                     from trtran004,trtran001
--                    where deal_deal_number = hedg_deal_number
--                      and deal_hedge_trade in(gconst.HEDGEDEAL,GCONST.FTDEAL)
--                      and hedg_trade_reference = vartemp
--                      and hedg_deal_number = vartemp1
--                      and hedg_deal_serial = numcode
--                      and deal_Company_Code in( select usco_company_code from trsystem022a
--                                    where UPPER(usco_user_id) = varUserid )
--
--                      and deal_process_complete = GConst.OPTIONNO
--                      and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--                    union all
--                  select distinct cfut_deal_number "DealNumber",cfut_exchange_rate "ExchangeRate",
--                      cfut_base_amount "BaseAmount",
--                     (select sum(hedg_hedged_fcy)
--                       from  trtran004 H
--                       where H.hedg_trade_reference = vartemp
--                        and  H.hedg_deal_number = vartemp1
--                        and  H.hedg_deal_serial = numcode
--                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                        "AdjustedAmount",
--                        -- hedg_hedged_fcy  "AdjustedAmount",
--                        (select sum(hedg_hedged_fcy)
--                          from  trtran004 H
--                          where H.hedg_trade_reference = vartemp
--                           and  H.hedg_deal_number = vartemp1
--                           and  H.hedg_deal_serial = numcode
--                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                           "HedgingAmount",
--                         fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
--                         cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",
--                         --pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
--                         cfut_maturity_date "MaturityDate",hedg_deal_serial "SerialNumber",
--                         pkgreturncursor.fncgetdescription(cfut_counter_party,1) "CounterParty",
--                         fncgetdescription(cfut_hedge_trade,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
--                         null "SwapOutright",null "DealType",
--                         cfut_time_stamp "DealTimeStamp",
--                          pkgfunctions.fncGetUserName(cfut_user_id) "UserName",
----                         (select user_user_name
----                           from usermaster
----                          where user_user_id=cfut_user_id) "UserName",
--                          cfut_other_currency "OtherCurrencyCode",
--                          --0 "HoldingRate",0 "HoldingRate1",
--                          cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
--                          cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode",cfut_execute_date "ExecuteDate",
--                          cfut_counter_party "CounterPartyCode",
--                          fncgetdescription(cfut_BACKUP_DEAL,2) "CategoryCode", fncgetdescription(cfut_INIT_CODE,2)  "subCategoryCode",
--                          fncgetdescription(HEDG_HEDGING_WITH,2) "HedgingWith"
--                     from trtran004,trtran061
--                    where cfut_deal_number = hedg_deal_number
--                      and cfut_hedge_trade in(gconst.HEDGEDEAL,GCONST.FTDEAL)
--                      and hedg_trade_reference = vartemp
--                      and hedg_deal_number = vartemp1
--                      and hedg_deal_serial = numcode
--                      and  CFUT_COMPANY_CODE in (select usco_company_code from trsystem022a
--                            where UPPER(usco_user_id) =varUserid
--                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                      and  CFUT_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))     
--                      and  HEDG_COMPANY_CODE in (select usco_company_code from trsystem022a
--                            where UPPER(usco_user_id) =varUserid
--                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                      and  HEDG_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))                      
--                      and cfut_process_complete = GConst.OPTIONNO
--                      and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--                      UNION ALL
--                  select distinct copt_deal_number "DealNumber",0 "ExchangeRate",
--                      COPT_BASE_AMOUNT "BaseAmount",
--                     (select sum(hedg_hedged_fcy)
--                       from  trtran004 H
--                       where H.hedg_trade_reference = vartemp
--                        and  H.hedg_deal_number = vartemp1
--                        and  H.hedg_deal_serial = numcode
--                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                        "AdjustedAmount",
--                        (select sum(hedg_hedged_fcy)
--                          from  trtran004 H
--                          where H.hedg_trade_reference = vartemp
--                           and  H.hedg_deal_number = vartemp1
--                           and  H.hedg_deal_serial = numcode
--                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                           "HedgingAmount",
--                         fncgetdescription(COPT_BASE_CURRENCY,2) "BaseCurrency", fncgetdescription(COPT_OTHER_CURRENCY,2) "OtherCurrency",
--                         COPT_OTHER_AMOUNT "OtherAmount",1 "LocalRate",
--                         --pkgreturnreport.FNCCONVRS(0)  "AmountLocal",
--                         COPT_MATURITY_DATE "MaturityDate",hedg_deal_serial "SerialNumber",
--                         pkgreturncursor.fncgetdescription(COPT_LOCAL_BANK,1) "CounterParty",
--                         fncgetdescription(COPT_HEDGE_TRADE,1) "HedgeTrade",
--                         null "BuySell",
--                         null "SwapOutright",null "DealType",
--                         COPT_TIME_STAMP "DealTimeStamp",
--                          pkgfunctions.fncGetUserName(COPT_USER_ID) "UserName",
----                         (select user_user_name
----                           from usermaster
----                          where user_user_id=COPT_USER_ID) "UserName",
--                          COPT_OTHER_CURRENCY "OtherCurrencyCode",
--                          --0 "HoldingRate",0 "HoldingRate1",
--                          COPT_DEALER_REMARK "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
--                          COPT_BASE_CURRENCY "BaseCurrencyCode",0 as "BuySellCode",COPT_EXECUTE_DATE "ExecuteDate",
--                          COPT_COUNTER_PARTY "CounterPartyCode",
--                          fncgetdescription(COPT_BACKUP_DEAL,1) "CategoryCode",fncgetdescription(COPT_INIT_CODE,1) "subCategoryCode",
--                          fncgetdescription(HEDG_HEDGING_WITH,1) "HedgingWith"
--                     from trtran004,trtran071
--                    where copt_deal_number = hedg_deal_number
--                      and COPT_HEDGE_TRADE in(gconst.HEDGEDEAL,GCONST.FTDEAL)
--                      and hedg_trade_reference = vartemp
--                      and hedg_deal_number = vartemp1
--                      and hedg_deal_serial = numcode
--                      and copt_Company_Code in( select usco_company_code from trsystem022a
--                                    where UPPER(usco_user_id) = varUserid )
--                      and  COPT_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))                
--                    --  and copt_process_complete = GConst.OPTIONNO
--                      and  HEDG_COMPANY_CODE in (select usco_company_code from trsystem022a
--                            where UPPER(usco_user_id) =varUserid
--                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                      and  HEDG_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--                      and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)) a;                      
--
--              GOTO PROCESS_END;
--        End if;

 if numInfoType = REFORDERLINKING then
       varOperation := 'Extracting The Hegde Deal Linking Details For Delete Mode';
       vartemp  := Gconst.fncXMLExtract(xmldoc,'TradeReference',vartemp);
       vartemp1 := Gconst.fncXMLExtract(xmldoc,'DealNumber',vartemp);
       numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);             
                open Gencursor for           
                      select rownum "Rownum", a.* from
                      (select  distinct trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
                        pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
                        trad_trade_fcy  "BillAmount",
                        (select sum(hedg_hedged_fcy)
                             from  trtran004 H
                             where H.hedg_trade_reference = vartemp
                             and  H.hedg_deal_number = vartemp1
                             and  H.hedg_deal_serial = numcode
                             and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                         "CoveredAmount",
                         (select sum(hedg_hedged_fcy)
                             from  trtran004 H
                             where H.hedg_trade_reference = vartemp
                              and  H.hedg_deal_number = vartemp1
                              and  H.hedg_deal_serial = numcode
                              and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                         "HedgingAmount",
                          trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription",
                          trad_user_reference as "BillReference",trad_maturity_date "Maturity",
                          pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
                          pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
                          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
                          GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
                          trad_company_code "CompanyCode",trad_trade_currency "currencyCode" ,0 "RecordStatus",
                          trad_import_export "ImportExport"
                      from TradeRegister,trtran004
                      where trad_trade_reference = hedg_trade_reference
                        and hedg_trade_reference = vartemp
                        and hedg_deal_number = vartemp1
                        and hedg_deal_serial = numcode
                        and trad_process_complete = GConst.OPTIONNO
                        and  HEDG_COMPANY_CODE in (select usco_company_code from trsystem022a
                            where UPPER(usco_user_id) =varUserid
                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
                        and  HEDG_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
                         and  Trad_company_code in (select usco_company_code from trsystem022a
                            where UPPER(usco_user_id) =varUserid
                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
                         and  TRAD_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))     
                        and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
                        and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)) a;

              GOTO PROCESS_END;
        End if; 

--  if numInfoType = REFORDERLINKING then
--       varOperation := 'Extracting The Hegde Deal Linking Details For Delete Mode';
--       vartemp  := Gconst.fncXMLExtract(xmldoc,'TradeReference',vartemp);
--       vartemp1 := Gconst.fncXMLExtract(xmldoc,'DealNumber',vartemp);
--       numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);             
--                open Gencursor for           
--                      select rownum "Rownum", a.* from
--                      (select  distinct trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
--                        pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
--                        trad_trade_fcy  "BillAmount",
--                        (select sum(hedg_hedged_fcy)
--                             from  trtran004 H
--                             where H.hedg_trade_reference = vartemp
--                             and  H.hedg_deal_number = vartemp1
--                             and  H.hedg_deal_serial = numcode
--                             and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                         "CoveredAmount",
--                         (select sum(hedg_hedged_fcy)
--                             from  trtran004 H
--                             where H.hedg_trade_reference = vartemp
--                              and  H.hedg_deal_number = vartemp1
--                              and  H.hedg_deal_serial = numcode
--                              and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                         "HedgingAmount",
--                          trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription",
--                          trad_user_reference as "BillReference",trad_maturity_date "Maturity",
--                          pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
--                          pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
--                          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
--                          GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
--                          trad_company_code "CompanyCode",trad_trade_currency "currencyCode" ,0 "RecordStatus",
--                          trad_import_export "ImportExport"
--                      from TradeRegister,trtran004
--                      where trad_trade_reference = hedg_trade_reference
--                        and hedg_trade_reference = vartemp
--                        and hedg_deal_number = vartemp1
--                        and hedg_deal_serial = numcode
--                        and trad_process_complete = GConst.OPTIONNO
--                        and  HEDG_COMPANY_CODE in (select usco_company_code from trsystem022a
--                            where UPPER(usco_user_id) =varUserid
--                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                        and  HEDG_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--                         and  Trad_company_code in (select usco_company_code from trsystem022a
--                            where UPPER(usco_user_id) =varUserid
--                            AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                         and  TRAD_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))     
--                        and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--                        and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)) a;
--
--              GOTO PROCESS_END;
--        End if;   


        if numInfoType = REFFORWARDLINKING then
       varOperation := 'Extracting The Forward Option Linking Details For Delete Mode';
       vartemp1 := Gconst.fncXMLExtract(xmldoc,'BatchNumber',vartemp1);
      open Gencursor for   
       select rownum "Rownum",deal_deal_number "DealNumber",
                deal_execute_date "ExecuteDate",
                pkgreturncursor.fncgetdescription(deal_backup_deal,2) "BusinessUnit",
                pkgreturncursor.fncgetdescription(deal_init_code,2) "ProfitCenter",
                pkgreturncursor.fncgetdescription(deal_counter_party,2) "CounterParty",
                pkgreturncursor.fncgetdescription(deal_buy_sell,2) "BuySell",                         
                deal_base_amount "Amount",             
                deal_spot_rate "SpotRate",
                deal_forward_rate "ForwardRate",
                deal_margin_rate "MarginRate",
                deal_exchange_rate "Rate",                         
                deal_maturity_from "ExpiryDate",
                deal_maturity_date "SettlementDate", 
                to_date(sysdate,'dd-MON-yy') "ConfirmDate",  
                deal_other_amount "OtherAmount",
                pkgreturncursor.fncgetdescription(deal_hedge_trade,2) "HedgeTrade",
                pkgreturncursor.fncgetdescription(deal_Base_Currency,2) "BaseCurrency",
                pkgreturncursor.fncgetdescription(deal_other_currency,2) "OtherCurrency",
              --  pkgreturncursor.fncgetdescription(deal_swap_outright,2) "SwapOutright",
                pkgreturncursor.fncgetdescription(deal_deal_type,2) "DealType",             
                pkgreturncursor.fncgetdescription(deal_Company_code,2) "Company",   
                pkgreturncursor.fncgetdescription(deal_Location_code,2) "Location",
                deal_dealer_name "DealerName",
                deal_counter_dealer "CounterDealer",
                deal_complete_date "CompleteDate",
                deal_dealer_remarks "DealerRemarks",
                DEAL_SERIAL_NUMBER "SerialNumber",
                deal_Company_code "CompanyCode",
                deal_Location_code "LocationCode",
                deal_backup_deal "BusinessUintCode",
                deal_counter_party "CounterPartyCode",
                deal_base_currency "BaseCurrencyCode",
                deal_other_currency "OtherCurrencyCode",
                deal_buy_sell "BuySellCode",
                deal_init_code "ProfitCentreCode",
                HEDG_BATCH_NUMBER "BatchNumber"
                from trtran001,TRTRAN004D
                WHERE HEDG_DEAL_NUMBER1=DEAL_DEAL_NUMBER
                and HEDG_BATCH_NUMBER = vartemp1
                and deal_record_status not in  (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                AND HEDG_RECORD_STATUS NOT IN  (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);

              GOTO PROCESS_END;
        End if;

         if numInfoType = REFOPTIONLINKING then
       varOperation := 'Extracting The Forward Option Linking Details For Delete Mode';
       vartemp1 := Gconst.fncXMLExtract(xmldoc,'BatchNumber',vartemp1);
      open Gencursor for   
       select rownum "Rownum",COPT_DEAL_NUMBER "DealNumber",COPT_EXECUTE_DATE as "ExecuteDate",
                       pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  "BusinessUnit" ,
                       pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  "ProfitCentre" ,
                       pkgreturncursor.fncgetdescription(copt_counter_party, 2) as "CounterParty",
                       pkgreturncursor.fncgetdescription(cosu_buy_sell,2) Buysell, 
                       copt_base_amount as "BaseAmount",
                       0 "SpotRate",0 "ForwardRate",0 "MarginRate",                   
                       cosu_strike_rate "Rate",COPT_EXPIRY_DATE "ExpiryDate",
                       COPT_MATURITY_DATE "SettlementDate",to_date(copt_confirm_date,'dd-MON-yy') "ConfirmDate",  
                       copt_other_amount "OtherAmount",
                       pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as "HedgeTrade",
                      Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As "BaseCurrency",
                      pkgreturncursor.fncgetdescription(copt_other_currency, 2) as "OtherCurrency", 
                      pkgreturncursor.fncgetdescription(copt_deal_type,2) "DealType",  
                      pkgreturncursor.fncgetdescription(copt_Company_code,2) "Company",   
                      pkgreturncursor.fncgetdescription(copt_Location_code,2) "Location",                      
                     copt_dealer_name "DealerName",copt_counter_dealer "CounterDealer",
                     copt_complete_date "CompleteDate",copt_dealer_remark "DealerRemarks",
                     copt_SERIAL_NUMBER "SerialNumber" ,
                     copt_Company_code "CompanyCode",
                     copt_Location_code "LocationCode",
                     copt_backup_deal "BusinessUintCode",
                     copt_counter_party "CounterPartyCode",
                      copt_base_currency "BaseCurrencyCode",
                      copt_other_currency "OtherCurrencyCode",
                      cosu_buy_sell "BuySellCode",
                     copt_init_code "ProfitCentreCode",
                      HEDG_BATCH_NUMBER "BatchNumber"
             from trtran071 join trtran072
             on cosu_deal_number= COPT_DEAL_NUMBER
             and cosu_serial_number=copt_serial_number
             JOIN TRTRAN072A ON
             cosu_deal_number = COSM_DEAL_NUMBER
             JOIN TRTRAN004D 
             ON COPT_DEAL_NUMBER=HEDG_DEAL_NUMBER2
             AND COPT_SERIAL_NUMBER=HEDG_SERIAL_NUMBER
             AND HEDG_BATCH_NUMBER=vartemp1
           Where     
            cosu_record_Status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
            and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
            and cosm_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
            AND HEDG_RECORD_STATUS NOT IN (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);         
      GOTO PROCESS_END;
End if;

  if numinfotype = REFGETFUTUREPRODUCT then
   varOperation := 'Getting FUTURE Product Details';

     open genCursor for
             select CPRO_SHORT_DESCRIPTION as "Name", CPRO_LONG_DESCRIPTION as "ProductDescription",
                    CPRO_TRADE_UNIT || ' ' ||  pkgreturncursor.fncGetdescription(CPRO_TRADE_UOM,2) as "TradeQty",
                    pkgreturncursor.fncGetdescription(CPRO_EXCHANGE_CODE,2) as "Exchange",
                    pkgreturncursor.fncGetdescription(CPRO_BASE_CURRENCY,2) as "BaseCurrency",
                    pkgreturncursor.fncGetdescription(CPRO_Quote_CURRENCY,2) as "QuoteCurrency",
                    pkgreturncursor.fncGetdescription(CPRO_DealWriting_in,1) as "DealWritingIn",
                    CPRO_PICK_CODE "ID"--, CPRO_RECORD_STATUS as "RecordStatus"
             from TRMASTER503 
             where CPRO_PRODUCT_CATEGORY in (61000001)
             and CPRO_RECORD_STATUS not in(10200005,10200006)
              and CPRO_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
             and CPRO_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
        goto process_end;
  end if;

--ADDED BY SUPRIYA ON 05/05/2020
if numinfotype = REFCASHFLOWBUDGETDETAILS then
    varOperation := 'Getting CASH FLOW BUDGET DETAILS';
    varTemp := gconst.fncxmlextract(xmldoc, 'SystemReference', varTemp);

    --Get Denomination to which Budget FCY should be converted
    select PICK_SHORT_DESCRIPTION
    into numcode
    from TRSYSTEM051A inner join trmaster001
    on PICK_KEY_VALUE = PRCC_BUDGET_AMOUNTIN;

    open genCursor for
        select to_char(rownum) "Rownum", CBUD_SYSTEM_REFERENCE as "SystemReference", 
            CBUD_SERIAL_NUMBER as "SerialNumber", CBUD_CURRENCY_CODE "CurrencyCode",
            CBUD_TRANSACTION_DATE "TransactionDate", CBUD_DUE_DATE "DueDate",
            (CBUD_AMOUNT_FCY/numcode) "AmountFCY", CBUD_EXCHANGE_RATE "ExchangeRate",
            (CBUD_AMOUNT_LCY/numcode) "AmountLCY", CBUD_USER_REMARKS "UserRemarks",
            CBUD_CASHFLOW_CODE "CashFlowCode", CBUD_COMPANYMAP_CODE "CompanyCode", 
            pkgreturncursor.fncgetdescription(CBUD_CASHFLOW_CODE,1) "CashFlow", 
            pkgreturncursor.fncgetdescription(CBUD_COMPANYMAP_CODE,1) "Company", 
            pkgreturncursor.fncgetdescription(CBUD_CURRENCY_CODE,2) "Currency",
            pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,2) "Location",
            pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,2) "Portfolio",
            --pkgreturncursor.fncgetdescription(CONF_EXPOSURE_TYPE,1) "ExposureType",
            CASM_CATEGORY1 "Category1", pkgreturncursor.fncgetdescription(CASM_INFLOW_OUTFLOW,1) "InflowOutflow",
            pkgreturncursor.fncgetdescription(CMAP_COMPANY_CODE,1) "CompanyORG",
            CASM_CATEGORY2 "Category2", CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
            to_char(CBUD_RECORD_STATUS) "RecordStatus",
            to_char(CBUD_DUE_DATE, 'Mon-yy') "DueDateMonth"
        from TRTRAN150A left outer join TRMASTER151
        ON CBUD_COMPANYMAP_CODE = CMAP_PICK_CODE
        left outer join TRMASTER150
        on CBUD_CASHFLOW_CODE = CASM_PICK_CODE
--        left outer join TRMASTER150B
--        on CONF_CASM_CODE = CASM_PICK_CODE
        where CBUD_SYSTEM_REFERENCE = varTemp
        and CBUD_RECORD_STATUS not in (10200005,10200006)
        and CMAP_RECORD_STATUS not in (10200005,10200006)
        --and CONF_RECORD_STATUS not in (10200005,10200006)
        and CASM_RECORD_STATUS not in (10200005,10200006)
        order by last_Day(CBUD_DUE_DATE);
    goto process_end;
end if;

   --ADDED BY SUPRIYA ON 01/06/2020
    if numinfotype = REFGETSWAPDETAILSIRS then
    varOperation := 'Getting IRS and CCS Details';

    varEntity := gconst.fncxmlextract(xmldoc,'Param/EntityName',varentity);

        if varEntity = 'IRSSETTLEMENT' then
        open genCursor for
            SELECT IIRS_IRS_NUMBER "SystemReference", pkgreturncursor.fncgetdescription(IIRS_COMPANY_CODE,2) "Company",
                    pkgreturncursor.fncgetdescription(IIRS_LOCATION_CODE,2) "Location",
                    pkgreturncursor.fncgetdescription(IIRS_PORTFOLIO,2) "PortFolio",
                    pkgreturncursor.fncgetdescription(IIRS_SUB_PORTFOLIO,2) "SubPortfolio",
                    pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) "CounterParty",
                    pkgreturncursor.fncgetdescription(IIRS_BUSINESSDAY_CONVENSION,2) "BusinessDayConversion",
                    pkgreturncursor.fncgetdescription(IIRS_TENOR_TYPE,2) "TenorType", 
                    pkgreturncursor.fncgetdescription(IIRS_DEAL_TYPE,2) "DealType", 
                    IIRS_TENOR_NUMBER "TenorNumber", IIRS_NOTIONAL_AMOUNT "NotionalAmount",
                    to_char(IIRS_EXECUTE_DATE,'dd-MON-YYYY') "ExecuteDate", to_char(IIRS_START_DATE,'dd-MON-YYYY') "EffectiveDate", 
                    to_char(IIRS_EXPIRY_DATE,'dd-MON-YYYY') "ExpiryDate", IIRS_USER_REMARKS "UserRemarks", IIRS_USER_REFERENCE "UserReference",
                    IIRS_FIXING_CALENDAR "FixingCalendar", IIRS_PAYMENT_CALENDAR "PaymentCalendar", IIRS_DEAL_TYPE "DealTypeCode",
                    IIRS_SUB_PORTFOLIO "SubPortfolioCode", IIRS_PORTFOLIO "PortfolioCode", IIRS_COUNTER_PARTY "CounterPartyCode",
                    IIRS_COMPANY_CODE "CompanyCode", IIRS_LOCATION_CODE "LocationCode", IIRS_BUSINESSDAY_CONVENSION "BusiConvCode",
                    IIRS_SETTLEMENT_CURRENCY "SettlementCurrency"
            FROM TRTRAN091
            WHERE IIRS_RECORD_STATUS NOT IN (10200005,10200006)
            AND IIRS_IRS_NUMBER NOT IN (SELECT DISTINCT(IIRS_IRS_NUMBER)
                                        FROM TRTRAN091B
                                        WHERE IIRS_RECORD_STATUS NOT IN (10200005,10200006))
            AND IIRS_DEAL_TYPE IN (80800001,80800002,80800003)
            and nvl(IIRS_PROCESS_COMPLETE,12400002) = 12400002
             and IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));  
            goto process_end;  

        elsif  varEntity = 'IRSPRINCIPAL' then
            open genCursor for
           SELECT IIRS_IRS_NUMBER "SystemReference", pkgreturncursor.fncgetdescription(IIRS_COMPANY_CODE,2) "Company",
                    pkgreturncursor.fncgetdescription(IIRS_LOCATION_CODE,2) "Location",
                    pkgreturncursor.fncgetdescription(IIRS_PORTFOLIO,2) "PortFolio",
                    pkgreturncursor.fncgetdescription(IIRS_SUB_PORTFOLIO,2) "SubPortfolio",
                    pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) "CounterParty",
                    pkgreturncursor.fncgetdescription(IIRS_BUSINESSDAY_CONVENSION,2) "BusinessDayConversion",
                    pkgreturncursor.fncgetdescription(IIRS_TENOR_TYPE,2) "TenorType", 
                    pkgreturncursor.fncgetdescription(IIRS_DEAL_TYPE,2) "DealType", 
                    IIRS_TENOR_NUMBER "TenorNumber", IIRS_NOTIONAL_AMOUNT "NotionalAmount",
                    to_char(IIRS_EXECUTE_DATE,'dd-MON-YYYY') "ExecuteDate", to_char(IIRS_START_DATE,'dd-MON-YYYY') "EffectiveDate", 
                    to_char(IIRS_EXPIRY_DATE,'dd-MON-YYYY') "ExpiryDate", IIRS_USER_REMARKS "UserRemarks", IIRS_USER_REFERENCE "UserReference",
                    IIRS_FIXING_CALENDAR "FixingCalendar", IIRS_PAYMENT_CALENDAR "PaymentCalendar", IIRS_DEAL_TYPE "DealTypeCode",
                    IIRS_SUB_PORTFOLIO "SubPortfolioCode", IIRS_PORTFOLIO "PortfolioCode", IIRS_COUNTER_PARTY "CounterPartyCode",
                    IIRS_COMPANY_CODE "CompanyCode", IIRS_LOCATION_CODE "LocationCode", IIRS_BUSINESSDAY_CONVENSION "BusiConvCode",
                    to_char(nvl(SettlementDetails.SettlementDate,IIRS_START_DATE),'dd-MON-YYYY') "InterestPaidTillDate"
             FROM TRTRAN091
             left outer join (select IIRU_IRS_NUMBER IRSNumber,max(IIRU_SETTLEMENT_DATE) SettlementDate 
                                from TRTRAN091G
                                where IIRU_RECORD_STATUS not in (10200005,10200006)
                                group by IIRU_IRS_NUMBER) SettlementDetails
             on IIRS_IRS_NUMBER=SettlementDetails.IRSNumber

             WHERE IIRS_RECORD_STATUS NOT IN (10200005,10200006)
             AND IIRS_IRS_NUMBER NOT IN (SELECT DISTINCT(IIRN_IRS_NUMBER)
                                    FROM TRTRAN091C
                                    WHERE IIRN_RECORD_STATUS NOT IN (10200005,10200006))
             AND IIRS_DEAL_TYPE IN (80800001,80800002,80800003)
             and nvl(IIRS_PROCESS_COMPLETE,12400002) = 12400002
             and IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));  
            goto process_end;
        end if;
    end if;

--ADDED BY SUPRIYA ON 01/06/2020
    if numinfotype = REFGETSWAPDETAILSCCS then
    varOperation := 'Getting IRS and CCS Details';

    varEntity := gconst.fncxmlextract(xmldoc,'Param/EntityName',varentity);

        if  varEntity = 'CCSSETTLEMENT' then
            open genCursor for
           SELECT IIRS_IRS_NUMBER "SystemReference", pkgreturncursor.fncgetdescription(IIRS_COMPANY_CODE,2) "Company",
                    pkgreturncursor.fncgetdescription(IIRS_LOCATION_CODE,2) "Location",
                    pkgreturncursor.fncgetdescription(IIRS_PORTFOLIO,2) "PortFolio",
                    pkgreturncursor.fncgetdescription(IIRS_SUB_PORTFOLIO,2) "SubPortfolio",
                    pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) "CounterParty",
                    pkgreturncursor.fncgetdescription(IIRS_BUSINESSDAY_CONVENSION,2) "BusinessDayConversion",
                    pkgreturncursor.fncgetdescription(IIRS_TENOR_TYPE,2) "TenorType", 
                    pkgreturncursor.fncgetdescription(IIRS_DEAL_TYPE,2) "DealType", 
                    IIRS_TENOR_NUMBER "TenorNumber", --IIRS_NOTIONAL_AMOUNT "NotionalAmount",
                    a.ReceiptAmount "ReceiptNotionalAmount",
                    a.PaymentNotionalAmount "PaymentNotionalAmount",
                    to_char(IIRS_EXECUTE_DATE,'dd-MON-YYYY') "ExecuteDate", to_char(IIRS_START_DATE,'dd-MON-YYYY') "EffectiveDate", 
                    to_char(IIRS_EXPIRY_DATE,'dd-MON-YYYY') "ExpiryDate", IIRS_USER_REMARKS "UserRemarks", IIRS_USER_REFERENCE "UserReference",
                    IIRS_FIXING_CALENDAR "FixingCalendar", IIRS_PAYMENT_CALENDAR "PaymentCalendar", IIRS_DEAL_TYPE "DealTypeCode",
                    IIRS_SUB_PORTFOLIO "SubPortfolioCode", IIRS_PORTFOLIO "PortfolioCode", IIRS_COUNTER_PARTY "CounterPartyCode",
                    IIRS_COMPANY_CODE "CompanyCode", IIRS_LOCATION_CODE "LocationCode", IIRS_BUSINESSDAY_CONVENSION "BusiConvCode"
             FROM TRTRAN091 left outer JOIN (select IIRL_IRS_NUMBER IRSNumber, 
                     sum(case when IIRL_LEG_SERIAL = 1 then IIRL_NOTIONAL_AMOUNT else 0 end) ReceiptAmount,
                     sum(case when IIRL_LEG_SERIAL = 2 then IIRL_NOTIONAL_AMOUNT else 0 end) PaymentNotionalAmount 
                     from trtran091A
                     WHERE IIRL_RECORD_STATUS NOT IN (10200005,10200006)
                     group by IIRL_IRS_NUMBER) a
             ON IIRS_IRS_NUMBER = a.IRSNumber
             WHERE IIRS_RECORD_STATUS NOT IN (10200005,10200006)
             AND IIRS_IRS_NUMBER NOT IN (SELECT DISTINCT(IIRS_IRS_NUMBER)
                                    FROM TRTRAN091B
                                    WHERE IIRS_RECORD_STATUS NOT IN (10200005,10200006))
             AND IIRS_DEAL_TYPE IN (80800004,80800005,80800006)
             and nvl(IIRS_PROCESS_COMPLETE,12400002) = 12400002
             and IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));  
            goto process_end;
        elsif varEntity = 'CCSPRINCIPAL' then
        open genCursor for
           SELECT IIRS_IRS_NUMBER "SystemReference", pkgreturncursor.fncgetdescription(IIRS_COMPANY_CODE,2) "Company",
                    pkgreturncursor.fncgetdescription(IIRS_LOCATION_CODE,2) "Location",
                    pkgreturncursor.fncgetdescription(IIRS_PORTFOLIO,2) "PortFolio",
                    pkgreturncursor.fncgetdescription(IIRS_SUB_PORTFOLIO,2) "SubPortfolio",
                    pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) "CounterParty",
                    pkgreturncursor.fncgetdescription(IIRS_BUSINESSDAY_CONVENSION,2) "BusinessDayConversion",
                    pkgreturncursor.fncgetdescription(IIRS_TENOR_TYPE,2) "TenorType", 
                    pkgreturncursor.fncgetdescription(IIRS_DEAL_TYPE,2) "DealType", 
                    IIRS_TENOR_NUMBER "TenorNumber", --IIRS_NOTIONAL_AMOUNT "NotionalAmount",
                     a.ReceiptAmount "ReceiptNotionalAmount",
    a.PaymentNotionalAmount "PaymentNotionalAmount",
                    to_char(IIRS_EXECUTE_DATE,'dd-MON-YYYY') "ExecuteDate", to_char(IIRS_START_DATE,'dd-MON-YYYY') "EffectiveDate", 
                    to_char(IIRS_EXPIRY_DATE,'dd-MON-YYYY') "ExpiryDate", IIRS_USER_REMARKS "UserRemarks", IIRS_USER_REFERENCE "UserReference",
                    IIRS_FIXING_CALENDAR "FixingCalendar", IIRS_PAYMENT_CALENDAR "PaymentCalendar", IIRS_DEAL_TYPE "DealTypeCode",
                    IIRS_SUB_PORTFOLIO "SubPortfolioCode", IIRS_PORTFOLIO "PortfolioCode", IIRS_COUNTER_PARTY "CounterPartyCode",
                    IIRS_COMPANY_CODE "CompanyCode", IIRS_LOCATION_CODE "LocationCode", IIRS_BUSINESSDAY_CONVENSION "BusiConvCode",
                    nvl(SettlementDetails.SettlementDate,to_char(IIRS_START_DATE,'dd-MON-YYYY')) InterestPaidTillDate
             FROM TRTRAN091
             left outer join (select IIRU_IRS_NUMBER IRSNumber,max(IIRU_SETTLEMENT_DATE) SettlementDate 
                                from TRTRAN091G
                                where IIRU_RECORD_STATUS not in (10200005,10200006)
                                group by IIRU_IRS_NUMBER) SettlementDetails
             on IIRS_IRS_NUMBER=SettlementDetails.IRSNumber
             left outer JOIN (select IIRL_IRS_NUMBER IRSNumber, 
                     sum(case when IIRL_LEG_SERIAL = 1 then IIRL_NOTIONAL_AMOUNT else 0 end) ReceiptAmount,
                     sum(case when IIRL_LEG_SERIAL = 2 then IIRL_NOTIONAL_AMOUNT else 0 end) PaymentNotionalAmount 
                     from trtran091A
                     WHERE IIRL_RECORD_STATUS NOT IN (10200005,10200006)
                     group by IIRL_IRS_NUMBER) a
             ON IIRS_IRS_NUMBER = a.IRSNumber
             WHERE IIRS_RECORD_STATUS NOT IN (10200005,10200006)
             AND IIRS_IRS_NUMBER NOT IN (SELECT DISTINCT(IIRN_IRS_NUMBER)
                                    FROM TRTRAN091C
                                    WHERE IIRN_RECORD_STATUS NOT IN (10200005,10200006))
             AND IIRS_DEAL_TYPE IN (80800004,80800005,80800006)
             and nvl(IIRS_PROCESS_COMPLETE,12400002) = 12400002
               and IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));  
            goto process_end;
        end if;
    end if;

    if numinfotype = REFGETSWAPREFERENCEDETAILS then
    varOperation := 'Getting PARTICULAR IRS and CCS Details';
    varreference := gconst.fncxmlextract(xmldoc,'Param/IrsNumber',varreference);

    varEntity := gconst.fncxmlextract(xmldoc,'Param/EntityName',varentity);

    begin
        numUserActionType:= nvl(gconst.fncxmlextract(xmldoc,'UserActionType',numUserActionType),0);
    exception 
      when others then
        numUserActionType:=101;
    end;

    if varEntity in ('IRSSETTLEMENT','IRSPRINCIPAL') then
    open genCursor for
             SELECT IIRS_IRS_NUMBER "SystemReference", pkgreturncursor.fncgetdescription(IIRS_COMPANY_CODE,2) "Company",
                    pkgreturncursor.fncgetdescription(IIRS_LOCATION_CODE,2) "Location",
                    pkgreturncursor.fncgetdescription(IIRS_PORTFOLIO,2) "PortFolio",
                    pkgreturncursor.fncgetdescription(IIRS_SUB_PORTFOLIO,2) "SubPortfolio",
                    pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) "CounterParty",
                    pkgreturncursor.fncgetdescription(IIRS_BUSINESSDAY_CONVENSION,2) "BusinessDayConversion",
                    pkgreturncursor.fncgetdescription(IIRS_TENOR_TYPE,2) "TenorType", 
                    pkgreturncursor.fncgetdescription(IIRS_DEAL_TYPE,2) "DealType", 
                    IIRS_TENOR_NUMBER "TenorNumber", IIRS_NOTIONAL_AMOUNT "NotionalAmount",
                    to_char(IIRS_EXECUTE_DATE,'dd-MON-YYYY') "ExecuteDate", to_char(IIRS_START_DATE,'dd-MON-YYYY') "EffectiveDate", 
                    to_char(IIRS_EXPIRY_DATE,'dd-MON-YYYY') "ExpiryDate", IIRS_USER_REMARKS "UserRemarks", IIRS_USER_REFERENCE "UserReference",
                    IIRS_FIXING_CALENDAR "FixingCalendar", IIRS_PAYMENT_CALENDAR "PaymentCalendar", IIRS_DEAL_TYPE "DealTypeCode",
                    IIRS_SUB_PORTFOLIO "SubPortfolioCode", IIRS_PORTFOLIO "PortfolioCode", IIRS_COUNTER_PARTY "CounterPartyCode",
                    IIRS_COMPANY_CODE "CompanyCode", IIRS_LOCATION_CODE "LocationCode", IIRS_BUSINESSDAY_CONVENSION "BusiConvCode",
                    --(case when numUserActionType = 101 then 1 else to_number(nvl(IIRL_SERIAL_NUMBER,1)) end) "SerialNumber"
                     1 "SerialNumber",nvl(SettlementDetails.SettlementDate,to_char(IIRS_START_DATE,'dd-MON-YYYY')) InterestPaidTillDate
             FROM TRTRAN091 left outer join TRTRAN091A
             on IIRS_IRS_NUMBER = IIRL_IRS_NUMBER
             left outer join (select IIRU_IRS_NUMBER IRSNumber,max(IIRU_SETTLEMENT_DATE) SettlementDate 
                                from TRTRAN091G
                                where IIRU_RECORD_STATUS not in (10200005,10200006)
                                group by IIRU_IRS_NUMBER) SettlementDetails
             on IIRS_IRS_NUMBER=SettlementDetails.IRSNumber
             WHERE IIRS_RECORD_STATUS NOT IN (10200005,10200006)
             and IIRL_RECORD_STATUS NOT IN (10200005,10200006)
             AND IIRS_DEAL_TYPE IN (80800001,80800002,80800003)
             AND IIRS_IRS_NUMBER = varreference AND IIRL_LEG_SERIAL = 1
               and IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));               
    goto process_end;  
    elsif  varEntity in ('CCSSETTLEMENT','CCSPRINCIPAL') then
        open genCursor for
            SELECT IIRS_IRS_NUMBER "SystemReference", pkgreturncursor.fncgetdescription(IIRS_COMPANY_CODE,2) "Company",
                    pkgreturncursor.fncgetdescription(IIRS_LOCATION_CODE,2) "Location",
                    pkgreturncursor.fncgetdescription(IIRS_PORTFOLIO,2) "PortFolio",
                    pkgreturncursor.fncgetdescription(IIRS_SUB_PORTFOLIO,2) "SubPortfolio",
                    pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) "CounterParty",
                    pkgreturncursor.fncgetdescription(IIRS_BUSINESSDAY_CONVENSION,2) "BusinessDayConversion",
                    pkgreturncursor.fncgetdescription(IIRS_TENOR_TYPE,2) "TenorType", 
                    pkgreturncursor.fncgetdescription(IIRS_DEAL_TYPE,2) "DealType", 
                    IIRS_TENOR_NUMBER "TenorNumber", IIRL_NOTIONAL_AMOUNT "NotionalAmount",
                    to_char(IIRS_EXECUTE_DATE,'dd-MON-YYYY') "ExecuteDate", to_char(IIRS_START_DATE,'dd-MON-YYYY') "EffectiveDate", 
                    to_char(IIRS_EXPIRY_DATE,'dd-MON-YYYY') "ExpiryDate", IIRS_USER_REMARKS "UserRemarks", IIRS_USER_REFERENCE "UserReference",
                    IIRS_FIXING_CALENDAR "FixingCalendar", IIRS_PAYMENT_CALENDAR "PaymentCalendar", IIRS_DEAL_TYPE "DealTypeCode",
                    IIRS_SUB_PORTFOLIO "SubPortfolioCode", IIRS_PORTFOLIO "PortfolioCode", IIRS_COUNTER_PARTY "CounterPartyCode",
                    IIRS_COMPANY_CODE "CompanyCode", IIRS_LOCATION_CODE "LocationCode", IIRS_BUSINESSDAY_CONVENSION "BusiConvCode",
                    --(case when numUserActionType = 101 then 1 else to_number(nvl(IIRL_SERIAL_NUMBER,1)) end) "SerialNumber"
                    1 "SerialNumber",IIRL_CURRENCY_CODE CurrencyCode,IIRL_LEG_SERIAL "LegSerial",
                    (case when IIRL_LEG_SERIAL = 1 then 'Receipt' else 'Payment' end) "Type"
             FROM TRTRAN091 left outer join TRTRAN091A
             on IIRS_IRS_NUMBER = IIRL_IRS_NUMBER
             WHERE IIRS_RECORD_STATUS NOT IN (10200005,10200006)
             and IIRL_RECORD_STATUS NOT IN (10200005,10200006)
             AND IIRS_DEAL_TYPE IN (80800004,80800005,80800006)
             AND IIRS_IRS_NUMBER = varreference --AND IIRL_LEG_SERIAL = 2
             and IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));                                 
        goto process_end;
    end if;
    end if;

    if numinfotype = REFGETSETTLEMENTSCHEDULEDETS then
    varOperation := 'Getting PARTICULAR IRS and CCS Details';

    varreference := gconst.fncxmlextract(xmldoc,'Param/IrsNumber',varreference);
    numcode := gconst.fncxmlextract(xmldoc,'Param/SerialNumber',numcode);

    begin
        numUserActionType:= nvl(gconst.fncxmlextract(xmldoc,'UserActionType',numUserActionType),0);
    exception 
      when others then
        numUserActionType:=101;
    end;
    open GenCursor for
        SELECT IIRS_IRS_NUMBER "IrsNumber", IIRS_SERIAL_NUMBER "SerialNumber", IIRS_RATE_TYPE "RateType",
                IIRS_USER_REMARKS "UserRemarks", IIRS_INT_CHARGE "IntCharge", IIRS_INTEREST_FIXINGTYPE "IntfixingType",
                IIRS_SETTLEMENTFIXING_DAYTYPE "SettlementFixingDayType", IIRS_SETTLEMENT_FREQUENCY "SettlementFrequency",
                IIRS_SETTLEMENT_STARTDATE "StartDate", IIRS_LEG_SERIAL "LegSerial",
                nvl((SELECT max(IIRM_SETTLEMENT_DATE) 
                  FROM TRTRAN091BB
                  WHERE IIRM_IRS_NUMBER = IIRS_IRS_NUMBER 
                  and IIRS_LEG_SERIAL=IIRM_LEG_SERIAL
                  AND IIRM_RECORD_STATUS NOT IN (10200005,10200006)
                  AND IIRM_PROCESS_COMPLETE = 12400001),IIRS_SETTLEMENT_STARTDATE) "SettlementDate",
                  IIRL_CURRENCY_CODE CurrencyCode
         FROM trtran091B inner join trtran091A
         on IIRL_IRS_NUMBER=IIRS_IRS_NUMBER
         and IIRL_LEG_SERIAL=IIRS_LEG_SERIAL
         WHERE IIRS_IRS_NUMBER = varreference
         AND IIRS_SERIAL_NUMBER = numcode
         and iirs_record_Status not in (10200005,10200006)
         and IIRL_RECORD_STATUS not in (10200005,10200006);   
        goto process_end;

--
--        IF numUserActionType = 102 then
--        open genCursor for
--                 SELECT IIRS_IRS_NUMBER "IrsNumber", IIRS_SERIAL_NUMBER "SerialNumber", IIRS_RATE_TYPE "RateType",
--                        IIRS_USER_REMARKS "UserRemarks", IIRS_INT_CHARGE "IntCharge", IIRS_INTEREST_FIXINGTYPE "IntfixingType",
--                        IIRS_SETTLEMENTFIXING_DAYTYPE "SettlementFixingDayType", IIRS_SETTLEMENT_FREQUENCY "SettlementFrequency",
--                        to_char(IIRS_SETTLEMENT_STARTDATE,'dd-MON-YYYY') "StartDate", IIRS_LEG_SERIAL "LegSerial"
--                 FROM trtran091B
--                 WHERE IIRS_IRS_NUMBER = varreference
--                 AND IIRS_SERIAL_NUMBER = numcode;            
--        goto process_end;  
--        else
--            open genCursor for
--                SELECT IIRS_IRS_NUMBER "IrsNumber", IIRS_SERIAL_NUMBER "SerialNumber", IIRS_RATE_TYPE "RateType",
--                       IIRS_USER_REMARKS "UserRemarks", IIRS_INT_CHARGE "IntCharge", IIRS_INTEREST_FIXINGTYPE "IntfixingType",
--                       IIRS_SETTLEMENTFIXING_DAYTYPE "SettlementFixingDayType", IIRS_SETTLEMENT_FREQUENCY "SettlementFrequency",
--                       to_char(IIRS_SETTLEMENT_STARTDATE,'dd-MON-YYYY') "StartDate", IIRS_LEG_SERIAL "LegSerial"
--                FROM trtran091B
--                WHERE IIRS_IRS_NUMBER = varreference
--                AND IIRS_SERIAL_NUMBER = numcode;          
--            goto process_end;
--        end if;
    end if;

    --ADDED BY SUPRIYA ON 02/06/2020
    if numinfotype = REFGETIRSSETTLEMENTDETAILS then
    varOperation := 'Getting IRS and CCS Details';
    varEntity := gconst.fncxmlextract(xmldoc,'Entity',varentity);

    IF varEntity = 'IRSSETTLEMENTMAINTENANCE' then
        open genCursor for
           select rownum "Rownum", IIRM_IRS_NUMBER "SystemReference", IIRM_LEG_SERIAL "LegSerial", 
               m.IIRS_EXECUTE_DATE "ExecuteDate", m.IIRS_EXPIRY_DATE "ExpiryDate", IIRM_SERIAL_NUMBER "SerialNumber",
               to_char(IIRM_INTSTART_DATE,'dd-MON-YYYY') "IntStartDate", to_char(IIRM_INTFIXING_DATE,'dd-MON-YYYY') "IntFixingDate",
               to_char(IIRM_SETTLEMENT_DATE,'dd-MON-YYYY') "SettlementDate", to_char(IIRM_INTEND_DATE,'dd-MON-YYYY') "IntEndDate",          
               IIRL_BASE_RATE "BaseRate",  IIRL_SPREAD "SpreadRate", IIRL_FINAL_RATE "FinalRate",
--               pkgirs.fncIRSOutstanding(IIRM_INTSTART_DATE, IIRM_INTEND_DATE, IIRM_IRS_NUMBER, IIRM_SERIAL_NUMBER) "InterestAmount",
--               0 "OutstandingAmount", 
               pkgirs.fncIRSIntCalcforperiod(IIRM_INTSTART_DATE, IIRM_INTEND_DATE, 
               IIRM_IRS_NUMBER, IIRL_SERIAL_NUMBER,
               nvl(pkgirs.fncIRSGetInterestRate(IIRM_IRS_NUMBER,IIRM_LEG_SERIAL,IIRM_INTSTART_DATE,IIRM_INTEND_DATE,IIRL_INT_TYPE,sysdate,IIRM_LEG_SERIAL),0),
               IIRL_INTEREST_DAYSTYPE) "InterestAmount", 
               --0 "InterestAmount",
               nvl(pkgirs.fncIRSOutstanding(IIRM_INTSTART_DATE, IIRM_INTEND_DATE, IIRM_IRS_NUMBER, IIRL_SERIAL_NUMBER),0) "OutstandingAmount",
               IIRS_NOTIONAL_AMOUNT "NotionalAmount",
               pkgreturncursor.fncgetdescription(m.IIRS_COMPANY_CODE,1) "Company",
               pkgreturncursor.fncgetdescription(m.IIRS_LOCATION_CODE,1) "Location",
               pkgreturncursor.fncgetdescription(m.IIRS_PORTFOLIO,1) "PortFolio",
               pkgreturncursor.fncgetdescription(m.IIRS_SUB_PORTFOLIO,1) "SubPortfolio",
               pkgreturncursor.fncgetdescription(m.IIRS_COUNTER_PARTY,2) "CounterParty",       
               pkgreturncursor.fncgetdescription(s.IIRS_INTEREST_FIXINGTYPE,2) "FixingType", 
               pkgreturncursor.fncgetdescription(s.IIRS_SETTLEMENT_FREQUENCY,1) "SetttlementFrequency",
               pkgreturncursor.fncgetdescription(m.IIRS_SETTLEMENT_TYPE,1) "SettlementType", 
               pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) "BuySell",
               pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
               pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,1) "IntType",
               pkgreturncursor.fncgetdescription(s.IIRS_INT_CHARGE,1) "IntCharge",  
               m.IIRS_USER_REFERENCE "UserReference", m.IIRS_USER_REMARKS "UserRemarks",
               m.IIRS_COMPANY_CODE "CompanyCode", m.IIRS_LOCATION_CODE "LocationCode", s.IIRS_INT_CHARGE "IntChargeCode",
               m.IIRS_SUB_PORTFOLIO "SubPortfolioCode", m.IIRS_PORTFOLIO "PortfolioCode",
               m.IIRS_COUNTER_PARTY "CounterPartyCode", m.IIRS_UNDERLYING_EXPOSURE "UnderlyingExposure",
               IIRL_BUY_SELL "BuySellCode", IIRL_CURRENCY_CODE "CurrencyCode", IIRL_INT_TYPE "IntTypeCode",
               m.IIRS_SETTLEMENT_TYPE "SettlementTypeCode"
            from trtran091B S inner join trtran091BB
            on IIRS_IRS_NUMBER=IIRM_IRS_NUMBER
            and IIRS_LEG_SERIAL=IIRM_LEG_SERIAL
            inner join trtran091A
            on IIRL_IRS_NUMBER =IIRS_IRS_NUMBER
             and IIRL_LEG_SERIAL = IIRM_LEG_SERIAL
            and IIRL_Record_status not in (10200005,10200006)
            inner join trtran091 M
            on IIRL_IRS_NUMBER= M.iiRS_IRS_NUMBER
            where S.IIRS_RECORD_STATUS not in (10200005,10200006)
            and iiRM_record_status not in (10200005,10200006)
            and M.IIRS_RECORD_STATUS not in (10200005,10200006)
            AND M.IIRS_DEAL_TYPE IN (80800001,80800002,80800003)
            and IIRM_SERIAL_NUMBER NOT IN (SELECT IIRU_LEG1_SUBSERIAL 
                                            FROM TRTRAN091G
                                            WHERE IIRU_IRS_NUMBER = M.iiRS_IRS_NUMBER
                                            AND IIRU_RECORD_STATUS not in (10200005,10200006))
            and IIRM_SERIAL_NUMBER NOT IN (SELECT IIRU_LEG2_SUBSERIAL 
                                            FROM TRTRAN091G
                                            WHERE IIRU_IRS_NUMBER = M.iiRS_IRS_NUMBER
                                            AND IIRU_RECORD_STATUS not in (10200005,10200006))
            and nvl(IIRM_PROCESS_COMPLETE,12400002) != (12400001)
               and M.IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and M.IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            order by IIRM_IRS_NUMBER,IIRM_SETTLEMENT_DATE,IIRM_LEG_SERIAL; 
        goto process_end;        
    else
        open genCursor for
           select rownum "Rownum", IIRM_IRS_NUMBER "SystemReference", IIRM_LEG_SERIAL "LegSerial", 
               m.IIRS_EXECUTE_DATE "ExecuteDate", m.IIRS_EXPIRY_DATE "ExpiryDate", IIRM_SERIAL_NUMBER "SerialNumber",
               to_char(IIRM_INTSTART_DATE,'dd-MON-YYYY') "IntStartDate", to_char(IIRM_INTFIXING_DATE,'dd-MON-YYYY') "IntFixingDate",
               to_char(IIRM_SETTLEMENT_DATE,'dd-MON-YYYY') "SettlementDate", to_char(IIRM_INTEND_DATE,'dd-MON-YYYY') "IntEndDate",          
               IIRL_BASE_RATE "BaseRate",  IIRL_SPREAD "SpreadRate", IIRL_FINAL_RATE "FinalRate",
--               0 "InterestAmount",
--               nvl(IIRM_AMOUNT_FCY,0) "OutstandingAmount", 
               pkgirs.fncIRSIntCalcforperiod(IIRM_INTSTART_DATE, IIRM_INTEND_DATE, 
               IIRM_IRS_NUMBER, IIRL_SERIAL_NUMBER,
               nvl(pkgirs.fncIRSGetInterestRate(IIRM_IRS_NUMBER,IIRM_LEG_SERIAL,IIRM_INTSTART_DATE,IIRM_INTEND_DATE,IIRL_INT_TYPE,sysdate,IIRM_LEG_SERIAL),0),
               IIRL_INTEREST_DAYSTYPE,IIRL_LEG_SERIAL) "InterestAmount", 
               --0 "InterestAmount",
               nvl(pkgirs.fncIRSOutstanding(IIRM_INTSTART_DATE, IIRM_INTEND_DATE, IIRM_IRS_NUMBER, IIRL_SERIAL_NUMBER,IIRL_LEG_SERIAL),0) "OutstandingAmount", 
               IIRL_NOTIONAL_AMOUNT "NotionalAmount",
                pkgreturncursor.fncgetdescription(m.IIRS_COMPANY_CODE,1) "Company",
               pkgreturncursor.fncgetdescription(m.IIRS_LOCATION_CODE,1) "Location",
               pkgreturncursor.fncgetdescription(m.IIRS_PORTFOLIO,1) "PortFolio",
               pkgreturncursor.fncgetdescription(m.IIRS_SUB_PORTFOLIO,1) "SubPortfolio",
               pkgreturncursor.fncgetdescription(m.IIRS_COUNTER_PARTY,2) "CounterParty",       
               pkgreturncursor.fncgetdescription(s.IIRS_INTEREST_FIXINGTYPE,2) "FixingType", 
               pkgreturncursor.fncgetdescription(s.IIRS_SETTLEMENT_FREQUENCY,1) "SetttlementFrequency",
           pkgreturncursor.fncgetdescription(m.IIRS_SETTLEMENT_TYPE,1) "SettlementType", 
               pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) "BuySell",
               pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
               pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,1) "IntType",
               pkgreturncursor.fncgetdescription(s.IIRS_INT_CHARGE,1) "IntCharge", 
               m.IIRS_USER_REFERENCE "UserReference", m.IIRS_USER_REMARKS "UserRemarks",
               m.IIRS_COMPANY_CODE "CompanyCode", m.IIRS_LOCATION_CODE "LocationCode", s.IIRS_INT_CHARGE "IntChargeCode",
               m.IIRS_SUB_PORTFOLIO "SubPortfolioCode", m.IIRS_PORTFOLIO "PortfolioCode",
               m.IIRS_COUNTER_PARTY "CounterPartyCode", m.IIRS_UNDERLYING_EXPOSURE "UnderlyingExposure",
               IIRL_BUY_SELL "BuySellCode", IIRL_CURRENCY_CODE "CurrencyCode", IIRL_INT_TYPE "IntTypeCode",
                m.IIRS_SETTLEMENT_TYPE "SettlementTypeCode"
            from trtran091B S inner join trtran091BB
            on IIRS_IRS_NUMBER=IIRM_IRS_NUMBER
            and IIRS_LEG_SERIAL=IIRM_LEG_SERIAL
            inner join trtran091A
            on IIRL_IRS_NUMBER =IIRS_IRS_NUMBER
             and IIRL_LEG_SERIAL = IIRM_LEG_SERIAL
            and IIRL_Record_status not in (10200005,10200006)
            inner join trtran091 M
            on IIRL_IRS_NUMBER= M.iiRS_IRS_NUMBER
            where S.IIRS_RECORD_STATUS not in (10200005,10200006)
            and iiRM_record_status not in (10200005,10200006)
            and M.IIRS_RECORD_STATUS not in (10200005,10200006)
            AND M.IIRS_DEAL_TYPE IN (80800004,80800005,80800006)
            and IIRM_SERIAL_NUMBER NOT IN (SELECT IIRU_LEG1_SUBSERIAL 
                                            FROM TRTRAN091G
                                            WHERE IIRU_IRS_NUMBER = M.iiRS_IRS_NUMBER
                                            AND IIRU_RECORD_STATUS not in (10200005,10200006))
            and IIRM_SERIAL_NUMBER NOT IN (SELECT IIRU_LEG2_SUBSERIAL 
                                            FROM TRTRAN091G
                                            WHERE IIRU_IRS_NUMBER = M.iiRS_IRS_NUMBER
                                            AND IIRU_RECORD_STATUS not in (10200005,10200006))
            and nvl(IIRM_PROCESS_COMPLETE,12400002) != (12400001)
             and M.IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and M.IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            order by IIRM_IRS_NUMBER,IIRM_SETTLEMENT_DATE,IIRM_LEG_SERIAL; 
        goto process_end;
    end if;
    end if;

    if numinfotype = REFGETIRSREFERENCESETTLEMENT then
    varOperation := 'Getting IRS and CCS Details';
   varEntity := gconst.fncxmlextract(xmldoc,'Entity',varentity);
    varreference := gconst.fncxmlextract(xmldoc,'Param/IrsNumber',varreference);
    numcode1 := gconst.fncxmlextract(xmldoc,'Param/Leg1Serial',numcode1);
    --numcode := gconst.fncxmlextract(xmldoc,'Param/SettlementType',numcode);
    dattemp := gconst.fncxmlextract(xmldoc,'Param/SettlementDate',dattemp);

    SELECT IIRS_SETTLEMENT_TYPE INTO numcode
    FROM TRTRAN091
    WHERE IIRS_IRS_NUMBER =varreference
    AND IIRS_RECORD_STATUS not in (10200005,10200006);

        if numcode = 81600002 then
        open genCursor for
           select rownum "Rownum", IIRM_IRS_NUMBER "SystemReference", IIRM_LEG_SERIAL "LegSerial", IIRM_SERIAL_NUMBER "SerialNumber",
               to_char(IIRM_INTSTART_DATE,'dd-MON-YYYY') "IntStartDate", to_char(IIRM_INTFIXING_DATE,'dd-MON-YYYY') "IntFixingDate",
               to_char(IIRM_SETTLEMENT_DATE,'dd-MON-YYYY') "SettlementDate", to_char(IIRM_INTEND_DATE,'dd-MON-YYYY') "IntEndDate",    
               IIRL_BASE_RATE "BaseRate",  IIRL_SPREAD "SpreadRate", IIRL_FINAL_RATE "FinalRate",               
               pkgirs.fncIRSIntCalcforperiod(IIRM_INTSTART_DATE, IIRM_INTEND_DATE, 
               IIRM_IRS_NUMBER, IIRL_SERIAL_NUMBER,
               nvl(pkgirs.fncIRSGetInterestRate(IIRM_IRS_NUMBER,IIRM_LEG_SERIAL,IIRM_INTSTART_DATE,IIRM_INTEND_DATE,IIRL_INT_TYPE,sysdate,IIRM_LEG_SERIAL),0),
               IIRL_INTEREST_DAYSTYPE) "InterestAmount", 
               --0 "InterestAmount",
               nvl(pkgirs.fncIRSOutstanding(IIRM_INTSTART_DATE, IIRM_INTEND_DATE, IIRM_IRS_NUMBER, IIRL_SERIAL_NUMBER),0) "OutstandingAmount",
               case when varEntity = 'IRSSETTLEMENTMAINTENANCE' then IIRS_NOTIONAL_AMOUNT else IIRL_NOTIONAL_AMOUNT end "NotionalAmount",
               pkgreturncursor.fncgetdescription(m.IIRS_COMPANY_CODE,2) "Company",
               pkgreturncursor.fncgetdescription(m.IIRS_LOCATION_CODE,2) "Location",
               pkgreturncursor.fncgetdescription(m.IIRS_PORTFOLIO,2) "PortFolio",
               pkgreturncursor.fncgetdescription(m.IIRS_SUB_PORTFOLIO,2) "SubPortfolio",
               pkgreturncursor.fncgetdescription(m.IIRS_COUNTER_PARTY,2) "CounterParty",       
               m.IIRS_EXECUTE_DATE "ExecuteDate", m.IIRS_EXPIRY_DATE "ExpiryDate", 
               pkgreturncursor.fncgetdescription(s.IIRS_INTEREST_FIXINGTYPE,2) "FixingType", 
               pkgreturncursor.fncgetdescription(m.IIRS_SETTLEMENT_TYPE,2) "SettlementType", 
               pkgreturncursor.fncgetdescription(s.IIRS_SETTLEMENT_FREQUENCY,2) "SetttlementFrequency",
               pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) "BuySell",
               pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
               pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) "IntType",           
               pkgreturncursor.fncgetdescription(s.IIRS_INT_CHARGE,2) "IntCharge",s.IIRS_INT_CHARGE "IntCharge",           
               m.IIRS_USER_REFERENCE "UserReference", m.IIRS_USER_REMARKS "UserRemarks",
               m.IIRS_COMPANY_CODE "CompanyCode", m.IIRS_LOCATION_CODE "LocationCode", 
               m.IIRS_SUB_PORTFOLIO "SubPortfolioCode", m.IIRS_PORTFOLIO "PortfolioCode",
               m.IIRS_COUNTER_PARTY "CounterPartyCode", m.IIRS_UNDERLYING_EXPOSURE "UnderlyingExposure",
               IIRL_BUY_SELL "BuySellCode", IIRL_CURRENCY_CODE "CurrencyCode", IIRL_INT_TYPE "IntTypeCode",
               m.IIRS_SETTLEMENT_TYPE "SettlementTypeCode",
               (select to_number(nvl(COMP_FUNCTIONAL_CURRENCY,0)) from TRMASTER301
               WHERE COMP_COMPANY_CODE = m.IIRS_COMPANY_CODE AND COMP_RECORD_STATUS NOT IN (10200005,10200006)) "FunctionalCurrency"
            from trtran091B S inner join trtran091BB
            on IIRS_IRS_NUMBER=IIRM_IRS_NUMBER
            and IIRS_LEG_SERIAL=IIRM_LEG_SERIAL
            inner join trtran091A
            on IIRL_IRS_NUMBER =IIRS_IRS_NUMBER
            and IIRL_LEG_SERIAL = IIRM_LEG_SERIAL
            and IIRL_Record_status not in (10200005,10200006)
            inner join trtran091 M
            on IIRL_IRS_NUMBER= M.iiRS_IRS_NUMBER
            where S.IIRS_RECORD_STATUS not in (10200005,10200006)
            and iiRM_record_status not in (10200005,10200006)
            and M.IIRS_RECORD_STATUS not in (10200005,10200006)
            and s.IIRS_IRS_NUMBER = varreference
            and IIRM_SETTLEMENT_DATE = dattemp
            and IIRM_LEG_SERIAL = numcode1
            and M.IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and M.IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));           
        goto process_end;
        else
        open genCursor for
            select rownum "Rownum", IIRM_IRS_NUMBER "SystemReference", IIRM_LEG_SERIAL "LegSerial", IIRM_SERIAL_NUMBER "SerialNumber",
               to_char(IIRM_INTSTART_DATE,'dd-MON-YYYY') "IntStartDate", to_char(IIRM_INTFIXING_DATE,'dd-MON-YYYY') "IntFixingDate",
               to_char(IIRM_SETTLEMENT_DATE,'dd-MON-YYYY') "SettlementDate", to_char(IIRM_INTEND_DATE,'dd-MON-YYYY') "IntEndDate",    
               IIRL_BASE_RATE "BaseRate",  IIRL_SPREAD "SpreadRate", IIRL_FINAL_RATE "FinalRate",
               pkgirs.fncIRSIntCalcforperiod(IIRM_INTSTART_DATE, IIRM_INTEND_DATE, 
               IIRM_IRS_NUMBER, IIRL_SERIAL_NUMBER,
               nvl(pkgirs.fncIRSGetInterestRate(IIRM_IRS_NUMBER,IIRM_LEG_SERIAL,IIRM_INTSTART_DATE,IIRM_INTEND_DATE,IIRL_INT_TYPE,sysdate,IIRM_LEG_SERIAL),0),
               IIRL_INTEREST_DAYSTYPE) "InterestAmount", 
               --0 "InterestAmount",
               nvl(pkgirs.fncIRSOutstanding(IIRM_INTSTART_DATE, IIRM_INTEND_DATE, IIRM_IRS_NUMBER, IIRL_SERIAL_NUMBER),0) "OutstandingAmount", 
               case when varEntity = 'IRSSETTLEMENTMAINTENANCE' then IIRS_NOTIONAL_AMOUNT else IIRL_NOTIONAL_AMOUNT end "NotionalAmount",
               pkgreturncursor.fncgetdescription(m.IIRS_COMPANY_CODE,2) "Company",
               pkgreturncursor.fncgetdescription(m.IIRS_LOCATION_CODE,2) "Location",
               pkgreturncursor.fncgetdescription(m.IIRS_PORTFOLIO,2) "PortFolio",
               pkgreturncursor.fncgetdescription(m.IIRS_SUB_PORTFOLIO,2) "SubPortfolio",
               pkgreturncursor.fncgetdescription(m.IIRS_COUNTER_PARTY,2) "CounterParty",       
               m.IIRS_EXECUTE_DATE "ExecuteDate", m.IIRS_EXPIRY_DATE "ExpiryDate", 
               pkgreturncursor.fncgetdescription(s.IIRS_INTEREST_FIXINGTYPE,2) "FixingType", 
               pkgreturncursor.fncgetdescription(m.IIRS_SETTLEMENT_TYPE,2) "SettlementType", 
               pkgreturncursor.fncgetdescription(s.IIRS_SETTLEMENT_FREQUENCY,2) "SetttlementFrequency",
               pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) "BuySell",
               pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
               pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) "IntType",           
               pkgreturncursor.fncgetdescription(s.IIRS_INT_CHARGE,2) "IntCharge",s.IIRS_INT_CHARGE "IntCharge",           
               m.IIRS_USER_REFERENCE "UserReference", m.IIRS_USER_REMARKS "UserRemarks",
               m.IIRS_COMPANY_CODE "CompanyCode", m.IIRS_LOCATION_CODE "LocationCode", 
               m.IIRS_SUB_PORTFOLIO "SubPortfolioCode", m.IIRS_PORTFOLIO "PortfolioCode",
               m.IIRS_COUNTER_PARTY "CounterPartyCode", m.IIRS_UNDERLYING_EXPOSURE "UnderlyingExposure",
               IIRL_BUY_SELL "BuySellCode", IIRL_CURRENCY_CODE "CurrencyCode", IIRL_INT_TYPE "IntTypeCode",
               m.IIRS_SETTLEMENT_TYPE "SettlementTypeCode",
              (select to_number(nvl(COMP_FUNCTIONAL_CURRENCY,0)) from TRMASTER301
               WHERE COMP_COMPANY_CODE = m.IIRS_COMPANY_CODE AND COMP_RECORD_STATUS NOT IN (10200005,10200006)) "FunctionalCurrency"
            from trtran091B S inner join trtran091BB
            on IIRS_IRS_NUMBER=IIRM_IRS_NUMBER
            and IIRS_LEG_SERIAL=IIRM_LEG_SERIAL
            inner join trtran091A
            on IIRL_IRS_NUMBER =IIRS_IRS_NUMBER
            and IIRL_LEG_SERIAL = IIRM_LEG_SERIAL
            and IIRL_Record_status not in (10200005,10200006)
            inner join trtran091 M
            on IIRL_IRS_NUMBER= M.iiRS_IRS_NUMBER
            where S.IIRS_RECORD_STATUS not in (10200005,10200006)
            and iiRM_record_status not in (10200005,10200006)
            and M.IIRS_RECORD_STATUS not in (10200005,10200006)
            and s.IIRS_IRS_NUMBER = varreference
            and IIRM_SETTLEMENT_DATE = dattemp
            and M.IIRS_COMPANY_CODE in( select usco_company_code from trsystem022a
                    where UPPER(usco_user_id) = varUserid
              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
              and M.IIRS_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
        goto process_end;
        end if;
    end if;

    --ADDED BY SUPRIYA ON 03/06/2020
   if numinfotype = refIRSHolidayList then
   varOperation := 'Getting IRS and CCS Holiday List';

   varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'Param/FixingCalendar',VARTEMP);
   varTemp1 := GCONST.FNCXMLEXTRACT(XMLDOC,'Param/PaymentCalendar',VarTemp1);
   datTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'Param/ExecuteDate',DatTemp);
   datTemp1 := GCONST.FNCXMLEXTRACT(XMLDOC,'Param/ExpiryDate',DatTemp1);
   VarTemp2 := GCONST.FNCXMLEXTRACT(XMLDOC,'Param/Fixing_Payment',VarTemp2);

      if VarTemp2 ='Fixing' then  
           open gencursor for 
                SELECT Hday_location_code "LocationCode", Hday_calendar_date "CalendarDate",
                       hday_day_status "DayStatus"
                FROM trsystem001 WHERE 
                instr(varTemp,hday_location_code)>0
                and hday_calendar_date between DatTemp and DatTemp1
                and hday_record_Status not in (10200006)
                and hday_day_status in (26400007,26400008,26400009)
                and HDAY_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
          else
               open gencursor for 
                SELECT Hday_location_code "LocationCode", Hday_calendar_date "CalendarDate",
                       hday_day_status "DayStatus"
                FROM trsystem001 WHERE 
                instr(varTemp1,hday_location_code)>0
                and hday_calendar_date between DatTemp and DatTemp1
                and hday_record_Status not in (10200006)
                and hday_day_status in (26400007,26400008,26400009)
                  and HDAY_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                           where UPPER(USLO_USER_ID) = varUserid
                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
      end if;
  goto process_end;  
    end if;

  --ADDED BY SUPRIYA ON 14/09/2020
    if numinfotype = REFGETFUNDREQUIREMENTDETAILS then
    varOperation := 'Getting  FUND REQUIRED DETAILS';
    DatTemp := gconst.fncxmlextract(xmldoc, 'AsonDate', DatTemp);
    numcode := gconst.fncxmlextract(xmldoc, 'Param/CompanyCode', numcode);
    numcode1 := gconst.fncxmlextract(xmldoc, 'Param/LocationCode', numcode1);
    numcode2 := gconst.fncxmlextract(xmldoc, 'Param/CurrencyCode', numcode2);

     open genCursor for
     select rownum "Rownum", pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank",
                    pkgreturncursor.fncgetdescription(BRNH_PICK_CODE,2) "Branch",
                     pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,2) "AccountTypeName",
                     pkgreturncursor.fncgetdescription(nvl(ACCT_CONCENTRATION_ACCOUNT,12400002),1) "ConcentrationAcc",
                     pkgreturncursor.fncgetdescription(LBBL_COMPANY_CODE,2) "Company",
                    pkgreturncursor.fncgetdescription(LBBL_LOCATION_CODE,2) "Location",
                     pkgreturncursor.fncgetdescription(LBBL_CURRENCY_CODE,2) "Currency",
                     ACCT_ACCOUNT_NUMBER "AccountNumber",
                     LBBL_TIME_STAMP  "TimeStamp",
                     nvl(LBBL_ACCOUNT_BALANCE,0) "AccountBalance",  
                     nvl(brnh_minimum_balance,0) "MinimumBalance",
                     nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
                     nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance",
                     nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked", 
                     --nvl(LBBL_AMOUNT_AVALIBLE,0) "AmountAvailable",
                     nvl(AmountFCY,0) "AmountFCY", nvl(ExchangeRate,0)"ExchangeRate",
                     nvl(AmountLCY,0) "ProposedReqAmount",nvl(AmountLCY,0) "OverrideReqAmount",
                     nvl(LBBL_PLANNINGBOOK_BALANCE,0)-nvl(AmountLCY,0) "AmountAvailableForTransfer",
                     LBBL_ASON_DATE "AsonDate", ACCT_ACCOUNT_TYPE "AccountType",
                     ACCT_CONCENTRATION_ACCOUNT "ConcentrationAccount", BRNH_CURRENCY_CODE "CurrencyCode",
                     (case when nvl(LBBL_ACCOUNT_NUMBER,'0') = '0' then 1 else 2 end) "RecordStatus",
                     nvl(LBBL_SERIAL_NUMBER,0) "SerialNumber",
                     LBBL_COMPANY_CODE "CompanyCode", LBBL_LOCATION_CODE "LocationCode", LBBL_CURRENCY_CODE "CurrencyCode"
              from trmaster306b inner join trmaster306a
              on BRNH_PICK_CODE = ACCT_BRANCH_CODE
              and ACCT_RECORD_STATUS not in (10200005,10200006)
              -- Added By Manjunath Reddy to Check the status 
              and ACCT_ACCOUNT_STATUS=14400001
              left outer join trtran151
                      on ACCT_ACCOUNT_NUMBER=LBBL_ACCOUNT_NUMBER
                      left outer join
                      (select (case when nvl(AccountNumber,'0') != '0' then AccountNumber 
                        else nvl((Select  ACCT_ACCOUNT_NUMBER from trmaster306b
                        where ACCT_CONCENTRATION_ACCOUNT = 12400001
                         and ACCT_ACCOUNT_STATUS=14400001
                         and ACCT_RECORD_STATUS not in (10200005,10200006)
                        and rownum =1),(Select  ACCT_ACCOUNT_NUMBER 
                         from trmaster306b
                         where rownum =1
                         and ACCT_ACCOUNT_STATUS=14400001
                         and ACCT_RECORD_STATUS not in (10200005,10200006))) end) AccountNumber , 
                        sum(AmountFCY) AmountFCY, sum(AmountLCY) AmountLCY,
                       round(sum(AmountLCY)/sum(AmountFCY),2) ExchangeRate
                       from (select CBUD_CASHFLOW_CODE, casp_account_number AccountNumber,
                                    pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                                    sum(cbud_amount_fcy) AmountFCY,
                                    round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                                    sum(cbud_amount_lcy) AmountLCY,12400002 BudgetEditable
                               from trtran150A inner join trtran150
                                 on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                                 left outer join trmaster150A
                                    on cbud_cashflow_code = CASP_CASM_CODE
                                    and CASP_Record_status not in (10200005,10200006)
                               where cbud_record_status not in (10200005,10200006)
                               and cbus_record_status not in (10200005,10200006)
                               and CBUD_DUE_DATE=DatTemp
                               and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
                               group by CBUD_CASHFLOW_CODE, casp_account_number,
                                Cbud_currency_code
                           union all
                            select CBUD_CASHFLOW_CODE, casp_account_number AccountNumber,
                                      pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                                     sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                                      sum(cbud_amount_lcy) AmountLCY,nvl(CONF_BUDGET_EDITABLE,12400002) BudgetEditable
                               from trtran150A inner join trtran150
                                 on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                                 left outer join trmaster150A
                                    on cbud_cashflow_code = CASP_CASM_CODE
                                    and CASP_Record_status not in (10200005,10200006)
                                 left outer join trmaster150B
                                   on CBUD_CASHFLOW_CODE=CONF_CASM_CODE
                                   and CONF_RECORD_STATUS not in (10200005,10200006)
                               where cbud_record_status not in (10200005,10200006)
                               and cbus_record_status not in (10200005,10200006)
                               and CBUD_DUE_DATE=DatTemp
                               and CBUS_CASHFLOW_TYPE=17400001 -- Budget
                               and CONF_BUDGET_CONSIDER=12400001  
                               group by CBUD_CASHFLOW_CODE, casp_account_number,
                                Cbud_currency_code,CONF_BUDGET_EDITABLE)
                                group by AccountNumber)
                        on ACCT_ACCOUNT_NUMBER=AccountNumber
                        WHERE LBBL_ASON_DATE =DatTemp and BRNH_RECORD_STATUS not in (10200005,10200006)
                        and LBBL_RECORD_STATUS not in (10200005,10200006)
                     and LBBL_COMPANY_CODE = numcode
                      and LBBL_LOCATION_CODE = numcode1 
                      and LBBL_CURRENCY_CODE = numcode2
                       and BRNH_COMPANY_CODE in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid
                              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
                       and BRNH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
                    and LBBL_COMPANY_CODE in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid
                                AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
                                  and LBBL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                                   where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)); --AND nvl(LBBL_ACCOUNT_BALANCE,0) > 0;
--      select rownum "Rownum", pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank",
--                     pkgreturncursor.fncgetdescription(BRNH_ACCOUNT_TYPE,2) "AccountTypeName",
--                     pkgreturncursor.fncgetdescription(nvl(BRNH_CONCENTRATION_ACCOUNTS,12400002),1) "ConcentrationAcc",
--                     pkgreturncursor.fncgetdescription(BRNH_CURRENCY_CODE,2) "Currency",
--                     BRNH_ACCOUNT_NUMBER "AccountNumber",
--                     (case when LBBL_ASON_DATE != null then (LBBL_ASON_DATE || ' Time ' || LBBL_ASON_TIME) else 
--                     (RSTM_ASON_DATE || ' Time ' || RSTM_ASON_TIME) end) "StatementDateTime",
--                     (case when nvl(LBBL_ACCOUNT_BALANCE,0) != 0 THEN LBBL_ACCOUNT_BALANCE else nvl(BalanceAmount,0) end )"AccountBalance",  
--                     nvl(brnh_minimum_balance,0) "MinimumBalance",
--                     nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
--                     nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance",
--                     nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked", 
--                     --nvl(LBBL_AMOUNT_AVALIBLE,0) "AmountAvailable",
--                     nvl(AmountFCY,0) "AmountFCY", nvl(ExchangeRate,0)"ExchangeRate",
--                     nvl(AmountLCY,0) "ProposedReqAmount",nvl(AmountLCY,0) "OverrideReqAmount",
--                     nvl(LBBL_PLANNINGBOOK_BALANCE,0)-nvl(AmountLCY,0) "AmountAvailableForTransfer",
--                     RSTM_ASON_DATE "AsonDate", BRNH_ACCOUNT_TYPE "AccountType",
--                     BRNH_CONCENTRATION_ACCOUNTS "ConcentrationAccount", BRNH_CURRENCY_CODE "CurrencyCode",
--                     (case when nvl(LBBL_ACCOUNT_NUMBER,0) = 0 then 1 else 2 end) "RecordStatus",
--                     (case when nvl(LBBL_ACCOUNT_NUMBER,0) = 0 then 1 else LBBL_SERIAL_NUMBER end) "SerialNumber"
--              from trmaster306A left outer join
--                                (select RSTM_ACCOUNT_NUMBER ,sum(RSTM_BALANCE_AMOUNT) BalanceAmount,
--                                        RSTM_ASON_DATE, RSTM_ASON_TIME
--                                 from trtran008AA
--                                 where RSTM_ASON_DATE=DatTemp
--                                 and RSTM_RECORD_STATUS not in (10200005,10200006)
--                                 group by RSTM_ACCOUNT_NUMBER,RSTM_ASON_DATE,RSTM_ASON_TIME )
--                                 on BRNH_ACCOUNT_NUMBER=RSTM_ACCOUNT_NUMBER
--                      left outer join (select * from trtran151
--                                     where LBBL_RECORD_STATUS not in (10200005,10200006)
--                                     and LBBL_ASON_DATE =DatTemp)
----                                     and LBBL_reference_number= (select max(LBBL_reference_number)
----                                       from trtran151 
----                                       where LBBL_RECORD_STATUS not in (10200005,10200006)
----                                       and LBBL_ASON_DATE =DatTemp))
--                      on BRNH_ACCOUNT_NUMBER=LBBL_ACCOUNT_NUMBER
--                      left outer join
--                      (select AccountNumber , sum(AmountFCY) AmountFCY, sum(AmountLCY) AmountLCY,
--                       round(sum(AmountLCY)/sum(AmountFCY),2) ExchangeRate
--                       from (select CBUD_CASHFLOW_CODE, casp_account_number AccountNumber,
--                                    pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                                    sum(cbud_amount_fcy) AmountFCY,
--                                    round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                                    sum(cbud_amount_lcy) AmountLCY,12400002 BudgetEditable
--                               from trtran150A inner join trtran150
--                                 on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                                 left outer join trmaster150A
--                                    on cbud_cashflow_code = CASP_CASM_CODE
--                                    and CASP_Record_status not in (10200005,10200006)
--                               where cbud_record_status not in (10200005,10200006)
--                               and cbus_record_status not in (10200005,10200006)
--                               and CBUD_DUE_DATE=DatTemp
--                               and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
--                               group by CBUD_CASHFLOW_CODE, casp_account_number,
--                                Cbud_currency_code
--                           minus
--                            select CBUD_CASHFLOW_CODE, casp_account_number AccountNumber,
--                                      pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                                     sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                                      sum(cbud_amount_lcy) AmountLCY,nvl(CONF_BUDGET_EDITABLE,12400002) BudgetEditable
--                               from trtran150A inner join trtran150
--                                 on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                                 left outer join trmaster150A
--                                    on cbud_cashflow_code = CASP_CASM_CODE
--                                    and CASP_Record_status not in (10200005,10200006)
--                                 left outer join trmaster150B
--                                   on CBUD_CASHFLOW_CODE=CONF_CASM_CODE
--                                   and CONF_RECORD_STATUS not in (10200005,10200006)
--                               where cbud_record_status not in (10200005,10200006)
--                               and cbus_record_status not in (10200005,10200006)
--                               and CBUD_DUE_DATE=DatTemp
--                               and CBUS_CASHFLOW_TYPE=17400001 -- Budget
--                               and CONF_BUDGET_CONSIDER=12400001
--                               group by CBUD_CASHFLOW_CODE, casp_account_number,
--                                Cbud_currency_code,CONF_BUDGET_EDITABLE)
--                                group by AccountNumber)
--                        on BRNH_ACCOUNT_NUMBER=AccountNumber;
--              select rownum "Rownum", pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank", 
--                     pkgreturncursor.fncgetdescription(BRNH_ACCOUNT_TYPE,2) "AccountTypeName",
--                     BRNH_ACCOUNT_NUMBER "AccountNumber",RSTM_ASON_DATE || ' Time ' || RSTM_ASON_TIME "StatementDateTime",
--                     nvl(RSTM_BALANCE_AMOUNT,0) "AccountBalance", nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
--                     nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance",
--                     nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked", nvl(LBBL_AMOUNT_AVALIBLE,0) "AmountAvaialable",
--                     RSTM_ASON_DATE "AsonDate", BRNH_ACCOUNT_TYPE "AccountType", 
--                     (case when nvl(LBBL_ACCOUNT_BALANCE,0) = 0 then 1 else 2 end) "RecordStatus"
--              from trmaster306A left outer join 
--                                (select RSTM_ACCOUNT_NUMBER ,RSTM_BALANCE_AMOUNT,
--                                        RSTM_ASON_DATE, RSTM_ASON_TIME
--                                 from trtran008AA
--                                 where RSTM_ASON_DATE=DatTemp
--                                 and RSTM_RECORD_STATUS not in (10200005,10200006))
--                                 on BRNH_ACCOUNT_NUMBER=RSTM_ACCOUNT_NUMBER
--                                    left outer join (select * from trtran151 
--                                                     where LBBL_RECORD_STATUS not in (10200005,10200006)
--                                                     and LBBL_ASON_DATE =DatTemp)
--              on BRNH_ACCOUNT_NUMBER=LBBL_ACCOUNT_NUMBER;    
     goto process_end;
  end if;

 --ADDED BY SUPRIYA ON 14/09/2020
    if numinfotype = REFGETCASHINHANDDETAILS then
    varOperation := 'Getting CASH IN HAND DETAILS';
        DatTemp := gconst.fncxmlextract(xmldoc, 'AsonDate', DatTemp);
        numcode := gconst.fncxmlextract(xmldoc, 'Param/CompanyCode', numcode);
        numcode1 := gconst.fncxmlextract(xmldoc, 'Param/LocationCode', numcode1);
        numcode2 := gconst.fncxmlextract(xmldoc, 'Param/CurrencyCode', numcode2);

        open genCursor for
            select rownum "Rownum", 
                pkgreturncursor.fncgetdescription(BRNH_COMPANY_CODE,2) "Company",
                pkgreturncursor.fncgetdescription(BRNH_LOCATION_CODE,2) "Location",
                pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank",
                pkgreturncursor.fncgetdescription(BRNH_PICK_CODE,2) "Branch",
                pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,2) "AccountTypeName",
                pkgreturncursor.fncgetdescription(nvl(ACCT_CONCENTRATION_ACCOUNT,12400002),1) "ConcentrationAcc",
                pkgreturncursor.fncgetdescription(BRNH_CURRENCY_CODE,2) "Currency",
                ACCT_ACCOUNT_NUMBER "AccountNumber",
                (case when RSTM_TIME_STAMP != null then RSTM_TIME_STAMP else LBBL_TIME_STAMP end) "TimeStamp",
                (case when nvl(LBBL_ACCOUNT_BALANCE,0) != 0 THEN LBBL_ACCOUNT_BALANCE else nvl(BalanceAmount,0) end )"AccountBalance",  
                nvl(brnh_minimum_balance,0) "MinimumBalance", 
                nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
                nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance", 
                nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked",
                (case when LBBL_ASON_DATE != null then LBBL_ASON_DATE else RSTM_ASON_DATE end)"AsonDate", 
                ACCT_ACCOUNT_TYPE "AccountType",
                ACCT_CONCENTRATION_ACCOUNT "ConcentrationAccount", 
                (case when nvl(LBBL_ACCOUNT_NUMBER,'0') = '0' then 1 else 2 end) "RecordStatus",
                nvl(LBBL_SERIAL_NUMBER,0) "SerialNumber",
                BRNH_COMPANY_CODE "CompanyCode", BRNH_LOCATION_CODE "LocationCode", BRNH_CURRENCY_CODE "CurrencyCode"
            from trmaster306b inner join trmaster306a
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE 
            and ACCT_RECORD_STATUS not in (10200005,10200006)
            and ACCT_ACCOUNT_STATUS=14400001
            inner join trmaster306
            on Brnh_Bank_code = LBNK_PICK_CODE and LBNK_RECORD_STATUS not in (10200005,10200006)
            left outer join (select RSTM_ACCOUNT_NUMBER ,sum(RSTM_BALANCE_AMOUNT) BalanceAmount,
                                    RSTM_ASON_DATE, RSTM_ASON_TIME, RSTM_TIME_STAMP
                                    from trtran008AA
                                    where RSTM_ASON_DATE= DatTemp
                                    and RSTM_RECORD_STATUS not in (10200005,10200006)
                                    group by RSTM_ACCOUNT_NUMBER,RSTM_ASON_DATE,RSTM_ASON_TIME,RSTM_TIME_STAMP )
            on ACCT_ACCOUNT_NUMBER=RSTM_ACCOUNT_NUMBER
            left outer join (select * from trtran151
                                where LBBL_RECORD_STATUS not in (10200005,10200006)
                                --                                     and LBBL_COMPANY_CODE = decode(numcode,30199999,LBBL_COMPANY_CODE,numcode) 
                                --                                      and LBBL_LOCATION_CODE = decode(numcode1,30299999,LBBL_LOCATION_CODE,numcode1) 
                                --                                      and LBBL_CURRENCY_CODE = decode(numcode2,30499999,LBBL_CURRENCY_CODE,numcode2)
                                and LBBL_COMPANY_CODE =numcode
                                and LBBL_LOCATION_CODE = numcode1
                                and LBBL_CURRENCY_CODE = numcode2
                                and LBBL_ASON_DATE = DatTemp)
            on ACCT_ACCOUNT_NUMBER=LBBL_ACCOUNT_NUMBER
            --                      inner join (select * from trmaster306
            --                                       where LBNK_COMPANY_CODE = decode(numcode,30199999,LBNK_COMPANY_CODE,numcode)
            --                                       and LBNK_LOCATION_CODE = decode(numcode1,30299999,LBNK_LOCATION_CODE,numcode1)
            --                                       and LBNK_RECORD_STATUS not in (10200005,10200006))
            --                      on BRNH_BANK_CODE = LBNK_PICK_CODE
            where BRNH_CURRENCY_CODE= numcode2 and BRNH_COMPANY_CODE = numcode and BRNH_LOCATION_CODE = numcode1
            --BRNH_CURRENCY_CODE = decode(numcode2,30499999,BRNH_CURRENCY_CODE,numcode2)
            and BRNH_RECORD_STATUS not in (10200005,10200006)
            and BRNH_COMPANY_CODE in( select usco_company_code from trsystem022a
            where UPPER(usco_user_id) = varUserid
            AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
            and BRNH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
            where UPPER(USLO_USER_ID) = varUserid
            and USLO_RECORD_STATUS NOT IN (10200005,10200006)) ;
        goto process_end;
    end if;  

--ADDED BY SUPRIYA ON 22/09/2020
    if numinfotype = REFCASHINHANDDASHBOARD then
    varOperation := 'Getting CASH IN HAND DETAILS';

    begin
        DatTemp := gconst.fncxmlextract(xmldoc, 'AsonDate', DatTemp);
    exception
    when others then
        DatTemp := sysdate;
    end;  

--    select PICK_SHORT_DESCRIPTION
--    into numfcy
--    from TRMASTER001
--    where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
--                            from TRSYSTEM051);
    select PICK_SHORT_DESCRIPTION, nvl(PRMC_CASHDASH_LATESTDATE,12400002)
    into numfcy, numcode
    from TRSYSTEM051 inner join trmaster001
    on PICK_KEY_VALUE = PRMC_CONVERT_CFAMOUNTINTO;

    dattemp := sysdate;
    if numcode = 12400001 then
        select max(LBBL_ASON_DATE)
        into dattemp
        from TRTRAN151
        where LBBL_RECORD_STATUS not in (10200005,10200006)
        and LBBL_ASON_DATE <= sysdate;
    end if;

    if numfcy = null then 
        numfcy := 1;
    elsif numfcy = 0 then
        numfcy := 1;
    end if;

     open genCursor for
      select 
       pkgreturncursor.fncgetdescription(BRNH_COMPANY_CODE,2) "Company",
       pkgreturncursor.fncgetdescription(BRNH_LOCATION_CODE,2) "Location",
       pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank",
       pkgreturncursor.fncgetdescription(BRNH_PICK_CODE,2) "Branch",
       pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,2) "AccountTypeName",
                     pkgreturncursor.fncgetdescription(nvl(ACCT_CONCENTRATION_ACCOUNT,12400002),1) "ConcentrationAcc",
                     pkgreturncursor.fncgetdescription(BRNH_CURRENCY_CODE,2) "Currency",
                     ACCT_ACCOUNT_NUMBER "AccountNumber",
                     (case when LBBL_TIME_STAMP != null then LBBL_TIME_STAMP else RSTM_TIME_STAMP end) "StatementDateTime",
                     (case when nvl(LBBL_ACCOUNT_BALANCE,0) != 0 THEN LBBL_ACCOUNT_BALANCE else nvl(BalanceAmount,0) end )"AccountBalance",  
                     round((case when (case when nvl(LBBL_ACCOUNT_BALANCE,0) != 0 THEN LBBL_ACCOUNT_BALANCE else nvl(BalanceAmount,0) end) = 0 then 0 
                     else ((case when nvl(LBBL_ACCOUNT_BALANCE,0) != 0 THEN LBBL_ACCOUNT_BALANCE else nvl(BalanceAmount,0) end)/numfcy) end),2) "Converted_AccountBalance",
                     nvl(brnh_minimum_balance,0) "MinimumBalance", 
                     (case when nvl(brnh_minimum_balance,0) = 0 then 0 else (brnh_minimum_balance/numfcy) end) "Converted_MinBalance",
                     nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
                     (case when nvl(LBBL_PLANNINGBOOK_BALANCE,0) = 0 then 0 else (LBBL_PLANNINGBOOK_BALANCE/numfcy) end) "Converted_PlanningBalance",
                     nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance", 
                     (case when nvl(LBBL_ERPUNCLEARED_BALANCE,0) = 0 then 0 else (LBBL_ERPUNCLEARED_BALANCE/numfcy) end) "Converted_ERPBalance",
                     nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked",
                     (case when nvl(LBBL_AMOUNTTOBE_BLOCKED,0) = 0 then 0 else (LBBL_AMOUNTTOBE_BLOCKED/numfcy) end) "Converted_AmountBlocked",
                     (case when LBBL_ASON_DATE != null then LBBL_ASON_DATE else RSTM_ASON_DATE end)"AsonDate", 
                     ACCT_ACCOUNT_TYPE "AccountType",
                     ACCT_CONCENTRATION_ACCOUNT "ConcentrationAccount",
--                     to_number((case when nvl(LBBL_ACCOUNT_NUMBER,0) = 0 then 1 else 2 end)) "RecordStatus",
--                     nvl(LBBL_SERIAL_NUMBER,0) "SerialNumber",
                     BRNH_COMPANY_CODE "CompanyCode", BRNH_LOCATION_CODE "LocationCode", BRNH_CURRENCY_CODE "CurrencyCode"
              from trmaster306b inner join trmaster306a
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE 
            and ACCT_RECORD_STATUS not in (10200005,10200006)
            and ACCT_ACCOUNT_STATUS=14400001
              inner join trmaster306
              on Brnh_Bank_code = LBNK_PICK_CODE
              and LBNK_RECORD_STATUS not in (10200005,10200006)
              left outer join
                                (select RSTM_ACCOUNT_NUMBER ,sum(RSTM_BALANCE_AMOUNT) BalanceAmount,
                                        RSTM_ASON_DATE, RSTM_ASON_TIME, RSTM_TIME_STAMP
                                 from trtran008AA
                                 where RSTM_ASON_DATE = trunc(dattemp)
                                 and RSTM_RECORD_STATUS not in (10200005,10200006)
                                 group by RSTM_ACCOUNT_NUMBER,RSTM_ASON_DATE,RSTM_ASON_TIME,RSTM_TIME_STAMP )
                                 on ACCT_ACCOUNT_NUMBER=RSTM_ACCOUNT_NUMBER
                      left outer join (select * from trtran151
                                     where LBBL_RECORD_STATUS not in (10200005,10200006)
                                     and LBBL_ASON_DATE = trunc(dattemp))
                      on ACCT_ACCOUNT_NUMBER=LBBL_ACCOUNT_NUMBER;
--                      inner join (select * from trmaster306
--                                       WHERE LBNK_RECORD_STATUS not in (10200005,10200006))
--                      on BRNH_BANK_CODE = LBNK_PICK_CODE
--                      where BRNH_RECORD_STATUS not in (10200005,10200006);
     goto process_end;
  end if;  


---ADDED BY SUPRIYA ON 14-05-20
    if numinfotype = REFGETBUDGETDETAILS then
        varOperation := 'Getting Budget DETAILS';

        begin
            DatTemp := gconst.fncxmlextract(xmldoc, 'FromDate', DatTemp);
        exception
        when others then
            DatTemp := sysdate;
        end;    

        begin
            DatTemp1 := gconst.fncxmlextract(xmldoc, 'ToDate', DatTemp1);
        exception
        when others then
            DatTemp1 := sysdate;
        end;    

        begin
            vartemp1 := gconst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);
        exception
        when others then
            vartemp1 := 'ALL';
        end;   

        begin
            vartemp2 := gconst.fncxmlextract(xmldoc, 'LocationCode', vartemp);
        exception
        when others then
            vartemp2 := 'ALL';
        end;   

        begin
            vartemp3 := gconst.fncxmlextract(xmldoc, 'PortfolioCode', vartemp);
        exception
        when others then
            vartemp3 := 'ALL';
        end;   

        open genCursor for      
            select CBUS_SYSTEM_REFERENCE "ID", CBUS_EFFECTIVE_DATE "EffectiveDate",
                CBUS_VERSION_NUMBER "VersionNumber",
                pkgreturncursor.fncgetdescription(CBUS_APPROVAL_STATUS,1) "ApprovalStatus",       
                CBUS_APPROVAL_STATUS "Approved", CBUS_APPROVAL_DATE "ApprovedDate"
            from TRTRAN150 
            where CBUS_SYSTEM_REFERENCE IN (SELECT DISTINCT(CBUD_SYSTEM_REFERENCE) 
                                            FROM TRTRAN150A  left outer join trmaster151
                                            ON CBUD_COMPANYMAP_CODE = CMAP_PICK_CODE
                                            AND CMAP_RECORD_STATUS not in (10200005,10200006)
                                            WHERE trunc(CBUD_DUE_DATE) between DatTemp and DatTemp1
                                            and (CBUD_COMPANYMAP_CODE = decode(vartemp1, 'ALL', CBUD_COMPANYMAP_CODE)
                                                OR INSTR(vartemp1, CBUD_COMPANYMAP_CODE) > 0)
                                            and (CMAP_LOCATION_CODE = decode(vartemp2, 'ALL', CMAP_LOCATION_CODE)
                                                OR INSTR(vartemp2, CMAP_LOCATION_CODE) > 0)
                                            and (CMAP_PORTFOLIO_CODE = decode(vartemp3, 'ALL', CMAP_PORTFOLIO_CODE)
                                                OR INSTR(vartemp3, CMAP_PORTFOLIO_CODE) > 0))
            AND CBUS_RECORD_STATUS not in (10200005,10200006);
        goto process_end;
    end if;
--  ---ADDED BY SUPRIYA ON 02-SEP-20
--    if numinfotype = REFGETCASHANALYSISDATA then
--    varOperation := 'Getting CASH IN HAND DETAILS';
--    open genCursor for      
--               select  pkgreturncursor.fncgetdescription(CBUD_COMPANYMAP_CODE,1) "Company",
--                    pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,1) "Location",
--                    pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,1) "Portfolio",
--                    pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) "InflowOutFlow",
--                    Currency "Currency", CASM_SHORT_DESCRIPTION "ShortDescription",
--                    CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
--                    CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountFCY "AmountFCY",
--                    ExchangeRate "ExchangeRate",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY "AmountLCY",
--                    (case when CBUD_CASHFLOW_CODE <= 15000018 then AmountLCY else 0 end ) "ProjectedLCY_ABS",
--                    (case when CBUD_CASHFLOW_CODE > 15000018 then AmountLCY else 0 end ) "ActualLCY_ABS",
--                    AmountLCY "AmountLCY_ABS",
--                    DueDate "DueDate", EffectiveDate "EffectiveDate",
--                    to_char(DueDate,'MON-YY') "Month",
--                    'Q' || TO_CHAR(DueDate, 'Q') || ' FY' || TO_CHAR(DueDate, 'YY')  "Quarter",
--                    to_char(to_date(DueDate,'dd-MM-YY'),'WW') "Week",
----                    --'Projection' "ActualOrProjection",
----                    (case when CBUD_CASHFLOW_CODE < 15000542 then 'Projection' else 'Actual' end)
----                    (case when CBUD_CASHFLOW_CODE < 15000542 then 'Projection' else 'Actual' end) "ActualOrProjection",
--                    CBUD_CASHFLOW_CODE "CashFlowCode", CBUD_COMPANYMAP_CODE "CompanyCode"
--             from (select CBUD_CASHFLOW_CODE,CBUD_COMPANYMAP_CODE,
--                    CBUS_EFFECTIVE_DATE EffectiveDate,
--                    pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                    sum(cbud_amount_fcy) AmountFCY,
--                    round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                    sum(cbud_amount_lcy) AmountLCY,  CBUD_DUE_DATE DueDate
--                   from trtran150A inner join trtran150
--                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                     left outer join trmaster150A
--                        on cbud_cashflow_code = CASP_CASM_CODE
--                        and CASP_Record_status not in (10200005,10200006)
--                   where cbud_record_status not in (10200005,10200006)
--                   and cbus_record_status not in (10200005,10200006)
--                   and trunc(CBUD_DUE_DATE)>=trunc(sysdate)
--                   and CBUS_CASHFLOW_TYPE=17400002 --  --Daily Cash Flow
--                   group by CBUD_CASHFLOW_CODE, casp_account_number,
--                    Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUS_EFFECTIVE_DATE,CBUD_DUE_DATE
--                   minus
--                    select CBUD_CASHFLOW_CODE, CBUD_COMPANYMAP_CODE, CBUS_EFFECTIVE_DATE EffectiveDate,
--                              pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                             sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                              sum(cbud_amount_lcy) AmountLCY, CBUD_DUE_DATE DueDate
--                       from trtran150A inner join trtran150
--                         on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                         left outer join trmaster150A
--                            on cbud_cashflow_code = CASP_CASM_CODE
--                            and CASP_Record_status not in (10200005,10200006)
--                       where cbud_record_status not in (10200005,10200006)
--                       and cbus_record_status not in (10200005,10200006)
--                       and trunc(CBUD_DUE_DATE)>=trunc(sysdate)
--                       and CBUS_CASHFLOW_TYPE = 17400001 -- Budget
--                       group by CBUD_CASHFLOW_CODE, casp_account_number,
--                        Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUS_EFFECTIVE_DATE,CBUD_DUE_DATE)
--                left outer join  TRMASTER151
--                on CMAP_PICK_CODE=CBUD_COMPANYMAP_CODE
--                and CMAP_RECORD_STATUS not in (10200005,10200006)
--                left outer join TRMASTER150
--                on CASM_PICK_CODE= CBUD_CASHFLOW_CODE
--                and CMAP_RECORD_STATUS not in (10200005,10200006);
--     goto process_end;
--  end if;

--  ---ADDED BY SUPRIYA ON 02-SEP-20
--    if numinfotype = REFGETCASHANALYSISDATA then
--    varOperation := 'Getting CASH IN ANALYSIS DETAILS';
--
--    begin
--    DatTemp := gconst.fncxmlextract(xmldoc, 'FromDate', DatTemp);
--    exception
--    when others then
--        DatTemp := sysdate;
--    end;    
--
--    begin
--    DatTemp1 := gconst.fncxmlextract(xmldoc, 'ToDate', DatTemp1);
--    exception
--    when others then
--        DatTemp1 := sysdate;
--    end;    
--
--    begin
--    numcode := gconst.fncxmlextract(xmldoc, 'ApprovedYesNo', numcode);
--    exception
--    when others then
--        numcode := 12400001;
--    end;    
--
--    begin
--    vartemp := gconst.fncxmlextract(xmldoc, 'BudgetReference', vartemp);
--    exception
--    when others then
--        vartemp := NULL;
--    end;    
--
--     select PICK_SHORT_DESCRIPTION
--        into numfcy
--        from TRMASTER001
--        where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
--                                from TRSYSTEM051);
--
--        if numfcy = null then 
--            numfcy := 1;
--        elsif numfcy = 0 then
--            numfcy := 1;
--        end if;
--
--    open genCursor for      
--               select to_date('01-' ||  to_char(DueDate,'MON-YY')) "MonthOrder",
--                    pkgreturncursor.fncgetdescription(Company,1) "Company",
--                    pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,1) "Location",
--                    pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,1) "Portfolio",
--                    pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) "InflowOutFlow",
--                    Currency "Currency", CASM_SHORT_DESCRIPTION "ShortDescription",
--                    CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
--                    CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * nvl(AmountFCY,0) "AmountFCY",
--                    nvl(ExchangeRate,0) "ExchangeRate",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * nvl(AmountLCY,0) "AmountLCY",
--                    (case when ProjectsActuals ='Projections' then nvl(AmountLCY,0)/numfcy else 0 end ) "ProjectedLCY_ABS",
--                    (case when ProjectsActuals ='Actuals' then nvl(AmountLCY,0)/numfcy else 0 end ) "ActualLCY_ABS",
--                    0 "Varience",
--                    nvl(AmountLCY,0) "AmountLCY_ABS",
--                    DueDate "DueDate", EffectiveDate "EffectiveDate",
--                    to_char(DueDate,'MON-YY') "Month",
--                    'Q' || TO_CHAR(DueDate, 'Q') || ' FY' || TO_CHAR(DueDate, 'YY')  "Quarter",
--                    to_char(to_date(DueDate,'dd-MM-YY'),'WW') "Week",
----                    --'Projection' "ActualOrProjection",
----                    (case when CBUD_CASHFLOW_CODE < 15000542 then 'Projection' else 'Actual' end)
----                    (case when CBUD_CASHFLOW_CODE < 15000542 then 'Projection' else 'Actual' end) "ActualOrProjection",
--                    CashflowType "CashFlowCode", Company "CompanyCode",
--                    BalanceType 
--             from (select CBUD_CASHFLOW_CODE CashflowType, CBUD_COMPANYMAP_CODE Company, CBUS_EFFECTIVE_DATE EffectiveDate,
--                              pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                             sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                              sum(cbud_amount_lcy) AmountLCY, CBUD_DUE_DATE DueDate,
--                              'Projections'  ProjectsActuals,
--                              'Running Balance' BalanceType
--                       from trtran150A inner join trtran150
--                         on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                         left outer join trmaster150A
--                            on cbud_cashflow_code = CASP_CASM_CODE
--                            and CASP_Record_status not in (10200005,10200006)
--                       where cbud_record_status not in (10200005,10200006)
--                       and cbus_record_status not in (10200005,10200006)
--                       and trunc(CBUD_DUE_DATE) between DatTemp and DatTemp1
--                       and cbus_system_reference = (case when numcode=12400001 then 
--                         (select max(CBUS_SYSTEM_REFERENCE) SystemReference
--                            from trtran150
--                           where CBUS_APPROVAL_DATE between DatTemp and DatTemp1
--                             and CBUS_APPROVAL_STATUS =12400001
--                             and cbus_record_status not in (10200005,10200006))
--                         else vartemp end)
--                       and CBUS_CASHFLOW_TYPE = 17400001 -- Budget
--                       group by CBUD_CASHFLOW_CODE, 
--                        Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUS_EFFECTIVE_DATE,CBUD_DUE_DATE
--    union                
--    select SETL_CASHFLOW_CODE CashflowType,
--           SETL_COMPANY_CODE Company,
--           SETL_DOCUMENT_DATE EffectiveDate,
--                              pkgreturncursor.fncgetdescription(SETL_CURRENCY_CODE,2) Currency,
--                             sum(SETL_AMOUNT_LC) AmountFCY,round(sum(SETL_AMOUNT_LC)/sum(SETL_AMOUNT_DC),6) ExchangeRate,
--                              sum(SETL_AMOUNT_DC) AmountLCY, 
--        SETL_DOCUMENT_DATE DueDate, 'Actuals' as ProjectsActuals  ,
--         'Running Balance' BalanceType
--     from trtran161
--     where nvl(SETL_MAPPED_YN,12400002)=12400001
--     and SETL_DOCUMENT_DATE between DatTemp and DatTemp1
--     group by SETL_CASHFLOW_CODE, SETL_COMPANY_CODE, SETL_DOCUMENT_DATE ,SETL_CURRENCY_CODE
--     union 
--     select 
--15099999 CashflowType, LBBL_COMPANY_CODE Company, DatTemp EffectiveDate,
--  pkgreturncursor.fncgetdescription(LBBL_CURRENCY_CODE,2) Currency,
--  sum(Lbbl_Account_balance) AmountFCY,1 ExchangeRate,
--  sum(Lbbl_Account_balance) AmountLCY, 
--  DatTemp DueDate, 'Actuals' as ProjectsActuals,
--    'Opening Balance' BalanceType
--  from trtran151
--where LBBL_RECORD_STATUS not in (10200005,10200006)
---- and LBBL_COMPANY_CODE =numcode
---- and LBBL_LOCATION_CODE = numcode1
---- and LBBL_CURRENCY_CODE = numcode2
-- and LBBL_ASON_DATE = (select max(LBBL_ASON_DATE) from trtran151
--                        where LBBL_RECORD_STATUS not in (10200005,10200006)
----                         and LBBL_COMPANY_CODE =numcode
----                         and LBBL_LOCATION_CODE = numcode1
----                         and LBBL_CURRENCY_CODE = numcode2
--                         and LBBL_ASON_DATE<= trunc(DatTemp))
--  group by LBBL_COMPANY_CODE,LBBL_LOCATION_CODE,LBBL_CURRENCY_CODE)
--                left outer join  TRMASTER151
--                on CMAP_PICK_CODE=Company
--                and CMAP_RECORD_STATUS not in (10200005,10200006)
--                left outer join TRMASTER150
--                on CASM_PICK_CODE= CashflowType
--                and CASM_RECORD_STATUS not in (10200005,10200006)
--      order by 1 ;
--     goto process_end;
--  end if;

--ADDED BY SUPRIYA ON 12/05/2021
if numinfotype = REFGETCASHANALYSISDATA then
    varOperation := 'Getting CASH IN ANALYSIS DETAILS';

    begin
        DatTemp := gconst.fncxmlextract(xmldoc, 'FromDate', DatTemp);
    exception
    when others then
        DatTemp := sysdate;
    end;    

    begin
        DatTemp1 := gconst.fncxmlextract(xmldoc, 'ToDate', DatTemp1);
    exception
    when others then
        DatTemp1 := sysdate;
    end;    

    begin
        numcode := gconst.fncxmlextract(xmldoc, 'ApprovedYesNo', numcode);
    exception
    when others then
        numcode := 12400001;
    end;    

    begin
        vartemp := gconst.fncxmlextract(xmldoc, 'BudgetReference', vartemp);
    exception
    when others then
        vartemp := NULL;
    end;    

    begin
        numcode1 := gconst.fncxmlextract(xmldoc, 'ReportPeriod', numcode1);
    exception
    when others then
        numcode1 := 26699999;
    end;

    prcCashflowProjectionVsActual(DatTemp,DatTemp1,numcode,vartemp,numcode1);

    select PICK_SHORT_DESCRIPTION into numfcy
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
                            from TRSYSTEM051);

    if numfcy = null then 
        numfcy := 1;
    elsif numfcy = 0 then
        numfcy := 1;
    end if;

--    open gencursor for
--        select (case when numcode1=26600002 then to_char(W_DUEDATE)
--                    when numcode1=26600004 then To_Char(M_DueDate,'Mon-YYYY')
--                    when numcode1=26600005 then pkgfunctions.fncGetQuaterNumber(39500001,Q_DueDate)
--                    else to_char(W_DUEDATE) end) "DueDate", EFFECTIVEDATE "EffectiveDate",  
--               DISPAY_ORDER "DisplayOrder", DISPLAY_SUB_ORDER "DisplaySubOrder", N_COMPANY "CashFlowCompanyCode",
--               N_CURRENCY "CurrencyCode", N_CASHFLOWTYPE "CashflowCode",
----               V_PROJECTIONACTUAL "ProjectionsActuals", 
--               V_BALANCETYPE "BALANCETYPE",
--               (case when V_BALANCETYPE in ('Opening Balance','Closing Balance') then ' '
--                   else CASM_CATEGORY1  end)"Category1",
--            --CASM_CATEGORY1 "Category1",
--               (case when V_BALANCETYPE in ('Opening Balance','Closing Balance') then ' ' 
--                   else CASM_CATEGORY2 end )"Category2",
--               (case when V_BALANCETYPE in ('Opening Balance','Closing Balance') then ' ' 
--                   else CASM_PARTICULAR end ) "Particular",
--               (case when V_BALANCETYPE in ('Opening Balance','Closing Balance') then ' '
--                   else CASM_DETAILS end ) "Details",
--               (case when V_BALANCETYPE in ('Opening Balance','Closing Balance') then ' '    
--                  else pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) end) "InflowOutFlow",
--               pkgreturncursor.fncgetdescription(N_COMPANY,1) "CashFlowCompany",
--               pkgreturncursor.fncgetdescription(N_CURRENCY,1) "Currency",
--               decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * nvl(AMOUNTFCY,0) "AmountFCY",
--                nvl(EXCHANGERATE,0) "ExchangeRate",
--                decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * nvl(AMOUNTLCY,0) "AmountLCY",
--                round((case when V_PROJECTIONACTUAL ='Projections' then nvl(AMOUNTLCY,0)/numfcy else 0 end),2) "ProjectedLCY_ABS",
--                round((case when V_PROJECTIONACTUAL ='Actuals' then nvl(AMOUNTLCY,0)/numfcy else 0 end),2) "ActualLCY_ABS",
--                0 "Varience",
--                nvl(AMOUNTLCY,0) "AmountLCY_ABS",
--               CASM_INFLOW_OUTFLOW "InflowOutflowCode"
--        from trsystem951_Cash_A_F left outer join TRMASTER151
--        on CMAP_PICK_CODE=N_COMPANY
--        and CMAP_RECORD_STATUS not in (10200005,10200006)
--        left outer join TRMASTER150
--        on CASM_PICK_CODE= N_CASHFLOWTYPE
--        and CASM_RECORD_STATUS not in (10200005,10200006)
--        order by Dispay_Order,Display_Sub_Order,M_DueDate;
   open gencursor for

        select (case when numcode1=26600002 then to_char(WD_DUEDATE)
                    when numcode1=26600004 then To_Char(M_DueDate,'Mon-YYYY')
                    when numcode1=26600005 then pkgfunctions.fncGetQuaterNumber(39500001,Q_DueDate)
                    when numcode1=26600001 then To_Char(DueDate)
                    else to_char(WD_DUEDATE) end) "DueDate",
               (case when numcode1=26600001 then DueDate 
                    when numcode1=26600002 then WD_DUEDATE
                    when numcode1=26600004 then M_DueDate
                    when numcode1=26600005 then Q_DueDate
                    else WD_DUEDATE end) "Date_DueDate",    
                    EFFECTIVEDATE "EffectiveDate",  
               DISPAY_ORDER "DisplayOrder", DISPLAY_SUB_ORDER "DisplaySubOrder", N_COMPANY "CashFlowCompanyCode",
               N_CURRENCY "CurrencyCode", N_CASHFLOWTYPE "CashflowCode",
--               V_PROJECTIONACTUAL "ProjectionsActuals", 
               V_BALANCETYPE "BALANCETYPE",
               CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
               CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
               pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) "InflowOutFlow",
               pkgreturncursor.fncgetdescription(N_COMPANY,1) "CashFlowCompany",
               pkgreturncursor.fncgetdescription(N_CURRENCY,1) "Currency",
                nvl(AMOUNTFCY,0) "AmountFCY",
                nvl(EXCHANGERATE,0) "ExchangeRate",
                nvl(AMOUNTLCY,0) "AmountLCY",
                round((case when V_PROJECTIONACTUAL ='Projections' then nvl(AMOUNTLCY,0)/numfcy else 0 end),2) "ProjectedLCY_ABS",
                round((case when V_PROJECTIONACTUAL ='Actuals' then nvl(AMOUNTLCY,0)/numfcy else 0 end),2) "ActualLCY_ABS",
                0 "Varience",
                nvl(AMOUNTLCY,0) "AmountLCY_ABS",
               CASM_INFLOW_OUTFLOW "InflowOutflowCode"
        from trsystem951_Cash_A_F left outer join TRMASTER151
        on CMAP_PICK_CODE=N_COMPANY
        and CMAP_RECORD_STATUS not in (10200005,10200006)
        left outer join TRMASTER150
        on CASM_PICK_CODE= N_CASHFLOWTYPE
        and CASM_RECORD_STATUS not in (10200005,10200006)
        order by Dispay_Order,Display_Sub_Order,to_date(case 
                    when numcode1=26600001 then DueDate
                    when numcode1=26600002 then WD_DUEDATE
                    when numcode1=26600004 then M_DueDate
                    when numcode1=26600005 then Q_DueDate
                    else WD_DUEDATE end);
    goto process_end;
end if;

--ADDED BY SUPRIYA ON 18/06/2021
if numinfotype = REFGETCASHFLOWFORECAST then
    varOperation := 'Getting CASH IN ANALYSIS DETAILS';

    begin
        DatTemp := gconst.fncxmlextract(xmldoc, 'FromDate', DatTemp);
    exception
    when others then
        DatTemp := sysdate;
    end;    

    begin
        DatTemp1 := gconst.fncxmlextract(xmldoc, 'ToDate', DatTemp1);
    exception
    when others then
        DatTemp1 := sysdate;
    end;    

    begin
        numcode := gconst.fncxmlextract(xmldoc, 'ApprovedYesNo', numcode);
    exception
    when others then
        numcode := 12400001;
    end;    

    begin
        vartemp := gconst.fncxmlextract(xmldoc, 'BudgetReference', vartemp);
    exception
    when others then
        vartemp := NULL;
    end;    

    begin
        numcode1 := gconst.fncxmlextract(xmldoc, 'ReportPeriod', numcode1);
    exception
    when others then
        numcode1 := 26699999;
    end;

    prcCashflowProjection(DatTemp,DatTemp1,numcode,vartemp,numcode1);

    select PICK_SHORT_DESCRIPTION into numfcy
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
                            from TRSYSTEM051);
   open gencursor for      
        select (case when numcode1=26600002 then to_char(WD_DUEDATE)
                    when numcode1=26600004 then To_Char(M_DueDate,'Mon-YYYY')
                    when numcode1=26600005 then pkgfunctions.fncGetQuaterNumber(39500001,Q_DueDate)
                    when numcode1=26600001 then To_Char(DueDate)
                    else to_char(WD_DUEDATE) end) "DueDate",
               (case when numcode1=26600001 then DueDate 
                    when numcode1=26600002 then WD_DUEDATE
                    when numcode1=26600004 then M_DueDate
                    when numcode1=26600005 then Q_DueDate
                    else WD_DUEDATE end) "Date_DueDate",    
                    EFFECTIVEDATE "EffectiveDate",  
               DISPAY_ORDER "DisplayOrder", DISPLAY_SUB_ORDER "DisplaySubOrder", N_COMPANY "CashFlowCompanyCode",
               N_CURRENCY "CurrencyCode", N_CASHFLOWTYPE "CashflowCode",
               V_BALANCETYPE "BALANCETYPE",
               CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
               CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
               pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) "InflowOutFlow",
               pkgreturncursor.fncgetdescription(N_COMPANY,1) "CashFlowCompany",
               pkgreturncursor.fncgetdescription(N_CURRENCY,1) "Currency",
                nvl(AMOUNTFCY,0) "AmountFCY",
                nvl(EXCHANGERATE,0) "ExchangeRate",
                nvl(AMOUNTLCY,0) "AmountLCY",
                round(nvl(AMOUNTLCY,0)/numfcy,2) "ProjectedLCY_ABS",
                nvl(AMOUNTLCY,0) "AmountLCY_ABS",
               CASM_INFLOW_OUTFLOW "InflowOutflowCode"
        from trsystem951_Cash_A_F left outer join TRMASTER151
        on CMAP_PICK_CODE=N_COMPANY
        and CMAP_RECORD_STATUS not in (10200005,10200006)
        left outer join TRMASTER150
        on CASM_PICK_CODE= N_CASHFLOWTYPE
        and CASM_RECORD_STATUS not in (10200005,10200006)
        --and V_PROJECTIONACTUAL = 'Projections' 
        order by Dispay_Order,Display_Sub_Order,to_date(case 
                    when numcode1=26600001 then DueDate
                    when numcode1=26600002 then WD_DUEDATE
                    when numcode1=26600004 then M_DueDate
                    when numcode1=26600005 then Q_DueDate
                    else WD_DUEDATE end);
    goto process_end;
end if;

--ADDED BY SUPRIYA ON 14/10/2021
if numinfotype = REFGETBUDGETCOMPARISION then
    varOperation := 'Getting BUDGET VS PROJECTION VS ACTUALS DETAILS';

    begin
        DatTemp := gconst.fncxmlextract(xmldoc, 'FromDate', DatTemp);
    exception
    when others then
        DatTemp := sysdate;
    end;    

    begin
        DatTemp1 := gconst.fncxmlextract(xmldoc, 'ToDate', DatTemp1);
    exception
    when others then
        DatTemp1 := sysdate;
    end;    

    begin
        numcode1 := gconst.fncxmlextract(xmldoc, 'ReportPeriod', numcode1);
        if(numcode1 = 26699999)then
            numcode1 := 26600004;
        end if;
    exception
    when others then
        numcode1 := 26600004;
    end;

    begin
        vartemp1 := gconst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);
    exception
    when others then
        vartemp1 := 30299999;
    end;

    begin
        vartemp2 := gconst.fncxmlextract(xmldoc, 'LocationCode', vartemp);
    exception
    when others then
        vartemp2 := 30299999;
    end;

    begin
        vartemp3 := gconst.fncxmlextract(xmldoc, 'PortfolioCode', vartemp);
    exception
    when others then
        vartemp3 := 30299999;
    end;

    begin
        vartemp4 := gconst.fncxmlextract(xmldoc, 'CurrencPairCode', vartemp4);
    exception
    when others then
        vartemp4 := 30299999;
    end;

    prcBudgetVsProjectionVsActual(DatTemp, DatTemp1, numcode1, vartemp1, vartemp2, vartemp3, vartemp4);

    open gencursor for      
        select pkgreturncursor.fncgetdescription(CASHFLOWTYPE,1) "Category", CASHFLOWTYPE "CategoryCode",
               pkgreturncursor.fncgetdescription(CASHCOMPANY,1) "Company", CASHCOMPANY "CompanyCode", 
               pkgreturncursor.fncgetdescription(CURRENCY,2) "Currency", CURRENCY "CurrencyCode", 
               EFFECTIVEDATE "EffectiveDate", to_char(DUEDATE) "DueDate", DUEDATE_NAME "DueDateName",
               BUDGET_FCY "BudgetFCY", (BUDGET_FCY * EXCHANGE_RATE) "BudgetLCY",
               PROJECTION_FCY "ProjectionFCY", (PROJECTION_FCY * EXCHANGE_RATE) "ProjectionLCY",
               ACTUALS_FCY "ActualsFCY", (ACTUALS_FCY * EXCHANGE_RATE) "ActualsLCY",
               EXCHANGE_RATE "ExchangeRate", INFLOWOUTFLOW "InflowOutflow",
               (case when INFLOWOUTFLOW = 17300001 then (-1 * (BUDGET_FCY * EXCHANGE_RATE)) else (BUDGET_FCY * EXCHANGE_RATE) end) "NetBudgetLCY",
               (case when INFLOWOUTFLOW = 17300001 then (-1 * (PROJECTION_FCY * EXCHANGE_RATE)) else (PROJECTION_FCY * EXCHANGE_RATE) end) "NetProjectionLCY",
               (case when INFLOWOUTFLOW = 17300001 then (-1 * (ACTUALS_FCY * EXCHANGE_RATE)) else (ACTUALS_FCY * EXCHANGE_RATE) end) "NetActualsLCY"
        from trsystem951_Budget
        order by last_Day(DueDate);
    goto process_end;
end if;

--ADDED BY SUPRIYA ON 11/11/2021
if numinfotype = REFBUDGETVSPROJECTIONS then
    varOperation := 'Getting BUDGET VS PROJECTION';

    begin
        numcode1 := gconst.fncxmlextract(xmldoc, 'ReportPeriod', numcode1);
    exception
    when others then
        numcode1 := 26699999;
    end;

    begin
        vartemp1 := gconst.fncxmlextract(xmldoc, 'Reference1', vartemp);
    exception
    when others then
        vartemp1 := 30299999;
    end;

    begin
        vartemp2 := gconst.fncxmlextract(xmldoc, 'Reference2', vartemp);
    exception
    when others then
        vartemp2 := 30299999;
    end;

    begin
        vartemp3 := gconst.fncxmlextract(xmldoc, 'Reference3', vartemp);
    exception
    when others then
        vartemp3 := 30299999;
    end;

    prcBudgetVsProjections(vartemp1, vartemp2, vartemp3, numcode1);

    open gencursor for      
        select pkgreturncursor.fncgetdescription(CASHFLOWTYPE,1) "Category", CASHFLOWTYPE "CategoryCode",
               pkgreturncursor.fncgetdescription(CASHCOMPANY,1) "Company", CASHCOMPANY "CompanyCode", 
               pkgreturncursor.fncgetdescription(CURRENCY,1) "Currency", CURRENCY "CurrencyCode", 
               EFFECTIVEDATE "EffectiveDate", to_char(DUEDATE) "DueDate", DUEDATE_NAME "DueDateName",
               BUDGET_FCY "BudgetFCY", (BUDGET_FCY * EXCHANGE_RATE) "BudgetLCY",
               PROJECTION_FCY "ProjectionFCY", (PROJECTION_FCY * EXCHANGE_RATE) "ProjectionLCY",
               ACTUALS_FCY "ActualsFCY", (ACTUALS_FCY * EXCHANGE_RATE) "ActualsLCY",
               EXCHANGE_RATE "ExchangeRate", INFLOWOUTFLOW "InflowOutflow"
        from trsystem951_Budget
        order by last_Day(DueDate);
    goto process_end;
end if;


---ADDED BY SUPRIYA ON 14-05-20
    if numinfotype = REFGETCASHINHANDVIEW then
    varOperation := 'Getting CASH IN HAND DETAILS';
        --VarTemp:=gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber',VarTemp);
        DatTemp := gconst.fncxmlextract(xmldoc, 'AsonDate', DatTemp);
        numcode := gconst.fncxmlextract(xmldoc, 'Param/CompanyCode', numcode);
        numcode1 := gconst.fncxmlextract(xmldoc, 'Param/LocationCode', numcode1);
        numcode2 := gconst.fncxmlextract(xmldoc, 'Param/CurrencyCode', numcode2);

        open genCursor for      
            select rownum "Rownum", LBBL_ASON_DATE "AsonDate", LBBL_REFERENCE_NUMBER "ReferenceNumber",
                    pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank", 
                    pkgreturncursor.fncgetdescription(BRNH_PICK_CODE,2) "Branch",
                    LBBL_SERIAL_NUMBER "SerialNumber",
                    pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,2) "AccountTypeName",
                    ACCT_ACCOUNT_NUMBER "AccountNumber", nvl(LBBL_ACCOUNT_BALANCE,0) "AccountBalance",  
                    nvl(brnh_minimum_balance,0) "MinimumBalance", 
                    nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
                    nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance", nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked",
                    --nvl(LBBL_AMOUNT_AVALIBLE,0) "AmountAvailable", 
                    pkgreturncursor.fncgetdescription(LBBL_COMPANY_CODE,2) "Company",
                    pkgreturncursor.fncgetdescription(LBBL_LOCATION_CODE,2) "Location",
                    pkgreturncursor.fncgetdescription(LBBL_CURRENCY_CODE,2) "Currency",
                    nvl(LBBL_PROPOSED_REQUAMOUNT,0) "RequiredAmount",
                    nvl(LBBL_OVERRIDE_REQUAMOUNT,0) "OverrideRequiredAmount", 3 "RecordStatus",
                    LBBL_COMPANY_CODE "CompanyCode", LBBL_LOCATION_CODE "LocationCode",
                    LBBL_CURRENCY_CODE "CurrencyCode"
            from TRTRAN151 LEFT OUTER JOIN TRMASTER306b 
            ON LBBL_ACCOUNT_NUMBER = ACCT_ACCOUNT_NUMBER
            and ACCT_ACCOUNT_STATUS=14400001
            inner join trmaster306a
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE and ACCT_RECORD_STATUS not in (10200005,10200006)
            WHERE LBBL_ASON_DATE = DatTemp and LBBL_COMPANY_CODE = numcode 
            and LBBL_LOCATION_CODE = numcode1 and LBBL_CURRENCY_CODE = numcode2
            --LBBL_REFERENCE_NUMBER = VarTemp
            AND LBBL_RECORD_STATUS NOT IN (10200005,10200006)
--            and BRNH_COMPANY_CODE in( select usco_company_code from trsystem022a
--            where UPPER(usco_user_id) = varUserid
--            AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
--            and BRNH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--            where UPPER(USLO_USER_ID) = varUserid
--            and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            and LBBL_COMPANY_CODE in( select usco_company_code from trsystem022a
            where UPPER(usco_user_id) = varUserid
            AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
            and LBBL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
            where UPPER(USLO_USER_ID) = varUserid
            and USLO_RECORD_STATUS NOT IN (10200005,10200006));
        goto process_end;
    end if;

 ---ADDED BY SUPRIYA ON 10-09-20
    if numinfotype = REFGETFUNDREQUIREDVIEW then
    varOperation := 'Getting FUND REQUIRED VIEW DETAILS';
        --VarTemp:=gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber',VarTemp);
        DatTemp := gconst.fncxmlextract(xmldoc, 'AsonDate', DatTemp);
        numcode := gconst.fncxmlextract(xmldoc, 'Param/CompanyCode', numcode);
        numcode1 := gconst.fncxmlextract(xmldoc, 'Param/LocationCode', numcode1);
        numcode2 := gconst.fncxmlextract(xmldoc, 'Param/CurrencyCode', numcode2);

        open genCursor for      
            select rownum "Rownum", LBBL_ASON_DATE "AsonDate", LBBL_REFERENCE_NUMBER "ReferenceNumber",
                pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank", 
                pkgreturncursor.fncgetdescription(BRNH_PICK_CODE,2) "Branch",
                LBBL_SERIAL_NUMBER "SerialNumber",
                pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,2) "AccountTypeName",
                ACCT_ACCOUNT_NUMBER "AccountNumber", nvl(LBBL_ACCOUNT_BALANCE,0) "AccountBalance",  
                nvl(brnh_minimum_balance,0) "MinimumBalance", 
                nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
                nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance", nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked",
                --nvl(LBBL_AMOUNT_AVALIBLE,0) "AmountAvailable", 
                nvl(LBBL_PROPOSED_REQUAMOUNT,0) "RequiredAmount",
                nvl(LBBL_OVERRIDE_REQUAMOUNT,0) "OverrideRequiredAmount", 3 "RecordStatus",
                LBBL_COMPANY_CODE "CompanyCode", LBBL_LOCATION_CODE "LocationCode",
                    LBBL_CURRENCY_CODE "CurrencyCode"
            from TRTRAN151 LEFT OUTER JOIN TRMASTER306b 
            ON LBBL_ACCOUNT_NUMBER = ACCT_ACCOUNT_NUMBER
            and ACCT_ACCOUNT_STATUS=14400001
            and ACCT_RECORD_STATUS not in (10200005,10200006)
            inner join trmaster306a
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE and ACCT_RECORD_STATUS not in (10200005,10200006)
            WHERE LBBL_ASON_DATE = DatTemp  and LBBL_COMPANY_CODE = numcode 
            and LBBL_LOCATION_CODE = numcode1 and LBBL_CURRENCY_CODE = numcode2
            AND LBBL_RECORD_STATUS NOT IN (10200005,10200006)
--            and BRNH_COMPANY_CODE in( select usco_company_code from trsystem022a
--            where UPPER(usco_user_id) = varUserid
--            AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
--            and BRNH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--            where UPPER(USLO_USER_ID) = varUserid
--            and USLO_RECORD_STATUS NOT IN (10200005,10200006))
            and LBBL_COMPANY_CODE in( select usco_company_code from trsystem022a
            where UPPER(usco_user_id) = varUserid
            AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
            and LBBL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
            where UPPER(USLO_USER_ID) = varUserid
            and USLO_RECORD_STATUS NOT IN (10200005,10200006)) ;
        goto process_end;
    end if;


---ADDED BY SUPRIYA ON 31-08-20
    if numinfotype = REFGETCASHINHANDFORCASHPOOL then
    varOperation := 'Getting CASH IN HAND DETAILS';
    --VarTemp:=gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber',VarTemp);
    DatTemp := gconst.fncxmlextract(xmldoc, 'AsonDate', DatTemp);
    numcode := gconst.fncxmlextract(xmldoc, 'Param/CompanyCode', numcode);
    numcode1 := gconst.fncxmlextract(xmldoc, 'Param/LocationCode', numcode1);
    numcode2 := gconst.fncxmlextract(xmldoc, 'Param/CurrencyCode', numcode2);

     open genCursor for      
      select rownum "Rownum", LBBL_ASON_DATE "AsonDate", LBBL_REFERENCE_NUMBER "ReferenceNumber",
                     pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank", 
                     pkgreturncursor.fncgetdescription(BRNH_PICK_CODE,2) "Branch",
                     LBBL_SERIAL_NUMBER "SerialNumber",
                     pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,2) "AccountTypeName",
                     pkgreturncursor.fncgetdescription(ACCT_CONCENTRATION_ACCOUNT,1) "ConcentrationAccountName",
                     ACCT_ACCOUNT_NUMBER "AccountNumber", nvl(LBBL_ACCOUNT_BALANCE,0) "AccountBalance",  
                     nvl(brnh_minimum_balance,0) "MinimumBalance", nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
                     nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance", nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked",
                     nvl(AmountLCY,0) "RequiredAmount", 
                     nvl(LBBL_OVERRIDE_REQUAMOUNT,0) "OverrideRequiredAmount", 
                     nvl((SELECT SUM(POOL_TRANSFER_AMOUNT)
                                        FROM TRTRAN151A
                                        WHERE POOL_FROM_ACCOUNT = ACCT_ACCOUNT_NUMBER
                                        AND POOL_ASON_DATE = DatTemp
                                        AND POOL_RECORD_STATUS NOT IN (10200005,10200006)),0) "FundTransferedToday",
--                     (nvl(LBBL_ACCOUNT_BALANCE,0) - nvl(LBBL_ERPUNCLEARED_BALANCE,0) - nvl(LBBL_AMOUNTTOBE_BLOCKED,0) 
--                     - nvl(LBBL_OVERRIDE_REQUAMOUNT,0) 
                    (nvl(LBBL_ACCOUNT_BALANCE,0) - nvl(brnh_minimum_balance,0) + nvl(LBBL_ERPUNCLEARED_BALANCE,0) 
                        - nvl(LBBL_AMOUNTTOBE_BLOCKED,0) 
                     - (case when nvl(LBBL_OVERRIDE_REQUAMOUNT,0) > 0 then LBBL_OVERRIDE_REQUAMOUNT else nvl(AmountLCY,0) end) 
                     - nvl((SELECT SUM(POOL_TRANSFER_AMOUNT)
                                    FROM TRTRAN151A
                                    WHERE POOL_FROM_ACCOUNT = ACCT_ACCOUNT_NUMBER
                                    AND POOL_ASON_DATE = DatTemp
                                    AND POOL_RECORD_STATUS NOT IN (10200005,10200006)),0)) "AmountAvailableForTransfer",
                     ACCT_CONCENTRATION_ACCOUNT "ConcentrationAccount", Brnh_Bank_code "BankCode"
              from TRMASTER306b inner join trmaster306a
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE 
            and ACCT_RECORD_STATUS not in (10200005,10200006)
            and ACCT_ACCOUNT_STATUS=14400001
              LEFT OUTER JOIN TRTRAN151
              ON LBBL_ACCOUNT_NUMBER = ACCT_ACCOUNT_NUMBER
              left outer join
                      (select (case when nvl(AccountNumber,'0') != '0' then AccountNumber 
                      else nvl((Select  ACCT_ACCOUNT_NUMBER from trmaster306b
                        where ACCT_CONCENTRATION_ACCOUNT = 12400001 and ACCT_ACCOUNT_STATUS=14400001
                        and rownum =1),(Select  ACCT_ACCOUNT_NUMBER from trmaster306b
                        where ACCT_ACCOUNT_STATUS=14400001 and rownum =1)) end) AccountNumber, 
                      sum(AmountFCY) AmountFCY, sum(AmountLCY) AmountLCY,
                        sum(ExchangeRate) ExchangeRate--round(sum(AmountLCY)/sum(AmountFCY),2) ExchangeRate
                       from (select CBUD_CASHFLOW_CODE, casp_account_number AccountNumber,
                                    pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                                    sum(cbud_amount_fcy) AmountFCY,
                                    sum(CBUD_EXCHANGE_RATE) ExchangeRate,--round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                                    sum(cbud_amount_lcy) AmountLCY,12400002 BudgetEditable
                               from trtran150A inner join trtran150
                                 on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                                 left outer join trmaster150A
                                    on cbud_cashflow_code = CASP_CASM_CODE
                                    and CASP_Record_status not in (10200005,10200006)
                               where cbud_record_status not in (10200005,10200006)
                               and cbus_record_status not in (10200005,10200006)
                               and CBUD_DUE_DATE=DatTemp
                               and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
                               group by CBUD_CASHFLOW_CODE, casp_account_number,
                                Cbud_currency_code
                           union all
                            select CBUD_CASHFLOW_CODE, casp_account_number AccountNumber,
                                      pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                                     sum(cbud_amount_fcy) AmountFCY,
                                     sum(CBUD_EXCHANGE_RATE) ExchangeRate,--round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                                      sum(cbud_amount_lcy) AmountLCY,nvl(CONF_BUDGET_EDITABLE,12400002) BudgetEditable
                               from trtran150A inner join trtran150
                                 on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                                 left outer join trmaster150A
                                    on cbud_cashflow_code = CASP_CASM_CODE
                                    and CASP_Record_status not in (10200005,10200006)
                                 left outer join trmaster150B
                                   on CBUD_CASHFLOW_CODE=CONF_CASM_CODE
                                   and CONF_RECORD_STATUS not in (10200005,10200006)
                               where cbud_record_status not in (10200005,10200006)
                               and cbus_record_status not in (10200005,10200006)
                               and CBUD_DUE_DATE=DatTemp
                               and CBUS_CASHFLOW_TYPE=17400001 -- Budget
                               and CONF_BUDGET_CONSIDER=12400001  
                               group by CBUD_CASHFLOW_CODE, casp_account_number,
                                Cbud_currency_code,CONF_BUDGET_EDITABLE)
                                group by AccountNumber)
                        on ACCT_ACCOUNT_NUMBER=AccountNumber
                        WHERE LBBL_ASON_DATE =DatTemp 
                        and LBBL_COMPANY_CODE = numcode 
                        and LBBL_LOCATION_CODE = numcode1 
                        and LBBL_CURRENCY_CODE = numcode2
                        --and BRNH_RECORD_STATUS not in (10200005,10200006)
                        and LBBL_RECORD_STATUS not in (10200005,10200006)
--                        and BRNH_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                    where UPPER(usco_user_id) = varUserid
--                              AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
--                              and BRNH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
                        and LBBL_COMPANY_CODE in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid
                                AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
                        and LBBL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                                   where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))   ;
--              select rownum "Rownum", LBBL_ASON_DATE "AsonDate", LBBL_REFERENCE_NUMBER "ReferenceNumber",
--                     pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank", LBBL_SERIAL_NUMBER "SerialNumber",
--                     pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,2) "AccountTypeName",
--                     pkgreturncursor.fncgetdescription(ACCT_CONCENTRATION_ACCOUNT,1) "ConcentrationAccountName",
--                     ACCT_ACCOUNT_NUMBER "AccountNumber", nvl(LBBL_ACCOUNT_BALANCE,0) "AccountBalance",  
--                     nvl(brnh_minimum_balance,0) "MinimumBalance", nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
--                     nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance", nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked",
--                     nvl(LBBL_PROPOSED_REQUAMOUNT,0) "RequiredAmount", nvl(LBBL_OVERRIDE_REQUAMOUNT,0) "OverrideRequiredAmount", 
--                     nvl((SELECT SUM(POOL_TRANSFER_AMOUNT)
--                                        FROM TRTRAN151A
--                                        WHERE POOL_FROM_ACCOUNT = ACCT_ACCOUNT_NUMBER
--                                        AND POOL_ASON_DATE = DatTemp
--                                        AND POOL_RECORD_STATUS NOT IN (10200005,10200006)),0) "FundTransferedToday",
--                     (nvl(LBBL_ACCOUNT_BALANCE,0) - nvl(LBBL_ERPUNCLEARED_BALANCE,0) - nvl(LBBL_AMOUNTTOBE_BLOCKED,0) 
--                     - nvl(LBBL_OVERRIDE_REQUAMOUNT,0) - nvl((SELECT SUM(POOL_TRANSFER_AMOUNT)
--                                                        FROM TRTRAN151A
--                                                        WHERE POOL_FROM_ACCOUNT = ACCT_ACCOUNT_NUMBER
--                                                        AND POOL_ASON_DATE = DatTemp
--                                                        AND POOL_RECORD_STATUS NOT IN (10200005,10200006)),0)) "AmountAvailableForTransfer",
--                     ACCT_CONCENTRATION_ACCOUNT "ConcentrationAccount"
--              from TRTRAN151 LEFT OUTER JOIN TRMASTER306B 
--              ON LBBL_ACCOUNT_NUMBER = ACCT_ACCOUNT_NUMBER
--              WHERE LBBL_ASON_DATE = DatTemp --and nvl(LBBL_ACCOUNT_BALANCE,0) > 0
--              --LBBL_REFERENCE_NUMBER = VarTemp
--              AND LBBL_RECORD_STATUS NOT IN (10200005,10200006);
     goto process_end;
  end if;


---ADDED BY SUPRIYA ON 27-05-20
    if numinfotype = REFGETCASHINHANDASONDATE then
    varOperation := 'Getting CASH IN HAND DETAILS ason Date';
    DatTemp := gconst.fncxmlextract(xmldoc, 'AsonDate', DatTemp);

    select PICK_SHORT_DESCRIPTION
    into numfcy
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
                            from TRSYSTEM051);

    if numfcy = null then 
        numfcy := 1;
    elsif numfcy = 0 then
        numfcy := 1;
    end if;

    open genCursor for
    select rownum "Rownum", LBBL_ASON_DATE "AsonDate",
                     pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank",
                     pkgreturncursor.fncgetdescription(BRNH_PICK_CODE,2) "Branch", 
                     pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,2) "AccountTypeName",
                     ACCT_ACCOUNT_NUMBER "AccountNumber", 
                     nvl(LBBL_ACCOUNT_BALANCE,0) "AccountBalance",
                     (case when nvl(LBBL_ACCOUNT_BALANCE,0) = 0 then 0 else (LBBL_ACCOUNT_BALANCE/numfcy) end) "Converted_AccountBalance",
                     nvl(brnh_minimum_balance,0) "MinimumBalance", 
                     (case when nvl(brnh_minimum_balance,0) = 0 then 0 else (brnh_minimum_balance/numfcy) end) "Converted_MinBalance",
                     nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
                     (case when nvl(LBBL_PLANNINGBOOK_BALANCE,0) = 0 then 0 else (LBBL_PLANNINGBOOK_BALANCE/numfcy) end) "Converted_PlanningBalance",
                     nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance", 
                     (case when nvl(LBBL_ERPUNCLEARED_BALANCE,0) = 0 then 0 else (LBBL_ERPUNCLEARED_BALANCE/numfcy) end) "Converted_ERPBalance",
                     nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked",
                     (case when nvl(LBBL_AMOUNTTOBE_BLOCKED,0) = 0 then 0 else (LBBL_AMOUNTTOBE_BLOCKED/numfcy) end) "Converted_AmountBlocked",
                     nvl(LBBL_PROPOSED_REQUAMOUNT,0) "RequiredAmount",
                     (case when nvl(LBBL_PROPOSED_REQUAMOUNT,0) = 0 then 0 else (LBBL_PROPOSED_REQUAMOUNT/numfcy) end) "Converted_RequiredAmount",
                     nvl(LBBL_OVERRIDE_REQUAMOUNT,0) "OverrideRequiredAmount",
                     (case when nvl(LBBL_OVERRIDE_REQUAMOUNT,0) = 0 then 0 else (LBBL_OVERRIDE_REQUAMOUNT/numfcy) end) "Converted_OverrideRequired"
              from TRTRAN151 LEFT OUTER JOIN TRMASTER306b
              ON LBBL_ACCOUNT_NUMBER = ACCT_ACCOUNT_NUMBER
              and ACCT_ACCOUNT_STATUS=14400001
              and ACCT_RECORD_STATUS not in (10200005,10200006)
              inner join trmaster306a
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE and ACCT_RECORD_STATUS not in (10200005,10200006)
              WHERE LBBL_ASON_DATE = DatTemp
              AND LBBL_RECORD_STATUS NOT IN (10200005,10200006);

     goto process_end;
  end if;
--              select  pkgreturncursor.fncgetdescription(CMAP_COMPANY_CODE,1) "Company",
--                    pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,1) "Location",
--                    pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,1) "Portfolio", 
--                    pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) "InflowOutFlow",
--                    Currency "Currency", CASM_SHORT_DESCRIPTION "ShortDescription",
--                    CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
--                    CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
--                    LBBL_ASON_DATE "AsonDate",
--                     pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank", 
--                     pkgreturncursor.fncgetdescription(BRNH_ACCOUNT_TYPE,2) "AccountTypeName",
--                     BRNH_ACCOUNT_NUMBER "AccountNumber", nvl(LBBL_ACCOUNT_BALANCE,0) "AccountBalance",  
--                     nvl(brnh_minimum_balance,0) "MinimumBalance", nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
--                     nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance", 
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountFCY "AmountFCY",
--                    ExchangeRate "ExchangeRate",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY "AmountLCY",
--                    AmountLCY "AmountLCY_ABS",
--                    DueDate "DueDate",
--                    CBUD_CASHFLOW_CODE "CashFlowCode", CBUD_COMPANYMAP_CODE "CompanyCode",
--                    CASM_INFLOW_OUTFLOW "InflowOutFlowCode"
--             from (select CBUD_CASHFLOW_CODE,CBUD_COMPANYMAP_CODE, 
--                    pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                    sum(cbud_amount_fcy) AmountFCY,
--                    round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                    sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
--                   from trtran150A inner join trtran150
--                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                     left outer join trmaster150A
--                        on cbud_cashflow_code = CASP_CASM_CODE
--                        and CASP_Record_status not in (10200005,10200006)
--                   where cbud_record_status not in (10200005,10200006)
--                   and cbus_record_status not in (10200005,10200006)
--                   and trunc(CBUD_DUE_DATE)=DatTemp
--                   and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
--                   group by CBUD_CASHFLOW_CODE, casp_account_number,
--                    Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUD_DUE_DATE
--                   union all
--                    select CBUD_CASHFLOW_CODE, CBUD_COMPANYMAP_CODE,
--                              pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                             sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                              sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
--                       from trtran150A osub inner join trtran150 oma
--                         on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                         left outer join trmaster150A 
--                            on cbud_cashflow_code = CASP_CASM_CODE
--                            and CASP_Record_status not in (10200005,10200006)
--                       where cbud_record_status not in (10200005,10200006)
--                       and cbus_record_status not in (10200005,10200006)
--                       and trunc(CBUD_DUE_DATE)=DatTemp
--                       and CBUS_CASHFLOW_TYPE=17400001 -- Budget
--                       and not exists (select * from trtran150A sub inner join trtran150 ma
--                         on ma.CBUS_SYSTEM_REFERENCE=sub.CBUD_SYSTEM_REFERENCE
--                          and sub.cbud_cashflow_code = osub.CBUD_CASHFLOW_CODE
--                         where sub.cbud_record_status not in (10200005,10200006)
--                            and trunc(sub.CBUD_DUE_DATE)=DatTemp
--                            and ma.CBUS_CASHFLOW_TYPE=17400002 -- Daily Cash Flow
--                            and ma.cbus_record_status not in (10200005,10200006))
--                       group by CBUD_CASHFLOW_CODE, casp_account_number,
--                        Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUD_DUE_DATE)
--                left outer join  TRMASTER151
--                on CMAP_PICK_CODE=CBUD_COMPANYMAP_CODE
--                and CMAP_RECORD_STATUS not in (10200005,10200006)
--                left outer join TRMASTER150
--                on CASM_PICK_CODE= CBUD_CASHFLOW_CODE
--                and CASM_RECORD_STATUS not in (10200005,10200006);
--      select rownum "Rownum", pkgreturncursor.fncgetdescription(Brnh_Bank_code,2) "Bank",
--         pkgreturncursor.fncgetdescription(BRNH_ACCOUNT_TYPE,2) "AccountTypeName",
--         pkgreturncursor.fncgetdescription(nvl(BRNH_CONCENTRATION_ACCOUNTS,12400002),1) "ConcentrationAcc",
--         BRNH_ACCOUNT_NUMBER "AccountNumber",RSTM_ASON_DATE || ' Time ' || RSTM_ASON_TIME "StatementDateTime",
--         nvl(RSTM_BALANCE_AMOUNT,0) "AccountBalance",  nvl(brnh_minimum_balance,0) "MinimumBalance",
--         nvl(LBBL_PLANNINGBOOK_BALANCE,0) "PlanningBookBalance",
--         nvl(LBBL_ERPUNCLEARED_BALANCE,0)"ERPUnclearedBalance",
--         nvl(LBBL_AMOUNTTOBE_BLOCKED,0) "AmountToBeBlocked", nvl(LBBL_AMOUNT_AVALIBLE,0) "AmountAvailable",
--         nvl(AmountFCY,0) "AmountFCY", nvl(ExchangeRate,0)"ExchangeRate",
--         nvl(AmountLCY,0) "ProposedReqAmount",nvl(AmountLCY,0) "OverrideReqAmount",
--         nvl(LBBL_AMOUNT_AVALIBLE,0)-nvl(AmountLCY,0) "AmountAvailableForTransfer",
--         RSTM_ASON_DATE "AsonDate", BRNH_ACCOUNT_TYPE "AccountType",
--         BRNH_CONCENTRATION_ACCOUNTS "ConcentrationAccount",
--         (case when nvl(LBBL_ACCOUNT_BALANCE,0) = 0 then 1 else 2 end) "RecordStatus"
--  from trmaster306A left outer join
--                    
--                    (select RSTM_ACCOUNT_NUMBER ,RSTM_BALANCE_AMOUNT,
--                            RSTM_ASON_DATE, RSTM_ASON_TIME
--                     from trtran008AA
--                     where RSTM_ASON_DATE=DatTemp
--                     and RSTM_RECORD_STATUS not in (10200005,10200006))
--                     on BRNH_ACCOUNT_NUMBER=RSTM_ACCOUNT_NUMBER
--          left outer join (select * from trtran151
--                         where LBBL_RECORD_STATUS not in (10200005,10200006)
--                         and LBBL_ASON_DATE =DatTemp
--                         and LBBL_reference_number= (select max(LBBL_reference_number)
--                           from trtran151 
--                           where LBBL_RECORD_STATUS not in (10200005,10200006)
--                           and LBBL_ASON_DATE =DatTemp))
--          on BRNH_ACCOUNT_NUMBER=LBBL_ACCOUNT_NUMBER
--          left outer join
--          (select AccountNumber , sum(AmountFCY) AmountFCY, sum(AmountLCY) AmountLCY,
--           round(sum(AmountLCY)/sum(AmountFCY),2) ExchangeRate
--           from (select CBUD_CASHFLOW_CODE, casp_account_number AccountNumber,
--                        pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                        sum(cbud_amount_fcy) AmountFCY,
--                        round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                        sum(cbud_amount_lcy) AmountLCY,12400002 BudgetEditable
--                   from trtran150A inner join trtran150
--                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                     left outer join trmaster150A
--                        on cbud_cashflow_code = CASP_CASM_CODE
--                        and CASP_Record_status not in (10200005,10200006)
--                   where cbud_record_status not in (10200005,10200006)
--                   and cbus_record_status not in (10200005,10200006)
--                   and CBUD_DUE_DATE=DatTemp
--                   and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
--                   group by CBUD_CASHFLOW_CODE, casp_account_number,
--                    Cbud_currency_code
--               minus
--                select CBUD_CASHFLOW_CODE, casp_account_number AccountNumber,
--                          pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                         sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                          sum(cbud_amount_lcy) AmountLCY,nvl(CONF_BUDGET_EDITABLE,12400002) BudgetEditable
--                   from trtran150A inner join trtran150
--                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                     left outer join trmaster150A
--                        on cbud_cashflow_code = CASP_CASM_CODE
--                        and CASP_Record_status not in (10200005,10200006)
--                     left outer join trmaster150B
--                       on CBUD_CASHFLOW_CODE=CONF_CASM_CODE
--                       and CONF_RECORD_STATUS not in (10200005,10200006)
--                   where cbud_record_status not in (10200005,10200006)
--                   and cbus_record_status not in (10200005,10200006)
--                   and CBUD_DUE_DATE=DatTemp
--                   and CBUS_CASHFLOW_TYPE=17400001 -- Budget
--                   and CONF_BUDGET_CONSIDER=12400001
--                   group by CBUD_CASHFLOW_CODE, casp_account_number,
--                    Cbud_currency_code,CONF_BUDGET_EDITABLE)
--                    group by AccountNumber)
--            on BRNH_ACCOUNT_NUMBER=AccountNumber;

---ADDED BY SUPRIYA ON 14-05-20
    if numinfotype = REFGETCASHPOOLDETAILS then
    varOperation := 'Getting CASH POOL DETAILS';
    begin
        --VarTemp:=gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber',VarTemp);
        DatTemp := gconst.fncxmlextract(xmldoc, 'AsonDate', DatTemp);
    exception
    when no_data_found then
        DatTemp := SYSDATE;
    end;

    begin
        numcode := gconst.fncxmlextract(xmldoc, 'SerialNumber', numcode);
    exception
    when no_data_found then
        numcode := 0;
    end;

     open genCursor for      
            select rownum "Rownum", POOL_SERIAL_NUMBER "SerialNumber", 
            pkgreturncursor.fncgetdescription(POOL_TO_BANK,2) "ToBank",
            pkgreturncursor.fncgetdescription(POOL_FROM_BANK,2) "FromBank",
                POOL_FROM_ACCOUNT "FromAccount", POOL_TO_ACCOUNT "ToAccount", 
                POOL_TRANSFER_AMOUNT "TransferAmount", POOL_ASON_DATE "AsonDate",  
                POOL_TRANSFER_AMOUNT "AvailableAmount", 0 "AmountUsed",        
                POOL_TO_BANK "ToBankCode", POOL_FROM_BANK "FromBankCode",3 "RecordStatus"
            from TRTRAN151A 
            WHERE POOL_ASON_DATE = DatTemp
            and POOL_SERIAL_NUMBER = decode(numcode,0,POOL_SERIAL_NUMBER,numcode)
            AND POOL_RECORD_STATUS NOT IN (10200005,10200006);
--              select rownum "Rownum", POOL_REFERENCE_NUMBER "ReferenceNumber",
--                     POOL_SERIAL_NUMBER "SerialNumber", POOL_FROM_ACCOUNT "FromAccount",
--                     POOL_TO_ACCOUNT "ToAccount", POOL_TRANSFER_AMOUNT "TransferAmount",
--                     3 "RecordStatus", POOL_ASON_DATE "AsonDate"
--              from TRTRAN151A 
--              WHERE POOL_REFERENCE_NUMBER = VarTemp
--              AND POOL_RECORD_STATUS NOT IN (10200005,10200006);
     goto process_end;
  end if;

-------------------------------------------ADDED BY SUPRIYA ON 18/05/2020------------------------------------------
if  numInfoType = REFCASHPOSITIONDASHBOARD then       

    VarTemp:=gconst.fncxmlextract(xmldoc,'Param/CompanyCode',VarTemp);

    if VarTemp = 'ALL' or LENGTH(VarTemp) > 9 then         
            Select nvl(PRMC_FUNCTIONAL_CURRENCY,0), nvl(PRMC_REPORTING_CURRENCY,0)
            into numcode1,numcode2
            from TRSYSTEM051
            where rownum = 1;        
    else       
            Select nvl(COMP_FUNCTIONAL_CURRENCY,0), nvl(COMP_PNL_CURRENCY,0)
            into numcode1,numcode2
            from TRMASTER301
            where COMP_COMPANY_CODE = TO_NUMBER(TRIM(TRAILING ',' FROM VarTemp));
    end if;

--    select PICK_SHORT_DESCRIPTION
--    into numfcy
--    from TRMASTER001
--    where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
--                            from TRSYSTEM051);

    select PICK_SHORT_DESCRIPTION, nvl(PRMC_CASHDASH_LATESTDATE,12400002)
    into numfcy, numcode
    from TRSYSTEM051 inner join trmaster001
    on PICK_KEY_VALUE = PRMC_CONVERT_CFAMOUNTINTO;

    if numfcy = null then 
        numfcy := 1;
    elsif numfcy = 0 then
        numfcy := 1;
    end if;

    dattemp := sysdate;
    if numcode = 12400001 then
        select max(LBBL_ASON_DATE)
        into dattemp
        from TRTRAN151
        where LBBL_RECORD_STATUS not in (10200005,10200006)
        and LBBL_ASON_DATE <= sysdate;
    end if;

    open gencursor for 
        select rownum "Rownum", AsonDate "AsonDate", AsonTime "AsonTime", Bank "Bank",
               AccountNumber "AccountNumber", 
               BalanceAmount "BalanceAmount",
               ExRate "ExchangeRate", 
               (BalanceAmount * ExRate) "ConvertedLocalCurrency",                       
               round((BalanceAmount * ExRate)/numfcy,2) "Converted_BalanceAmount",                       
               Company "Company", Currency "Currency", Location "Location",
               Branch "Branch"
        from (select LBBL_ASON_DATE AsonDate, LBBL_ASON_TIME AsonTime,
               pkgreturncursor.fncgetdescription(BRNH_BANK_CODE,2) Bank,
               pkgreturncursor.fncgetdescription(BRNH_PICK_CODE,2) Branch,
               LBBL_ACCOUNT_NUMBER AccountNumber,
               (case when nvl(LBBL_ACCOUNT_BALANCE,0) != 0 then LBBL_ACCOUNT_BALANCE 
               else (select RSTM_BALANCE_AMOUNT
               from trtran008AA
               where RSTM_ACCOUNT_NUMBER = ACCT_ACCOUNT_NUMBER
               and RSTM_RECORD_STATUS not in (10200005,10200006)
               and RSTM_SERIAL_NUMBER = (select max(RSTM_SERIAL_NUMBER) 
                                 from trtran008AA
                                 where RSTM_RECORD_STATUS not in (10200005,10200006)
                                 and trunc(RSTM_ASON_DATE) = trunc(dattemp))) end) BalanceAmount,                  
               pkgreturncursor.fncgetdescription(BRNH_COMPANY_CODE,2) Company,
               pkgreturncursor.fncgetdescription(BRNH_CURRENCY_CODE,2) Currency,
               pkgreturncursor.fncgetdescription(BRNH_LOCATION_CODE,2) Location,
               nvl(pkgforexprocess.fncGetRate(BRNH_CURRENCY_CODE, numcode1, trunc(dattemp), 25300001),-9999) ExRate
               from trmaster306b inner join trmaster306a
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE 
            and ACCT_RECORD_STATUS not in (10200005,10200006)
            and ACCT_ACCOUNT_STATUS=14400001
              left outer join TRTRAN151
                on ACCT_ACCOUNT_NUMBER = LBBL_ACCOUNT_NUMBER
                where trunc(LBBL_ASON_DATE) = trunc(dattemp)
                and LBBL_RECORD_STATUS not in (10200005,10200006)
                and LBBL_ACCOUNT_BALANCE != 0);
--            select LBBL_ASON_DATE "AsonDate", LBBL_ASON_TIME "AsonTime",
--                   pkgreturncursor.fncgetdescription(BRNH_BANK_CODE,2) "Bank",
--                   LBBL_ACCOUNT_NUMBER "AccountNumber",
--                   (case when nvl(LBBL_ACCOUNT_BALANCE,0) != 0 then LBBL_ACCOUNT_BALANCE 
--                   else (select RSTM_BALANCE_AMOUNT
--                   from trtran008AA
--                   where RSTM_ACCOUNT_NUMBER = ACCT_ACCOUNT_NUMBER
--                   and RSTM_RECORD_STATUS not in (10200005,10200006)
--                   and RSTM_SERIAL_NUMBER = (select max(RSTM_SERIAL_NUMBER) 
--                                     from trtran008AA
--                                     where RSTM_RECORD_STATUS not in (10200005,10200006)
--                                     and trunc(RSTM_ASON_DATE) = trunc(sysdate))) end) "BalanceAmount",
--                  (case when nvl(LBBL_ACCOUNT_BALANCE,0) != 0 then (LBBL_ACCOUNT_BALANCE/numfcy) 
--                   else (select (RSTM_BALANCE_AMOUNT/numfcy)
--                   from trtran008AA
--                   where RSTM_ACCOUNT_NUMBER = ACCT_ACCOUNT_NUMBER
--                   and RSTM_RECORD_STATUS not in (10200005,10200006)
--                   and RSTM_SERIAL_NUMBER = (select max(RSTM_SERIAL_NUMBER) 
--                                     from trtran008AA
--                                     where RSTM_RECORD_STATUS not in (10200005,10200006)
--                                     and trunc(RSTM_ASON_DATE) = trunc(sysdate))) end) "Converted_BalanceAmount", 
--                   pkgreturncursor.fncgetdescription(BRNH_COMPANY_CODE,2) "Company",
--                   pkgreturncursor.fncgetdescription(BRNH_CURRENCY_CODE,2) "Currency",
--                   pkgreturncursor.fncgetdescription(BRNH_LOCATION_CODE,2) "Location"
--            from trmaster306a left outer join TRTRAN151
--            on ACCT_ACCOUNT_NUMBER = LBBL_ACCOUNT_NUMBER
--            where trunc(LBBL_ASON_DATE) = trunc(sysdate)
--            and LBBL_RECORD_STATUS not in (10200005,10200006)
--             and LBBL_ACCOUNT_BALANCE != 0;
--            and LBBL_reference_number = (select max(LBBL_reference_number)
--                                         from trtran151 
--                                         where LBBL_RECORD_STATUS not in (10200005,10200006)
--                                         and LBBL_ASON_DATE =trunc(sysdate));
--         select RSTM_ASON_DATE "AsonDate", RSTM_ASON_TIME "AsonTime",
--               pkgreturncursor.fncgetdescription(BRNH_CURRENCY_CODE,2) "Currency",
--               pkgreturncursor.fncgetdescription(RSTM_LOCAL_BANK,2) "Bank",
--               RSTM_ACCOUNT_NUMBER "AccountNumber",RSTM_BALANCE_AMOUNT "BalanceAmount",
--               pkgreturncursor.fncgetdescription(BRNH_COMPANY_CODE,2) "Company",
--               pkgreturncursor.fncgetdescription(BRNH_LOCATION_CODE,2) "Location"
--         from trtran008AA left outer join trmaster306a
--          on ACCT_ACCOUNT_NUMBER=RSTM_ACCOUNT_NUMBER
--         where trunc(RSTM_ASON_DATE) = trunc(sysdate)
--         and BRNH_record_status not in (10200005,10200006)
--         and RSTM_SERIAL_NUMBER= 
--            (select max(RSTM_SERIAL_NUMBER) 
--              from trtran008AA
--            where trunc(RSTM_ASON_DATE) = trunc(sysdate)
--             and RSTM_RECORD_STATUS not in (10200005,10200006))
--         and RSTM_RECORD_STATUS not in (10200005,10200006);
    Goto Process_End;
end if; 
-----------------Added by Supriya on 07/10/2020------------------------
if  numInfoType = REFCURRENCYFORCASHPOSITION then   

    VarTemp:=gconst.fncxmlextract(xmldoc,'Param/CompanyCode',VarTemp);

    if VarTemp = 'ALL' or LENGTH(VarTemp) > 9 then  
        open genCursor for 
            Select pkgreturncursor.fncgetdescription(PRMC_FUNCTIONAL_CURRENCY,2) "FunctionalCurrency",
                   pkgreturncursor.fncgetdescription(PRMC_REPORTING_CURRENCY,2) "ReportingCurrency",
                   PRMC_FUNCTIONAL_CURRENCY "FunctionalCurrencyCode", 
                   PRMC_REPORTING_CURRENCY "ReportingCurrencyCode"
            from TRSYSTEM051, TRSYSTEM051A
            where rownum = 1;
--            Select pkgreturncursor.fncgetdescription(PRMC_FUNCTIONAL_CURRENCY,2) "FunctionalCurrency",
--                   pkgreturncursor.fncgetdescription(PRMC_REPORTING_CURRENCY,2) "ReportingCurrency",
--                   PRMC_FUNCTIONAL_CURRENCY "FunctionalCurrencyCode", 
--                   PRMC_REPORTING_CURRENCY "ReportingCurrencyCode"
--            from TRSYSTEM051
--            where rownum = 1;
        goto process_end;
    else
        open genCursor for 
            Select pkgreturncursor.fncgetdescription(COMP_FUNCTIONAL_CURRENCY,2) "FunctionalCurrency",
                   pkgreturncursor.fncgetdescription(COMP_PNL_CURRENCY,2) "ReportingCurrency",
                   COMP_FUNCTIONAL_CURRENCY "FunctionalCurrencyCode", 
                   COMP_PNL_CURRENCY "ReportingCurrencyCode"
            from TRMASTER301
            where COMP_COMPANY_CODE = TO_NUMBER(TRIM(TRAILING ',' FROM VarTemp));
        goto process_end;
    end if;
end if; 

-----------------Added by Supriya on 09/11/2020------------------------
if  numInfoType = REFFUNCTIONALCURRENCYFORCFB then   

--    numcode:=gconst.fncxmlextract(xmldoc,'Param/CompanyCode',numcode);

    open genCursor for 
        Select pkgreturncursor.fncgetdescription(COMP_FUNCTIONAL_CURRENCY,2) "FunctionalCurrency",
               pkgreturncursor.fncgetdescription(COMP_PNL_CURRENCY,2) "ReportingCurrency",
               COMP_FUNCTIONAL_CURRENCY "FunctionalCurrencyCode", 
               COMP_PNL_CURRENCY "ReportingCurrencyCode"
        from TRMASTER301
        where COMP_COMPANY_CODE = (select CMAP_COMPANY_CODE
                                    from TRMASTER151
                                    WHERE CMAP_PICK_CODE = 15100001)
             and COMP_COMPANY_CODE in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid
		AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )  ;
    goto process_end;
end if; 

-----------------Added by Supriya on 21/12/2020------------------------
if  numInfoType = REFGETLETTERDETAILS then   

    vartemp := gconst.fncxmlextract(xmldoc,'Param/SynonymName',vartemp);

    open genCursor for 
        select WOPM_SYNONYM_NAME "SynonymName", WOPM_REPORT_ID "ReportID", WOPM_BANK_CODE "BankCode",
               WOPM_CONTROL_NAME "ControlName", WOPM_FILE_TYPE "FileType", WOPM_SERIAL_NUMBER "SerialNumber",WOPM_ENABLE_TEMPLATE "EnableLetterTemplate"
        from TRSYSTEM003B
        where WOPM_RECORD_STATUS not in (10200005,10200006)
        and WOPM_SYNONYM_NAME = vartemp;
    goto process_end;
end if; 


if  numInfoType = REFGETLETTERNAME then   
 GLOG.Log_write('VarTemp testeeeeeeeeeeeee start: ');
varTemp := gconst.fncxmlextract(xmldoc,'Param/LetterID', varTemp); 
    GLOG.Log_write('VarTemp testeeeeeeee: ' || VarTemp);
        open genCursor for 

        select WOPM_CONTROL_NAME LetterName from trsystem003b 
        WHERE WOPM_REPORT_ID =vartemp 
        and wopm_record_status not in (10200005,10200006);
        goto process_end;
end if; 

---ADDED BY SUPRIYA ON 18-05-20
--    if numinfotype = REFDAILYCASHFLOWDETAILS then
--    varOperation := 'Getting CASH IN HAND DAILY';
--    --VarTemp:=gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber',VarTemp);
--     open genCursor for      
--              select  pkgreturncursor.fncgetdescription(CMAP_COMPANY_CODE,1) "Company",
--                    pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,1) "Location",
--                    pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,1) "Portfolio", 
--                    pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) "InflowOutFlow",
--                    Currency "Currency", CASM_SHORT_DESCRIPTION "ShortDescription",
--                    CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
--                    CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountFCY "AmountFCY",
--                    ExchangeRate "ExchangeRate",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY "AmountLCY",
--                    AmountLCY "AmountLCY_ABS",
--                    DueDate "DueDate",
--                    CBUD_CASHFLOW_CODE "CashFlowCode", CBUD_COMPANYMAP_CODE "CompanyCode"
--             from (select CBUD_CASHFLOW_CODE,CBUD_COMPANYMAP_CODE, 
--                    pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                    sum(cbud_amount_fcy) AmountFCY,
--                    round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                    sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
--                   from trtran150A inner join trtran150
--                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                     left outer join trmaster150A
--                        on cbud_cashflow_code = CASP_CASM_CODE
--                        and CASP_Record_status not in (10200005,10200006)
--                   where cbud_record_status not in (10200005,10200006)
--                   and cbus_record_status not in (10200005,10200006)
--                   and trunc(CBUD_DUE_DATE)>=trunc(sysdate)
--                   and CBUS_CASHFLOW_TYPE=17400002 --  --Daily Cash Flow
--                   group by CBUD_CASHFLOW_CODE, casp_account_number,
--                    Cbud_currency_code,CBUD_COMPANYMAP_CODE,to_char(CBUD_DUE_DATE,'dd-MON-YY')
--                   union all
--                    select CBUD_CASHFLOW_CODE, CBUD_COMPANYMAP_CODE,
--                              pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                             sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                              sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
--                       from trtran150A inner join trtran150
--                         on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                         left outer join trmaster150A
--                            on cbud_cashflow_code = CASP_CASM_CODE
--                            and CASP_Record_status not in (10200005,10200006)
--                       where cbud_record_status not in (10200005,10200006)
--                       and cbus_record_status not in (10200005,10200006)
--                       and trunc(CBUD_DUE_DATE)>=trunc(sysdate)
--                       and CBUS_CASHFLOW_TYPE = 17400001 -- Budget
--                       group by CBUD_CASHFLOW_CODE, casp_account_number,
--                        Cbud_currency_code,CBUD_COMPANYMAP_CODE,to_char(CBUD_DUE_DATE,'dd-MON-YY'))
--                left outer join  TRMASTER151
--                on CMAP_PICK_CODE=CBUD_COMPANYMAP_CODE
--                and CMAP_RECORD_STATUS not in (10200005,10200006)
--                left outer join TRMASTER150
--                on CASM_PICK_CODE= CBUD_CASHFLOW_CODE
--                and CMAP_RECORD_STATUS not in (10200005,10200006);
--     goto process_end;
--  end if;

  ---ADDED BY SUPRIYA ON 20-05-20
    if numinfotype = REFMONTHLYCASHFLOWDETAILS then
    varOperation := 'Getting CASH IN HAND Monthly';
    --VarTemp:=gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber',VarTemp);

--    select PICK_SHORT_DESCRIPTION
--    into numfcy
--    from TRMASTER001
--    where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
--                            from TRSYSTEM051);
    select PICK_SHORT_DESCRIPTION, nvl(PRMC_CASHDASH_LATESTDATE,12400002)
    into numfcy, numcode3
    from TRSYSTEM051 inner join trmaster001
    on PICK_KEY_VALUE = PRMC_CONVERT_CFAMOUNTINTO;

    dattemp := sysdate;
    if numcode3 = 12400001 then
        begin
            select nvl(max(CBUD_DUE_DATE),sysdate)
            into dattemp
            from trtran150A
            where cbud_record_status not in (10200005,10200006)
            and CBUD_DUE_DATE <= sysdate;
        exception
        when others then
            dattemp := sysdate;
        end;        
    end if;

    if numfcy = null then 
        numfcy := 1;
    elsif numfcy = 0 then
        numfcy := 1;
    end if;

    VarTemp:=gconst.fncxmlextract(xmldoc,'Param/CompanyCode',VarTemp);

    if VarTemp = 'ALL' or LENGTH(VarTemp) > 9 then          
            Select nvl(PRMC_FUNCTIONAL_CURRENCY,0), nvl(PRMC_REPORTING_CURRENCY,0)
            into numcode1,numcode2
            from TRSYSTEM051
            where rownum = 1;        
    else       
            Select nvl(COMP_FUNCTIONAL_CURRENCY,0), nvl(COMP_PNL_CURRENCY,0)
            into numcode1,numcode2
            from TRMASTER301
            where COMP_COMPANY_CODE = TO_NUMBER(TRIM(TRAILING ',' FROM VarTemp));
    end if;

     open genCursor for  
             select to_date('01-' || DueDate) "MonthOrder",
             rownum "Rownum", pkgreturncursor.fncgetdescription(CMAP_COMPANY_CODE,1) "Company",
                pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,1) "Location",
                pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,1) "Portfolio", 
                pkgreturncursor.fncgetdescription(CASM_INFLOW_OUTFLOW,1) "InflowOutFlow",
                CASM_CATEGORY1 "Category1", CASM_CATEGORY2 "Category2",
                CASM_PARTICULAR "Particular", CASM_DETAILS "Details", 
                Currency "Currency", CASM_SHORT_DESCRIPTION "ShortDescription",
                decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountFCY "AmountFCY",
                ExchangeRate "ExchangeRate",
                decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY "AmountLCY",
                (decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY)/numfcy "AmountLCY_Converted",
                AmountLCY/numfcy "AmountLCY_ABS",     
                DueDate "DueDate", CBUD_CASHFLOW_CODE  "CashFlowCode", CBUD_COMPANYMAP_CODE "CompanyCode"
         from (select CBUD_CASHFLOW_CODE,CBUD_COMPANYMAP_CODE, 
                pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                sum(cbud_amount_fcy) AmountFCY,
                --round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                nvl(pkgforexprocess.fncGetRate(Cbud_currency_code, numCode1, trunc(dattemp), 25300001),-9999) ExchangeRate,
                sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'MON-YY') DueDate
               from trtran150A inner join trtran150
                 on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                 left outer join trmaster150A
                    on cbud_cashflow_code = CASP_CASM_CODE
                    and CASP_Record_status not in (10200005,10200006)
               where cbud_record_status not in (10200005,10200006)
               and cbus_record_status not in (10200005,10200006)
               and trunc(CBUD_DUE_DATE)>=trunc(dattemp)
               and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
               group by CBUD_CASHFLOW_CODE, casp_account_number,
                Cbud_currency_code,CBUD_COMPANYMAP_CODE,to_char(CBUD_DUE_DATE,'MON-YY')
               union all
                select CBUD_CASHFLOW_CODE, CBUD_COMPANYMAP_CODE,
                          pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                         sum(cbud_amount_fcy) AmountFCY,
                         --round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                         nvl(pkgforexprocess.fncGetRate(Cbud_currency_code, numCode1, trunc(dattemp), 25300001),-9999) ExchangeRate,
                          sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'MON-YY') DueDate
                   from trtran150A inner join trtran150
                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                     left outer join trmaster150A
                        on cbud_cashflow_code = CASP_CASM_CODE
                        and CASP_Record_status not in (10200005,10200006)
                   where cbud_record_status not in (10200005,10200006)
                   and cbus_record_status not in (10200005,10200006)
                   and trunc(CBUD_DUE_DATE)>=trunc(dattemp)
                   and CBUS_CASHFLOW_TYPE=17400001 -- Budget
                   group by CBUD_CASHFLOW_CODE, casp_account_number,
                    Cbud_currency_code,CBUD_COMPANYMAP_CODE,to_char(CBUD_DUE_DATE,'MON-YY'))
            left outer join  TRMASTER151
            on CMAP_PICK_CODE=CBUD_COMPANYMAP_CODE
            and CMAP_RECORD_STATUS not in (10200005,10200006)
            left outer join TRMASTER150
            on CASM_PICK_CODE= CBUD_CASHFLOW_CODE
            and CMAP_RECORD_STATUS not in (10200005,10200006)
            order by 1;
     goto process_end;
  end if;
  --------------------------------------------------
  ---ADDED BY SUPRIYA ON 21-05-20
    if numinfotype = REFFILTERDAILYCASHFLOW then
    varOperation := 'Getting CASH IN HAND DAILY';
    VarTemp  := gconst.fncxmlextract(xmldoc,'Param/InflowOutFlow',VarTemp);
    VarTemp1 := gconst.fncxmlextract(xmldoc,'Param/DueDate',VarTemp1);

    select to_date(VarTemp1) 
    into dattemp
    from dual;

    select PICK_SHORT_DESCRIPTION
    into numfcy
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
                            from TRSYSTEM051);

    if numfcy = null then 
        numfcy := 1;
    elsif numfcy = 0 then
        numfcy := 1;
    end if;

     open genCursor for      
                select  pkgreturncursor.fncgetdescription(CMAP_COMPANY_CODE,1) "Company",
                    pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,1) "Location",
                    pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,1) "Portfolio", 
                    pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) "InflowOutFlow",
                    Currency "Currency", CASM_SHORT_DESCRIPTION "ShortDescription",
                    CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
                    CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountFCY "AmountFCY",
                    ExchangeRate "ExchangeRate",
                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY "AmountLCY",
                    (decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY)/numfcy "Converted_AmountLCY",
                    AmountLCY "AmountLCY_ABS",
                    DueDate "DueDate",
                    CBUD_CASHFLOW_CODE "CashFlowCode", CBUD_COMPANYMAP_CODE "CompanyCode",
                    CASM_INFLOW_OUTFLOW "InflowOutFlowCode"
             from (select CBUD_CASHFLOW_CODE,CBUD_COMPANYMAP_CODE, 
                    pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                    sum(cbud_amount_fcy) AmountFCY,
                    round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                    sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
                   from trtran150A inner join trtran150
                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                     left outer join trmaster150A
                        on cbud_cashflow_code = CASP_CASM_CODE
                        and CASP_Record_status not in (10200005,10200006)
                   where cbud_record_status not in (10200005,10200006)
                   and cbus_record_status not in (10200005,10200006)
                   and trunc(CBUD_DUE_DATE)=trunc(dattemp)
                   and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
                   group by CBUD_CASHFLOW_CODE, casp_account_number,
                    Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUD_DUE_DATE
                   union all
                    select CBUD_CASHFLOW_CODE, CBUD_COMPANYMAP_CODE,
                              pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                             sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                              sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
                       from trtran150A osub inner join trtran150 oma
                         on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                         left outer join trmaster150A 
                            on cbud_cashflow_code = CASP_CASM_CODE
                            and CASP_Record_status not in (10200005,10200006)
                       where cbud_record_status not in (10200005,10200006)
                       and cbus_record_status not in (10200005,10200006)
                       and trunc(CBUD_DUE_DATE)=trunc(dattemp)
                       and CBUS_CASHFLOW_TYPE=17400001 -- Budget
                       and not exists (select * from trtran150A sub inner join trtran150 ma
                         on ma.CBUS_SYSTEM_REFERENCE=sub.CBUD_SYSTEM_REFERENCE
                          and sub.cbud_cashflow_code = osub.CBUD_CASHFLOW_CODE
                         where sub.cbud_record_status not in (10200005,10200006)
                            and trunc(sub.CBUD_DUE_DATE)=trunc(dattemp)
                            and ma.CBUS_CASHFLOW_TYPE=17400002 -- Daily Cash Flow
                            and ma.cbus_record_status not in (10200005,10200006))
                       group by CBUD_CASHFLOW_CODE, casp_account_number,
                        Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUD_DUE_DATE)
                left outer join  TRMASTER151
                on CMAP_PICK_CODE=CBUD_COMPANYMAP_CODE
                and CMAP_RECORD_STATUS not in (10200005,10200006)
                left outer join TRMASTER150
                on CASM_PICK_CODE= CBUD_CASHFLOW_CODE
                and CASM_RECORD_STATUS not in (10200005,10200006)
                WHERE --DueDate = VarTemp1
                 pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) = VarTemp;

--              select  pkgreturncursor.fncgetdescription(CMAP_COMPANY_CODE,1) "Company",
--                    pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,1) "Location",
--                    pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,1) "Portfolio", 
--                    pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) "InflowOutFlow",
--                    Currency "Currency", CASM_SHORT_DESCRIPTION "ShortDescription",
--                    CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
--                    CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountFCY "AmountFCY",
--                    ExchangeRate "ExchangeRate",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY "AmountLCY",
--                    AmountLCY "AmountLCY_ABS",
--                    DueDate "DueDate",
--                    CBUD_CASHFLOW_CODE "CashFlowCode", CBUD_COMPANYMAP_CODE "CompanyCode"
--             from (select CBUD_CASHFLOW_CODE,CBUD_COMPANYMAP_CODE, 
--                    pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                    sum(cbud_amount_fcy) AmountFCY,
--                    round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                    sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
--                   from trtran150A inner join trtran150
--                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                     left outer join trmaster150A
--                        on cbud_cashflow_code = CASP_CASM_CODE
--                        and CASP_Record_status not in (10200005,10200006)
--                   where cbud_record_status not in (10200005,10200006)
--                   and cbus_record_status not in (10200005,10200006)
--                   and trunc(CBUD_DUE_DATE) >= trunc(sysdate)
--                   and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
--                   group by CBUD_CASHFLOW_CODE, casp_account_number,
--                    Cbud_currency_code,CBUD_COMPANYMAP_CODE,to_char(CBUD_DUE_DATE,'dd-MON-YY')
--                   union all
--                    select CBUD_CASHFLOW_CODE, CBUD_COMPANYMAP_CODE,
--                              pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                             sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                              sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
--                       from trtran150A inner join trtran150
--                         on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                         left outer join trmaster150A
--                            on cbud_cashflow_code = CASP_CASM_CODE
--                            and CASP_Record_status not in (10200005,10200006)
--                       where cbud_record_status not in (10200005,10200006)
--                       and cbus_record_status not in (10200005,10200006)
--                       and trunc(CBUD_DUE_DATE) >= trunc(sysdate)
--                       and CBUS_CASHFLOW_TYPE=17400001 -- Budget
--                       group by CBUD_CASHFLOW_CODE, casp_account_number,
--                        Cbud_currency_code,CBUD_COMPANYMAP_CODE,to_char(CBUD_DUE_DATE,'dd-MON-YY'))
--                left outer join  TRMASTER151
--                on CMAP_PICK_CODE=CBUD_COMPANYMAP_CODE
--                and CMAP_RECORD_STATUS not in (10200005,10200006)
--                left outer join TRMASTER150
--                on CASM_PICK_CODE= CBUD_CASHFLOW_CODE
--                and CMAP_RECORD_STATUS not in (10200005,10200006)

     goto process_end;
  end if;

  ---ADDED BY SUPRIYA ON 21-05-20
    if numinfotype = REFFILTERMONTHLYCASHFLOW then
    varOperation := 'Getting CASH IN HAND Monthly';
    VarTemp  := gconst.fncxmlextract(xmldoc,'Param/InflowOutFlow',VarTemp);
    VarTemp1 := gconst.fncxmlextract(xmldoc,'Param/DueDate',VarTemp1);

    select PICK_SHORT_DESCRIPTION
    into numfcy
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
                            from TRSYSTEM051);
    if numfcy = null then 
        numfcy := 1;
    elsif numfcy = 0 then
        numfcy := 1;
    end if;

     open genCursor for   
             select  pkgreturncursor.fncgetdescription(CMAP_COMPANY_CODE,1) "Company",
                pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,1) "Location",
                pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,1) "Portfolio", 
                pkgreturncursor.fncgetdescription(CASM_INFLOW_OUTFLOW,1) "InflowOutFlow",
                CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
                CASM_PARTICULAR "Particular", CASM_DETAILS "Details", 
                Currency "Currency", CASM_SHORT_DESCRIPTION "ShortDescription",
                decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountFCY "AmountFCY",
                ExchangeRate "ExchangeRate",
                decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY "AmountLCY",
                (decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY)/numfcy "Converted_AmountLCY",
                AmountLCY "AmountLCY_ABS",      
                DueDate "DueDate", CBUD_CASHFLOW_CODE  "CashFlowCode", CBUD_COMPANYMAP_CODE "CompanyCode"
         from (select CBUD_CASHFLOW_CODE,CBUD_COMPANYMAP_CODE, 
                pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                sum(cbud_amount_fcy) AmountFCY,
                round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'MON-YY') DueDate
               from trtran150A inner join trtran150
                 on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                 left outer join trmaster150A
                    on cbud_cashflow_code = CASP_CASM_CODE
                    and CASP_Record_status not in (10200005,10200006)
               where cbud_record_status not in (10200005,10200006)
               and cbus_record_status not in (10200005,10200006)
               and trunc(CBUD_DUE_DATE) >= trunc(sysdate)
               and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
               group by CBUD_CASHFLOW_CODE, casp_account_number,
                Cbud_currency_code,CBUD_COMPANYMAP_CODE,to_char(CBUD_DUE_DATE,'MON-YY')
               union all
                select CBUD_CASHFLOW_CODE, CBUD_COMPANYMAP_CODE,
                          pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                         sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                          sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'MON-YY') DueDate
                   from trtran150A inner join trtran150
                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                     left outer join trmaster150A
                        on cbud_cashflow_code = CASP_CASM_CODE
                        and CASP_Record_status not in (10200005,10200006)
                   where cbud_record_status not in (10200005,10200006)
                   and cbus_record_status not in (10200005,10200006)
                   and trunc(CBUD_DUE_DATE) >= trunc(sysdate)
                   and CBUS_CASHFLOW_TYPE=17400001 -- Budget
                   group by CBUD_CASHFLOW_CODE, casp_account_number,
                    Cbud_currency_code,CBUD_COMPANYMAP_CODE,to_char(CBUD_DUE_DATE,'MON-YY'))
            left outer join  TRMASTER151
            on CMAP_PICK_CODE=CBUD_COMPANYMAP_CODE
            and CMAP_RECORD_STATUS not in (10200005,10200006)
            left outer join TRMASTER150
            on CASM_PICK_CODE= CBUD_CASHFLOW_CODE
            and CMAP_RECORD_STATUS not in (10200005,10200006)            
            WHERE DueDate = VarTemp1
            AND pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) = VarTemp;
     goto process_end;
  end if;

  ---ADDED BY SUPRIYA ON 27-05-20
    if numinfotype = REFGETFUNDREQUIREMENT then
    varOperation := 'Getting Fund Requirement';

--     open genCursor for      
--              select  pkgreturncursor.fncgetdescription(CMAP_COMPANY_CODE,1) "Company",
--                    pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,1) "Location",
--                    pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,1) "Portfolio", 
--                    pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) "InflowOutFlow",
--                    Currency "Currency", CASM_SHORT_DESCRIPTION "ShortDescription",
--                    CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
--                    CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountFCY "AmountFCY",
--                    ExchangeRate "ExchangeRate",
--                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY "AmountLCY",
--                    AmountLCY "AmountLCY_ABS",
--                    DueDate "DueDate",
--                    CBUD_CASHFLOW_CODE "CashFlowCode", CBUD_COMPANYMAP_CODE "CompanyCode",
--                    CASM_INFLOW_OUTFLOW "InflowOutFlowCode"
--             from (select CBUD_CASHFLOW_CODE,CBUD_COMPANYMAP_CODE, 
--                    pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                    sum(cbud_amount_fcy) AmountFCY,
--                    round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                    sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
--                   from trtran150A inner join trtran150
--                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                     left outer join trmaster150A
--                        on cbud_cashflow_code = CASP_CASM_CODE
--                        and CASP_Record_status not in (10200005,10200006)
--                   where cbud_record_status not in (10200005,10200006)
--                   and cbus_record_status not in (10200005,10200006)
--                   and trunc(CBUD_DUE_DATE)=trunc(sysdate)
--                   and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
--                   group by CBUD_CASHFLOW_CODE, casp_account_number,
--                    Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUD_DUE_DATE
--                   minus
--                    select CBUD_CASHFLOW_CODE, CBUD_COMPANYMAP_CODE,
--                              pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
--                             sum(cbud_amount_fcy) AmountFCY,round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
--                              sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
--                       from trtran150A inner join trtran150
--                         on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
--                         left outer join trmaster150A
--                            on cbud_cashflow_code = CASP_CASM_CODE
--                            and CASP_Record_status not in (10200005,10200006)
--                       where cbud_record_status not in (10200005,10200006)
--                       and cbus_record_status not in (10200005,10200006)
--                       and trunc(CBUD_DUE_DATE)=trunc(sysdate)
--                       and CBUS_CASHFLOW_TYPE=17400001 -- Budget
--                       group by CBUD_CASHFLOW_CODE, casp_account_number,
--                        Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUD_DUE_DATE)
--                left outer join  TRMASTER151
--                on CMAP_PICK_CODE=CBUD_COMPANYMAP_CODE
--                and CMAP_RECORD_STATUS not in (10200005,10200006)
--                left outer join TRMASTER150
--                on CASM_PICK_CODE= CBUD_CASHFLOW_CODE
--                and CASM_RECORD_STATUS not in (10200005,10200006);
    BEGIN
        VarTemp:=gconst.fncxmlextract(xmldoc,'Param/CompanyCode',VarTemp);
    EXCEPTION 
    WHEN OTHERS THEN
        VarTemp := 'EMPTY';
    END;    
    GLOG.Log_write('VarTemp: ' || VarTemp);
    if VarTemp = 'ALL' or LENGTH(VarTemp) > 9 then           
            Select nvl(PRMC_FUNCTIONAL_CURRENCY,0), nvl(PRMC_REPORTING_CURRENCY,0)
            into numcode1,numcode2
            from TRSYSTEM051
            where rownum = 1;        
    else       
            Select nvl(COMP_FUNCTIONAL_CURRENCY,0), nvl(COMP_PNL_CURRENCY,0)
            into numcode1,numcode2
            from TRMASTER301
            where COMP_COMPANY_CODE = TO_NUMBER(TRIM(TRAILING ',' FROM VarTemp));
    end if;

    select PICK_SHORT_DESCRIPTION, nvl(PRMC_CASHDASH_LATESTDATE,12400002)
    into numfcy, numcode3
    from TRSYSTEM051 inner join trmaster001
    on PICK_KEY_VALUE = PRMC_CONVERT_CFAMOUNTINTO;

    dattemp := sysdate;
        if numcode3 = 12400001 then
        begin
            select max(CBUD_DUE_DATE)
            into dattemp
            from trtran150A
            where cbud_record_status not in (10200005,10200006)
            and CBUD_DUE_DATE <= sysdate;

            dattemp1 := dattemp + 30; 
        exception
        when others then
            dattemp := sysdate;
        end;
    end if;

    if dattemp is null then
        dattemp := sysdate;
        dattemp1 := dattemp; 
    end if;

    if numfcy = null then 
        numfcy := 1;
    elsif numfcy = 0 then
        numfcy := 1;
    end if;

    numcode := 17300000;

    BEGIN
        VarTemp := gconst.fncxmlextract(xmldoc,'Param/InflowOutflowType',VarTemp);

        select PICK_KEY_VALUE into numcode 
        from Trmaster001
        where PICK_KEY_GROUP = 173
        and INSTR(upper(VarTemp),upper(PICK_SHORT_DESCRIPTION)) >0;

        dattemp1 := dattemp;
    EXCEPTION 
    WHEN OTHERS THEN
        VarTemp := null;
    END;

     GLOG.Log_write('dattemp: ' || dattemp ||' dattemp1 : ' || dattemp1);
     open genCursor for      
              select to_date(DueDate), rownum "Rownum", 
              pkgreturncursor.fncgetdescription(CMAP_COMPANY_CODE,1) "Company",
                    pkgreturncursor.fncgetdescription(CMAP_LOCATION_CODE,1) "Location",
                    pkgreturncursor.fncgetdescription(CMAP_PORTFOLIO_CODE,1) "Portfolio", 
                    pkgreturncursor.fncgetdescription(nvl(CASM_INFLOW_OUTFLOW,17300002),1) "InflowOutFlow",
                    Currency "Currency", CASM_SHORT_DESCRIPTION "ShortDescription",
                    CASM_CATEGORY1 "Category1",  CASM_CATEGORY2 "Category2",
                    CASM_PARTICULAR "Particular", CASM_DETAILS "Details",
                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountFCY "AmountFCY",
                    ExchangeRate "ExchangeRate",
                    decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY "AmountLCY",
                    round((decode(CASM_INFLOW_OUTFLOW,17300001,-1,1) * AmountLCY)/numfcy,2) "AmountLCY_Converted",
                    round(AmountLCY/numfcy,2) "AmountLCY_ABS",
                    DueDate "DueDate",
                    CBUD_CASHFLOW_CODE "CashFlowCode", CBUD_COMPANYMAP_CODE "CompanyCode",
                    to_char(nvl(CASM_INFLOW_OUTFLOW,17300002)) "InflowOutFlowCode"
             from (select CBUD_CASHFLOW_CODE,CBUD_COMPANYMAP_CODE, 
                    pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                    sum(cbud_amount_fcy) AmountFCY,
                    --round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                    nvl(pkgforexprocess.fncGetRate(Cbud_currency_code, numCode1, trunc(dattemp), 25300001),-9999) ExchangeRate,
                    sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
                   from trtran150A inner join trtran150
                     on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                     left outer join trmaster150A
                        on cbud_cashflow_code = CASP_CASM_CODE
                        and CASP_Record_status not in (10200005,10200006)
                   where cbud_record_status not in (10200005,10200006)
                   and cbus_record_status not in (10200005,10200006)
                   --and trunc(CBUD_DUE_DATE)=trunc(sysdate)
                    and trunc(CBUD_DUE_DATE) between trunc(dattemp) and dattemp1
                   and CBUS_CASHFLOW_TYPE=17400002 --Daily Cash Flow
                   group by CBUD_CASHFLOW_CODE, casp_account_number,
                    Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUD_DUE_DATE
                   union all
                    select CBUD_CASHFLOW_CODE, CBUD_COMPANYMAP_CODE,
                              pkgreturncursor.fncgetdescription(Cbud_currency_code,2) Currency,
                             sum(cbud_amount_fcy) AmountFCY,
                             --round(sum(cbud_amount_lcy)/sum(cbud_amount_fcy),6) ExchangeRate,
                             nvl(pkgforexprocess.fncGetRate(Cbud_currency_code, numCode1, trunc(dattemp), 25300001),-9999) ExchangeRate,
                              sum(cbud_amount_lcy) AmountLCY,to_char(CBUD_DUE_DATE,'dd-MON-YY') DueDate
                       from trtran150A osub inner join trtran150 oma
                         on CBUS_SYSTEM_REFERENCE=CBUD_SYSTEM_REFERENCE
                         left outer join trmaster150A 
                            on cbud_cashflow_code = CASP_CASM_CODE
                            and CASP_Record_status not in (10200005,10200006)
                       where cbud_record_status not in (10200005,10200006)
                       and cbus_record_status not in (10200005,10200006)
                       --and trunc(CBUD_DUE_DATE)=trunc(sysdate)
                        and trunc(CBUD_DUE_DATE) between trunc(dattemp) and dattemp1
                       and CBUS_CASHFLOW_TYPE=17400001 -- Budget
                       and not exists (select * from trtran150A sub inner join trtran150 ma
                         on ma.CBUS_SYSTEM_REFERENCE=sub.CBUD_SYSTEM_REFERENCE
                          and sub.cbud_cashflow_code = osub.CBUD_CASHFLOW_CODE
                         where sub.cbud_record_status not in (10200005,10200006)
                            --and trunc(sub.CBUD_DUE_DATE)=trunc(sysdate)
                             and trunc(CBUD_DUE_DATE) between trunc(dattemp) and dattemp1
                            and ma.CBUS_CASHFLOW_TYPE=17400002 -- Daily Cash Flow
                            and ma.cbus_record_status not in (10200005,10200006))
                       group by CBUD_CASHFLOW_CODE, casp_account_number,
                        Cbud_currency_code,CBUD_COMPANYMAP_CODE,CBUD_DUE_DATE)
                inner join  TRMASTER151
                on CMAP_PICK_CODE=CBUD_COMPANYMAP_CODE
                and CMAP_RECORD_STATUS not in (10200005,10200006)
                inner join TRMASTER150
                on CASM_PICK_CODE= CBUD_CASHFLOW_CODE
                and CASM_INFLOW_OUTFLOW = decode(numcode,17300000,CASM_INFLOW_OUTFLOW,numcode)
                and CASM_RECORD_STATUS not in (10200005,10200006)
                order by 1;

     goto process_end;
  end if;


  ------------------------ADDED BY SUPRIYA ON 25/05/20-----------------------
    if numinfotype = REFGETRECIEPTANDPAYMENTDETAILS then
    varOperation := 'Getting Reciept and Payment Details';
    VarTemp  := gconst.fncxmlextract(xmldoc,'Param/IrsNumber',VarTemp);

    open genCursor for   
          SELECT IIRL_LEG_SERIAL "LegSerial", IIRL_SERIAL_NUMBER "SerialNumber",
               IIRL_FINAL_RATE "FinalRate", IIRL_SPREAD "Spread", IIRL_BASE_RATE "BaseRate",
               IIRL_INT_TYPE "IntType", IIRL_CURRENCY_CODE "CurrencyCode", IIRL_BUY_SELL "BuySell",
               nvl(IIRL_NOTIONAL_AMOUNT,0) "NotionalAmount", IIRL_INTEREST_DAYSTYPE "InterestDayType" 
        from TRTRAN091A
        WHERE IIRL_IRS_NUMBER = VarTemp
         and IIRL_RECORD_STATUS not in (10200005,10200006);
    goto process_end;
  end if;


  ---------------------ADDED BY SUPRIYA ON 04-09-20-----------------------------------
    if numinfotype = REFGLOBALCASHPOSITION then
    varOperation := 'Getting Global Cash Position DETAILS';

    --DatTemp := gconst.fncxmlextract(xmldoc, 'AsonDate', DatTemp);
--    numCode1:=gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',numCode1);
--    numCode2:=gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',numCode2);

    VarTemp := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',VarTemp);

    if VarTemp = 'ALL' or LENGTH(VarTemp) > 9 then         
            Select nvl(PRMC_FUNCTIONAL_CURRENCY,0), nvl(PRMC_REPORTING_CURRENCY,0)
            into numcode1,numcode2
            from TRSYSTEM051
            where rownum = 1;        
    else       
            Select nvl(COMP_FUNCTIONAL_CURRENCY,0), nvl(COMP_PNL_CURRENCY,0)
            into numcode1,numcode2
            from TRMASTER301
            where COMP_COMPANY_CODE = TO_NUMBER(TRIM(TRAILING ',' FROM VarTemp));
    end if;

--    select PICK_SHORT_DESCRIPTION
--    into numfcy
--    from TRMASTER001
--    where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
--                            from TRSYSTEM051);

        select PICK_SHORT_DESCRIPTION, PRMC_CASHDASH_LATESTDATE 
        into numfcy, numcode 
        from TRSYSTEM051 inner join trmaster001
        on PICK_KEY_VALUE = PRMC_CONVERT_CFAMOUNTINTO;

        if numfcy = null then 
            numfcy := 1;
        elsif numfcy = 0 then
            numfcy := 1;
        end if;

    dattemp := sysdate;
    if numcode = 12400001 then
        select max(LBBL_ASON_DATE)
        into dattemp
        from trtran151
        where LBBL_RECORD_STATUS not in (10200005,10200006)
        and LBBL_ASON_DATE <= sysdate;
    end if;

    open genCursor for 
    select pkgreturncursor.fncgetdescription(CompanyCode,2) "Company",
           pkgreturncursor.fncgetdescription(LocationCode,1) "Location",
           pkgreturncursor.fncgetdescription(CurrencyCode,2) "Currency",
           pkgreturncursor.fncgetdescription(BankCode,2) "Bank",
           pkgreturncursor.fncgetdescription(BranchCode,2) "Branch",
           pkgreturncursor.fncgetdescription(AccountType,2) "AccountType",
           AccountNumber "AccountNumber", sum(AmountFCY) "AmountFCY",
           sum(AmountFCY * ExRate) "ConvertedCurrencyAmount", avg(ExRate) "ExRate",
           round(sum(AmountFCY * ExRate)/numfcy,2) "Converted_AmountLCY",
           BankCode "BankCode", LocationCode "LocationCode", CompanyCode "CompanyCode",
           CurrencyCode "CurrencyCode", AccountType "AccountTypeCode",
           dattemp "AsonDate"
           from (select ACCT_ACCOUNT_NUMBER AccountNumber, 
                   LBBL_ACCOUNT_BALANCE AmountFCY,
                   nvl(pkgforexprocess.fncGetRate(BRNH_CURRENCY_CODE, numCode2, trunc(dattemp), 25300001),-9999) ExRate,
--                   (case when pkgforexprocess.fncGetRate(BRNH_CURRENCY_CODE, numCode2, trunc(sysdate), 25300001) = 0 then 1 else
--                   pkgforexprocess.fncGetRate(BRNH_CURRENCY_CODE, numCode2, trunc(sysdate), 25300001) end) ExRate,
                   BRNH_BANK_CODE BankCode, BRNH_LOCATION_CODE LocationCode,
                   BRNH_CURRENCY_CODE CurrencyCode, BRNH_COMPANY_CODE CompanyCode,
                   ACCT_ACCOUNT_TYPE AccountType,
               BRNH_PICK_CODE BranchCode
                   from trtran151 left outer join trmaster306b
                   on ACCT_ACCOUNT_NUMBER = LBBL_ACCOUNT_NUMBER
                   and ACCT_ACCOUNT_STATUS=14400001
                   and ACCT_RECORD_STATUS not in (10200005,10200006)
                   join trmaster306a
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE and ACCT_RECORD_STATUS not in (10200005,10200006)
                   and LBBL_RECORD_STATUS not in (10200005,10200006)
                   where BRNH_RECORD_STATUS not in (10200005,10200006)
                   and LBBL_ASON_DATE = trunc(dattemp))
        group by AccountNumber, BankCode,CompanyCode,
           LocationCode,CurrencyCode,AccountType,BranchCode;
     goto process_end;
  end if;

------------------------ADDED BY SUPRIYA ON 04-09-20--------------------------------
    if numinfotype = REFLOCALCASHPOSITION then
    varOperation := 'Getting Local Cash Position DETAILS';

    --DatTemp := gconst.fncxmlextract(xmldoc, 'AsonDate', DatTemp);
--    numCode1:= gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',numCode1);
--    numCode2:=gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',numCode2);
    VarTemp:=gconst.fncxmlextract(xmldoc,'Param/CompanyCode',VarTemp);

    if VarTemp = 'ALL' or LENGTH(VarTemp) > 9 then  
            Select nvl(PRMC_FUNCTIONAL_CURRENCY,0), nvl(PRMC_REPORTING_CURRENCY,0)
            into numcode1,numcode2
            from TRSYSTEM051
            where rownum = 1;
    else
            Select nvl(COMP_FUNCTIONAL_CURRENCY,0), nvl(COMP_PNL_CURRENCY,0)
            into numcode1,numcode2
            from TRMASTER301
            where COMP_COMPANY_CODE = TO_NUMBER(TRIM(TRAILING ',' FROM VarTemp));
    end if;

    --    select PICK_SHORT_DESCRIPTION
--    into numfcy
--    from TRMASTER001
--    where PICK_KEY_VALUE = (select PRMC_CONVERT_CFAMOUNTINTO
--                            from TRSYSTEM051);

        select PICK_SHORT_DESCRIPTION, PRMC_CASHDASH_LATESTDATE 
        into numfcy, numcode 
        from TRSYSTEM051 inner join trmaster001
        on PICK_KEY_VALUE = PRMC_CONVERT_CFAMOUNTINTO;

        if numfcy = null then 
            numfcy := 1;
        elsif numfcy = 0 then
            numfcy := 1;
        end if;

    dattemp := sysdate;
    if numcode = 12400001 then
        select max(LBBL_ASON_DATE)
        into dattemp
        from trtran151
        where LBBL_RECORD_STATUS not in (10200005,10200006)
        and LBBL_ASON_DATE <= sysdate;
    end if;

    open genCursor for 
      select pkgreturncursor.fncgetdescription(CompanyCode,2) "Company",
           pkgreturncursor.fncgetdescription(LocationCode,1) "Location",
           pkgreturncursor.fncgetdescription(CurrencyCode,2) "Currency",
           pkgreturncursor.fncgetdescription(BankCode,2) "Bank",
            pkgreturncursor.fncgetdescription(BranchCode,2) "Branch",
           pkgreturncursor.fncgetdescription(AccountType,2) "AccountType",
           AccountNumber "AccountNumber", sum(AmountFCY) "AmountFCY",
           sum(AmountFCY * ExRate) "ConvertedCurrencyAmount",avg(ExRate) "ExRate",
           round(sum(AmountFCY * ExRate)/numfcy) "Converted_AmountLCY",
           BankCode "BankCode",LocationCode "LocationCode", CompanyCode "CompanyCode",
           CurrencyCode "CurrencyCode", AccountType "AccountTypeCode"
           from (select  ACCT_ACCOUNT_NUMBER AccountNumber, 
                   LBBL_ACCOUNT_BALANCE AmountFCY,
                   nvl(pkgforexprocess.fncGetRate(BRNH_CURRENCY_CODE, numCode1, trunc(dattemp), 25300001),-9999) ExRate,
--                   (case when pkgforexprocess.fncGetRate(BRNH_CURRENCY_CODE, numCode2, trunc(sysdate), 25300001) = 0 then 1 else
--                   pkgforexprocess.fncGetRate(BRNH_CURRENCY_CODE, numCode2, trunc(sysdate), 25300001) end) ExRate,
                   BRNH_BANK_CODE BankCode, BRNH_LOCATION_CODE LocationCode,
                   BRNH_CURRENCY_CODE CurrencyCode, BRNH_COMPANY_CODE CompanyCode,
                   ACCT_ACCOUNT_TYPE AccountType,BRNH_PICK_CODE BranchCode
                  from trtran151 left outer join trmaster306b
                   on ACCT_ACCOUNT_NUMBER = LBBL_ACCOUNT_NUMBER
                   and ACCT_ACCOUNT_STATUS=14400001
                   and ACCT_RECORD_STATUS not in (10200005,10200006)
                   join trmaster306a
            on BRNH_PICK_CODE = ACCT_BRANCH_CODE and ACCT_RECORD_STATUS not in (10200005,10200006)
                   and LBBL_RECORD_STATUS not in (10200005,10200006)
                   where BRNH_RECORD_STATUS not in (10200005,10200006)
                   and LBBL_ASON_DATE = trunc(dattemp))
                   --and BRNH_CURRENCY_CODE = numCode1)
        group by AccountNumber, BankCode,CompanyCode,
           LocationCode,CurrencyCode,AccountType,BranchCode;
     goto process_end;
  end if;

  -----------------Added by Supriya on 23/12/2020------------------------
if  numInfoType = REFGETLETTERLOADTYPE then  
    open genCursor for 
        select PRMC_LETTER_GENERATIONTYPE "LoadType"
        from TRSYSTEM051;
    goto process_end;
end if; 

  --------------------------------------------------
if numinfotype = REFGETOPTIONPRODUCT then
   varOperation := 'Getting OPTION Product Details';

     open genCursor for
             select CPRO_SHORT_DESCRIPTION as "Name", CPRO_LONG_DESCRIPTION as "ProductDescription",
                    CPRO_TRADE_UNIT || ' ' ||  pkgreturncursor.fncGetdescription(CPRO_TRADE_UOM,2) as "TradeQty",
                    pkgreturncursor.fncGetdescription(CPRO_EXCHANGE_CODE,2) as "Exchange",
                    CPRO_PICK_CODE "ID"--, CPRO_RECORD_STATUS as "RecordStatus"
             from TRMASTER503 
             where CPRO_PRODUCT_CATEGORY in (61000002)
             and CPRO_RECORD_STATUS not in(10200005,10200006)
              and cpro_Company_Code in( select usco_company_code from trsystem022a
                                           where UPPER(usco_user_id) = varUserid 
		AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
             and CPRO_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))   ;
        goto process_end;
  end if;

 if numInfoType = refMaturityPopulate then
    numcode3 := GConst.fncXMLExtract(xmlDoc, '//Param/NewSet',
              numcode3, GConst.TYPENODEPATH);      
    if numcode3 = 1 then ---New Set
    numCode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'Tenor',numCode1); --GConst.fncXMLExtract(xmlDoc, '//CommandSet//KeyValues/Tenor',
              --numCode1, GConst.TYPENODEPATH);
    numCode2 := GConst.fncXMLExtract(xmlDoc, '//Param/DealCount',
              numCode2, GConst.TYPENODEPATH);
    DatTemp := GConst.fncXMLExtract(xmlDoc, '//Param/DeliveryStart',
              DatTemp, GConst.TYPENODEPATH);
    DatTemp1 := GConst.fncXMLExtract(xmlDoc, '//Param/Settlement',
              DatTemp1, GConst.TYPENODEPATH);
    dattemp2 := GConst.fncXMLExtract(xmlDoc, '//Param/Maturity',
              dattemp2, GConst.TYPENODEPATH);
    numFcy   := GCONST.FNCXMLEXTRACT(XMLDOC,'BaseAmount',numFcy);
    numCode  := GCONST.FNCXMLEXTRACT(XMLDOC,'DeliveryType',numCode);
    numCode4 := GConst.fncXMLExtract(xmlDoc, '//Param/BuySell',
              numCode4, GConst.TYPENODEPATH);
    numCode5 := GConst.fncXMLExtract(xmlDoc, '//Param/OptionType',
              numCode5, GConst.TYPENODEPATH);
    prcOptionMaturity(DatTemp,dattemp2,DatTemp1,numCode1,numFcy,numCode2,numCode,numCode4,numCode5);
    varOperation := 'Extracting Fixed Deposit Details';
    open GenCursor for
      select 
      --rownum "Rownum",
        OPMT_SERIAL_NUMBER "SrNo",
        OPMT_SUBSERIAL_NUMBER"SubSrNo",
        OPMT_AMOUNT_FCY "Amount",
        OPMT_MATURITY_DATE "MaturityDate",
        OPMT_SETTLEMENT_DATE "SettlementDate",
        pkgreturncursor.fncgetdescription(OPMT_BUY_SELL,2) ||'-'||pkgreturncursor.fncgetdescription(OPMT_OPTION_TYPE,2) "OptionType"
      from trsystem966;
     else---Edit ,Delete, View option
      varTemp1 := GConst.fncXMLExtract(xmlDoc, '//Param/DealNumber',
              varTemp1, GConst.TYPENODEPATH);    
      --varTemp1 := GCONST.FNCXMLEXTRACT(XMLDOC,'DealNumber',varTemp1);
      open GenCursor for
      select 
      --rownum "Rownum",
        COSM_SERIAL_NUMBER "SrNo",
        COSM_SUBSERIAL_NUMBER"SubSrNo",
        COSM_AMOUNT_FCY "Amount",
        COSM_MATURITY_DATE "MaturityDate",
        COSM_SETTLEMENT_DATE "SettlementDate",
        pkgreturncursor.fncgetdescription(COSU_BUY_SELL,2)||'-'||pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2)"OptionType"
      from trtran072a ,TRTRAN072
      where COSM_DEAL_NUMBER = varTemp1 and COSM_RECORD_STATUS not in(10200005,10200006)
      AND COSU_DEAL_NUMBER = COSM_DEAL_NUMBER AND COSM_SERIAL_NUMBER = COSU_SERIAL_NUMBER
      AND COSU_RECORD_STATUS NOT IN(10200005,10200006);
    end if;
    Goto Process_End;
    END IF;    
--  if NUMINFOTYPE=REFLICENSEUSERS then 
--       open gencursor for
--          select rownum "Rownum", PKGRETURNCURSOR.FNCGETDESCRIPTION(LICE_USER_LICNSETYPE,2) "User",
--                  LIUS_LICENSE_PRICE "Price",
--                  0 "NoOfUsers"         
--           from TRLICENSE003 
--            where LIUS_RECORD_STATUS not in (10200005,10200006);
--   goto process_end;
--  end if;     
--  
--  if NUMINFOTYPE=REFLICENSEMODULES then 
--       open gencursor for
--          select rownum "Rownum", LMOD_MODULE_NAME "ModuleName",
--                  LMOD_LICENSE_PRICE  "ModulePrice"                      
--           from TRLICENSE002 
--            where LMOD_RECORD_status not in (10200005,10200006);
--   goto process_end;
--  end if; 

---------------------------------------------------------------------------
    --Added by Supriya on 08/09/2020
if numinfotype = REFMAPCASHFLOWACTUALS then
    varOperation := 'Mapping CashFlow Actuals';

    Dattemp  := GCONST.FNCXMLEXTRACT(XMLDOC,'Param/FromDate',Dattemp);
    Dattemp1 := GCONST.FNCXMLEXTRACT(XMLDOC,'Param/ToDate',Dattemp1);
    numcode  := GCONST.FNCXMLEXTRACT(XMLDOC,'Param/MappingType',numcode);

    PKGBULKDATALOAD_prcCashFlowMappingActuals(Dattemp,Dattemp1,numcode);
    --goto dummy_cursor;
End if;

---------------------------------------------------------------------------
    --Added by Supriya on 08/09/2020
if numinfotype = REFGETNOTMAPPEDACTUALS then
    varOperation := 'Mapping CashFlow Actuals';

    OPEN GENCURSOR FOR
        SELECT setl_upload_date "UploadedDate", setl_document_number "DocumentNumber",
            setl_line_item "LineItem", setl_posting_key "PostingKey", setl_document_type "DocumentType",
            setl_document_date "DocumentDate", setl_posting_date "PostingDate", setl_gl_code "GLHead",
            setl_special_glcode "SpecialGL", pkgreturncursor.fncgetdescription(setl_currency_code,2) "Currency",
            setl_amount_lc "AmountLC", setl_amount_dc "AmountDC", setl_exchange_rate "ExchangeRate",
            setl_assignment_detail "AssignmentDetails", setl_cost_center "CostCenter", setl_vendor_erpcode "VendorERpCode",
            setl_vendor_name "VendorName", setl_customer_erpcode "CustomerERPCode", setl_customer_name "CustomerName",  
            setl_create_date "RecordCreatedDate", setl_time_stamp "TimeStamp",  setl_period_applied "PeriodApplied",    
            setl_entry_date "EntryDate", setl_segment_name "SegmentName", setl_text_info "TextInfo", 
            setl_order_number "OrderNumber", setl_profit_center "ProfitCenter"
        FROM trtran161 
        where nvl(SETL_MAPPED_YN,12400002)=12400002;
--          and SETL_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                           where upper(usco_user_id) = varUserid
--                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006));
GOTO Process_End;
End if;

---------------------------------------------------------------------------
    --Added by Supriya on 21/09/2020
if numinfotype = REFNOTMAPPEDACTUALSDATERANGE then
    varOperation := 'Mapping CashFlow Actuals';
    datTemp := gconst.fncxmlextract(xmldoc,'Param/FromDate', datTemp);
    datTemp1 := gconst.fncxmlextract(xmldoc,'Param/ToDate', datTemp1);

    OPEN GENCURSOR FOR
        SELECT    setl_upload_date "UploadedDate", setl_document_number "DocumentNumber",
            setl_line_item "LineItem", setl_posting_key "PostingKey", setl_document_type "DocumentType",
            setl_document_date "DocumentDate", setl_posting_date "PostingDate", setl_gl_code "GLHead",
            setl_special_glcode "SpecialGL", pkgreturncursor.fncgetdescription(setl_currency_code,2) "Currency",
            setl_amount_lc "AmountLC", setl_amount_dc "AmountDC", setl_exchange_rate "ExchangeRate",
            setl_assignment_detail "AssignmentDetails", setl_cost_center "CostCenter", setl_vendor_erpcode "VendorERpCode",
            setl_vendor_name "VendorName", setl_customer_erpcode "CustomerERPCode", setl_customer_name "CustomerName",  
            setl_create_date "RecordCreatedDate", setl_time_stamp "TimeStamp",  setl_period_applied "PeriodApplied",    
            setl_entry_date "EntryDate", setl_segment_name "SegmentName", setl_text_info "TextInfo", 
            setl_order_number "OrderNumber", setl_profit_center "ProfitCenter"
        FROM trtran161 
        where nvl(SETL_MAPPED_YN,12400002)=12400002
        and setl_upload_date between datTemp and datTemp1;
GOTO Process_End;
End if;
-----------------------------------------------------------------------------------

  If numinfotype = REFGETAUDITTRAIL then
  varoperation := 'Extracting the information for the Customer Details ';
  varTemp := gconst.fncxmlextract(xmldoc,'ProgramUnit',   varTemp);
  datTemp := gconst.fncxmlextract(xmldoc,'FromDate',   datTemp);
  datTemp1 := gconst.fncxmlextract(xmldoc,'ToDate',   datTemp1);

    varOperation:='Extracting Columns';
    select listagg( (case when nvl(fldp_pick_group,0)>0 then 
              (case when FLDP_DROPDOWN_SELECTOR=90900005 then 
                  'pkgreturncursor.fncgetdescriptionMulti( ' ||fldp_column_name ||',' ||
                    pkgreturncursor.fncgetdescription(FLDP_DESCRIPTION_TYPE,2) || ')'
              else
                  'pkgreturncursor.fncgetdescription( ' ||fldp_column_name ||',' ||
                  pkgreturncursor.fncgetdescription(FLDP_DESCRIPTION_TYPE,2) || ')'
               end)
          else  fldp_column_name end) ||'  as ' || '"' ||
--          nvl(substr(fldp_column_DisplayName,1,30),fldp_xml_field) || '"' ,',' ) 
              nvl(substr(fldp_xml_field,1,30),fldp_xml_field) || '"' ,',' )
          within group (order by fldp_column_id)
     into varSelect
    from trsystem999 
    where fldp_table_synonym = varTemp;

    varOperation:='Extract Column ID to create orader by ';

  select listagg(FLDP_COLUMN_ID+5 ,',') 
          within group (order by FLDP_COLUMN_ID)
    into varTemp3  
    from trsystem999 
    where nvl(FLDP_KEY_NO ,0)>0
    and FLDP_TABLE_SYNONYM =varTemp;

    varOperation:= 'Concate order by clauses To ProcessDate ExecuteTimeStamp';
    if varTemp3 is not null then 
        varTemp3:=varTemp3 || ',5,3';
    else
        varTemp3:=varTemp3 || '5,3';
    end if;
    varOperation:='Getting Audit Table Name';

    select AUDT_AUDIT_ID, AUDT_TRIGGER_YN
      into varAuditTable, numCode
    from trsystem015 
    where Audt_Table_id=varTemp;

    varOperation:='Extract Entry Details Column';

      select fldp_column_name
       into varEntryDet_col
      from trsystem999 
      where FLDP_XML_FIELD = 'EntryDetail'
      and fldp_table_synonym =varTemp;

      select fldp_column_name
       into varCreateDate_col
      from trsystem999 
      where FLDP_XML_FIELD = 'CreateDate'
      and fldp_table_synonym =varTemp;

     begin  
      select fldp_column_name
       into varAddDate_col
      from trsystem999 
      where FLDP_XML_FIELD = 'AddDate'
      and fldp_table_synonym =varTemp;
     exception 
       when others then 
       varAddDate_col:=varCreateDate_col;
     end;

     begin  
      select fldp_column_name
       into varTemp4
      from trsystem999 
      where FLDP_XML_FIELD = 'RecordStatus'
      and fldp_table_synonym =varTemp;
     exception 
       when others then 
       varAddDate_col:=varCreateDate_col;
     end;


    varOperation:='Constructing Query';
  if (numCode=12400002 ) then   
        varQuery:=' SELECT xt.Process "Process",xt.UserID "UserID",
                xt.ExecuteTimeStamp "ExecuteTimeStamp",xt.TerminalName "TerminalName",
           to_date(xt.ProcessDate,'||'''' ||'dd/mm/yyyy' || ''''|| ') "ProcessDate", ' || varSelect || ' FROM  ' || varTemp || ' ,
               XMLTABLE('||''''||'/AuditTrails/AuditTrail'|| ''''|| '
                 PASSING '|| varEntryDet_col ||'
                 COLUMNS 
                   Process     VARCHAR2(10)  PATH ' ||''''|| 'Process' ||''''||',
                   UserID     VARCHAR2(30) PATH ' ||''''|| 'UserName' ||''''||',
                   ExecuteTimeStamp       VARCHAR2(50)  PATH ' ||''''|| 'TimeStamp' ||''''||',
                   TerminalName  VARCHAR2(50) PATH ' ||''''|| 'TerminalName' ||''''||',
                   ProcessDate  varchar(12) path ' ||''''|| 'ProcessDate' ||''''||'
                 ) xt
        where trunc(' || varCreateDate_col || ') between '||''''||to_date(datTemp,'DD-MM-YYYY')||''''|| 
        ' and ' || ''''|| to_date(datTemp1,'DD-MM-YYYY') ||'''' || ' 
         or trunc( nvl('|| varAddDate_col || ',' ||varCreateDate_col ||')) between '||''''||to_date(datTemp,'DD-MM-YYYY')||''''|| 
        ' and ' || ''''|| to_date(datTemp1,'DD-MM-YYYY') ||'''' || ' 
        union all ';
        varQuery1:='
        SELECT ' ||''''|| 'EDITSAVE'||'''' || '"Process",USERID "UserID",DateStamp "ExecuteTimeStamp",
               null "TerminalName", to_date(WorkDate) "ProcessDate",' || varSelect || '
        FROM '|| varAuditTable || ' x
        where trunc(' || varCreateDate_col || ') 
        between '||''''||to_date(datTemp,'DD-MM-YYYY')||''''|| ' and ' || ''''|| to_date(datTemp1,'DD-MM-YYYY') ||''''||'
        or trunc(nvl('|| varAddDate_col || ',' ||varCreateDate_col ||' )) between '||''''|| to_date(datTemp,'DD-MM-YYYY')||''''|| 
        ' and ' || ''''|| to_date(datTemp1,'DD-MM-YYYY') ||'''' ||  
        ' order by ' || varTemp3;
   else 
     varQuery:=' SELECT xt.Process "Process",xt.UserID "UserID",
                xt.ExecuteTimeStamp "ExecuteTimeStamp",xt.TerminalName "TerminalName",
           to_date(xt.ProcessDate,'||'''' ||'dd/mm/yyyy' || ''''|| ') "ProcessDate", ' || varSelect || ' FROM  ' || varTemp || ' ,
               XMLTABLE('||''''||'/AuditTrails/AuditTrail'|| ''''|| '
                 PASSING '|| varEntryDet_col ||'
                 COLUMNS 
                   Process     VARCHAR2(10)  PATH ' ||''''|| 'Process' ||''''||',
                   UserID     VARCHAR2(30) PATH ' ||''''|| 'UserName' ||''''||',
                   ExecuteTimeStamp       VARCHAR2(50)  PATH ' ||''''|| 'TimeStamp' ||''''||',
                   TerminalName  VARCHAR2(50) PATH ' ||''''|| 'TerminalName' ||''''||',
                   ProcessDate  varchar(12) path ' ||''''|| 'ProcessDate' ||''''||'
                 ) xt
        where trunc(' || varCreateDate_col || ') between '||''''||to_date(datTemp,'DD-MM-YYYY')||''''|| 
        ' and ' || ''''|| to_date(datTemp1,'DD-MM-YYYY') ||'''' || ' 
         or trunc( nvl('|| varAddDate_col || ',' ||varCreateDate_col ||')) between '||''''||to_date(datTemp,'DD-MM-YYYY')||''''|| 
        ' and ' || ''''|| to_date(datTemp1,'DD-MM-YYYY') ||'''' || ' 
        union all ';
        varQuery1:='
        SELECT ' ||''''|| 'EDITSAVE'||'''' || '"Process",USERID "UserID",DateStamp "ExecuteTimeStamp",
               null "TerminalName", to_date(WorkDate) "ProcessDate",' || varSelect || '
        FROM '|| varAuditTable || ' x
                where ' || varTemp4 || ' = 12400001 ' ||
        ' and trunc(' || varCreateDate_col || ')
        between '||''''||to_date(datTemp,'DD-MM-YYYY')||''''|| ' and ' || ''''|| to_date(datTemp1,'DD-MM-YYYY') ||''''||'
        or trunc(nvl('|| varAddDate_col || ',' ||varCreateDate_col ||' )) between '||''''|| to_date(datTemp,'DD-MM-YYYY')||''''|| 
        ' and ' || ''''|| to_date(datTemp1,'DD-MM-YYYY') ||'''' ||  
        ' order by ' || varTemp3;
   end if;

        GLOG.Log_write('varQuery AuditTrail :' || varQuery);
        GLOG.Log_write('varQuery1 AuditTrail :' || varQuery1);

       -- insert into temp values (varQuery,varQuery1); commit;

       open gencursor for  varQuery || varQuery1;

 Goto Process_End;
end if;

if numinfotype=REFLOADCASHFAIRHEDGE then 
  Dattemp:= gconst.fncxmlextract(xmldoc,'EffectiveDate',Dattemp);
  Dattemp1:= gconst.fncxmlextract(xmldoc,'CloseDate',Dattemp1);
  NUMCODE6:=GCONST.FNCXMLEXTRACT(XMLDOC,'DataType',NUMCODE6);   
  NUMCODE5 := GCONST.FNCXMLEXTRACT(XMLDOC,'LobCode',NUMCODE5);   
  select count(*) into numcode1 from TRTRAN111_DETAIL where 
  cash_effective_date=Dattemp ;
  --and cash_final_run=12400001;
  select count(*) into numcode from TRTRAN111 where  cash_effective_date=Dattemp and cash_period_type=numcode6;
--  if numcode1=0 then  
--   --  PKGFOREXPROCESS.prcCashFairHedge(Dattemp,Dattemp,12400002,30299999);
--  end if;

  open gencursor for  
       select pkgreturncursor.fncgetdescription(cash_accounting_type,1) "AccountingType",
            sum(cash_crystal_amount) "CrystallisedCovers",sum(cash_uncrystal_amount) "UnCrystallisedCovers", 
            sum(nvl(CASH_EFFECTIVE_PL,0)) "EffectivePortionToBS",
            sum(nvl(CASH_inEFFECTIVE_PL,0)) "IneffectivePortionToPL",
            sum(nvl(CASH_EFFECTIVE_PL,0)) + sum(nvl(CASH_inEFFECTIVE_PL,0)) "TotalImpact",
            cash_accounting_type "AccountingTypeCode"
       from TRTRAN111_DETAIL
       where  cash_effective_date = Dattemp
--        and CASH_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                    where UPPER(usco_user_id) = varUserid
--		AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
--          and CASH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)) 
       group by cash_accounting_type;



--  open gencursor for     
--   SELECT 
--    HedgeType "HedgeType",
--    SUM(ProfitLoss)"ProfitLoss",
--    HedgeTypeCode "HedgeTypeCode",
--     hedgeLob "hedgeLob",
--     hedgeLobcODE "hedgeLobcODE",
--     'MTM'||hedgeLobcODE||TO_CHAR( TRUNC(Dattemp, 'month'), 'mm')||TO_CHAR( TRUNC(SYSDATE, 'year'), 'yyyy')||HedgeaccouningCode "VoucherReference",
--    case when numcode=0 then 1 else 2 end "RecordStatus",
--    sysdate  "PreCloseDate"      , HedgeaccouningCode "SerialNumber" 
--  FROM(
--    SELECT pkgreturncursor.fncgetdescription(cash_SUBPRODUCT_CODE,2) HedgeType,
--        SUM(CASH_DISCOUNTING_AMOUNT) ProfitLoss,
--        cash_SUBPRODUCT_CODE HedgeTypeCode,
--       pkgreturncursor.fncgetdescription (CASH_PRODUCT_CODE ,2) hedgeLob,
--       CASH_PRODUCT_CODE hedgeLobcODE ,
--        0 as HedgeaccouningCode
--  FROM TRTRAN111_DETAIL
--  WHERE cash_effective_date = Dattemp
--  AND CASH_SUBPRODUCT_CODE = 33800002
--  GROUP BY cash_SUBPRODUCT_CODE ,CASH_PRODUCT_CODE
--  UNION ALL
--  SELECT pkgreturncursor.fncgetdescription(cash_SUBPRODUCT_CODE,2)||'-Crystalised' HedgeType,
--        SUM(decode(cash_crystal_amount,0,0,CASH_DISCOUNTING_AMOUNT)) ProfitLoss,
--        cash_SUBPRODUCT_CODE HedgeTypeCode,
--        pkgreturncursor.fncgetdescription (CASH_PRODUCT_CODE ,2) hedgeLob,
--          CASH_PRODUCT_CODE hedgeLobcODE ,
--        1 as HedgeaccouningCode
--  FROM TRTRAN111_DETAIL
--  WHERE cash_effective_date = Dattemp
--  AND CASH_SUBPRODUCT_CODE = 33800001
--  AND cash_crystal_amount <> 0
--  GROUP BY cash_SUBPRODUCT_CODE ,CASH_PRODUCT_CODE
--  UNION ALL
--  SELECT pkgreturncursor.fncgetdescription(cash_SUBPRODUCT_CODE,2)||'-UnCrystalised' HedgeType,
--    SUM(decode(cash_uncrystal_amount,0,0,CASH_DISCOUNTING_AMOUNT)) ProfitLoss,
--    cash_SUBPRODUCT_CODE HedgeTypeCode,
--    pkgreturncursor.fncgetdescription (CASH_PRODUCT_CODE ,2) hedgeLob,
--      CASH_PRODUCT_CODE hedgeLobcODE ,
--    2 as HedgeaccouningCode    
--  FROM TRTRAN111_DETAIL
--  WHERE cash_effective_date = Dattemp
--  AND cash_uncrystal_amount <> 0
--  AND CASH_SUBPRODUCT_CODE = 33800001
--  GROUP BY cash_SUBPRODUCT_CODE,CASH_PRODUCT_CODE)
--  GROUP BY HedgeType,HedgeTypeCode,HedgeaccouningCode,hedgeLob, 'MTM'||hedgeLobcODE||TO_CHAR( TRUNC(Dattemp, 'month'), 'mm')||TO_CHAR( TRUNC(SYSDATE, 'year'), 'yyyy')||HedgeaccouningCode ,hedgeLobcODE
--  order by HedgeaccouningCode;
 Goto Process_End;
End If;
-------------------------------------------------------------------------------------------------------------------------
if numinfotype=REFLOADVIEWCASHFLOW then 
  Dattemp:= gconst.fncxmlextract(xmldoc,'EffectiveDate',Dattemp);
    Dattemp1:= gconst.fncxmlextract(xmldoc,'CloseDate',Dattemp1);
  NUMCODE6:=GCONST.FNCXMLEXTRACT(XMLDOC,'DataType',NUMCODE6);   
   NUMCODE5:=GCONST.FNCXMLEXTRACT(XMLDOC,'LobCode',NUMCODE5);   
--prcCashFairHedge(Dattemp,12400002);
 open gencursor for           

  select 
    case when CASH_SERIAL_NUMBER=2 then  pkgreturncursor.fncgetdescription(cash_SUBPORTFOLIO_CODE,2)||'-UnCrystalised' 
   when CASH_SERIAL_NUMBER=1 then pkgreturncursor.fncgetdescription(cash_SUBPORTFOLIO_CODE,2)||'-Crystalised' 
   else pkgreturncursor.fncgetdescription(cash_SUBPORTFOLIO_CODE,2) end   "HedgeType",
    --CASH_AMOUNT_INR  "ProfitLoss",
    cash_SUBPORTFOLIO_CODE "HedgeTypeCode",
     cash_serial_number "SerialNumber" 
      from TRTRAN111  
      WHERE cash_effective_date=dattemp
      AND cash_period_type=numcode6
      --AND CASH_LOC_CODE = numcode5
     -- AND  cash_final_run=12400001
      ORDER BY cash_serial_number ;
      Goto Process_End;
  End If;
--------------------------------------------------------------------------------------------------------------------------
if numinfotype=REFLOADCASHFAIRHEDGEDETAILS then 
    Dattemp:= gconst.fncxmlextract(xmldoc,'EffectiveDate',Dattemp);
 -- numcode1:= gconst.fncxmlextract(xmldoc,'SerialNumber',numcode1);
    numcode:= gconst.fncxmlextract(xmldoc,'AccountingTypeCode',numcode);
--    numcode2 :=  gconst.fncxmlextract(xmldoc,'LobCode',numcode); 
--  if numcode=33800001 then 
    open gencursor for    
   SELECT cash_deal_number "DealTicketNo",
        cash_reference_date "TakenDate",
        cash_due_date "MaturityDate",
        pkgreturncursor.fncgetdescription(cash_counter_party,2) "Bank",
        pkgreturncursor.fncgetdescription(cash_base_currency,2) || '/' ||
        pkgreturncursor.fncgetdescription(cash_Other_currency,2) "CurrencyPair",
        pkgreturncursor.fncgetdescription(CASH_ACCOUNTING_TYPE,2) "AccountingType",
        cash_base_amount "BookingFcy",
        cash_outstanding_fcy "Outstanding",
        TO_CHAR(cash_due_date,'MON-YYYY') "Month",
        cash_spot_rate "Spot",
        cash_foward_rate "Premium",
        cash_margin_rate "Margin",
        cash_exchange_rate "All_inRate",
        cash_mtm_rate "MTMRate",
        cash_mtm_amount "MTMUndiscounted",
        CASH_MTM_AMOUNTInFunctional "MTMinFunctionalCurrency",
        CASH_DISCOUNTING_FACTOR "Disc_Factor",
        cash_interest_rate "InterestRate",

        CASH_DISCOUNTING_AMOUNT "MTMDiscounted",
        case when cash_crystal_amount<>0 then  1 
        when  cash_uncrystal_amount<>0 then 2
        else 0 end "SerialNumber",
        cash_crystal_amount "CrystallisedCovers",
        cash_uncrystal_amount "UnCrystallisedCovers", 
        nvl(CASH_BS_AMOUNT,0) "EffectivePortionToBSActual",
        nvl(CASH_PL_AMOUNT,0) "IneffectivePortionToPLActual",
        pkgreturncursor.fncgetdescription(CASH_DIrect_Indirect,1) "DirectIndirect",
        pkgreturncursor.fncgetdescription(cash_functional_currency,2) "FunctionalCurrency",
        cash_Funcational_Rate "FunctionalExRate",

        nvl(CASH_EFFECTIVE_PL,0) "EffectivePortionToBS",
        nvl(CASH_inEFFECTIVE_PL,0) "IneffectivePortionToPL",
        nvl(CASH_EFFECTIVE_PL,0) + nvl(CASH_inEFFECTIVE_PL,0) "TotalImpact",

--        cash_crystal_amount "Crystalised",
--        cash_uncrystal_amount "Uncrystalised",
--        CASH_BS_AMOUNT "ToBS", CASH_PL_AMOUNT "ToPL",
--        decode(cash_crystal_amount,0,0,CASH_DISCOUNTING_AMOUNT) "CrystalisedPandL",
--        decode(cash_uncrystal_amount,0,0,CASH_DISCOUNTING_AMOUNT) "UncrystalisedPandL",  
        pkgreturncursor.fncgetdescription(CASH_SUBPRODUCT_CODE,2)"DealType",
        pkgreturncursor.fncgetdescription(CASH_BUY_SELL,2)"BuySell",
        pkgreturncursor.fncgetdescription(CASH_LOCATION_CODE,2)"Location",
        pkgreturncursor.fncgetdescription(CASH_PRODUCT_CODE,2)"Lob"        
      FROM TRTRAN111_DETAIL
      WHERE cash_effective_date = Dattemp
      and CASH_ACCOUNTING_TYPE=numcode;
--      and CASH_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                    where UPPER(usco_user_id) = varUserid
--		AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
--          and CASH_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006)) ;

     -- AND  CASH_SUBPRODUCT_CODE = numcode
--     and CASH_LOCATION_CODE =  numcode2
--      and ( (numcode1=1 ) and (cash_crystal_amount<>0)
--      or (numcode1=2) and (cash_uncrystal_amount<>0)
--      or (numcode1=0))
--      and cash_SUBPRODUCT_CODE = decode(numcode,33899999, cash_SUBPRODUCT_CODE,numcode);
  Goto Process_End;
End If;
----------------------------------------------------------------------------------------------------------------------
---added by divya -----
-- if numinfotype=REFGETFORWARDOPTIONSBOOKING then
--  numCode6 := gconst.fncxmlextract(xmldoc,'BuySell',numCode6);  
--  numCode7 := Gconst.Fncxmlextract(Xmldoc,'LocalBank',numCode7);
--  numcode8:= GCONST.FNCXMLEXTRACT(XMLDOC,'BusinessUnit',numcode8);
--  numcode9:= GCONST.FNCXMLEXTRACT(XMLDOC,'ProfitCentre',numcode9);
----  numcode1:= GCONST.FNCXMLEXTRACT(XMLDOC,'DataType',numcode1);
--
--    open gencursor for 
--       select deal_deal_number "DealNumber",
--                deal_execute_date "ExecuteDate",
--                pkgreturncursor.fncgetdescription(deal_backup_deal,2) "BusinessUnit",
--                pkgreturncursor.fncgetdescription(deal_init_code,2) "ProfitCenter",
--                pkgreturncursor.fncgetdescription(deal_counter_party,2) "CounterParty",
--                pkgreturncursor.fncgetdescription(deal_buy_sell,2) "BuySell",                         
--                deal_base_amount "Amount",             
--                deal_spot_rate "SpotRate",
--                deal_forward_rate "ForwardRate",
--                deal_margin_rate "MarginRate",
--                deal_exchange_rate "Rate",                         
--                deal_maturity_from "ExpiryDate",
--                deal_maturity_date "SettlementDate", 
--                to_date(sysdate,'dd-MON-yy') "ConfirmDate",  
--                deal_other_amount "OtherAmount",
--                pkgreturncursor.fncgetdescription(deal_hedge_trade,2) "HedgeTrade",
--                pkgreturncursor.fncgetdescription(deal_Base_Currency,2) "BaseCurrency",
--                pkgreturncursor.fncgetdescription(deal_other_currency,2) "OtherCurrency",
--              --  pkgreturncursor.fncgetdescription(deal_swap_outright,2) "SwapOutright",
--                pkgreturncursor.fncgetdescription(deal_deal_type,2) "DealType",             
--                pkgreturncursor.fncgetdescription(deal_Company_code,2) "Company",   
--                pkgreturncursor.fncgetdescription(deal_Location_code,2) "Location",
--                deal_dealer_name "DealerName",
--                deal_counter_dealer "CounterDealer",
--                deal_complete_date "CompleteDate",
--                deal_dealer_remarks "DealerRemarks",
--                DEAL_SERIAL_NUMBER "SerialNumber",
--                deal_Company_code "CompanyCode",
--                deal_Location_code "LocationCode",
--                deal_backup_deal "BusinessUintCode",
--                deal_counter_party "CounterPartyCode",
--                deal_base_currency "BaseCurrencyCode",
--                deal_other_currency "OtherCurrencyCode",
--                deal_buy_sell "BuySellCode",
--                deal_init_code "ProfitCentreCode",
--                '' "BatchNumber",
--                (deal_other_amount-( NVL((select sum(HEDG_HEDGED_FCY)
--                            from trtran004D
--                            where HEDG_DEAL_NUMBER1 = deal_deal_number 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) "UnCoveredAmount"
--                from trtran001 where deal_record_status not in (10200003,10200005,10200006)
--                and deal_buy_sell =decode(numcode6,25399999,deal_buy_sell,numcode6)
--                and deal_counter_party =decode(numcode7,30699999,deal_counter_party,numcode7)
--                and deal_backup_deal =decode(numcode8,33399999,deal_backup_deal,numcode8)
--                and deal_init_code =decode(numcode9,33899999,deal_init_code,numcode9)
--                and deal_deal_number not in (select LINK_BOOKING_DEAL from trtran112a --modified by supriya
--                where link_record_status not in (10200005,10200006))
--               union all
--                select COPT_DEAL_NUMBER "DealNumber",COPT_EXECUTE_DATE as "ExecuteDate",
--                       pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  "BusinessUnit" ,
--                       pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  "ProfitCentre" ,
--                       pkgreturncursor.fncgetdescription(copt_counter_party, 2) as "CounterParty",
--                       pkgreturncursor.fncgetdescription(cosu_buy_sell,2) Buysell, 
--                       copt_base_amount as "BaseAmount",
--                       0 "SpotRate",0 "ForwardRate",0 "MarginRate",                   
--                       cosu_strike_rate "Rate",COPT_EXPIRY_DATE "ExpiryDate",
--                       COPT_MATURITY_DATE "SettlementDate",to_date(copt_confirm_date,'dd-MON-yy') "ConfirmDate",  
--                       copt_other_amount "OtherAmount",
--                       pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as "HedgeTrade",
--                      Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As "BaseCurrency",
--                      pkgreturncursor.fncgetdescription(copt_other_currency, 2) as "OtherCurrency", 
--                      pkgreturncursor.fncgetdescription(copt_deal_type,2) "DealType",  
--                      pkgreturncursor.fncgetdescription(copt_Company_code,2) "Company",   
--                      pkgreturncursor.fncgetdescription(copt_Location_code,2) "Location",
--               --    pkgreturncursor.fncgetdescription(deal_maturity_code,2) "MaturityCode",                       
--                     copt_dealer_name "DealerName",copt_counter_dealer "CounterDealer",
--                     copt_complete_date "CompleteDate",copt_dealer_remark "DealerRemarks",
--                     copt_SERIAL_NUMBER "SerialNumber" ,
--                     copt_Company_code "CompanyCode",
--                     copt_Location_code "LocationCode",
--                     copt_backup_deal "BusinessUintCode",
--                     copt_counter_party "CounterPartyCode",
--                      copt_base_currency "BaseCurrencyCode",
--                      copt_other_currency "OtherCurrencyCode",
--                      cosu_buy_sell "BuySellCode",
--                     copt_init_code "ProfitCentreCode",
--                      '' "BatchNumber",
--                      (COPT_OTHER_AMOUNT-( NVL((select sum(HEDG_HEDGED_FCY)
--                            from trtran004D
--                            where HEDG_DEAL_NUMBER1 = COPT_DEAL_NUMBER 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) "UnCoveredAmount"
--             from trtran071 join trtran072
--             on cosu_deal_number= COPT_DEAL_NUMBER
--             and cosu_serial_number=copt_serial_number
--             JOIN TRTRAN072A ON
--             cosu_deal_number = COSM_DEAL_NUMBER
--             and cosm_serial_number = 1
--           Where     
--            cosu_record_Status not in (10200005,10200006)
--            and copt_record_status not in (10200005,10200006)
--            and cosm_record_status not in (10200005,10200006)
--               and cosu_buy_sell =decode(numcode6,25399999,cosu_buy_sell,numcode6)
--                and copt_counter_party =decode(numcode7,30699999,copt_counter_party,numcode7)
--                and copt_backup_deal =decode(numcode8,33399999,copt_backup_deal,numcode8)
--                and copt_init_code =decode(numcode9,33899999,copt_init_code,numcode9)
--            and COPT_DEAL_NUMBER not in (select LINK_BOOKING_DEAL from trtran112a --modified by supriya 
--            where link_record_status not in (10200005,10200006));
--
--          
-- goto process_end;
-- end if;

-- -------added by divya on 08/05/20---
--  if numinfotype=REFGETFORWARDOPTIONSCANCEL  then
--     numcode:= GCONST.FNCXMLEXTRACT(XMLDOC,'BaseCurrency',numcode);
--     numcode1:= GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',numcode1);
----    numCode2 := gconst.fncxmlextract(xmldoc,'LocalBankYesNo',numCode2);  
--    --numCode3 := gconst.fncxmlextract(xmldoc,'Portfolio',  numCode3);  
--    Numcode4 := Gconst.Fncxmlextract(Xmldoc,'CompanyCode',Numcode4);
--    numcode5:= GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',numcode5);
--     numCode6 := gconst.fncxmlextract(xmldoc,'BuySell',numCode6);  
--    numCode7 := Gconst.Fncxmlextract(Xmldoc,'LocalBank',numCode7);
--    numcode8:= GCONST.FNCXMLEXTRACT(XMLDOC,'BusinessUnit',numcode8);
--     numcode9:= GCONST.FNCXMLEXTRACT(XMLDOC,'ProfitCentre',numcode9);
----     numLocationCode := GCONST.FNCXMLEXTRACT(XMLDOC,'DataType',numLocationCode);
--    begin
--           dattemp:=GCONST.FNCXMLEXTRACT(XMLDOC,'MaturityDate',dattemp);
--            exception 
--            when others then
--            dattemp:=null;
--          end;
--          begin
--             dattemp1:=GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteDate',dattemp1);
--          EXCEPTION WHEN OTHERS THEN
--          dattemp1:=null;
--          END;
--
--     open gencursor for 
--       select deal_deal_number "DealNumber",
--              cdel_cancel_date "CancelDate",
--              pkgreturncursor.fncgetdescription(deal_backup_deal,2) "BusinessUnit", 
--              pkgreturncursor.fncgetdescription(deal_init_code,2) "ProfitCenter",
--              pkgreturncursor.fncgetdescription(deal_counter_party,2) "CounterParty",
--              (case when deal_buy_sell=25300001 then 
--              pkgreturncursor.fncgetdescription(25300002,2)
--              else
--              pkgreturncursor.fncgetdescription(25300001,2)
--              end)  "BuySell",
--              null "OptionType",
--              --pkgreturncursor.fncgetdescription(deal_buy_sell,2)    "BuySell",    
--              cdel_cancel_amount "Amount",
--              trtran006.cdel_spot_rate "SpotRate",
--              trtran006.cdel_forward_rate "ForwardRate",
--              trtran006.cdel_margin_rate "MarginRate",
--              cdel_cancel_rate "Rate",             
--              deal_maturity_from "ExpiryDate",
--              deal_maturity_date "SettlementDate",             
--          --    deal_base_amount "BookingAmount",
----              pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
----              Gconst.Amountfcy, DatTemp1)  "OutstandingAmount",
----              deal_execute_date "BookingDate",
----              deal_exchange_rate "BookingRate",
----              to_date(sysdate,'dd-MON-yy') "ConfirmDate",
----              cdel_profit_loss "ProfitLoss", 
--              --fncgetPandLRate(deal_deal_number,CDEL_REVERSE_SERIAL, DatTemp1,1) "ProfitLossConversionRate",
----              round(cdel_profit_loss / fncgetPandLRate(deal_deal_number,CDEL_REVERSE_SERIAL, DatTemp1,1),2) "ConvertedProfitLoss",
--              cdel_other_amount "OtherAmount",                         
--              pkgreturncursor.fncgetdescription(deal_Base_Currency,2) "BaseCurrency",
--              pkgreturncursor.fncgetdescription(deal_other_currency,2) "OtherCurrency",              
--            --  cdel_edc_charge "EdcCharges",             
--           --   cdel_cashflow_date "CashflowDate",             
--              cdel_dealer_name "DealerName",
--              cdel_counter_dealer "CounterDealer",
--              cdel_dealer_remark "DealerRemarks",
--              CDEL_DEAL_SERIAL "DealSerial",
--              CDEL_REVERSE_SERIAL "ReverseSerial",
--              pkgreturncursor.fncgetdescription(cdel_deal_type,2) "DealType",
--              pkgreturncursor.fncgetdescription(cdel_cancel_type,2) "CancelType",
--              pkgreturncursor.fncgetdescription(deal_company_code,2) "Company",
--              pkgreturncursor.fncgetdescription(deal_location_code,2) "Location" ,
--              deal_Company_code "CompanyCode",
--              deal_Location_code "LocationCode",
--              deal_backup_deal "BusinessUintCode",
--              deal_counter_party "CounterPartyCode",
--               deal_base_currency "BaseCurrencyCode",
--              deal_other_currency "OtherCurrencyCode",
--              deal_buy_sell "BuySellCode",
--              deal_init_code "ProfitCentreCode",
--              '' "BatchNumber",
--              '' "ReferenceNumber",
--              (CDEL_OTHER_AMOUNT-( NVL((select sum(HEDG_HEDGED_FCY)
--                            from trtran004D
--                            where HEDG_DEAL_NUMBER1 = CDEL_DEAL_NUMBER 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) "UnCoveredAmount"
--              from trtran006 inner join trtran001 b
--              on deal_deal_number=cdel_deal_number 
--              AND DEAL_RECORD_STATUS NOT IN (10200005,10200006) 
--              --AND CDEL_DEAL_TYPE in (26000001,26000003) 
--              and cdel_record_status not in(10200003,10200005,10200006)
--              and deal_base_currency =numcode
--              and deal_other_currency=numcode1
----              and deal_counter_party = DECODE(Numcode2,30699999,deal_counter_party,Numcode2)
--              --and deal_backup_deal = DECODE(numCode3,33399999,deal_backup_deal,numCode3)
--              and deal_company_code = DECODE(Numcode4,30199999,deal_company_code,Numcode4)
--              and deal_location_code = DECODE(numCode5,30299999,deal_location_code,numCode5)
--              AND (((dattemp IS NULL)) OR ((dattemp IS NOT NULL) AND (deal_maturity_date=dattemp)))
--              AND (((dattemp1 IS NULL)) OR ((dattemp1 IS NOT NULL) AND (deal_execute_date=dattemp1)))
--              and deal_buy_sell =decode(numcode6,25399999,deal_buy_sell,numcode6)
--              and deal_counter_party =decode(numcode7,30699999,deal_counter_party,numcode7)
--              and deal_backup_deal =decode(numcode8,33399999,deal_backup_deal,numcode8)
--              and deal_init_code =decode(numcode9,33899999,deal_init_code,numcode9)
--                and cdel_deal_number not in (select LINK_CANCEL_DEAL from trtran112a 
--              where link_record_status not in (10200005,10200006) 
--              AND LINK_CANCEL_DEAL=cdel_deal_number
--              and LINK_REVERSE_SERIAL=cdel_reverse_serial)
--              union all
--          select corv_deal_number "DealNumber",
--          corv_exercise_date "CancelDate",
--          pkgreturncursor.fncgetdescription(copt_backup_deal,2) "BusinessUnit",
--          pkgreturncursor.fncgetdescription(copt_init_code,2) "ProfitCenter", 
--          pkgreturncursor.fncgetdescription(copt_counter_party,2) "ConnterParty",
--          pkgreturncursor.fncgetdescription(cosu_buy_sell,2)"BuySell",
--          pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2)"OptionType",
----          (select case when cosu_buy_sell =25300001 then 
----            pkgreturncursor.fncgetdescription(25300002,2) 
----            else   pkgreturncursor.fncgetdescription(25300001,2) end 
----            from trtran072 where cosu_deal_number=copt_deal_number) "BuySell",
--          corv_base_amount "Amount",
--           0 "SpotRate",
--           0 "ForwardRate",
--           0 "MarginRate",
--           corv_exercise_rate "Rate",
--           COPT_EXPIRY_DATE "ExpiryDate",
--          COPT_maturity_date "SettlementDate",  
--          corv_other_amount "OtherAmount",
--          pkgreturncursor.fncgetdescription(copt_base_currency,2) "BaseCurrency",
--          pkgreturncursor.fncgetdescription(copt_other_currency,2) "OtherCurrency",   
--          corv_dealer_name "DealerName",
--          corv_counter_dealer "CounterDealer",
--         corv_dealer_remarks "DelaerRemarks",             
--          corv_serial_number "SerialNumber",
--          CORV_REVERSE_SERIAL "ReverseSerial",
--         -- CORV_SUBSERIAL_NUMBER	"SubserialNumber",
--          pkgreturncursor.fncgetdescription(copt_deal_type,2) "DealType",
--          pkgreturncursor.fncgetdescription(corv_exercise_type,2) "CancelType",      
--          pkgreturncursor.fncgetdescription(copt_company_code,2) "Company",
--          pkgreturncursor.fncgetdescription(copt_location_code,2) "Location",
--          copt_Company_code "CompanyCode",
--          copt_Location_code "LocationCode",
--          copt_backup_deal "BusinessUintCode",
--          copt_counter_party "CounterPartyCode",
--          copt_base_currency "BaseCurrencyCode",
--          copt_other_currency "OtherCurrencyCode",
--          cosu_buy_sell "BuySellCode",
--          copt_init_code "ProfitCentreCode",
--          '' "BatchNumber",
--          '' "ReferenceNumber",
--          (CORV_OTHER_AMOUNT-( NVL((select sum(HEDG_HEDGED_FCY)
--                            from trtran004D
--                            where HEDG_DEAL_NUMBER1 = CORV_DEAL_NUMBER 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) "UnCoveredAmount"
--          from trtran073 inner join trtran071
--          on copt_deal_number=corv_deal_number
--          inner join trtran072
--           on cosu_deal_number= COPT_DEAL_NUMBER
--           AND COSU_SERIAL_NUMBER = CORV_SERIAL_NUMBER
--          where CORV_RECORD_STATUS  IN (10200004,10200001)
--          AND COPT_RECORD_STATUS NOT IN (10200005,10200006)
--          AND CORV_EXERCISE_TYPE NOT IN(33000002)
--           and copt_base_currency =numcode
--              and copt_other_currency=numcode1
----              and copt_counter_party = DECODE(Numcode2,30699999,copt_counter_party,Numcode2)
--              and copt_backup_deal = DECODE(numCode3,33399999,copt_backup_deal,numCode3)
--              and copt_company_code = DECODE(Numcode4,30199999,copt_company_code,Numcode4)
--              and copt_location_code = DECODE(numCode5,30299999,copt_location_code,numCode5)
--              AND (((dattemp IS NULL)) OR ((dattemp IS NOT NULL) AND (copt_maturity_date=dattemp)))
--              AND (((dattemp1 IS NULL)) OR ((dattemp1 IS NOT NULL) AND (copt_execute_date=dattemp1)))
--               and cosu_buy_sell =decode(numcode6,25399999,cosu_buy_sell,numcode6)
--              and copt_counter_party =decode(numcode7,30699999,copt_counter_party,numcode7)
--              and copt_backup_deal =decode(numcode8,33399999,copt_backup_deal,numcode8)
--               and copt_init_code =decode(numcode9,33899999,copt_init_code,numcode9)
--                and corv_deal_number not in (select LINK_CANCEL_DEAL from trtran112a 
--              where link_record_status not in (10200005,10200006) 
--              AND LINK_CANCEL_DEAL=corv_deal_number
--              and LINK_REVERSE_SERIAL=CORV_REVERSE_SERIAL);
--              
-- goto process_end;
-- end if;

-------added by divya -----
-- if numinfotype=REFGETFORWARDOPTIONSBOOKING then
--
--  if numUserActionType=101 then
--      numcode:= GCONST.FNCXMLEXTRACT(XMLDOC,'BaseCurrency',numcode);
--      numcode1:= GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',numcode1);
--    --    numCode2 := gconst.fncxmlextract(xmldoc,'LocalBankYesNo',numCode2);  
--    --    numCode3 := gconst.fncxmlextract(xmldoc,'Portfolio',  numCode3);  
--        Numcode4 := Gconst.Fncxmlextract(Xmldoc,'CompanyCode',Numcode4);
--        numcode5:= GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',numcode5);
--         numCode6 := gconst.fncxmlextract(xmldoc,'BuySell',numCode6);  
--        numCode7 := Gconst.Fncxmlextract(Xmldoc,'LocalBank',numCode7);
--        numcode8:= GCONST.FNCXMLEXTRACT(XMLDOC,'BusinessUnit',numcode8);
--         numcode9:= GCONST.FNCXMLEXTRACT(XMLDOC,'ProfitCentre',numcode9);
--             --  GLOG.Log_write('BaseCurrency' || ' : ' || numcode);
--      GLOG.Log_write('OtherCurrency' || ' : ' || numcode1);
--    --  GLOG.Log_write('Portfolio' || ' : ' || numcode3);
--      GLOG.Log_write('CompanyCode' || ' : ' || numcode4);
--      GLOG.Log_write('LocationCode' || ' : ' || numcode5);
--      GLOG.Log_write('BuySell' || ' : ' || numcode6);
--      GLOG.Log_write('LocalBank' || ' : ' || numcode7);
--      GLOG.Log_write('BusinessUnit' || ' : ' || numcode8);
--      GLOG.Log_write('ProfitCentre' || ' : ' || numcode9);
--      GLOG.Log_write('BatchNumber' || ' : ' || varReference);
--     else
--           varReference:=GCONST.FNCXMLEXTRACT(XMLDOC,'BatchNumber',varReference);
--   end if ;
--
----         begin
----           varReference:=GCONST.FNCXMLEXTRACT(XMLDOC,'BatchNumber',varReference);
----            exception 
----            when others then
----            varReference:=null;
----          end;
--         begin
--           dattemp:=GCONST.FNCXMLEXTRACT(XMLDOC,'MaturityDateFrom',dattemp);
--            exception 
--            when others then
--            dattemp:=null;
--          end;
--          begin
--             dattemp1:=GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteDateFrom',dattemp1);
--          EXCEPTION WHEN OTHERS THEN
--          dattemp1:=null;
--          END;
--          begin
--           dattemp2:=GCONST.FNCXMLEXTRACT(XMLDOC,'MaturityDateTo',dattemp2);
--            exception 
--            when others then
--            dattemp2:=null;
--          end;
--          begin
--             dattemp3:=GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteDateTo',dattemp3);
--          EXCEPTION WHEN OTHERS THEN
--          dattemp3:=null;
--          END;
--    open gencursor for 
--       with CTE as 
--       (select rownum "Rownum",deal_deal_number DealNumber,
--                deal_execute_date ExecuteDate,
--                pkgreturncursor.fncgetdescription(deal_backup_deal,2) BusinessUnit,
--                pkgreturncursor.fncgetdescription(deal_init_code,2) ProfitCenter,
--                pkgreturncursor.fncgetdescription(deal_counter_party,2) CounterParty,
--                pkgreturncursor.fncgetdescription(deal_buy_sell,2) BuySell,                         
--                deal_base_amount Amount,             
--                deal_spot_rate SpotRate,
--                deal_forward_rate ForwardRate,
--                deal_margin_rate MarginRate,
--                deal_exchange_rate Rate,                         
--                deal_maturity_from ExpiryDate,
--                deal_maturity_date SettlementDate, 
--                to_date(sysdate,'dd-MON-yy') ConfirmDate,  
--                deal_other_amount OtherAmount,
--                pkgreturncursor.fncgetdescription(deal_hedge_trade,2) HedgeTrade,
--                pkgreturncursor.fncgetdescription(deal_Base_Currency,2) BaseCurrency,
--                pkgreturncursor.fncgetdescription(deal_other_currency,2) OtherCurrency,
--              --  pkgreturncursor.fncgetdescription(deal_swap_outright,2) SwapOutright,
--                pkgreturncursor.fncgetdescription(deal_deal_type,2) DealType,             
--                pkgreturncursor.fncgetdescription(deal_Company_code,2) Company,   
--                pkgreturncursor.fncgetdescription(deal_Location_code,2) Location,
--                deal_dealer_name DealerName,
--                deal_counter_dealer CounterDealer,
--                deal_complete_date CompleteDate,
--                deal_dealer_remarks DealerRemarks,
--                DEAL_SERIAL_NUMBER SerialNumber,
--                deal_Company_code CompanyCode,
--                deal_Location_code LocationCode,
--                deal_backup_deal BusinessUintCode,
--                deal_counter_party CounterPartyCode,
--                deal_base_currency BaseCurrencyCode,
--                deal_other_currency OtherCurrencyCode,
--                deal_buy_sell BuySellCode,
--                deal_init_code ProfitCentreCode,
--                '' BatchNumber,
--                (deal_other_amount-( NVL((select sum(HEDG_HEDGED_FCY)
--                            from trtran004D
--                            where HEDG_DEAL_NUMBER1 = deal_deal_number 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) UnCoveredAmount
--                from trtran001 where deal_record_status not in (10200003,10200005,10200006)
--               union all
--                select rownum "Rownum",COPT_DEAL_NUMBER DealNumber,COPT_EXECUTE_DATE as ExecuteDate,
--                       pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  BusinessUnit ,
--                       pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  ProfitCenter ,
--                       pkgreturncursor.fncgetdescription(copt_counter_party, 2) as CounterParty,
--                       pkgreturncursor.fncgetdescription(cosu_buy_sell,2) Buysell, 
--                       copt_base_amount as Amount,
--                       0 SpotRate,0 ForwardRate,0 MarginRate,                   
--                       cosu_strike_rate Rate,COPT_EXPIRY_DATE ExpiryDate,
--                       COPT_MATURITY_DATE SettlementDate,to_date(copt_confirm_date,'dd-MON-yy') ConfirmDate,  
--                       copt_other_amount OtherAmount,
--                       pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as HedgeTrade,
--                      Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As BaseCurrency,
--                      pkgreturncursor.fncgetdescription(copt_other_currency, 2) as OtherCurrency, 
--                      pkgreturncursor.fncgetdescription(copt_deal_type,2) DealType,  
--                      pkgreturncursor.fncgetdescription(copt_Company_code,2) Company,   
--                      pkgreturncursor.fncgetdescription(copt_Location_code,2) Location,
--               --    pkgreturncursor.fncgetdescription(deal_maturity_code,2) MaturityCode,                       
--                     copt_dealer_name DealerName,copt_counter_dealer CounterDealer,
--                     copt_complete_date CompleteDate,copt_dealer_remark DealerRemarks,
--                     copt_SERIAL_NUMBER SerialNumber ,
--                     copt_Company_code CompanyCode,
--                     copt_Location_code LocationCode,
--                     copt_backup_deal BusinessUintCode,
--                     copt_counter_party CounterPartyCode,
--                      copt_base_currency BaseCurrencyCode,
--                      copt_other_currency OtherCurrencyCode,
--                      cosu_buy_sell BuySellCode,
--                     copt_init_code ProfitCentreCode,
--                      '' BatchNumber,
--                      (COPT_OTHER_AMOUNT-( NVL((select sum(HEDG_HEDGED_FCY)
--                            from trtran004D
--                            where HEDG_DEAL_NUMBER1 = COPT_DEAL_NUMBER 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) UnCoveredAmount
--             from trtran071 join trtran072
--             on cosu_deal_number= COPT_DEAL_NUMBER
--             and cosu_serial_number=copt_serial_number
--             JOIN TRTRAN072A ON
--             cosu_deal_number = COSM_DEAL_NUMBER
--             and cosm_serial_number = 1
--           Where     
--            cosu_record_Status not in (10200005,10200006)
--            and copt_record_status not in (10200005,10200006)
--            and cosm_record_status not in (10200005,10200006))
--
--             select  Rownum "Rownum",DealNumber "DealNumber",ExecuteDate "ExecuteDate",BusinessUnit "BusinessUnit",ProfitCenter "ProfitCenter",
--                    CounterParty "CounterParty", Buysell "Buysell", Amount "Amount",
--                    (select sum(Hedg_Hedged_fcy) from trtran004D
--                     where ((HEDG_DEAL_NUMBER1=Dealnumber) or 
--                            (HEDG_DEAL_NUMBER2=Dealnumber))
--                     and Hedg_record_Status not in (10200005,10200006)) "AdjustedAmount",
--                     (case when numUserActionType=101 then Amount
--                     else (select sum(Hedg_Hedged_fcy) from trtran004D
--                     where ((HEDG_DEAL_NUMBER1=Dealnumber) or 
--                            (HEDG_DEAL_NUMBER2=Dealnumber))
--                     and Hedg_Batch_number=VarReference
--                     and Hedg_record_Status not in (10200005,10200006))
--                     end )"AdjustingAmount",
--                     SpotRate "SpotRate", ForwardRate "ForwardRate", MarginRate "MarginRate",                   
--                     Rate "Rate",ExpiryDate "ExpiryDate", SettlementDate "SettlementDate",ConfirmDate "ConfirmDate",  
--                     OtherAmount "OtherAmount", HedgeTrade "HedgeTrade", BaseCurrency "BaseCurrency",
--                     OtherCurrency "OtherCurrency",  DealType "DealType",   Company "Company",Location "Location",
--                 DealerName "DealerName", CounterDealer "CounterDealer", CompleteDate "CompleteDate", DealerRemarks "DealerRemarks",
--                      SerialNumber "SerialNumber", CompanyCode "CompanyCode", LocationCode "LocationCode",
--                      BusinessUintCode "BusinessUintCode", CounterPartyCode "CounterPartyCode", BaseCurrencyCode "BaseCurrencyCode",
--                      OtherCurrencyCode "OtherCurrencyCode",
--                      BuySellCode "BuySellCode",ProfitCentreCode "ProfitCentreCode",
--                       BatchNumber "BatchNumber", UnCoveredAmount "UnCoveredAmount"
--            from cte 
--             where ((numUserActionType=101) and (BaseCurrencyCode =numcode
--              and OtherCurrencyCode=numcode1
--              and CompanyCode = DECODE(Numcode4,30199999,CompanyCode,Numcode4)
--              and LocationCode = DECODE(numCode5,30299999,LocationCode,numCode5)
--              AND (((dattemp IS NULL)) OR ((dattemp IS NOT NULL) AND (SettlementDate between dattemp and dattemp2 )))
--              AND (((dattemp1 IS NULL)) OR ((dattemp1 IS NOT NULL) AND (ExecuteDate between dattemp1 and dattemp3)))
--               and BuySellCode =decode(numcode6,25399999,BuySellCode,numcode6)
--              and CounterPartyCode =decode(numcode7,30699999,CounterPartyCode,numcode7)
--              and BusinessUintCode =decode(numcode8,33399999,BusinessUintCode,numcode8)
--               and ProfitCentreCode =decode(numcode9,33899999,ProfitCentreCode,numcode9)
--               and DealNumber not in (select LINK_CANCEL_DEAL from trtran112a 
--               where link_record_status not in (10200005,10200006) 
--              AND LINK_CANCEL_DEAL=DealNumber))
----              and LINK_REVERSE_SERIAL=ReverseSerial))
--              or ((numUserActionType !=101) and  (DealNumber in 
--                (select HEDG_DEAL_NUMBER1 from trtran004d
--                  where Hedg_record_Status not in (10200005,10200006)
--                  and hedg_Batch_number=varReference)))) ;
-- goto process_end;
-- end if;

 -------added by divya on 08/05/20---
--  if numinfotype=REFGETFORWARDOPTIONSCANCEL  then
--     numcode:= GCONST.FNCXMLEXTRACT(XMLDOC,'BaseCurrency',numcode);
--     numcode1:= GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',numcode1);
----    numCode2 := gconst.fncxmlextract(xmldoc,'LocalBankYesNo',numCode2);  
--    numCode3 := gconst.fncxmlextract(xmldoc,'Portfolio',  numCode3);  
--    Numcode4 := Gconst.Fncxmlextract(Xmldoc,'CompanyCode',Numcode4);
--    numcode5:= GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',numcode5);
--     numCode6 := gconst.fncxmlextract(xmldoc,'BuySell',numCode6);  
--    numCode7 := Gconst.Fncxmlextract(Xmldoc,'LocalBank',numCode7);
--    numcode8:= GCONST.FNCXMLEXTRACT(XMLDOC,'BusinessUnit',numcode8);
--     numcode9:= GCONST.FNCXMLEXTRACT(XMLDOC,'ProfitCentre',numcode9);
----     numLocationCode := GCONST.FNCXMLEXTRACT(XMLDOC,'DataType',numLocationCode);
--GLOG.Log_write('BaseCurrency' || ' : ' || numcode);
--  GLOG.Log_write('OtherCurrency' || ' : ' || numcode1);
--  GLOG.Log_write('Portfolio' || ' : ' || numcode3);
--  GLOG.Log_write('CompanyCode' || ' : ' || numcode4);
--  GLOG.Log_write('LocationCode' || ' : ' || numcode5);
--  GLOG.Log_write('BuySell' || ' : ' || numcode6);
--  GLOG.Log_write('LocalBank' || ' : ' || numcode7);
--  GLOG.Log_write('BusinessUnit' || ' : ' || numcode8);
--  GLOG.Log_write('ProfitCentre' || ' : ' || numcode9);
--    begin
--           dattemp:=GCONST.FNCXMLEXTRACT(XMLDOC,'MaturityDate',dattemp);
--            exception 
--            when others then
--            dattemp:=null;
--          end;
--          begin
--             dattemp1:=GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteDate',dattemp1);
--          EXCEPTION WHEN OTHERS THEN
--          dattemp1:=null;
--          END;
--
--     open gencursor for 
--       select deal_deal_number "DealNumber",
--              cdel_cancel_date "CancelDate",
--              pkgreturncursor.fncgetdescription(deal_backup_deal,2) "BusinessUnit", 
--              pkgreturncursor.fncgetdescription(deal_init_code,2) "ProfitCenter",
--              pkgreturncursor.fncgetdescription(deal_counter_party,2) "CounterParty",
--              (case when deal_buy_sell=25300001 then 
--              pkgreturncursor.fncgetdescription(25300002,2)
--              else
--              pkgreturncursor.fncgetdescription(25300001,2)
--              end)  "BuySell",
--              null "OptionType",
--              --pkgreturncursor.fncgetdescription(deal_buy_sell,2)    "BuySell",    
--              cdel_cancel_amount "Amount",
--              trtran006.cdel_spot_rate "SpotRate",
--              trtran006.cdel_forward_rate "ForwardRate",
--              trtran006.cdel_margin_rate "MarginRate",
--              cdel_cancel_rate "Rate",             
--              deal_maturity_from "ExpiryDate",
--              deal_maturity_date "SettlementDate",             
--          --    deal_base_amount "BookingAmount",
----              pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
----              Gconst.Amountfcy, DatTemp1)  "OutstandingAmount",
----              deal_execute_date "BookingDate",
----              deal_exchange_rate "BookingRate",
----              to_date(sysdate,'dd-MON-yy') "ConfirmDate",
----              cdel_profit_loss "ProfitLoss", 
--              --fncgetPandLRate(deal_deal_number,CDEL_REVERSE_SERIAL, DatTemp1,1) "ProfitLossConversionRate",
----              round(cdel_profit_loss / fncgetPandLRate(deal_deal_number,CDEL_REVERSE_SERIAL, DatTemp1,1),2) "ConvertedProfitLoss",
--              cdel_other_amount "OtherAmount",                         
--              pkgreturncursor.fncgetdescription(deal_Base_Currency,2) "BaseCurrency",
--              pkgreturncursor.fncgetdescription(deal_other_currency,2) "OtherCurrency",              
--            --  cdel_edc_charge "EdcCharges",             
--           --   cdel_cashflow_date "CashflowDate",             
--              cdel_dealer_name "DealerName",
--              cdel_counter_dealer "CounterDealer",
--              cdel_dealer_remark "DealerRemarks",
--              CDEL_DEAL_SERIAL "DealSerial",
--              CDEL_REVERSE_SERIAL "ReverseSerial",
--              pkgreturncursor.fncgetdescription(cdel_deal_type,2) "DealType",
--              pkgreturncursor.fncgetdescription(cdel_cancel_type,2) "CancelType",
--              pkgreturncursor.fncgetdescription(deal_company_code,2) "Company",
--              pkgreturncursor.fncgetdescription(deal_location_code,2) "Location" ,
--              deal_Company_code "CompanyCode",
--              deal_Location_code "LocationCode",
--              deal_backup_deal "BusinessUintCode",
--              deal_counter_party "CounterPartyCode",
--               deal_base_currency "BaseCurrencyCode",
--              deal_other_currency "OtherCurrencyCode",
--              deal_buy_sell "BuySellCode",
--              deal_init_code "ProfitCentreCode",
--              '' "BatchNumber",
--              '' "ReferenceNumber",
--              (CDEL_OTHER_AMOUNT-( NVL((select sum(HEDG_HEDGED_FCY)
--                            from trtran004D
--                            where HEDG_DEAL_NUMBER1 = CDEL_DEAL_NUMBER 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) "UnCoveredAmount"
--              from trtran006 inner join trtran001 b
--              on deal_deal_number=cdel_deal_number 
--              AND DEAL_RECORD_STATUS NOT IN (10200005,10200006) 
--              AND CDEL_DEAL_TYPE in (26000001,26000003) 
--              and cdel_record_status not in(10200003,10200005,10200006)
--              and deal_base_currency =numcode
--              and deal_other_currency=numcode1
----              and deal_counter_party = DECODE(Numcode2,30699999,deal_counter_party,Numcode2)
--              and deal_backup_deal = DECODE(numCode3,33399999,deal_backup_deal,numCode3)
--              and deal_company_code = DECODE(Numcode4,30199999,deal_company_code,Numcode4)
--              and deal_location_code = DECODE(numCode5,30299999,deal_location_code,numCode5)
--              AND (((dattemp IS NULL)) OR ((dattemp IS NOT NULL) AND (deal_maturity_date=dattemp)))
--              AND (((dattemp1 IS NULL)) OR ((dattemp1 IS NOT NULL) AND (deal_execute_date=dattemp1)))
--              and deal_buy_sell =decode(numcode6,25399999,deal_buy_sell,numcode6)
--              and deal_counter_party =decode(numcode7,30699999,deal_counter_party,numcode7)
--              and deal_backup_deal =decode(numcode8,33399999,deal_backup_deal,numcode8)
--              and deal_init_code =decode(numcode9,33899999,deal_init_code,numcode9)
--                and cdel_deal_number not in (select LINK_CANCEL_DEAL from trtran112a 
--              where link_record_status not in (10200005,10200006) 
--              AND LINK_CANCEL_DEAL=cdel_deal_number
--              and LINK_REVERSE_SERIAL=cdel_reverse_serial)
--              union all
--          select corv_deal_number "DealNumber",
--          corv_exercise_date "CancelDate",
--          pkgreturncursor.fncgetdescription(copt_backup_deal,2) "BusinessUnit",
--          pkgreturncursor.fncgetdescription(copt_init_code,2) "ProfitCenter", 
--          pkgreturncursor.fncgetdescription(copt_counter_party,2) "ConnterParty",
--          pkgreturncursor.fncgetdescription(cosu_buy_sell,2)"BuySell",
--          pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2)"OptionType",
----          (select case when cosu_buy_sell =25300001 then 
----            pkgreturncursor.fncgetdescription(25300002,2) 
----            else   pkgreturncursor.fncgetdescription(25300001,2) end 
----            from trtran072 where cosu_deal_number=copt_deal_number) "BuySell",
--          corv_base_amount "Amount",
--           0 "SpotRate",
--           0 "ForwardRate",
--           0 "MarginRate",
--           corv_exercise_rate "Rate",
--           COPT_EXPIRY_DATE "ExpiryDate",
--          COPT_maturity_date "SettlementDate",  
--          corv_other_amount "OtherAmount",
--          pkgreturncursor.fncgetdescription(copt_base_currency,2) "BaseCurrency",
--          pkgreturncursor.fncgetdescription(copt_other_currency,2) "OtherCurrency",   
--          corv_dealer_name "DealerName",
--          corv_counter_dealer "CounterDealer",
--         corv_dealer_remarks "DelaerRemarks",             
--          corv_serial_number "SerialNumber",
--          CORV_REVERSE_SERIAL "ReverseSerial",
--         -- CORV_SUBSERIAL_NUMBER	"SubserialNumber",
--          pkgreturncursor.fncgetdescription(copt_deal_type,2) "DealType",
--          pkgreturncursor.fncgetdescription(corv_exercise_type,2) "CancelType",      
--          pkgreturncursor.fncgetdescription(copt_company_code,2) "Company",
--          pkgreturncursor.fncgetdescription(copt_location_code,2) "Location",
--          copt_Company_code "CompanyCode",
--          copt_Location_code "LocationCode",
--          copt_backup_deal "BusinessUintCode",
--          copt_counter_party "CounterPartyCode",
--          copt_base_currency "BaseCurrencyCode",
--          copt_other_currency "OtherCurrencyCode",
--          cosu_buy_sell "BuySellCode",
--          copt_init_code "ProfitCentreCode",
--          '' "BatchNumber",
--          '' "ReferenceNumber",
--          (CORV_OTHER_AMOUNT-( NVL((select sum(HEDG_HEDGED_FCY)
--                            from trtran004D
--                            where HEDG_DEAL_NUMBER1 = CORV_DEAL_NUMBER 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) "UnCoveredAmount"
--          from trtran073 inner join trtran071
--          on copt_deal_number=corv_deal_number
--          inner join trtran072
--           on cosu_deal_number= COPT_DEAL_NUMBER
--           AND COSU_SERIAL_NUMBER = CORV_SERIAL_NUMBER
--          where CORV_RECORD_STATUS  IN (10200004,10200001)
--          AND COPT_RECORD_STATUS NOT IN (10200005,10200006)
--          AND CORV_EXERCISE_TYPE NOT IN(33000002)
--           and copt_base_currency =numcode
--              and copt_other_currency=numcode1
----              and copt_counter_party = DECODE(Numcode2,30699999,copt_counter_party,Numcode2)
--              and copt_backup_deal = DECODE(numCode3,33399999,copt_backup_deal,numCode3)
--              and copt_company_code = DECODE(Numcode4,30199999,copt_company_code,Numcode4)
--              and copt_location_code = DECODE(numCode5,30299999,copt_location_code,numCode5)
--              AND (((dattemp IS NULL)) OR ((dattemp IS NOT NULL) AND (copt_maturity_date=dattemp)))
--              AND (((dattemp1 IS NULL)) OR ((dattemp1 IS NOT NULL) AND (copt_execute_date=dattemp1)))
--               and cosu_buy_sell =decode(numcode6,25399999,cosu_buy_sell,numcode6)
--              and copt_counter_party =decode(numcode7,30699999,copt_counter_party,numcode7)
--              and copt_backup_deal =decode(numcode8,33399999,copt_backup_deal,numcode8)
--               and copt_init_code =decode(numcode9,33899999,copt_init_code,numcode9)
--                and corv_deal_number not in (select LINK_CANCEL_DEAL from trtran112a 
--              where link_record_status not in (10200005,10200006) 
--              AND LINK_CANCEL_DEAL=corv_deal_number
--              and LINK_REVERSE_SERIAL=CORV_REVERSE_SERIAL);
--              
-- goto process_end;
-- end if;

-- -------added by divya on 08/05/20---
--  if numinfotype=REFGETFORWARDOPTIONSCANCEL  then
--    if numUserActionType=101 then
--  numcode:= GCONST.FNCXMLEXTRACT(XMLDOC,'BaseCurrency',numcode);
--     numcode1:= GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',numcode1);
----    numCode2 := gconst.fncxmlextract(xmldoc,'LocalBankYesNo',numCode2);  
----    numCode3 := gconst.fncxmlextract(xmldoc,'Portfolio',  numCode3);  
--    Numcode4 := Gconst.Fncxmlextract(Xmldoc,'CompanyCode',Numcode4);
--    numcode5:= GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',numcode5);
--     numCode6 := gconst.fncxmlextract(xmldoc,'BuySell',numCode6);  
--    numCode7 := Gconst.Fncxmlextract(Xmldoc,'LocalBank',numCode7);
--    numcode8:= GCONST.FNCXMLEXTRACT(XMLDOC,'BusinessUnit',numcode8);
--     numcode9:= GCONST.FNCXMLEXTRACT(XMLDOC,'ProfitCentre',numcode9);
--      GLOG.Log_write('BaseCurrency' || ' : ' || numcode);
--  GLOG.Log_write('OtherCurrency' || ' : ' || numcode1);
--  GLOG.Log_write('Portfolio' || ' : ' || numcode3);
--  GLOG.Log_write('CompanyCode' || ' : ' || numcode4);
--  GLOG.Log_write('LocationCode' || ' : ' || numcode5);
--  GLOG.Log_write('BuySell' || ' : ' || numcode6);
--  GLOG.Log_write('LocalBank' || ' : ' || numcode7);
--  GLOG.Log_write('BusinessUnit' || ' : ' || numcode8);
--  GLOG.Log_write('ProfitCentre' || ' : ' || numcode9);
--     else
--           varReference:=GCONST.FNCXMLEXTRACT(XMLDOC,'BatchNumber',varReference);
--            GLOG.Log_write('BatchNumber' || ' : ' || varReference);
--           end if ;
--
--
----    begin
----           varReference:=GCONST.FNCXMLEXTRACT(XMLDOC,'BatchNumber',varReference);
----            exception 
----            when others then
----            varReference:=null;
----          end;
--    begin
--           dattemp:=GCONST.FNCXMLEXTRACT(XMLDOC,'MaturityDateFrom',dattemp);
--            exception 
--            when others then
--            dattemp:=null;
--          end;
--          begin
--             dattemp1:=GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteDateFrom',dattemp1);
--          EXCEPTION WHEN OTHERS THEN
--          dattemp1:=null;
--          END;
--        begin
--           dattemp2:=GCONST.FNCXMLEXTRACT(XMLDOC,'MaturityDateTo',dattemp2);
--            exception 
--            when others then
--            dattemp2:=null;
--          end;
--          begin
--             dattemp3:=GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteDateTo',dattemp3);
--          EXCEPTION WHEN OTHERS THEN
--          dattemp3:=null;
--          END;
--     open gencursor for 
--      with CTE as 
--       (select rownum "Rownum",deal_deal_number DealNumber,
--              cdel_cancel_date CancelDate,
--              pkgreturncursor.fncgetdescription(deal_backup_deal,2) BusinessUnit, 
--              pkgreturncursor.fncgetdescription(deal_init_code,2) ProfitCenter,
--              pkgreturncursor.fncgetdescription(deal_counter_party,2) CounterParty,
--              (case when deal_buy_sell=25300001 then 
--              pkgreturncursor.fncgetdescription(25300002,2)
--              else
--              pkgreturncursor.fncgetdescription(25300001,2)
--              end)  BuySell,
--              null OptionType,
--              --pkgreturncursor.fncgetdescription(deal_buy_sell,2)    BuySell,    
--              cdel_cancel_amount Amount,
--              trtran006.cdel_spot_rate SpotRate,
--              trtran006.cdel_forward_rate ForwardRate,
--              trtran006.cdel_margin_rate MarginRate,
--              cdel_cancel_rate Rate,             
--              deal_maturity_from ExpiryDate,
--              deal_maturity_date SettlementDate, 
--              cdel_other_amount OtherAmount,                         
--              pkgreturncursor.fncgetdescription(deal_Base_Currency,2) BaseCurrency,
--              pkgreturncursor.fncgetdescription(deal_other_currency,2) OtherCurrency,  
--              cdel_dealer_name DealerName,
--              cdel_counter_dealer CounterDealer,
--              cdel_dealer_remark DealerRemarks,
--              CDEL_DEAL_SERIAL SerialNumber,
--              CDEL_REVERSE_SERIAL ReverseSerial,
--              pkgreturncursor.fncgetdescription(cdel_deal_type,2) DealType,
--              pkgreturncursor.fncgetdescription(cdel_cancel_type,2) CancelType,
--              pkgreturncursor.fncgetdescription(deal_company_code,2) Company,
--              pkgreturncursor.fncgetdescription(deal_location_code,2) Location ,
--              deal_Company_code CompanyCode,
--              deal_Location_code LocationCode,
--              deal_backup_deal BusinessUintCode,
--              deal_counter_party CounterPartyCode,
--               deal_base_currency BaseCurrencyCode,
--              deal_other_currency OtherCurrencyCode,
--              deal_buy_sell BuySellCode,
--              deal_init_code ProfitCentreCode,
--              '' BatchNumber,
--              '' ReferenceNumber,
--              (CDEL_OTHER_AMOUNT-( NVL((select sum(HEDG_HEDGED_FCY)
--                            from trtran004D
--                            where HEDG_DEAL_NUMBER2 = CDEL_DEAL_NUMBER 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) UnCoveredAmount
--              from trtran006 inner join trtran001 b
--              on deal_deal_number=cdel_deal_number 
--              AND DEAL_RECORD_STATUS NOT IN (10200005,10200006) 
--              AND CDEL_DEAL_TYPE in (26000001,26000003) 
--              and cdel_record_status not in(10200003,10200005,10200006)
--        union all
--          select rownum "Rownum",corv_deal_number DealNumber,
--          corv_exercise_date CancelDate,
--          pkgreturncursor.fncgetdescription(copt_backup_deal,2) BusinessUnit,
--          pkgreturncursor.fncgetdescription(copt_init_code,2) ProfitCenter, 
--          pkgreturncursor.fncgetdescription(copt_counter_party,2) CounterParty,
--          pkgreturncursor.fncgetdescription(cosu_buy_sell,2)BuySell,
--          pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2)OptionType,
--          corv_base_amount Amount,
--           0 SpotRate,
--           0 ForwardRate,
--           0 MarginRate,
--           corv_exercise_rate Rate,
--           COPT_EXPIRY_DATE ExpiryDate,
--          COPT_maturity_date SettlementDate,  
--          corv_other_amount OtherAmount,
--          pkgreturncursor.fncgetdescription(copt_base_currency,2) BaseCurrency,
--          pkgreturncursor.fncgetdescription(copt_other_currency,2) OtherCurrency,   
--          corv_dealer_name DealerName,
--          corv_counter_dealer CounterDealer,
--         corv_dealer_remarks DealerRemarks,             
--          corv_serial_number SerialNumber,
--          CORV_REVERSE_SERIAL ReverseSerial,
--          pkgreturncursor.fncgetdescription(copt_deal_type,2) DealType,
--          pkgreturncursor.fncgetdescription(corv_exercise_type,2) CancelType,      
--          pkgreturncursor.fncgetdescription(copt_company_code,2) Company,
--          pkgreturncursor.fncgetdescription(copt_location_code,2) Location,
--          copt_Company_code CompanyCode,
--          copt_Location_code LocationCode,
--          copt_backup_deal BusinessUintCode,
--          copt_counter_party CounterPartyCode,
--          copt_base_currency BaseCurrencyCode,
--          copt_other_currency OtherCurrencyCode,
--          cosu_buy_sell BuySellCode,
--          copt_init_code ProfitCentreCode,
--          '' BatchNumber,
--          '' ReferenceNumber,
--          (CORV_OTHER_AMOUNT-( NVL((select sum(HEDG_HEDGED_FCY)
--                            from trtran004D
--                            where HEDG_DEAL_NUMBER2 = CORV_DEAL_NUMBER 
--                            and hedg_record_status not in (10200005,10200006)),0)
--                              )) UnCoveredAmount
--          from trtran073 inner join trtran071
--          on copt_deal_number=corv_deal_number
--          inner join trtran072
--           on cosu_deal_number= COPT_DEAL_NUMBER
--           AND COSU_SERIAL_NUMBER = CORV_SERIAL_NUMBER
--          where CORV_RECORD_STATUS  IN (10200004,10200001)
--          AND COPT_RECORD_STATUS NOT IN (10200005,10200006)
--          AND CORV_EXERCISE_TYPE NOT IN(33000002))
--
--          select  Rownum "Rownum",DealNumber "DealNumber",
--           CancelDate "CancelDate", BusinessUnit "BusinessUnit", ProfitCenter "ProfitCenter",
--           CounterParty "CounterParty",BuySell "BuySell",OptionType "OptionType",
--           Amount "Amount",
--          (select sum(Hedg_Hedged_fcy) from trtran004D
--                     where ((HEDG_DEAL_NUMBER1=Dealnumber) or 
--                            (HEDG_DEAL_NUMBER2=Dealnumber))
--                     and Hedg_record_Status not in (10200005,10200006)) "AdjustedAmount",
--           (case when numUserActionType=101 then Amount
--                 else (select sum(Hedg_Hedged_fcy) from trtran004D
--                 where ((HEDG_DEAL_NUMBER1=Dealnumber) or 
--                        (HEDG_DEAL_NUMBER2=Dealnumber))
--                 and Hedg_Batch_number=VarReference
--                 and Hedg_record_Status not in (10200005,10200006))
--                 end )"AdjustingAmount",
--           SpotRate "SpotRate",ForwardRate "ForwardRate", MarginRate "MarginRate",Rate "Rate",
--           ExpiryDate "ExpiryDate",SettlementDate "SettlementDate",OtherAmount "OtherAmount",BaseCurrency "BaseCurrency",
--           OtherCurrency "OtherCurrency", DealerName "DealerName",CounterDealer "CounterDealer",
--          DealerRemarks "DealerRemarks",SerialNumber "SerialNumber",ReverseSerial "ReverseSerial",
--          DealType "DealType", CancelType "CancelType",Company "Company",
--          Location "Location",CompanyCode "CompanyCode",LocationCode "LocationCode",
--           BusinessUintCode "BusinessUintCode", CounterPartyCode "CounterPartyCode",
--           BaseCurrencyCode "BaseCurrencyCode",OtherCurrencyCode "OtherCurrencyCode",
--           BuySellCode "BuySellCode",ProfitCentreCode "ProfitCentreCode",
--          BatchNumber "BatchNumber",ReferenceNumber "ReferenceNumber",UnCoveredAmount "UnCoveredAmount"
--          from cte
--           where ((numUserActionType=101) and (BaseCurrencyCode =numcode
--              and OtherCurrencyCode=numcode1
--              and CompanyCode = DECODE(Numcode4,30199999,CompanyCode,Numcode4)
--              and LocationCode = DECODE(numCode5,30299999,LocationCode,numCode5)
--              AND (((dattemp IS NULL)) OR ((dattemp IS NOT NULL) AND (SettlementDate between dattemp and dattemp2 )))
--              AND (((dattemp1 IS NULL)) OR ((dattemp1 IS NOT NULL) AND (CancelDate between dattemp1 and dattemp3)))
--               and BuySellCode =decode(numcode6,25399999,BuySellCode,numcode6)
--              and CounterPartyCode =decode(numcode7,30699999,CounterPartyCode,numcode7)
--              and BusinessUintCode =decode(numcode8,33399999,BusinessUintCode,numcode8)
--               and ProfitCentreCode =decode(numcode9,33899999,ProfitCentreCode,numcode9)
--               and DealNumber not in (select LINK_CANCEL_DEAL from trtran112a 
--               where link_record_status not in (10200005,10200006) 
--              AND LINK_CANCEL_DEAL=DealNumber
--              and LINK_REVERSE_SERIAL=ReverseSerial))
--              or ((numUserActionType !=101) and  (DealNumber in 
--                (select HEDG_DEAL_NUMBER2 from trtran004d
--                  where Hedg_record_Status not in (10200005,10200006)
--                  and hedg_Batch_number=varReference)))) ;
--goto process_end;
-- end if;


--added by supriya on 14/12/2020
if numinfotype=REFGETFORWARDOPTIONSBOOKING then
--    numcode  := GCONST.FNCXMLEXTRACT(XMLDOC, 'BaseCurrency', numcode);
--    numcode1 := GCONST.FNCXMLEXTRACT(XMLDOC, 'OtherCurrency', numcode1);
    numcode2 := GCONST.FNCXMLEXTRACT(Xmldoc, 'CompanyCode', numcode2);
    numcode3 := GCONST.FNCXMLEXTRACT(XMLDOC, 'LocationCode', numcode3);
    numCode4 := GCONST.FNCXMLEXTRACT(xmldoc, 'BuySell', numCode4);  
    numCode5 := GCONST.FNCXMLEXTRACT(Xmldoc, 'LocalBank', numCode5);
    numcode6 := GCONST.FNCXMLEXTRACT(XMLDOC, 'BusinessUnit', numcode6);
    numcode7 := GCONST.FNCXMLEXTRACT(XMLDOC, 'ProfitCentre', numcode7);
    numcode8  := GCONST.FNCXMLEXTRACT(XMLDOC, 'CurrencyPair', numcode8);

    begin
        select CNDI_BASE_CURRENCY,CNDI_OTHER_CURRENCY into numcode,numcode1
        from TRMASTER256
        where CNDI_PICK_CODE = numcode8
        and CNDI_record_status not in (10200005,10200006);
    exception
    when others then
        numcode:=0;numcode1:=0;
    end;

    begin
        dattemp:=GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteFromDate',dattemp);
    exception 
    when others then
        dattemp:=sysdate;
    end;
    begin
        dattemp1:=GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteToDate',dattemp1);
    EXCEPTION WHEN OTHERS THEN
        dattemp1:=sysdate;
    END;

    begin
        dattemp2:=GCONST.FNCXMLEXTRACT(XMLDOC,'MaturityFromDate',dattemp2);
    exception 
    when others then
        dattemp2:=sysdate;
    end;
    begin
        dattemp3:=GCONST.FNCXMLEXTRACT(XMLDOC,'MaturityToDate',dattemp3);
    EXCEPTION WHEN OTHERS THEN
        dattemp3:=sysdate;
    END;

    open gencursor for 
    with cte as (select deal_deal_number DealNumber, deal_execute_date ExecuteDate,                       
            deal_base_amount BaseAmount, 
            nvl((select SUM(LINK_AMOUNT) from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_BOOKING_DEAL = deal_deal_number),0) AdjustedAmount,
            deal_base_amount - nvl((select SUM(LINK_AMOUNT) from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_BOOKING_DEAL = deal_deal_number),0) AdjustingAmount,
            deal_base_amount - nvl((select SUM(LINK_AMOUNT) from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_BOOKING_DEAL = deal_deal_number),0) AdjustingAmountUser,
            deal_spot_rate SpotRate,
            deal_forward_rate ForwardRate,
            deal_margin_rate MarginRate,
            deal_exchange_rate Rate,
            deal_other_amount OtherAmount,                         
            deal_maturity_from ExpiryDate,
            deal_maturity_date SettlementDate, 
            to_date(sysdate,'dd-MON-yy') ConfirmDate,              
            pkgreturncursor.fncgetdescription(deal_Company_code,2) Company,   
            pkgreturncursor.fncgetdescription(deal_Location_code,2) Location,
            pkgreturncursor.fncgetdescription(deal_backup_deal, 2) BusinessUnit,
            pkgreturncursor.fncgetdescription(deal_init_code, 2) ProfitCentre,
            pkgreturncursor.fncgetdescription(deal_counter_party,2) CounterParty,
            pkgreturncursor.fncgetdescription(deal_buy_sell,2) BuySell,  
            pkgreturncursor.fncgetdescription(deal_Base_Currency,2) BaseCurrency,
            pkgreturncursor.fncgetdescription(deal_other_currency,2) OtherCurrency,
            pkgreturncursor.fncgetdescription(deal_hedge_trade,2) HedgeTrade,
            pkgreturncursor.fncgetdescription(deal_deal_type,2) DealType, 
            deal_dealer_name DealerName,
            deal_counter_dealer CounterDealer,
            deal_complete_date CompleteDate,
            deal_dealer_remarks DealerRemarks,
            DEAL_SERIAL_NUMBER SerialNumber,
            deal_Company_code CompanyCode,
            deal_Location_code LocationCode,
            deal_backup_deal BusinessUnitCode,
            deal_counter_party CounterPartyCode,
            deal_base_currency BaseCurrencyCode,
            deal_other_currency OtherCurrencyCode,
            deal_buy_sell BuySellCode,
            deal_init_code ProfitCentreCode,
            '' BatchNumber,
            'Forwards' DealTypeDesc
            from trtran001 
            where deal_record_status not in (10200003,10200005,10200006)
--            and deal_base_currency = numcode
--            and deal_other_currency = numcode1
--            and deal_company_code = DECODE(numcode2,30199999,deal_company_code,numcode2)
--            and deal_location_code = DECODE(numcode3,30299999,deal_location_code,numcode3)
--            AND (((dattemp IS NULL)) OR ((dattemp IS NOT NULL) AND (deal_maturity_date=dattemp)))
--            AND (((dattemp1 IS NULL)) OR ((dattemp1 IS NOT NULL) AND (deal_execute_date=dattemp1)))
--            and deal_buy_sell = decode(numCode4,25399999,deal_buy_sell,numCode4)
--            and deal_counter_party = decode(numCode5,30699999,deal_counter_party,numCode5)
--            and deal_backup_deal = decode(numcode6,33399999,deal_backup_deal,numcode6)
--            and deal_init_code = decode(numcode7,33899999,deal_init_code,numcode7)
--            and deal_deal_number not in (select LINK_BOOKING_DEAL from trtran112a --modified by supriya
--            where link_record_status not in (10200005,10200006))
            and (deal_base_amount - nvl((select SUM(LINK_AMOUNT) from trtran112a 
            where link_record_status not in (10200005,10200006)
            and LINK_BOOKING_DEAL = deal_deal_number
            and LINK_DEAL_SERIAL = DEAL_SERIAL_NUMBER),0)) > 0
    union all
        select COPT_DEAL_NUMBER DealNumber, COPT_EXECUTE_DATE as ExecuteDate,
            copt_base_amount as BaseAmount,
            nvl((select SUM(LINK_AMOUNT)  
            from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_BOOKING_DEAL = COPT_DEAL_NUMBER),0) AdjustedAmount,
            copt_base_amount - nvl((select SUM(LINK_AMOUNT)  
            from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_BOOKING_DEAL = COPT_DEAL_NUMBER),0) AdjustingAmount,
            copt_base_amount - nvl((select SUM(LINK_AMOUNT)  
            from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_BOOKING_DEAL = COPT_DEAL_NUMBER),0) AdjustingAmountUser,
            0 SpotRate, 0 ForwardRate, 0 MarginRate,                   
            cosu_strike_rate Rate, 
            copt_other_amount OtherAmount,
            COPT_EXPIRY_DATE ExpiryDate,
            COPT_MATURITY_DATE SettlementDate,
            to_date(copt_confirm_date,'dd-MON-yy') ConfirmDate,  
            pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as HedgeTrade,
            Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As BaseCurrency,
            pkgreturncursor.fncgetdescription(copt_other_currency, 2) as OtherCurrency, 
            pkgreturncursor.fncgetdescription(copt_deal_type,2) DealType,  
            pkgreturncursor.fncgetdescription(copt_Company_code,2) Company,   
            pkgreturncursor.fncgetdescription(copt_Location_code,2) Location,
            pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  BusinessUnit ,
            pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  ProfitCentre ,
            pkgreturncursor.fncgetdescription(copt_counter_party, 2) as CounterParty,
            pkgreturncursor.fncgetdescription(cosu_buy_sell,2) Buysell,                  
            copt_dealer_name DealerName,copt_counter_dealer CounterDealer,
            copt_complete_date CompleteDate,copt_dealer_remark DealerRemarks,
            copt_SERIAL_NUMBER SerialNumber ,
            copt_Company_code CompanyCode,
            copt_Location_code LocationCode,
            copt_backup_deal BusinessUnitCode,
            copt_counter_party CounterPartyCode,
            copt_base_currency BaseCurrencyCode,
            copt_other_currency OtherCurrencyCode,
            cosu_buy_sell BuySellCode,
            copt_init_code ProfitCentreCode,
            '' BatchNumber,
            'Options' DealTypeDesc
            from trtran071 join trtran072
            on cosu_deal_number= COPT_DEAL_NUMBER
            and cosu_serial_number=copt_serial_number
            JOIN TRTRAN072A ON
            cosu_deal_number = COSM_DEAL_NUMBER
            and cosm_serial_number = 1
            Where cosu_record_Status not in (10200005,10200006)
            and copt_record_status not in (10200005,10200006)
            and cosm_record_status not in (10200005,10200006)
            and (copt_base_amount - nvl((select SUM(LINK_AMOUNT) from trtran112a 
            where link_record_status not in (10200005,10200006)
            and LINK_BOOKING_DEAL = COPT_DEAL_NUMBER
            and LINK_DEAL_SERIAL = copt_SERIAL_NUMBER),0)) > 0)

            select Rownum "Rownum", DealNumber "DealNumber",
                ExecuteDate "ExecuteDate", BaseAmount "BaseAmount",
                AdjustedAmount "AdjustedAmount", AdjustingAmount "AdjustingAmount",
                AdjustingAmountUser "AdjustingAmountUser", SpotRate "SpotRate", 
                ForwardRate "ForwardRate", MarginRate "MarginRate",                   
                Rate "Rate", OtherAmount "OtherAmount",
                ExpiryDate "ExpiryDate", SettlementDate "SettlementDate", ConfirmDate "ConfirmDate",  
                HedgeTrade "HedgeTrade", BaseCurrency "BaseCurrency",
                OtherCurrency as "OtherCurrency", DealType "DealType",  
                Company "Company", Location "Location",
                BusinessUnit  "BusinessUnit", ProfitCentre "ProfitCentre" ,
                CounterParty "CounterParty", Buysell "Buysell",                  
                DealerName "DealerName", CounterDealer "CounterDealer",
                CompleteDate "CompleteDate", DealerRemarks "DealerRemarks",
                SerialNumber "SerialNumber" ,
                CompanyCode "CompanyCode",
                LocationCode "LocationCode",
                BusinessUnit "BusinessUnitCode",
                CounterPartyCode "CounterPartyCode",
                BaseCurrencyCode "BaseCurrencyCode",
                OtherCurrencyCode "OtherCurrencyCode",
                BuySellCode "BuySellCode",
                ProfitCentreCode "ProfitCentreCode",
                BatchNumber "BatchNumber",
                DealTypeDesc "DealTypeDesc"
                from CTE
                where BaseCurrencyCode = numcode
                and OtherCurrencyCode = numcode1
                and CompanyCode = DECODE(numcode2,30199999,CompanyCode,numcode2)
                and LocationCode = DECODE(numcode3,30299999,LocationCode,numcode3)
                AND (SettlementDate between dattemp2 and dattemp3)--((dattemp IS NOT NULL) AND (SettlementDate = dattemp)))
                AND (ExecuteDate between dattemp and dattemp1) --(((dattemp IS NULL)) OR ((dattemp1 IS NOT NULL) AND (ExecuteDate = dattemp1)))
                and BuySellCode = decode(numCode4,25399999,BuySellCode,numCode4)
                and CounterPartyCode = decode(numCode5,30699999,CounterPartyCode,numCode5)
                and BusinessUnitCode = decode(numcode6,33399999,BusinessUnitCode,numcode6)
                and ProfitCentreCode = decode(numcode7,33899999,ProfitCentreCode,numcode7);
    goto process_end;
end if;

---------------------added by supriya on 14/12/2020--------------
if numinfotype=REFGETFORWARDOPTIONSCANCEL  then
--    numcode  := GCONST.FNCXMLEXTRACT(XMLDOC, 'BaseCurrency', numcode);
--    numcode1 := GCONST.FNCXMLEXTRACT(XMLDOC, 'OtherCurrency', numcode1);
    numcode2 := GCONST.FNCXMLEXTRACT(Xmldoc, 'CompanyCode', numcode2);
    numcode3 := GCONST.FNCXMLEXTRACT(XMLDOC, 'LocationCode', numcode3);
    numCode4 := GCONST.FNCXMLEXTRACT(xmldoc, 'BuySell', numCode4);  
    numCode5 := GCONST.FNCXMLEXTRACT(Xmldoc, 'LocalBank', numCode5);
    numcode6 := GCONST.FNCXMLEXTRACT(XMLDOC, 'BusinessUnit', numcode6);
    numcode7 := GCONST.FNCXMLEXTRACT(XMLDOC, 'ProfitCentre', numcode7);
    numcode8  := GCONST.FNCXMLEXTRACT(XMLDOC, 'CurrencyPair', numcode8);

    begin
        select CNDI_BASE_CURRENCY,CNDI_OTHER_CURRENCY into numcode,numcode1
        from TRMASTER256
        where CNDI_PICK_CODE = numcode8
        and CNDI_record_status not in (10200005,10200006);
    exception
    when others then
        numcode:=0;numcode1:=0;
    end;
    begin
        dattemp:=GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteFromDate',dattemp);
    exception 
    when others then
        dattemp:=sysdate;
    end;
    begin
        dattemp1:=GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteToDate',dattemp1);
    EXCEPTION WHEN OTHERS THEN
        dattemp1:=sysdate;
    END;

    begin
        dattemp2:=GCONST.FNCXMLEXTRACT(XMLDOC,'MaturityFromDate',dattemp2);
    exception 
    when others then
        dattemp2:=sysdate;
    end;
    begin
        dattemp3:=GCONST.FNCXMLEXTRACT(XMLDOC,'MaturityToDate',dattemp3);
    EXCEPTION WHEN OTHERS THEN
        dattemp3:=sysdate;
    END;

    open gencursor for 
    with cte as (select deal_deal_number DealNumber, cdel_cancel_date CancelDate,
            cdel_cancel_amount BaseAmount,         
            nvl((select SUM(LINK_AMOUNT)  
            from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_CANCEL_DEAL = deal_deal_number
            and LINK_REVERSE_SERIAL = cdel_reverse_serial),0) AdjustedAmount,
            cdel_cancel_amount - nvl((select SUM(LINK_AMOUNT)  
            from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_CANCEL_DEAL = deal_deal_number
            and LINK_REVERSE_SERIAL = cdel_reverse_serial),0) AdjustingAmount,
            cdel_cancel_amount - nvl((select SUM(LINK_AMOUNT)  
            from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_CANCEL_DEAL = deal_deal_number
            and LINK_REVERSE_SERIAL = cdel_reverse_serial),0) AdjustingAmountUser,
            trtran006.cdel_spot_rate SpotRate,
            trtran006.cdel_forward_rate ForwardRate,
            trtran006.cdel_margin_rate MarginRate,
            cdel_cancel_rate Rate,         
            cdel_other_amount OtherAmount,                      
            deal_maturity_from ExpiryDate,
            deal_maturity_date SettlementDate,                    
            pkgreturncursor.fncgetdescription(deal_Base_Currency,2) BaseCurrency,
            pkgreturncursor.fncgetdescription(deal_other_currency,2) OtherCurrency,   
            pkgreturncursor.fncgetdescription(deal_backup_deal,2) BusinessUnit, 
            pkgreturncursor.fncgetdescription(deal_init_code,2) ProfitCenter,
            pkgreturncursor.fncgetdescription(deal_counter_party,2) CounterParty,
            pkgreturncursor.fncgetdescription(deal_buy_sell,2) BuySell,
            null OptionType,                
            cdel_dealer_name DealerName,
            cdel_counter_dealer CounterDealer,
            cdel_dealer_remark DealerRemarks,
            CDEL_DEAL_SERIAL SerialNumber,
            CDEL_REVERSE_SERIAL ReverseSerial,
            pkgreturncursor.fncgetdescription(cdel_deal_type,2) DealType,
            pkgreturncursor.fncgetdescription(cdel_cancel_type,2) CancelType,
            pkgreturncursor.fncgetdescription(deal_company_code,2) Company,
            pkgreturncursor.fncgetdescription(deal_location_code,2) Location,
            deal_Company_code CompanyCode,
            deal_Location_code LocationCode,
            deal_backup_deal BusinessUnitCode,
            deal_counter_party CounterPartyCode,
            deal_base_currency BaseCurrencyCode,
            deal_other_currency OtherCurrencyCode,
            deal_buy_sell BuySellCode,
            deal_init_code ProfitCentreCode,
            '' BatchNumber,
            '' ReferenceNumber,
            'Forwards' DealTypeDesc
            from trtran006 inner join trtran001 b
            on deal_deal_number=cdel_deal_number 
            AND DEAL_RECORD_STATUS NOT IN (10200005,10200006) 
            and cdel_record_status not in(10200003,10200005,10200006)
--            and deal_base_currency =numcode
--            and deal_other_currency=numcode1
--            and deal_company_code = DECODE(numcode2,30199999,deal_company_code,numcode2)
--            and deal_location_code = DECODE(numcode3,30299999,deal_location_code,numcode3)
--            AND (((dattemp IS NULL)) OR ((dattemp IS NOT NULL) AND (deal_maturity_date=dattemp)))
--            AND (((dattemp1 IS NULL)) OR ((dattemp1 IS NOT NULL) AND (deal_execute_date=dattemp1)))
--            and deal_buy_sell =decode(numCode4,25399999,deal_buy_sell,numCode4)
--            and deal_counter_party =decode(numCode5,30699999,deal_counter_party,numCode5)
--            and deal_backup_deal =decode(numcode6,33399999,deal_backup_deal,numcode6)
--            and deal_init_code =decode(numcode7,33899999,deal_init_code,numcode7)
--            and cdel_deal_number not in (select LINK_CANCEL_DEAL from trtran112a 
--            where link_record_status not in (10200005,10200006) 
--            AND LINK_CANCEL_DEAL = cdel_deal_number
--            and LINK_REVERSE_SERIAL = cdel_reverse_serial)
            and (cdel_cancel_amount - nvl((select SUM(LINK_AMOUNT) from trtran112a 
            where link_record_status not in (10200005,10200006)
            and LINK_CANCEL_DEAL = cdel_deal_number
            and LINK_REVERSE_SERIAL = cdel_reverse_serial),0)) > 0
        union all
        select corv_deal_number DealNumber,
            corv_exercise_date CancelDate,
            corv_base_amount BaseAmount,
            nvl((select SUM(LINK_AMOUNT)  
            from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_CANCEL_DEAL = corv_deal_number
            and LINK_REVERSE_SERIAL = CORV_REVERSE_SERIAL),0) AdjustedAmount,
            corv_base_amount - nvl((select SUM(LINK_AMOUNT)  
            from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_CANCEL_DEAL = corv_deal_number
            and LINK_REVERSE_SERIAL = CORV_REVERSE_SERIAL),0) AdjustingAmount,
            corv_base_amount - nvl((select SUM(LINK_AMOUNT)  
            from trtran112a --modified by supriya
            where link_record_status not in (10200005,10200006)
            and LINK_CANCEL_DEAL = corv_deal_number
            and LINK_REVERSE_SERIAL = CORV_REVERSE_SERIAL),0) AdjustingAmountUser,
            0 SpotRate,
            0 ForwardRate,
            0 MarginRate,
            corv_exercise_rate Rate, 
            corv_other_amount OtherAmount,
            COPT_EXPIRY_DATE ExpiryDate,
            COPT_maturity_date SettlementDate, 
            pkgreturncursor.fncgetdescription(copt_backup_deal,2) BusinessUnit,
            pkgreturncursor.fncgetdescription(copt_init_code,2) ProfitCenter, 
            pkgreturncursor.fncgetdescription(copt_counter_party,2) CounterParty,
            pkgreturncursor.fncgetdescription(cosu_buy_sell,2) BuySell,
            pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2) OptionType,
            pkgreturncursor.fncgetdescription(copt_base_currency,2) BaseCurrency,
            pkgreturncursor.fncgetdescription(copt_other_currency,2) OtherCurrency,   
            corv_dealer_name DealerName,
            corv_counter_dealer CounterDealer,
            corv_dealer_remarks DealerRemarks,             
            corv_serial_number SerialNumber,
            CORV_REVERSE_SERIAL ReverseSerial,
            pkgreturncursor.fncgetdescription(copt_deal_type,2) DealType,
            pkgreturncursor.fncgetdescription(corv_exercise_type,2) CancelType,      
            pkgreturncursor.fncgetdescription(copt_company_code,2) Company,
            pkgreturncursor.fncgetdescription(copt_location_code,2) Location,
            copt_Company_code CompanyCode,
            copt_Location_code LocationCode,
            copt_backup_deal BusinessUnitCode,
            copt_counter_party CounterPartyCode,
            copt_base_currency BaseCurrencyCode,
            copt_other_currency OtherCurrencyCode,
            cosu_buy_sell BuySellCode,
            copt_init_code ProfitCentreCode,
            '' BatchNumber,
            '' ReferenceNumber,
            'Options' DealTypeDesc
            from trtran073 inner join trtran071
            on copt_deal_number=corv_deal_number
            inner join trtran072
            on cosu_deal_number= COPT_DEAL_NUMBER
            AND COSU_SERIAL_NUMBER = CORV_SERIAL_NUMBER
            where CORV_RECORD_STATUS  IN (10200004,10200001)
            AND COPT_RECORD_STATUS NOT IN (10200005,10200006)
            AND CORV_EXERCISE_TYPE NOT IN(33000002)
--            and copt_base_currency = numcode
--            and copt_other_currency= numcode1
--            and copt_backup_deal = DECODE(numCode3,33399999,copt_backup_deal,numCode3)
--            and copt_company_code = DECODE(Numcode4,30199999,copt_company_code,Numcode4)
--            and copt_location_code = DECODE(numCode5,30299999,copt_location_code,numCode5)
--            AND (((dattemp IS NULL)) OR ((dattemp IS NOT NULL) AND (copt_maturity_date=dattemp)))
--            AND (((dattemp1 IS NULL)) OR ((dattemp1 IS NOT NULL) AND (copt_execute_date=dattemp1)))
--            and cosu_buy_sell =decode(numcode6,25399999,cosu_buy_sell,numcode6)
--            and copt_counter_party =decode(numCode5,30699999,copt_counter_party,numCode5)
--            and copt_backup_deal =decode(numcode6,33399999,copt_backup_deal,numcode6)
--            and copt_init_code =decode(numcode7,33899999,copt_init_code,numcode7)
--            and corv_deal_number not in (select LINK_CANCEL_DEAL from trtran112a 
--            where link_record_status not in (10200005,10200006) 
--            AND LINK_CANCEL_DEAL = corv_deal_number
--            and LINK_REVERSE_SERIAL = CORV_REVERSE_SERIAL))
            and (corv_base_amount - nvl((select SUM(LINK_AMOUNT) from trtran112a 
            where link_record_status not in (10200005,10200006)
            and LINK_CANCEL_DEAL = corv_deal_number
            and LINK_REVERSE_SERIAL = CORV_REVERSE_SERIAL),0)) > 0)

            select Rownum "Rownum", DealNumber "DealNumber",
                CancelDate "CancelDate", BaseAmount "BaseAmount",
                AdjustedAmount "AdjustedAmount", AdjustingAmount "AdjustingAmount",
                AdjustingAmountUser "AdjustingAmountUser", SpotRate "SpotRate", 
                ForwardRate "ForwardRate", MarginRate "MarginRate",
                Rate "Rate", OtherAmount "OtherAmount",
                ExpiryDate "ExpiryDate", SettlementDate "SettlementDate", 
                BusinessUnit "BusinessUnit", ProfitCenter "ProfitCenter", 
                CounterParty "CounterParty", BuySell "BuySell",
                OptionType "OptionType", BaseCurrency "BaseCurrency",
                OtherCurrency "OtherCurrency",   
                DealerName "DealerName", CounterDealer "CounterDealer",
                DealerRemarks "DealerRemarks", SerialNumber "SerialNumber",
                ReverseSerial "ReverseSerial", DealType "DealType",
                CancelType "CancelType", Company "Company", Location "Location",
                CompanyCode "CompanyCode", LocationCode "LocationCode",
                BusinessUnit "BusinessUnit", CounterPartyCode "CounterPartyCode",
                BaseCurrencyCode "BaseCurrencyCode", OtherCurrencyCode "OtherCurrencyCode",
                BuySellCode "BuySellCode", ProfitCentreCode "ProfitCentreCode",
                BatchNumber "BatchNumber",
                ReferenceNumber "ReferenceNumber",
                DealTypeDesc "DealTypeDesc"
                from CTE
                where BaseCurrencyCode = numcode
                and OtherCurrencyCode = numcode1
                and CompanyCode = DECODE(numcode2,30199999,CompanyCode,numcode2)
                and LocationCode = DECODE(numcode3,30299999,LocationCode,numcode3)
                AND (SettlementDate between dattemp2 and dattemp3)--(((dattemp IS NULL)) OR ((dattemp IS NOT NULL) AND (SettlementDate = dattemp)))
                AND (CancelDate between dattemp and dattemp1)--(((dattemp1 IS NULL)) OR ((dattemp1 IS NOT NULL) AND (CancelDate = dattemp1)))
                and BuySellCode = decode(numCode4,25399999,BuySellCode,numCode4)
                and CounterPartyCode = decode(numCode5,30699999,CounterPartyCode,numCode5)
                and BusinessUnitCode = decode(numcode6,33399999,BusinessUnitCode,numcode6)
                and ProfitCentreCode = decode(numcode7,33899999,ProfitCentreCode,numcode7);
    goto process_end;
end if;

------------added by Supriya as on 17/12/2020----------------
if numinfotype=REFLOADFORWARDOPTIONSDELETET then 
    vartemp := GCONST.FNCXMLEXTRACT(xmldoc, 'LinkingReference', vartemp);  

    open gencursor for     
        select BookingDeal "BookingDeal", CancelDeal "CancelDeal",
               LinkingReference "LinkingReference", Amount "Amount",
               SerialNumber "SerialNumber", ReverseSerial "ReverseSerial",    
               CompanyCode "CompanyCode", BuySell "BuySell", CounterParty "CounterParty",
               Book "Book", Strategy "Strategy", BaseCurrency "BaseCurrency", LocationCode "LocationCode",
               OtherCurrency "OtherCurrency", ExecuteToDate "ExecuteToDate", MaturityToDate "MaturityToDate",
               ExecuteFromDate "ExecuteFromDate", MaturityFromDate "MaturityFromDate",
               CurrencyPair "CurrencyPair"
        from (select LINK_BOOKING_DEAL BookingDeal, LINK_CANCEL_DEAL CancelDeal,
                               LINK_LINKING_REFERENCE LinkingReference, LINK_AMOUNT Amount,
                               LINK_DEAL_SERIAL SerialNumber, LINK_REVERSE_SERIAL ReverseSerial                       
                        from trtran112a
                        where LINK_RECORD_STATUS not in (10200005,10200006)
                        and LINK_LINKING_REFERENCE = vartemp), 
                (select max(CompanyCode) CompanyCode,max(BuySell) BuySell, max(CounterParty) CounterParty,
                                   max(Book) Book, max(Strategy) Strategy, max(BaseCurrency) BaseCurrency, max(LocationCode) LocationCode,
                                   max(OtherCurrency) OtherCurrency, max(ExecuteToDate) ExecuteToDate, max(MaturityToDate) MaturityToDate,
                                   min(ExecuteFromDate) ExecuteFromDate, min(MaturityFromDate) MaturityFromDate,
                                   max(CNDI_PICK_CODE) CurrencyPair
                from (select max(DEAL_COMPANY_CODE) CompanyCode, max(DEAL_BUY_SELL) BuySell,
                                       max(DEAL_COUNTER_PARTY) CounterParty, max(DEAL_LOCATION_CODE) LocationCode,
                                       max(DEAL_BACKUP_DEAL) Book, max(DEAL_INIT_CODE) Strategy,
                                       max(DEAL_BASE_CURRENCY) BaseCurrency, max(DEAL_OTHER_CURRENCY) OtherCurrency,
                                       max(DEAL_EXECUTE_DATE) ExecuteToDate, max(DEAL_MATURITY_DATE) MaturityToDate,
                                       min(DEAL_EXECUTE_DATE) ExecuteFromDate, min(DEAL_MATURITY_DATE) MaturityFromDate                                       
                                       from trtran001 
                                       where (deal_deal_number in (select LINK_BOOKING_DEAL
                                       from trtran112a where LINK_LINKING_REFERENCE = vartemp) or 
                                       deal_deal_number in (select LINK_CANCEL_DEAL
                                       from trtran112a where LINK_LINKING_REFERENCE = vartemp))
                                       union all
                                       select max(COPT_COMPANY_CODE) CompanyCode, max(cosu_buy_sell)	BuySell,
                                       max(COPT_COUNTER_PARTY) CounterParty, max(copt_Location_code) LocationCode,
                                       max(COPT_BACKUP_DEAL) Book, max(COPT_INIT_CODE) Strategy,
                                       max(Copt_Base_Currency) BaseCurrency, max(copt_other_currency)OtherCurrency,
                                       max(COPT_EXECUTE_DATE) ExecuteToDate, max(COPT_MATURITY_DATE) MaturityToDate,
                                       min(COPT_EXECUTE_DATE) ExecuteFromDate, min(COPT_MATURITY_DATE) MaturityFromDate
                                       from trtran071 join trtran072
                                       on cosu_deal_number= COPT_DEAL_NUMBER
                                       where (COPT_DEAL_NUMBER in (select LINK_BOOKING_DEAL
                                       from trtran112a where LINK_LINKING_REFERENCE = vartemp) or 
                                       COPT_DEAL_NUMBER in (select LINK_CANCEL_DEAL
                                       from trtran112a where LINK_LINKING_REFERENCE = vartemp)))
                                       inner join trmaster256
                                       on CNDI_BASE_CURRENCY = BaseCurrency and CNDI_OTHER_CURRENCY = OtherCurrency);
    Goto Process_End;
end if; 

-- ------------added by divya----------------
--   if numinfotype=REFLOADFORWARDOPTIONSDELETET then 
--  open gencursor for 
--
--  select
----LINK_BOOKING_DEAL "BookingDeal",
----        LINK_CANCEL_DEAL "CancelDeal",
--        LINK_LINKING_REFERENCE "LinkingReference"
----        LINK_AMOUNT "Amount"
----        LINK_DEAL_SERIAL "SerialNumber"
----        LINK_REVERSE_SERIAL "ReverseSerial" 
--        from trtran112 where LINK_RECORD_STATUS not in (10200005,10200006);
--
--   Goto Process_End;
--  end if; 
 -------------------------------

IF NUMINFOTYPE = REFSTRESSPNLCOMPANY THEN

    VAROPERATION := 'Existing Stress Rate Details';


    VARREFERENCE :=GCONST.FNCXMLEXTRACT(XMLDOC,'Param/ReferenceNumber',VARREFERENCE);
    VARTEMP :=GCONST.FNCXMLEXTRACT(XMLDOC,'UserID',VARTEMP);
    DATTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'WorkDate',DATTEMP);
--    VARTEMP1 :=GCONST.FNCXMLEXTRACT(XMLDOC,'CompanyCode',VARTEMP1);
----    VARTEMP2 := GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',VARTEMP2);
--    VARTEMP3 :=GCONST.FNCXMLEXTRACT(XMLDOC,'ProductCode',VARTEMP3);
--    VARTEMP4 := GCONST.FNCXMLEXTRACT(XMLDOC,'SubProductCode',VARTEMP4);


    NUMERROR:= pkgvaranalysis.FNCSTRESSPOSITIONGENERATE(VARTEMP,  DATTEMP, VARREFERENCE);


/*VAROPERATION := 'Getting Stress Type from TRSYSTEM060 table';
    SELECT STRE_STRESS_TYPE INTO NUMSTRESSTYPE FROM TRSYSTEM060
     where STRE_REFERENCE_NUMBER =VARREFERENCE and
           STRE_RECORD_STATUS NOT IN(10200006,10200005) ;*/


   /*   OPEN GENCURSOR FOR
       SELECT POSN_COMPANY_CODE "CompanyCode" ,POSN_CURRENCY_CODE "Base Currency",
              POSN_FOR_CURRENCY "Other Currency" ,POSN_ACCOUNT_CODE "Account Code",
              POSN_TRANSACTION_AMOUNT "Transaction Amount",POSN_ALLIN_RATE "Currency Rate",
              POSN_MTM_FCYRATE "MTM Rate",POSN_MTM_LOCALRATE "MTM Local Rate",
              POSN_STRESS_FCYRATE "Stress Currency Rate" ,POSN_STRESS_LOCALRATE "Stress Local Rate",
              POSN_MTM_PNL "MTM P N L", POSN_TOPNL_LOCALAMOUNT "MTM Local P N L",
              POSN_STRESS_PNL "Stress P N L" ,POSN_STRESSPNL_LOCALAMOUNT "Stress Local P N L" FROM TRSYSTEM997A    ;
              */

       select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

     VAROPERATION := 'Getting Stress PNL Company wise';
       OPEN GENCURSOR FOR
       SELECT pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) "CompanyName"  , 
              round(sum(nvl(POSN_TOPNL_AMOUNT,0))/numdetail,2) "PnLinPnLCurrency",
              'MTM PNL Local' "PnLType",
              ROUND( SUM(NVL(POSN_TOPNL_LOCALAMOUNT,0))/numdetail,2) "PNLLocalAmount"
        FROM TRSYSTEM997A
        where posn_stress_reference =  VARREFERENCE 
        and POSN_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and POSN_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
    GROUP BY POSN_COMPANY_CODE
     union all
     SELECT pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) "CompanyName" ,
            round(sum(nvl(POSN_STRESS_TOPNLAMOUNT,0))/numdetail,2) "PnLinPnLCurrency",
            'Stress PNL Local' "PnLType",
            Round(SUM(NVL(POSN_STRESSPNL_LOCALAMOUNT,0))/numdetail,2) "PNLLocalAmount"
        FROM TRSYSTEM997A
         where posn_stress_reference =  VARREFERENCE 
         and POSN_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and POSN_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
    GROUP BY POSN_COMPANY_CODE order by 1,2;

        GOTO PROCESS_END;

  END IF;

  --Editted by Arjun on 050714
  IF NUMINFOTYPE = REFSTRESSPNLCURRENCY   THEN

      VAROPERATION := 'Getting Stress PNL CURRENCY WISE';
      VARREFERENCE :=  GConst.fncxmlextract(xmldoc, 'Param/ReferenceNumber', VarTemp);

      select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

       OPEN GENCURSOR FOR
       Select
--       Pkgreturncursor.Fncgetdescription(Posn_Company_Code,2) "CompanyName" ,
              pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) || '/' ||
              pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) "CurrencyPair",
           --   POSN_FOR_CURRENCY "Other Currency" ,
              round(sum(nvl(POSN_TOPNL_AMOUNT,0))/numdetail,2) "PnLinPnLCurrency",
              ROUND(SUM(NVL(POSN_TOPNL_LOCALAMOUNT,0))/numdetail,2) "MTMPNLLocal",
              round(sum(nvl(POSN_STRESSPNL_AMOUNT,0))/numdetail,2) "StressPnLinPnLCurrency",
             ROUND(SUM(NVL(POSN_STRESSPNL_LOCALAMOUNT,0))/numdetail,2) "StressPNLLocal"
             FROM TRSYSTEM997A
             where posn_stress_reference =  VARREFERENCE 
              and POSN_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and POSN_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
              Group By
--              pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2),
              pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) || '/' ||
              pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) ;

        GOTO PROCESS_END;

  END IF;

  -- Added by Arjun for currency Compare detailed grid view on 050714
  If Numinfotype = Refstresspnlcurrencydetailed   Then
      varTemp :=  GConst.fncxmlextract(xmldoc, 'CurrencyPair', VarTemp);
      VARREFERENCE :=  GConst.fncxmlextract(xmldoc, 'Param/ReferenceNumber', VarTemp);
      VAROPERATION := 'Getting Stress PNL CURRENCY WISE';
       OPEN GENCURSOR FOR
       Select Pkgreturncursor.Fncgetdescription(Posn_Company_Code,2) "CompanyName" ,
               --   POSN_FOR_CURRENCY "Other Currency" ,
              round(sum(nvl(POSN_TOPNL_AMOUNT,0)),2) "PnLinPnLCurrency",
              round(sum(nvl(POSN_STRESSPNL_AMOUNT,0)),2) "StressPnLinPnLCurrency",
              ROUND(SUM(NVL(POSN_TOPNL_LOCALAMOUNT,0)),6) "MTM PNL Local",
             ROUND( SUM(NVL(POSN_STRESSPNL_LOCALAMOUNT,0)),6) "Stress PNL Local"
             FROM TRSYSTEM997A

                  Where Pkgreturncursor.Fncgetdescription(POSN_CURRENCY_CODE,2) || '/' ||
              pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) = varTemp
              and posn_stress_reference =  VARREFERENCE 
              GROUP BY pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) ;

        GOTO PROCESS_END;

  End If;
  --- Ends Refstresspnlcurrencydetailed

  ---190514-----

  if NUMINFOTYPE=REFSTRESSPNLEDIT then

         varTemp :=  GConst.fncxmlextract(xmldoc, 'ReferenceNumber', VarTemp);

      OPEN GENCURSOR FOR
                  SELECT pkgreturncursor.fncgetdescription(a.STRE_BASE_CURRENCY,2) || '/' ||
                         pkgreturncursor.fncgetdescription(a.STRE_OTHER_CURRENCY,2) "CurrencyPair",
                         a.STRE_FORWARD_MONTH "ForwardMonth",
                         a.STRE_PRICE_CHANGE "Change",b.stre_stress_type stresstype
                  FROM
                      TRSYSTEM061 a left outer join trsystem060 b
                      on a.stre_reference_number=b.stre_reference_number WHERE
                            a.STRE_REFERENCE_NUMBER=VarTemp;
--                             and STRE_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                           where upper(usco_user_id) = varUserid
--                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--                    and STRE_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
    GOTO PROCESS_END;

  END IF;



-- IF NUMINFOTYPE = REFSTRESSPNLRATE THEN
--
--    VAROPERATION := 'Getting Stress PNL Rate Wise';
--    BASECURRENCY :=GCONST.FNCXMLEXTRACT(XMLDOC,'Param/BaseCurrency',BASECURRENCY);
--    OTHERCURRENCY :=GCONST.FNCXMLEXTRACT(XMLDOC,'Param/OtherCurrency',OTHERCURRENCY);
--    varTemp :=  GConst.fncxmlextract(xmldoc, 'Param/ReferenceNumber', VarTemp);
--    DATTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'WorkDate',DATTEMP);
--
--
--    select nvl(PRMC_Convert_AmountInto,1)
--         into numdetail
--       from trsystem051;
--
--    OPEN GENCURSOR FOR
--
--        select  POS.FWRMONTH "FwdMonth", ROUND(nvl(POS.base_amount,0)/numdetail,2) "BaseAmount", ROUND(nvl(POS.Actual_rate,0),6) "ActualRate",
--            ROUND(nvl(POS.MTM_PNL,0)/numdetail,2) "MtmPnl", ROUND(nvl(POS.STRESS_PNL,0)/numdetail,2) "StressPnl", 
--          ROUND(nvl(StressRate.STRE_STRESS_RATE, 0),6) "StressRate" ,ROUND(nvl(MTM.MTMRate,BaseMTM.MTMRate),6) "MtmRate",
--         (case when POS.FWRMONTH=-2 then 'Cash' 
--               when POS.FWRMONTH=-1 then 'TOM' 
--               when POS.FWRMONTH=0 then 'Spot' 
--               else to_char(add_months(DATTEMP, POS.FWRMONTH),'MON-yyyy') end) "FWDMONTHDATE"
--     from
--    (SELECT POSN_FORWARD_MONTH FWRMONTH,
--             SUM(NVL(posn_transaction_amount,0)) base_amount,
--             SUM(NVL(posn_transaction_amount,0)*nvl(POSN_ALLIN_RATE,0))/SUM(NVL(posn_transaction_amount,0)) Actual_rate,
--             SUM(NVL(POSN_TOPNL_LOCALAMOUNT,0)) MTM_PNL,SUM(NVL(POSN_STRESSPNL_LOCALAMOUNT,0)) STRESS_PNL
--      FROM TRSYSTEM997A 
--      WHERE POSN_CURRENCY_CODE=BASECURRENCY
--        AND POSN_FOR_CURRENCY=OTHERCURRENCY
--        and POSN_Stress_reference =varTemp
--      GROUP BY POSN_FORWARD_MONTH,POSN_CURRENCY_CODE,POSN_FOR_CURRENCY) Pos
--      Left outer join (select STRE_FORWARD_MONTHNO,STRE_STRESS_RATE
--         FROM TRTRAN013B A
--          WHERE STRE_CURRENCY_CODE =BASECURRENCY
--                AND STRE_FOR_CURRENCY=OTHERCURRENCY
--                AND STRE_EFFECTIVE_DATE=DATTEMP
--                and STRE_STRESS_REFERENCE=varTemp) StressRate
--         on STRE_FORWARD_MONTHNO=FWRMONTH
--      left outer join 
--       (select DRAD_FORWARD_MONTHNO,round(avg((DRAD_ASK_RATE+DRAD_BID_RATE)/2),6) MTMRate
--         FROM Clouddb_master.TRTRAN013A A
--          WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                AND DRAD_EFFECTIVE_DATE=DATTEMP
--                and DRAD_SERIAL_NUMBER = 
--                   (select max(DRAD_SERIAL_NUMBER) from Clouddb_master.TRTRAN013A A
--                     WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                       AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                       AND DRAD_EFFECTIVE_DATE=DATTEMP)
--         group by DRAD_FORWARD_MONTHNO ) BaseMTM
--        on BaseMTM.DRAD_FORWARD_MONTHNO=FWRMONTH
--      left outer join 
--       (select DRAD_FORWARD_MONTHNO,round(avg((DRAD_ASK_RATE+DRAD_BID_RATE)/2),6) MTMRate
--         FROM TRTRAN013A A
--          WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                AND DRAD_EFFECTIVE_DATE=DATTEMP
--                and DRAD_SERIAL_NUMBER = 
--                   (select max(DRAD_SERIAL_NUMBER) from TRTRAN013A A
--                     WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                       AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                       AND DRAD_EFFECTIVE_DATE=DATTEMP)
--         group by DRAD_FORWARD_MONTHNO ) MTM
--         on MTM.DRAD_FORWARD_MONTHNO=FWRMONTH;
--
--
----        SELECT 1 "RowOrder",'Base Amount' "Rowflag" , round(sum(MONTH0)/numdetail, 2) MONTH0, round(sum(MONTH1)/numdetail , 2) MONTH1,round(sum(MONTH2)/numdetail , 2) MONTH2,round(sum(MONTH3)/numdetail , 2) MONTH3,
----              round(sum(MONTH4)/numdetail , 2) MONTH4,round(sum(MONTH5)/numdetail , 2) MONTH5,round(sum(MONTH6)/numdetail , 2) MONTH6,round(sum(MONTH7)/numdetail , 2) MONTH7,
----              round(sum(MONTH8)/numdetail , 2) MONTH8,round(sum( MONTH9)/numdetail , 2) MONTH9,round(sum(MONTH10)/numdetail , 2) MONTH10,round(sum(MONTH11)/numdetail , 2) MONTH11,round(sum(MONTH12)/numdetail , 2) MONTH12 FROM
----        (SELECT DECODE (A.MONTH ,0 ,A.base_amount,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.base_amount,0) MONTH1 ,
----               DECODE (A.MONTH ,2 ,A.base_amount,0) MONTH2 ,
----               DECODE (A.MONTH ,3 ,A.base_amount,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.base_amount,0) MONTH4 ,
----               DECODE (A.MONTH ,5 ,A.base_amount,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.base_amount,0) MONTH6 ,
----               DECODE (A.MONTH ,7 ,A.base_amount,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.base_amount,0) MONTH8 ,
----               DECODE (A.MONTH ,9 ,A.base_amount,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.base_amount,0) MONTH10 ,
----               DECODE (A.MONTH ,11 ,A.base_amount,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.base_amount,0) MONTH12
----      FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(posn_transaction_amount,0)) base_amount
----      FROM TRSYSTEM997A
----      WHERE POSN_CURRENCY_CODE=BASECURRENCY
----        AND POSN_FOR_CURRENCY=OTHERCURRENCY
----      GROUP BY POSN_MATURITY_MONTH ) A)
----      union
----       SELECT 2 "RowOrder",'Actual Rate' "Rowflag" , round(sum(MONTH0) , 6) MONTH0, round(sum(MONTH1) , 6) MONTH1,round(sum(MONTH2) , 6) MONTH2,round(sum(MONTH3) , 6) MONTH3,
----              round(sum(MONTH4) , 6) MONTH4,round(sum(MONTH5) , 6) MONTH5,round(sum(MONTH6) , 6) MONTH6,round(sum(MONTH7) , 6) MONTH7,
----              round(sum(MONTH8) , 6) MONTH8,round(sum( MONTH9) , 6) MONTH9,round(sum(MONTH10) , 6) MONTH10,round(sum(MONTH11) , 6) MONTH11,round(sum(MONTH12) , 6) MONTH12 FROM
----        (SELECT DECODE (A.MONTH ,0 ,A.actual_rate,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.actual_rate,0) MONTH1 ,
----               DECODE (A.MONTH ,2 ,A.actual_rate,0) MONTH2 ,
----               DECODE (A.MONTH ,3 ,A.actual_rate,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.actual_rate,0) MONTH4 ,
----               DECODE (A.MONTH ,5 ,A.actual_rate,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.actual_rate,0) MONTH6 ,
----               DECODE (A.MONTH ,7 ,A.actual_rate,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.actual_rate,0) MONTH8 ,
----               DECODE (A.MONTH ,9 ,A.actual_rate,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.actual_rate,0) MONTH10 ,
----               DECODE (A.MONTH ,11 ,A.actual_rate,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.actual_rate,0) MONTH12
----      FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(posn_transaction_amount,0)*nvl(POSN_ALLIN_RATE,0))/SUM(NVL(posn_transaction_amount,0)) Actual_rate
----      FROM TRSYSTEM997A
----      WHERE POSN_CURRENCY_CODE=BASECURRENCY
----        AND POSN_FOR_CURRENCY=OTHERCURRENCY
----      GROUP BY POSN_MATURITY_MONTH ) A)
----    union
----        SELECT 5 "RowOrder",'StressRate' "Rowflag", Round(((DRAT_SPOT_BID + DRAT_SPOT_ASK)/2) ,6 ) "MONTH0",
----              Round(((DRAT_MONTH1_BID+ DRAT_MONTH1_ASK)/2) ,6 ) MONTH1,
----              Round(((DRAT_MONTH2_BID + DRAT_MONTH2_ASK)/2) ,6 ) MONTH2,
----              Round(((DRAT_MONTH3_BID + DRAT_MONTH3_ASK)/2) ,6 ) MONTH3,
----              Round((( DRAT_MONTH4_BID + DRAT_MONTH4_ASK)/2) ,6 ) MONTH4,
----              Round(((DRAT_MONTH5_BID +  DRAT_MONTH5_ASK)/2) ,6 ) MONTH5,
----              Round(((DRAT_MONTH6_BID +  DRAT_MONTH6_ASK)/2) ,6 ) MONTH6,
----              Round(((DRAT_MONTH7_BID +  DRAT_MONTH7_ASK)/2) ,6 ) MONTH7,
----              Round(((DRAT_MONTH8_BID +  DRAT_MONTH8_ASK)/2) ,6 ) MONTH8,
----              Round(((DRAT_MONTH9_BID + DRAT_MONTH9_ASK)/2) ,6 )   MONTH9,
----              Round(((DRAT_MONTH10_BID + DRAT_MONTH10_ASK)/2) ,6 ) MONTH10,
----              Round(((DRAT_MONTH11_BID + DRAT_MONTH11_ASK)/2) ,6 ) MONTH11,
----              Round(((DRAT_MONTH12_BID + DRAT_MONTH12_ASK)/2) ,6 ) "MONTH12"
----          FROM TRTRAN012A
----          WHERE DRAT_CURRENCY_CODE =BASECURRENCY
----                AND DRAT_FOR_CURRENCY=othercurrency
----              AND DRAT_EFFECTIVE_DATE=DATTEMP
----  UNION
----  SELECT 3 "RowOrder",'MTMRate' "Rowflag", Round(((DRAT_SPOT_BID + DRAT_SPOT_ASK)/2) ,6 ) "MONTH0",
----              Round(((DRAT_MONTH1_BID+ DRAT_MONTH1_ASK)/2) ,6 ) MONTH1,
----              Round(((DRAT_MONTH2_BID + DRAT_MONTH2_ASK)/2) ,6 ) MONTH2,
----              Round(((DRAT_MONTH3_BID + DRAT_MONTH3_ASK)/2) ,6 ) MONTH3,
----              Round((( DRAT_MONTH4_BID + DRAT_MONTH4_ASK)/2) ,6 ) MONTH4,
----              Round(((DRAT_MONTH5_BID +  DRAT_MONTH5_ASK)/2) ,6 ) MONTH5,
----              Round(((DRAT_MONTH6_BID +  DRAT_MONTH6_ASK)/2) ,6 ) MONTH6,
----              Round(((DRAT_MONTH7_BID +  DRAT_MONTH7_ASK)/2) ,6 ) MONTH7,
----              Round(((DRAT_MONTH8_BID +  DRAT_MONTH8_ASK)/2) ,6 ) MONTH8,
----              Round(((DRAT_MONTH9_BID + DRAT_MONTH9_ASK)/2) ,6 )   MONTH9,
----              Round(((DRAT_MONTH10_BID + DRAT_MONTH10_ASK)/2) ,6 ) MONTH10,
----              Round(((DRAT_MONTH11_BID + DRAT_MONTH11_ASK)/2) ,6 ) MONTH11,
----              Round(((DRAT_MONTH12_BID + DRAT_MONTH12_ASK)/2) ,6 ) "MONTH12"
----          FROM TRTRAN012C
----          WHERE DRAT_CURRENCY_CODE =BASECURRENCY
----                AND DRAT_FOR_CURRENCY=othercurrency
----                AND DRAT_EFFECTIVE_DATE=DATTEMP
----  UNION
----    SELECT 4 "RowOrder",'MTMPnL Local' "Rowflag" , round(sum(MONTH0)/numdetail , 2) MONTH0, round(sum(MONTH1)/numdetail , 2) MONTH1,round(sum(MONTH2)/numdetail , 2) MONTH2,round(sum(MONTH3)/numdetail , 2) MONTH3,
----        round(sum(MONTH4)/numdetail , 2) MONTH4,round(sum(MONTH5)/numdetail , 2) MONTH5,round(sum(MONTH6)/numdetail , 2) MONTH6,round(sum(MONTH7)/numdetail , 2) MONTH7,
----        round(sum(MONTH8)/numdetail , 2) MONTH8,round(sum( MONTH9)/numdetail , 2) MONTH9,round(sum(MONTH10)/numdetail , 2) MONTH10,round(sum(MONTH11)/numdetail , 2) MONTH11,round(sum(MONTH12)/numdetail , 2) MONTH12 FROM
----  (SELECT DECODE (A.MONTH ,0 ,A.MTM_PNL,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.MTM_PNL,0) MONTH1 ,
----         DECODE (A.MONTH ,2 ,A.MTM_PNL,0) MONTH2 ,
----         DECODE (A.MONTH ,3 ,A.MTM_PNL,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.MTM_PNL,0) MONTH4 ,
----         DECODE (A.MONTH ,5 ,A.MTM_PNL,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.MTM_PNL,0) MONTH6 ,
----         DECODE (A.MONTH ,7 ,A.MTM_PNL,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.MTM_PNL,0) MONTH8 ,
----         DECODE (A.MONTH ,9 ,A.MTM_PNL,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.MTM_PNL,0) MONTH10 ,
----         DECODE (A.MONTH ,11 ,A.MTM_PNL,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.MTM_PNL,0) MONTH12
----FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(POSN_TOPNL_LOCALAMOUNT,0)) MTM_PNL,SUM(NVL(POSN_STRESSPNL_LOCALAMOUNT,0)) STRESS_PNL
----FROM TRSYSTEM997A
----WHERE POSN_CURRENCY_CODE=BASECURRENCY
----  AND POSN_FOR_CURRENCY=othercurrency
----GROUP BY POSN_MATURITY_MONTH ) A)
----UNION
----  SELECT 6 "RowOrder",'StressPnL Local' "Rowflag" , round(sum(MONTH0)/numdetail , 2) MONTH0, round(sum(MONTH1)/numdetail , 2) MONTH1,round(sum(MONTH2)/numdetail , 2) MONTH2,round(sum(MONTH3)/numdetail , 2) MONTH3,
----        round(sum(MONTH4)/numdetail , 2) MONTH4,round(sum(MONTH5)/numdetail , 2) MONTH5,round(sum(MONTH6)/numdetail , 2) MONTH6,round(sum(MONTH7)/numdetail , 2) MONTH7,
----        round(sum(MONTH8)/numdetail , 2) MONTH8,round(sum( MONTH9)/numdetail , 2) MONTH9,round(sum(MONTH10)/numdetail , 2) MONTH10,round(sum(MONTH11)/numdetail , 2) MONTH11,round(sum(MONTH12)/numdetail , 2) MONTH12 FROM
----  (SELECT DECODE (A.MONTH ,0 ,A.STRESS_PNL,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.STRESS_PNL,0) MONTH1 ,
----         DECODE (A.MONTH ,2 ,A.STRESS_PNL,0) MONTH2 ,
----         DECODE (A.MONTH ,3 ,A.STRESS_PNL,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.STRESS_PNL,0) MONTH4 ,
----         DECODE (A.MONTH ,5 ,A.STRESS_PNL,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.STRESS_PNL,0) MONTH6 ,
----         DECODE (A.MONTH ,7 ,A.STRESS_PNL,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.STRESS_PNL,0) MONTH8 ,
----         DECODE (A.MONTH ,9 ,A.STRESS_PNL,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.STRESS_PNL,0) MONTH10 ,
----         DECODE (A.MONTH ,11 ,A.STRESS_PNL,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.STRESS_PNL,0) MONTH12
----FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(POSN_TOPNL_LOCALAMOUNT,0)) MTM_PNL,SUM(NVL(POSN_STRESSPNL_LOCALAMOUNT,0)) STRESS_PNL
----FROM TRSYSTEM997A
----WHERE POSN_CURRENCY_CODE=basecurrency
----  AND POSN_FOR_CURRENCY=othercurrency
----GROUP BY POSN_MATURITY_MONTH ) A) order by 1;
--
--
--
--     Goto Process_End;
--
--  END IF;

-- IF NUMINFOTYPE = REFSTRESSPNLRATE THEN
--
--    VAROPERATION := 'Getting Stress PNL Rate Wise';
--    NumCode :=GCONST.FNCXMLEXTRACT(XMLDOC,'Param/CurrencyPair',NumCode);
--   -- OTHERCURRENCY :=GCONST.FNCXMLEXTRACT(XMLDOC,'Param/OtherCurrency',OTHERCURRENCY);
--    varTemp :=  GConst.fncxmlextract(xmldoc, 'Param/ReferenceNumber', VarTemp);
--    DATTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'WorkDate',DATTEMP);
--
--
--    select  CNDI_BASE_CURRENCY,CNDI_OTHER_CURRENCY
--        into BASECURRENCY,OTHERCURRENCY
--      from TRMASTER256
--    where CNDI_PICK_CODE=NumCode
--    and CNDI_record_status not in (10200005,10200006);
--
--    select PICK_SHORT_DESCRIPTION
--    into numdetail
--    from TRMASTER001
--    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
--                            from TRSYSTEM051);
--
--
--
--    OPEN GENCURSOR FOR
--
--        select  POS.FWRMONTH "FwdMonth", ROUND(nvl(POS.base_amount,0)/numdetail,2) "BaseAmount", ROUND(nvl(POS.Actual_rate,0),6) "ActualRate",
--            ROUND(nvl(POS.MTM_PNL,0)/numdetail,2) "MtmPnl", ROUND(nvl(POS.STRESS_PNL,0)/numdetail,2) "StressPnl", 
--          ROUND(nvl(StressRate.STRE_STRESS_RATE, 0),6) "StressRate", ROUND(nvl(MTM.MTMRATE,BaseMTM.MTMRATE),6) "MtmRate",
--         (case when POS.FWRMONTH=-2 then 'Cash' 
--               when POS.FWRMONTH=-1 then 'TOM' 
--               when POS.FWRMONTH=0 then 'Spot' 
--               else to_char(add_months(DATTEMP, POS.FWRMONTH),'MON-yyyy') end) "FWDMONTHDATE"
--     from
--   ((SELECT POSN_FORWARD_MONTH FWRMONTH,
--             SUM(NVL(posn_transaction_amount,0)) base_amount,
--             SUM(NVL(posn_transaction_amount,0)*nvl(POSN_ALLIN_RATE,0))/SUM(NVL(posn_transaction_amount,0)) Actual_rate,
--             SUM(NVL(POSN_TOPNL_LOCALAMOUNT,0)) MTM_PNL,SUM(NVL(POSN_STRESSPNL_LOCALAMOUNT,0)) STRESS_PNL
--      FROM TRSYSTEM997A 
--      WHERE POSN_CURRENCY_CODE=BASECURRENCY
--        AND POSN_FOR_CURRENCY=OTHERCURRENCY
--        and POSN_Stress_reference =varTemp
--         and POSN_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                           where upper(usco_user_id) = varUserid
--                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--           and POSN_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
--                                           where UPPER(USLO_USER_ID) = varUserid
--                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--      GROUP BY POSN_FORWARD_MONTH,POSN_CURRENCY_CODE,POSN_FOR_CURRENCY) Pos
--      Left outer join (select STRE_FORWARD_MONTHNO,STRE_STRESS_RATE
--         FROM TRTRAN013B A
--          WHERE STRE_CURRENCY_CODE =BASECURRENCY
--                AND STRE_FOR_CURRENCY=OTHERCURRENCY
--                AND STRE_EFFECTIVE_DATE=DATTEMP
--                --and drad_record_status not in (10200005,10200006)
--
--                and STRE_STRESS_REFERENCE=varTemp) StressRate
--         on STRE_FORWARD_MONTHNO=FWRMONTH
--      left outer join 
--       (select DRAD_FORWARD_MONTHNO,round(avg((DRAD_ASK_RATE+DRAD_BID_RATE)/2),6) MTMRate
--         FROM Clouddb_master.TRTRAN013A A
--          WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                AND DRAD_EFFECTIVE_DATE=DATTEMP
--                and drad_record_status not in (10200005,10200006)
--                and DRAD_SERIAL_NUMBER = 
--                   (select max(DRAD_SERIAL_NUMBER) from Clouddb_master.TRTRAN013A A
--                     WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                       AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                       and drad_record_status not in (10200005,10200006)
--                       AND DRAD_EFFECTIVE_DATE=DATTEMP)
--         group by DRAD_FORWARD_MONTHNO ) BaseMTM
--        on BaseMTM.DRAD_FORWARD_MONTHNO=FWRMONTH
--      left outer join 
--       (select DRAD_FORWARD_MONTHNO,round(avg((DRAD_ASK_RATE+DRAD_BID_RATE)/2),6) MTMRate
--         FROM clouddb_master.TRTRAN013A A
--          WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                AND DRAD_EFFECTIVE_DATE=DATTEMP
--                and drad_record_status not in (10200005,10200006)
--                and DRAD_SERIAL_NUMBER = 
--                   (select max(DRAD_SERIAL_NUMBER) from clouddb_master.TRTRAN013A A
--                     WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                       AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                       and drad_record_status not in (10200005,10200006)
--                       AND DRAD_EFFECTIVE_DATE=DATTEMP)
--         group by DRAD_FORWARD_MONTHNO ) MTM
--         on MTM.DRAD_FORWARD_MONTHNO=FWRMONTH)
--        ORDER BY POS.FWRMONTH;
--
--
----        SELECT 1 "RowOrder",'Base Amount' "Rowflag" , round(sum(MONTH0)/numdetail, 2) MONTH0, round(sum(MONTH1)/numdetail , 2) MONTH1,round(sum(MONTH2)/numdetail , 2) MONTH2,round(sum(MONTH3)/numdetail , 2) MONTH3,
----              round(sum(MONTH4)/numdetail , 2) MONTH4,round(sum(MONTH5)/numdetail , 2) MONTH5,round(sum(MONTH6)/numdetail , 2) MONTH6,round(sum(MONTH7)/numdetail , 2) MONTH7,
----              round(sum(MONTH8)/numdetail , 2) MONTH8,round(sum( MONTH9)/numdetail , 2) MONTH9,round(sum(MONTH10)/numdetail , 2) MONTH10,round(sum(MONTH11)/numdetail , 2) MONTH11,round(sum(MONTH12)/numdetail , 2) MONTH12 FROM
----        (SELECT DECODE (A.MONTH ,0 ,A.base_amount,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.base_amount,0) MONTH1 ,
----               DECODE (A.MONTH ,2 ,A.base_amount,0) MONTH2 ,
----               DECODE (A.MONTH ,3 ,A.base_amount,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.base_amount,0) MONTH4 ,
----               DECODE (A.MONTH ,5 ,A.base_amount,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.base_amount,0) MONTH6 ,
----               DECODE (A.MONTH ,7 ,A.base_amount,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.base_amount,0) MONTH8 ,
----               DECODE (A.MONTH ,9 ,A.base_amount,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.base_amount,0) MONTH10 ,
----               DECODE (A.MONTH ,11 ,A.base_amount,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.base_amount,0) MONTH12
----      FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(posn_transaction_amount,0)) base_amount
----      FROM TRSYSTEM997A
----      WHERE POSN_CURRENCY_CODE=BASECURRENCY
----        AND POSN_FOR_CURRENCY=OTHERCURRENCY
----      GROUP BY POSN_MATURITY_MONTH ) A)
----      union
----       SELECT 2 "RowOrder",'Actual Rate' "Rowflag" , round(sum(MONTH0) , 6) MONTH0, round(sum(MONTH1) , 6) MONTH1,round(sum(MONTH2) , 6) MONTH2,round(sum(MONTH3) , 6) MONTH3,
----              round(sum(MONTH4) , 6) MONTH4,round(sum(MONTH5) , 6) MONTH5,round(sum(MONTH6) , 6) MONTH6,round(sum(MONTH7) , 6) MONTH7,
----              round(sum(MONTH8) , 6) MONTH8,round(sum( MONTH9) , 6) MONTH9,round(sum(MONTH10) , 6) MONTH10,round(sum(MONTH11) , 6) MONTH11,round(sum(MONTH12) , 6) MONTH12 FROM
----        (SELECT DECODE (A.MONTH ,0 ,A.actual_rate,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.actual_rate,0) MONTH1 ,
----               DECODE (A.MONTH ,2 ,A.actual_rate,0) MONTH2 ,
----               DECODE (A.MONTH ,3 ,A.actual_rate,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.actual_rate,0) MONTH4 ,
----               DECODE (A.MONTH ,5 ,A.actual_rate,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.actual_rate,0) MONTH6 ,
----               DECODE (A.MONTH ,7 ,A.actual_rate,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.actual_rate,0) MONTH8 ,
----               DECODE (A.MONTH ,9 ,A.actual_rate,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.actual_rate,0) MONTH10 ,
----               DECODE (A.MONTH ,11 ,A.actual_rate,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.actual_rate,0) MONTH12
----      FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(posn_transaction_amount,0)*nvl(POSN_ALLIN_RATE,0))/SUM(NVL(posn_transaction_amount,0)) Actual_rate
----      FROM TRSYSTEM997A
----      WHERE POSN_CURRENCY_CODE=BASECURRENCY
----        AND POSN_FOR_CURRENCY=OTHERCURRENCY
----      GROUP BY POSN_MATURITY_MONTH ) A)
----    union
----        SELECT 5 "RowOrder",'StressRate' "Rowflag", Round(((DRAT_SPOT_BID + DRAT_SPOT_ASK)/2) ,6 ) "MONTH0",
----              Round(((DRAT_MONTH1_BID+ DRAT_MONTH1_ASK)/2) ,6 ) MONTH1,
----              Round(((DRAT_MONTH2_BID + DRAT_MONTH2_ASK)/2) ,6 ) MONTH2,
----              Round(((DRAT_MONTH3_BID + DRAT_MONTH3_ASK)/2) ,6 ) MONTH3,
----              Round((( DRAT_MONTH4_BID + DRAT_MONTH4_ASK)/2) ,6 ) MONTH4,
----              Round(((DRAT_MONTH5_BID +  DRAT_MONTH5_ASK)/2) ,6 ) MONTH5,
----              Round(((DRAT_MONTH6_BID +  DRAT_MONTH6_ASK)/2) ,6 ) MONTH6,
----              Round(((DRAT_MONTH7_BID +  DRAT_MONTH7_ASK)/2) ,6 ) MONTH7,
----              Round(((DRAT_MONTH8_BID +  DRAT_MONTH8_ASK)/2) ,6 ) MONTH8,
----              Round(((DRAT_MONTH9_BID + DRAT_MONTH9_ASK)/2) ,6 )   MONTH9,
----              Round(((DRAT_MONTH10_BID + DRAT_MONTH10_ASK)/2) ,6 ) MONTH10,
----              Round(((DRAT_MONTH11_BID + DRAT_MONTH11_ASK)/2) ,6 ) MONTH11,
----              Round(((DRAT_MONTH12_BID + DRAT_MONTH12_ASK)/2) ,6 ) "MONTH12"
----          FROM TRTRAN012A
----          WHERE DRAT_CURRENCY_CODE =BASECURRENCY
----                AND DRAT_FOR_CURRENCY=othercurrency
----              AND DRAT_EFFECTIVE_DATE=DATTEMP
----  UNION
----  SELECT 3 "RowOrder",'MTMRate' "Rowflag", Round(((DRAT_SPOT_BID + DRAT_SPOT_ASK)/2) ,6 ) "MONTH0",
----              Round(((DRAT_MONTH1_BID+ DRAT_MONTH1_ASK)/2) ,6 ) MONTH1,
----              Round(((DRAT_MONTH2_BID + DRAT_MONTH2_ASK)/2) ,6 ) MONTH2,
----              Round(((DRAT_MONTH3_BID + DRAT_MONTH3_ASK)/2) ,6 ) MONTH3,
----              Round((( DRAT_MONTH4_BID + DRAT_MONTH4_ASK)/2) ,6 ) MONTH4,
----              Round(((DRAT_MONTH5_BID +  DRAT_MONTH5_ASK)/2) ,6 ) MONTH5,
----              Round(((DRAT_MONTH6_BID +  DRAT_MONTH6_ASK)/2) ,6 ) MONTH6,
----              Round(((DRAT_MONTH7_BID +  DRAT_MONTH7_ASK)/2) ,6 ) MONTH7,
----              Round(((DRAT_MONTH8_BID +  DRAT_MONTH8_ASK)/2) ,6 ) MONTH8,
----              Round(((DRAT_MONTH9_BID + DRAT_MONTH9_ASK)/2) ,6 )   MONTH9,
----              Round(((DRAT_MONTH10_BID + DRAT_MONTH10_ASK)/2) ,6 ) MONTH10,
----              Round(((DRAT_MONTH11_BID + DRAT_MONTH11_ASK)/2) ,6 ) MONTH11,
----              Round(((DRAT_MONTH12_BID + DRAT_MONTH12_ASK)/2) ,6 ) "MONTH12"
----          FROM TRTRAN012C
----          WHERE DRAT_CURRENCY_CODE =BASECURRENCY
----                AND DRAT_FOR_CURRENCY=othercurrency
----                AND DRAT_EFFECTIVE_DATE=DATTEMP
----  UNION
----    SELECT 4 "RowOrder",'MTMPnL Local' "Rowflag" , round(sum(MONTH0)/numdetail , 2) MONTH0, round(sum(MONTH1)/numdetail , 2) MONTH1,round(sum(MONTH2)/numdetail , 2) MONTH2,round(sum(MONTH3)/numdetail , 2) MONTH3,
----        round(sum(MONTH4)/numdetail , 2) MONTH4,round(sum(MONTH5)/numdetail , 2) MONTH5,round(sum(MONTH6)/numdetail , 2) MONTH6,round(sum(MONTH7)/numdetail , 2) MONTH7,
----        round(sum(MONTH8)/numdetail , 2) MONTH8,round(sum( MONTH9)/numdetail , 2) MONTH9,round(sum(MONTH10)/numdetail , 2) MONTH10,round(sum(MONTH11)/numdetail , 2) MONTH11,round(sum(MONTH12)/numdetail , 2) MONTH12 FROM
----  (SELECT DECODE (A.MONTH ,0 ,A.MTM_PNL,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.MTM_PNL,0) MONTH1 ,
----         DECODE (A.MONTH ,2 ,A.MTM_PNL,0) MONTH2 ,
----         DECODE (A.MONTH ,3 ,A.MTM_PNL,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.MTM_PNL,0) MONTH4 ,
----         DECODE (A.MONTH ,5 ,A.MTM_PNL,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.MTM_PNL,0) MONTH6 ,
----         DECODE (A.MONTH ,7 ,A.MTM_PNL,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.MTM_PNL,0) MONTH8 ,
----         DECODE (A.MONTH ,9 ,A.MTM_PNL,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.MTM_PNL,0) MONTH10 ,
----         DECODE (A.MONTH ,11 ,A.MTM_PNL,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.MTM_PNL,0) MONTH12
----FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(POSN_TOPNL_LOCALAMOUNT,0)) MTM_PNL,SUM(NVL(POSN_STRESSPNL_LOCALAMOUNT,0)) STRESS_PNL
----FROM TRSYSTEM997A
----WHERE POSN_CURRENCY_CODE=BASECURRENCY
----  AND POSN_FOR_CURRENCY=othercurrency
----GROUP BY POSN_MATURITY_MONTH ) A)
----UNION
----  SELECT 6 "RowOrder",'StressPnL Local' "Rowflag" , round(sum(MONTH0)/numdetail , 2) MONTH0, round(sum(MONTH1)/numdetail , 2) MONTH1,round(sum(MONTH2)/numdetail , 2) MONTH2,round(sum(MONTH3)/numdetail , 2) MONTH3,
----        round(sum(MONTH4)/numdetail , 2) MONTH4,round(sum(MONTH5)/numdetail , 2) MONTH5,round(sum(MONTH6)/numdetail , 2) MONTH6,round(sum(MONTH7)/numdetail , 2) MONTH7,
----        round(sum(MONTH8)/numdetail , 2) MONTH8,round(sum( MONTH9)/numdetail , 2) MONTH9,round(sum(MONTH10)/numdetail , 2) MONTH10,round(sum(MONTH11)/numdetail , 2) MONTH11,round(sum(MONTH12)/numdetail , 2) MONTH12 FROM
----  (SELECT DECODE (A.MONTH ,0 ,A.STRESS_PNL,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.STRESS_PNL,0) MONTH1 ,
----         DECODE (A.MONTH ,2 ,A.STRESS_PNL,0) MONTH2 ,
----         DECODE (A.MONTH ,3 ,A.STRESS_PNL,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.STRESS_PNL,0) MONTH4 ,
----         DECODE (A.MONTH ,5 ,A.STRESS_PNL,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.STRESS_PNL,0) MONTH6 ,
----         DECODE (A.MONTH ,7 ,A.STRESS_PNL,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.STRESS_PNL,0) MONTH8 ,
----         DECODE (A.MONTH ,9 ,A.STRESS_PNL,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.STRESS_PNL,0) MONTH10 ,
----         DECODE (A.MONTH ,11 ,A.STRESS_PNL,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.STRESS_PNL,0) MONTH12
----FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(POSN_TOPNL_LOCALAMOUNT,0)) MTM_PNL,SUM(NVL(POSN_STRESSPNL_LOCALAMOUNT,0)) STRESS_PNL
----FROM TRSYSTEM997A
----WHERE POSN_CURRENCY_CODE=basecurrency
----  AND POSN_FOR_CURRENCY=othercurrency
----GROUP BY POSN_MATURITY_MONTH ) A) order by 1;
--
--
--
--     Goto Process_End;
--
--  END IF;

 IF NUMINFOTYPE = REFSTRESSPNLRATE THEN

    VAROPERATION := 'Getting Stress PNL Rate Wise';
    NumCode :=GCONST.FNCXMLEXTRACT(XMLDOC,'Param/CurrencyPair',NumCode);
   -- OTHERCURRENCY :=GCONST.FNCXMLEXTRACT(XMLDOC,'Param/OtherCurrency',OTHERCURRENCY);
    varTemp :=  GConst.fncxmlextract(xmldoc, 'Param/ReferenceNumber', VarTemp);
    DATTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'WorkDate',DATTEMP);


    select  CNDI_BASE_CURRENCY,CNDI_OTHER_CURRENCY
        into BASECURRENCY,OTHERCURRENCY
      from TRMASTER256
    where CNDI_PICK_CODE=NumCode
    and CNDI_record_status not in (10200005,10200006);

    select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);



    OPEN GENCURSOR FOR

        select  POS.FWRMONTH "FwdMonth", ROUND(nvl(POS.base_amount,0)/numdetail,2) "BaseAmount", ROUND(nvl(POS.Actual_rate,0),6) "ActualRate",
            ROUND(nvl(POS.MTM_PNL,0)/numdetail,2) "MtmPnl", ROUND(nvl(POS.STRESS_PNL,0)/numdetail,2) "StressPnl", 
          ROUND(Stress_rate,6) "StressRate" ,ROUND(MTM_rate,6) "MtmRate",
         (case when POS.FWRMONTH=-2 then 'Cash' 
               when POS.FWRMONTH=-1 then 'TOM' 
               when POS.FWRMONTH=0 then 'Spot' 
               else to_char(add_months(DATTEMP, POS.FWRMONTH),'MON-yyyy') end) "FWDMONTHDATE"
     from
   (SELECT POSN_FORWARD_MONTH FWRMONTH,
             SUM(NVL(posn_transaction_amount,0)) base_amount,
             SUM(NVL(posn_transaction_amount,0)*nvl(POSN_ALLIN_RATE,0))/SUM(NVL(posn_transaction_amount,0)) Actual_rate,
             SUM(NVL(POSN_TOPNL_LOCALAMOUNT,0)) MTM_PNL,SUM(NVL(POSN_STRESSPNL_LOCALAMOUNT,0)) STRESS_PNL,
             SUM(NVL(posn_transaction_amount,0)*nvl(POSN_MTM_RATE,0))/SUM(NVL(posn_transaction_amount,0)) MTM_rate,
             SUM(NVL(posn_transaction_amount,0)*nvl(POSN_STRESSPNL_CONRATE,0))/SUM(NVL(posn_transaction_amount,0)) Stress_rate
      FROM TRSYSTEM997A 
      WHERE POSN_CURRENCY_CODE=BASECURRENCY
        AND POSN_FOR_CURRENCY=OTHERCURRENCY
        and POSN_Stress_reference =varTemp
         and POSN_COMPANY_CODE in( select usco_company_code from trsystem022a
                                           where upper(usco_user_id) = varUserid
                                           AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and POSN_LOCATION_CODE  in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))
      GROUP BY POSN_FORWARD_MONTH,POSN_CURRENCY_CODE,POSN_FOR_CURRENCY) Pos
--      Left outer join (select STRE_FORWARD_MONTHNO,STRE_STRESS_RATE
--         FROM TRTRAN013B A
--          WHERE STRE_CURRENCY_CODE =BASECURRENCY
--                AND STRE_FOR_CURRENCY=OTHERCURRENCY
--                AND STRE_EFFECTIVE_DATE=DATTEMP
--                --and drad_record_status not in (10200005,10200006)
--
--                and STRE_STRESS_REFERENCE=varTemp) StressRate
--         on STRE_FORWARD_MONTHNO=FWRMONTH
--      left outer join 
--       (select DRAD_FORWARD_MONTHNO,round(avg((DRAD_ASK_RATE+DRAD_BID_RATE)/2),6) MTMRate
--         FROM Clouddb_master.TRTRAN013A A
--          WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                AND DRAD_EFFECTIVE_DATE=DATTEMP
--                and drad_record_status not in (10200005,10200006)
--                and DRAD_SERIAL_NUMBER = 
--                   (select max(DRAD_SERIAL_NUMBER) from Clouddb_master.TRTRAN013A A
--                     WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                       AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                       and drad_record_status not in (10200005,10200006)
--                       AND DRAD_EFFECTIVE_DATE=DATTEMP)
--         group by DRAD_FORWARD_MONTHNO ) BaseMTM
--        on BaseMTM.DRAD_FORWARD_MONTHNO=FWRMONTH
--      left outer join 
--       (select DRAD_FORWARD_MONTHNO,round(avg((DRAD_ASK_RATE+DRAD_BID_RATE)/2),6) MTMRate
--         FROM clouddb_master.TRTRAN013A A
--          WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                AND DRAD_EFFECTIVE_DATE=DATTEMP
--                and drad_record_status not in (10200005,10200006)
--                and DRAD_SERIAL_NUMBER = 
--                   (select max(DRAD_SERIAL_NUMBER) from clouddb_master.TRTRAN013A A
--                     WHERE DRAD_CURRENCY_CODE =BASECURRENCY
--                       AND DRAD_FOR_CURRENCY=OTHERCURRENCY
--                       and drad_record_status not in (10200005,10200006)
--                       AND DRAD_EFFECTIVE_DATE=DATTEMP)
--         group by DRAD_FORWARD_MONTHNO ) MTM
--         on MTM.DRAD_FORWARD_MONTHNO=FWRMONTH)
        ORDER BY POS.FWRMONTH;
     Goto Process_End;
  END IF;

IF NUMINFOTYPE = REFVARANALYSISMAIN THEN

    VAROPERATION := 'Getting Stress PNL Rate Wise';

    select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
    BEGIN
       varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
    Exception
    when others then
       varTemp1 :='ALL';
    End; 
    GLOG.log_write('COMPANYWISE - Start'||varTemp1);
   OPEN GenCursor for 
   -- select VarDate,Company,sum(nvl(pl95,0)) pl95,sum(nvl(pl97,0)) "pl97",sum(nvl(pl99,0)) pl99 from (
--    select 
--      POSN_VAR_DATE as VarDate,
--      pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,1) as Company,
--      case when POSN_VAR_DESC='95' then  sum(POSN_PNL_DIFFAMT)end as pl95,
--      case when POSN_VAR_DESC='97.5' then sum(POSN_PNL_DIFFAMT)end as pl97,
--      case when POSN_VAR_DESC='99' then sum(POSN_PNL_DIFFAMT)end as pl99,
--      POSN_VAR_DESC as VarDesc,
--      Frmdate As Asondate,
--      Todate As Todate
--    from trsystem997c 
--    where POSN_VAR_DATE<=Frmdate
--    group by POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_VAR_DESC) group by VarDate,Company;
         select to_char(VarDate,'dd-MON-YY') "VarDate",--VarDate "VarDate",
           -- select VarDate "VarDate",--VarDate "VarDate",
                    Company "Company",
                    CompanyName "CompanyName",
                    round(sum(nvl(pl95,0))/numdetail, 2) "pl95",
                    abs(round(sum(nvl(pl95,0))/numdetail,2) )"pl95_abs",
                    round(sum(nvl(pl97,0))/numdetail,2) "pl97",
                    round(sum(nvl(pl99,0))/numdetail,2) "pl99",
                    round(sum(nvl(pl100,0))/numdetail,2) "pl100",
                    (SELECT RISK_MAX_LIMIT 
                            FROM TRSYSTEM012
                            WHERE RISK_RISK_REFERENCE = (select max(RISK_RISK_REFERENCE)
                                                                FROM TRSYSTEM012
                                                                where RISK_RISK_TYPE = 21000036 
                                                                and RISK_RECORD_STATUS not in (10200005,10200006))) "Limit"
                    from (select var_var_date AS VarDate,
                          pkgreturncursor.fncgetdescription(var_company_code,2) as Company ,
                         pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                          SUM(NVL(var_var_amt,0)),
                          case when VAR_VAR_DESC='95' then  sum(VAR_VAR_AMT)end as pl95,
                          case when VAR_VAR_DESC='97.5' then sum(VAR_VAR_AMT)end as pl97,
                          case when VAR_VAR_DESC='99' then sum(VAR_VAR_AMT)end as pl99,
                          case when VAR_VAR_DESC='100'then sum(VAR_VAR_AMT)end as pl100,
                          var_var_desc as VarDesc               
                          from trsystem997e 
                          WHERE var_report_type='COMPANYWISE'
                          and (NVL(var_company_code,0) = DECODE(varTemp1,'ALL' ,NVL(var_company_code,0)) OR
                            INSTR(varTemp1,NVL(var_company_code,0)) >0)
                         -- and VAR_VAR_DATE=datWorkDate
                         and VAR_VAR_DATE in (select VarDate
                                            from (select rownum RowNo,var_var_date VarDate
                                                   from (select var_var_date 
                                                          from trsystem997E
                                                          where var_var_date<=sysdate
                                                       group by var_var_date
                                                   order by var_var_date desc ))
                                            where RowNo<=7)
                          GROUP BY var_var_date, var_company_code,var_var_desc
                          )group by VarDate,Company,CompanyName
                          order by VarDate,Company ;
 Goto Process_End;

  END IF;

IF NUMINFOTYPE =     REFVARANALYSISSUBPRODUCTWISE  then

    select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

    BEGIN
       varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
    Exception
    when others then
       varTemp1 :='ALL';
    End; 
    GLOG.log_write('SUBPRODUCTWISE - Start'||varTemp1);
    OPEN GenCursor for 
    select to_char(VarDate,'dd-MON-YY') "VarDate",--VarDate "VarDate",
                    Company "Company",
                    CompanyName "CompanyName",
                    SubProduct "SubProduct",
                    round(sum(nvl(pl95,0))/numdetail, 2) "pl95",
                    abs(round(sum(nvl(pl95,0))/numdetail,2) )"pl95_abs",
                    round(sum(nvl(pl97,0))/numdetail, 2) "pl97",
                    round(sum(nvl(pl99,0))/numdetail, 2) "pl99",
                    round(sum(nvl(pl100,0))/numdetail, 2) "pl100" 
                    from (
                          select             
                          var_var_date AS VarDate,
                          pkgreturncursor.fncgetdescription(var_company_code,2) as Company ,
                          pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                          pkgreturncursor.fncgetdescription(VAR_SUBPRODUCT_CODE,2) as SubProduct,
                          SUM(NVL(var_var_amt,0)),
                          case when VAR_VAR_DESC='95' then  sum(VAR_VAR_AMT)end as pl95,
                          case when VAR_VAR_DESC='97.5' then sum(VAR_VAR_AMT)end as pl97,
                          case when VAR_VAR_DESC='99' then sum(VAR_VAR_AMT)end as pl99,
                          case when VAR_VAR_DESC='100'then sum(VAR_VAR_AMT)end as pl100,
                          var_var_desc as VarDesc               
                          from trsystem997e 
                          WHERE var_report_type='SUBPRODUCTWISE'
                          and (NVL(var_company_code,0) = DECODE(varTemp1,'ALL' ,NVL(var_company_code,0)) OR
                            INSTR(varTemp1,NVL(var_company_code,0)) >0)
                          and  VAR_VAR_DATE=datWorkDate
                          GROUP BY var_var_date, var_company_code,VAR_SUBPRODUCT_CODE,var_var_desc
                          )group by VarDate,Company,SubProduct,CompanyName
                          order by VarDate,Company,SubProduct;    
 Goto Process_End;
  END IF;

  IF NUMINFOTYPE =    REFVARANALYSISPRODUCTWISE  then

  select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

    BEGIN
       varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
    Exception
    when others then
       varTemp1 :='ALL';
    End; 
    GLOG.log_write('PRODUCTWISE - Start'||varTemp1);
      OPEN GenCursor for 
              select to_char(VarDate,'dd-MON-YY') "VarDate",-- VarDate "VarDate",
                    Company "Company",
                    CompanyName "CompanyName",
                    Product "Product",
                    round(sum(nvl(pl95,0))/numdetail, 2) "pl95",
                    abs(round(sum(nvl(pl95,0))/numdetail,2) )"pl95_abs",
                    round(sum(nvl(pl97,0))/numdetail, 2) "pl97",
                    round(sum(nvl(pl99,0))/numdetail, 2) "pl99",
                    round(sum(nvl(pl100,0))/numdetail, 2) "pl100" 
                    from (
                          select             
                          var_var_date AS VarDate,
                          pkgreturncursor.fncgetdescription(var_company_code,2) as Company ,
                          pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                          pkgreturncursor.fncgetdescription(VAR_PRODUCT_CODE,2) as Product,
                          SUM(NVL(var_var_amt,0)),
                          case when VAR_VAR_DESC='95' then  sum(VAR_VAR_AMT)end as pl95,
                          case when VAR_VAR_DESC='97.5' then sum(VAR_VAR_AMT)end as pl97,
                          case when VAR_VAR_DESC='99' then sum(VAR_VAR_AMT)end as pl99,
                          case when VAR_VAR_DESC='100'then sum(VAR_VAR_AMT)end as pl100,
                          var_var_desc as VarDesc               
                          from trsystem997e 
                          WHERE var_report_type='PRODUCTWISE'
                          and (NVL(var_company_code,0) = DECODE(varTemp1,'ALL' ,NVL(var_company_code,0)) OR
                            INSTR(varTemp1,NVL(var_company_code,0)) >0)
                           and VAR_VAR_DATE=datWorkDate
                          GROUP BY var_var_date, var_company_code,VAR_PRODUCT_CODE,var_var_desc
                          )group by VarDate,Company,Product,CompanyName
                          order by VarDate,Company,Product;
 Goto Process_End;

  END IF;
  IF NUMINFOTYPE =     REFVARANALYSISCURRENCYWISE  then

 select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);
    BEGIN
       varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
    Exception
    when others then
       varTemp1 :='ALL';
    End; 
    GLOG.log_write('CURRENCYWISE - Start'||varTemp1);
      OPEN GenCursor for  
      select to_char(VarDate,'dd-MON-YY') "VarDate",-- VarDate "VarDate",
                    Company "Company",
                    CompanyName "CompanyName",
                    CurrPair "CurrPair",
                    round(sum(nvl(pl95,0))/numdetail, 2) "pl95",
                    abs(round(sum(nvl(pl95,0))/numdetail,2) )"pl95_abs",
                    round(sum(nvl(pl97,0))/numdetail, 2) "pl97",
                    round(sum(nvl(pl99,0))/numdetail, 2) "pl99",
                    round(sum(nvl(pl100,0))/numdetail, 2) "pl100"
                    from (
                          select             
                          var_var_date AS VarDate,
                          pkgreturncursor.fncgetdescription(var_company_code,2) as Company ,
                          pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                          pkgreturncursor.fncgetdescription(VAR_BASE_CURRENCY,2)||'/'||pkgreturncursor.fncgetdescription(VAR_OTHER_CURRENCY,2) as CurrPair,

                          SUM(NVL(var_var_amt,0)),
                          case when VAR_VAR_DESC='95' then  sum(VAR_VAR_AMT)end as pl95,
                          case when VAR_VAR_DESC='97.5' then sum(VAR_VAR_AMT)end as pl97,
                          case when VAR_VAR_DESC='99' then sum(VAR_VAR_AMT)end as pl99,
                          case when VAR_VAR_DESC='100'then sum(VAR_VAR_AMT)end as pl100,
                          var_var_desc as VarDesc               
                          from trsystem997e WHERE 
                          var_report_type='CURRENCYWISE'
                          and (NVL(var_company_code,0) = DECODE(varTemp1,'ALL' ,NVL(var_company_code,0)) OR
                            INSTR(varTemp1,NVL(var_company_code,0)) >0)
                          and  VAR_VAR_DATE=datWorkDate
                          GROUP BY var_var_date, var_company_code,VAR_BASE_CURRENCY,VAR_OTHER_CURRENCY,var_var_desc
                          )group by VarDate,Company,CurrPair,CompanyName
                          order by VarDate,Company,CurrPair ;
 Goto Process_End;

  END IF;
  IF NUMINFOTYPE =     REFVARANALYSISDEALER  then

select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

    BEGIN
       varTemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',varTemp1,GConst.TYPENODEPATH);
    Exception
    when others then
       varTemp1 :='ALL';
    End; 
    GLOG.log_write('DEALERWISE - Start'||varTemp1);
      OPEN GenCursor for  
      select   to_char(VarDate,'dd-MON-YY') "VarDate",--     VarDate "VarDate",
                    Company "Company",
                    CompanyName "CompanyName",
                    Trader "Trader",
                    round(sum(nvl(pl95,0))/numdetail, 2) "pl95",
                    abs(round(sum(nvl(pl95,0))/numdetail,2) )"pl95_abs",
                    round(sum(nvl(pl97,0))/numdetail, 2) "pl97",
                    round(sum(nvl(pl99,0))/numdetail, 2) "pl99",
                    round(sum(nvl(pl100,0))/numdetail, 2) "pl100"
                    from (
                          select             
                          var_var_date AS VarDate,
                          pkgreturncursor.fncgetdescription(var_company_code,2) as Company ,
                          pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                          pkgFunctions.fncGetUserName(var_dealer_ID) as Trader,
                          SUM(NVL(var_var_amt,0)),
                          case when VAR_VAR_DESC='95' then  sum(VAR_VAR_AMT)end as pl95,
                          case when VAR_VAR_DESC='97.5' then sum(VAR_VAR_AMT)end as pl97,
                          case when VAR_VAR_DESC='99' then sum(VAR_VAR_AMT)end as pl99,
                          case when VAR_VAR_DESC='100'then sum(VAR_VAR_AMT)end as pl100,
                          var_var_desc as VarDesc               
                          from trsystem997e
                          WHERE var_report_type='DEALERWISE'
                          and (NVL(var_company_code,0) = DECODE(varTemp1,'ALL' ,NVL(var_company_code,0)) OR
                            INSTR(varTemp1,NVL(var_company_code,0)) >0)
                          and  VAR_VAR_DATE=datWorkDate
                          GROUP BY var_var_date, var_company_code,var_dealer_ID,var_var_desc
                          )group by VarDate,Company,Trader,CompanyName
                          order by VarDate,Company,Trader;
 Goto Process_End;

  END IF;

--added by supriya on 17/02/2022
If numinfotype = REFGETHEDGEPOSITIONDRILLDOWN then
    varCondition := gconst.fncxmlextract(xmldoc,'Param/WhereCond', varCondition);
    varTemp := gconst.fncxmlextract(xmldoc,'Param/Guid', varTemp);

    varCondition := REPLACE(varCondition, 'singlequote', '''');
    varCondition := REPLACE(varCondition, 'lessthan', '<');

    GLOG.log_write('WHERECONDITION - REFGETDEALERSDRILLDOWN' || varCondition);

    varQuery:= 'select pkgreturncursor.fncgetdescription(COMPANYCODE,1)Company,    
        pkgreturncursor.fncgetdescription(LOCATIONCODE,1) Location, 
        pkgreturncursor.fncgetdescription(BACKUPDEAL,1) Book,
        pkgreturncursor.fncgetdescription(INITCODE,1)Strategy,
        pkgreturncursor.fncgetdescription(CURRENCYCODE,2) BaseCurrency,
        pkgreturncursor.fncgetdescription(FORCURRENCY,2) QuoteCurrency,
        --pkgreturncursor.fncgetdescription(posn_account_code,1) AccountCode,
        --pkgreturncursor.fncgetdescription(posn_option_type,1) OptionType,
        pkgreturncursor.fncgetdescription(BUYSELLCODE,1) BuySell,
        pkgreturncursor.fncgetdescription(TRAN_TYPE,1) TransactionType,
        --pkgreturncursor.fncgetdescription(posn_exchange_code,1) ExchangeCode,
        pkgreturncursor.fncgetdescription(COUNTERPARTY,1) CounterParty,
        DEALNUMBER SystemReference,
        DEALSERIAL SerialNumber,    DEALSUBSERIAL SubSerial, 
        CANCELDATE ReferenceDate,   pkgfunctions.fncGetUserName(CDEALERNAME) DealerName,  
        CANCELAMOUNT BaseAmount,--posn_outstanding_amount OutstandingAmount,   
        CANCELSPOT SpotRate, CANCELFORWARD ForwardRate,    CANCELMARGIN MarginRate, 
        CANCELRATE AllinRate, --posn_user_reference UserReference,
        pkgreturncursor.fncgetdescription(BROKERCODE,1) BrokerCode,
        --posn_due_date MaturityDate, pkgreturncursor.fncgetdescription(posn_premium_status,1) PremiumStatus, posn_premium_amount PremiumAmount,  
        CCASHFLOWDATE CashFlowDate, pkgreturncursor.fncgetdescription( HEDGETRADE,1) Purpose,
        --posn_mtm_rate MTMRate,    posn_mtm_amount MTMAmount,    posn_topnl_conrate MTMConvRate,    posn_topnl_amount MtMinPLCurrency,
       -- posn_topnl_localrate MTMConvLocalRate ,    posn_topnl_localamount MTMInLocalCurrency,
        --pkgreturncursor.fncgetdescription(posn_functional_currency,2) FunctionalCurrency,
        --posn_functional_exrate FunctionExRate,    posn_functional_amount AmountinFunctionalCurrency,
        --posn_delta_position OptionDeltaPostion,    
        --pkgreturncursor.fncgetdescription(posn_account_codegroup,1) TradeGroup, 
        --posn_local_exrate LocalExRate,    posn_local_amount AmountinLocal  ,
        pkgreturncursor.fncgetdescription(CURRENCY_PAIR,1)CurrencyPair, ROLLOVERREFERENCE RollOverReference
    FROM    trsystem983_DrillDown
    where TRAN_TYPE in (32200001,32200002,32200003)' || 
    ' and REQUESTGUID = ''' || varTemp || '''' || varCondition;
    GLOG.log_write('varQuery:- ' || varQuery);

    open gencursor for varQuery;
    Goto Process_End;
END IF;

If numinfotype = REFGETDEALERSDRILLDOWN then
 varCondition := gconst.fncxmlextract(xmldoc,'Param/WhereCond', varCondition);
 varTemp := gconst.fncxmlextract(xmldoc,'Param/Guid', varTemp);

 varCondition := REPLACE(varCondition, 'singlequote', '''');
 varCondition := REPLACE(varCondition, 'lessthan', '<');

 GLOG.log_write('WHERECONDITION - REFGETDEALERSDRILLDOWN' || varCondition);

  varQuery:= 'select pkgreturncursor.fncgetdescription(posn_company_code,1)Company,    
    pkgreturncursor.fncgetdescription(posn_location_code,1) Location, 
    pkgreturncursor.fncgetdescription(posn_product_code,1) Book,
    pkgreturncursor.fncgetdescription(posn_subproduct_code,1)Strategy,
    pkgreturncursor.fncgetdescription(posn_currency_code,2) BaseCurrency,
    pkgreturncursor.fncgetdescription(posn_for_currency,2) QuoteCurrency,
    pkgreturncursor.fncgetdescription(posn_account_code,1) AccountCode,
    pkgreturncursor.fncgetdescription(posn_option_type,1) OptionType,
    pkgreturncursor.fncgetdescription(posn_buy_sell,1) BuySell,
    pkgreturncursor.fncgetdescription(posn_transaction_type,1) TransactionType,
    pkgreturncursor.fncgetdescription(posn_exchange_code,1) ExchangeCode,
    pkgreturncursor.fncgetdescription(posn_counter_party,1) CounterParty,
    posn_reference_number SystemReference,
    posn_reference_serial SerialNumber,    posn_reference_subserial SubSerial, 
    posn_reference_date ReferenceDate,   pkgfunctions.fncGetUserName(posn_dealer_id) DealerName,  
    posn_transaction_amount BaseAmount,posn_outstanding_amount OutstandingAmount,    posn_spot_rate SpotRate,   
    posn_forward_rate ForwardRate,    posn_margin_rate MarginRate, 
    posn_allin_rate AllinRate, posn_user_reference UserReference,
    pkgreturncursor.fncgetdescription(posn_broker_code,1) BrokerCode,
    posn_due_date MaturityDate, pkgreturncursor.fncgetdescription(posn_premium_status,1) PremiumStatus,  
    posn_premium_amount PremiumAmount, pkgreturncursor.fncgetdescription( posn_hedge_trade,1) Purpose,
    posn_mtm_rate MTMRate,    posn_mtm_amount MTMAmount,    posn_topnl_conrate MTMConvRate,    posn_topnl_amount MtMinPLCurrency,
    posn_topnl_localrate MTMConvLocalRate ,    posn_topnl_localamount MTMInLocalCurrency,
    pkgreturncursor.fncgetdescription(posn_functional_currency,2) FunctionalCurrency,
    posn_functional_exrate FunctionExRate,    posn_functional_amount AmountinFunctionalCurrency,
    posn_delta_position OptionDeltaPostion,    
    pkgreturncursor.fncgetdescription(posn_account_codegroup,1) TradeGroup, 
    pkgreturncursor.fncgetdescription(POSN_LOCAL_CURRENCY,1)LocalCurrency,
    posn_local_exrate LocalExRate,    posn_local_amount AmountinLocal  ,
    pkgreturncursor.fncgetdescription(POSN_CURRENCY_PAIR,1)CurrencyPair
 FROM    trsystem997_drillDown
where posn_transaction_type in (32200001,32200002,32200003)' || 
' and POSN_REQUEST_GUID = ''' || varTemp || '''' || varCondition;
GLOG.log_write('varQuery:- ' || varQuery);

open gencursor for varQuery;
Goto Process_End;
END IF;

If numinfotype = REFGETREQUESTID then
varTemp := GLOG.REQUESTGUID;
open gencursor for 
Select varTemp "RequestGuid", 
TO_CHAR(SYSTIMESTAMP, 'DD-MON-YYYY HH24:MI:SS:FF3') "ProcessedTime" from dual;
Goto Process_End;
END IF;

If numinfotype = REFGETDEALERSDRILLDOWNPNL then
 varCondition := gconst.fncxmlextract(xmldoc,'Param/WhereCond', varCondition);
 varTemp := gconst.fncxmlextract(xmldoc,'Param/Guid', varTemp);

 varCondition := REPLACE(varCondition, 'singlequote', '''');
  varQuery:= 'select pkgreturncursor.fncgetdescription(CompanyCode,1)Company,
        dealnumber SystemReference,DEALSERIAL SerialNumber,DEALSUBSERIAL SubSerial,
        pkgreturncursor.fncgetdescription(INITCODE,1)Book,
        pkgreturncursor.fncgetdescription(BackUpDeal,1)Strategy,ason_date,
        pkgreturncursor.fncgetdescription(HedgeTrade,1)Purpose,
        EXPIRYDATE ExpiryDate,maturitydate MaturityDate,
        pkgreturncursor.fncgetdescription(CURRENCYCODE,2) BaseCurrency,
        pkgreturncursor.fncgetdescription(FORCURRENCY,2) QuoteCurrency,
        pkgreturncursor.fncgetdescription(COUNTERPARTY,1)Counterparty,
        EXECUTEDATE ExecuteDate,
        SPOTRATE SpotRate,FORWARDRATE ForwardRate,MARGINRATE MarginRate,
        EXCHANGERATE All_in_Rate ,DEALBASEAMOUNT BaseAmount,OUTSTANDINGAMOUNT OutstandingAmount,
        DEALREMARKS DealRemarks,USERREFERENCE UserRemarks,
        DEALERNMAE,COUNTERDEALER,
        pkgreturncursor.fncgetdescription(OPTIONTYPE,1) OptionType,
        pkgreturncursor.fncgetdescription(EXCHANGECODE,1)ExchangeName,
        pkgreturncursor.fncgetdescription(BROKERCODE,1)Broker,
        pkgreturncursor.fncgetdescription(LOCATIONCODE,1)Location,
        pkgreturncursor.fncgetdescription(BUYSELLCODE,1)BuySell,
        pkgreturncursor.fncgetdescription(PREMIUMSTATUS,1) PremiumStatus,
        PREMIUMAMOUNT PremiumAmount,PREMIUMINRATEINSEPTION PremiumConvRate,
        PREMIUMDOLLERAMT PremiumConvertAmount,PREMIUMVALUEDATE,
        pkgreturncursor.fncgetdescription(Tran_TYPE,1)Trans_Type,
        CANCELAMOUNT CancelAmount,canceldate CancelDate,
        CANCELSPOT CancelSpotRate,CANCELFORWARD CancelForwardRate,CANCELMARGIN CancelMargin,
        CANCELRATE CancelRate, PROFITLOSS ProfitLoss,
        CANCELPNLSPOT, pkgfunctions.fncGetUserName(CDEALERNAME) CancelDealerName,
        CCOUNTERDEALER CancelCounterDealer,
        CEDCCHARGE EDCCharges,CCASHFLOWDATE CashFlowDate,
        pkgreturncursor.fncgetdescription(EXERCISETYPE,1)ExcerciseType,
        pkgreturncursor.fncgetdescription(CPREMIUMSTATUS,1) CancelPremiumStatus,
        CPREMIUMAMOUNT CancelPremiumAmount,
        PREMIUMINRATECANCEL PremiumCancelConvRate,
        pkgreturncursor.fncgetdescription(PNLTYPE,1) PNlStatus,
        pkgreturncursor.fncgetdescription(CURRENCY_PAIR,1)CurrencyPair
 from  trsystem983_DrillDown
where REQUESTGUID = ''' || varTemp || '''' || varCondition;
 GLOG.log_write('varQuery:-' || varQuery);
open gencursor for varQuery;
Goto Process_End;
END IF;

If numinfotype = REFGETFXSUMMARYDRILLDOWN then
 varCondition := gconst.fncxmlextract(xmldoc,'Param/WhereCond', varCondition);
 varTemp := gconst.fncxmlextract(xmldoc,'Param/Guid', varTemp);
 GLOG.log_write('WHERECONDITION' || varCondition);

 varCondition := REPLACE(varCondition, 'singlequote', '''');
  varQuery:= 'SELECT  Pkgreturncursor.fncgetdescription( posn_company_code,1) Company,
Pkgreturncursor.fncgetdescription(posn_location_code,1)Location,
Pkgreturncursor.fncgetdescription(posn_product_code,1) Book,
Pkgreturncursor.fncgetdescription(posn_subproduct_code,1) Strategy,
posn_reference_number SystemReference,
    posn_reference_serial ReferenceSerial,
    posn_reference_subserial ReferenceSubSerial,
    posn_reference_date ReferenceDate,
    posn_user_reference UserReference,
    Pkgreturncursor.fncgetdescription(posn_currency_pair,2)Currencypair,
Pkgreturncursor.fncgetdescription(posn_account_code,1) TransactionType,
posn_dealer_id DealerID,Pkgreturncursor.fncgetdescription(posn_buy_sell,2) BuySell,
Pkgreturncursor.fncgetdescription( posn_transaction_type,1) TransactionHeader,
Pkgreturncursor.fncgetdescription(posn_account_codegroup,1)TransactionGroup,
Pkgreturncursor.fncgetdescription(posn_counter_party,1) CounterParty,
posn_transaction_amount BaseAmount,  posn_outstanding_amount OutstandingAmount,
posn_spot_rate SpotRate,  posn_forward_rate ForwardRate,  posn_margin_rate MarginRate,
posn_allin_rate All_in_Rate, posn_due_date DueDate,
Pkgreturncursor.fncgetdescription(posn_exchange_code,1)ExchangeName,
Pkgreturncursor.fncgetdescription(posn_broker_code,1) Broker,
Pkgreturncursor.fncgetdescription(posn_option_type,2) OptionType,
Pkgreturncursor.fncgetdescription(posn_premium_status ,1) PremiumStatus,
posn_premium_amount PremiumAmount,
Pkgreturncursor.fncgetdescription( posn_hedge_trade,1)Purpose,
posn_mtm_rate MtMRate,    posn_mtm_amount MtMAmount,
posn_topnl_conrate ToPnLExRate, posn_topnl_amount ToPnLAmount,
posn_topnl_localrate PnLConvLocalRate,  posn_topnl_localamount PnLinLocalCurr,
Pkgreturncursor.fncgetdescription(posn_functional_currency,2) FunctionalCurrency,
posn_functional_exrate ConversionRate,    posn_functional_amount AmountInFunctionalCurr,
posn_delta_position OptionDeltaPosition,
Pkgreturncursor.fncgetdescription(POSN_LOCAL_CURRENCY,2)LocalCurrency,
posn_local_exrate ConvRateLocal,posn_local_amount AmountInLocalCurr
FROM  trsystem997_drilldown
where posn_request_guid = ''' || varTemp || '''' || varCondition;

open gencursor for varQuery;
Goto Process_End;
END IF;

If numinfotype = REFGETOPTIONTYPECONFIG then

open gencursor for 
Select * FROM TRMASTER323 WHERE OPTI_RECORD_STATUS NOT IN (10200005,10200006);
Goto Process_End;
END IF;

If numinfotype = REFGETLEGSCONFIG then
numcode := gconst.fncxmlextract(xmldoc,'Param/DealType', numcode);
open gencursor for 
Select OPTI_BUY_SELL "BuySell", OPTI_OPTION_TYPE "OptionType" 
FROM TRMASTER323A WHERE OPIC_PICK_CODE = numcode AND OPTI_RECORD_STATUS NOT IN (10200005,10200006);
Goto Process_End;
END IF;

--ADDED BY SUPRIYA
If numinfotype = REFGETAMOUNTINLABEL then
    open gencursor for 
        select PICK_LONG_DESCRIPTION "DESCRIPTION"
        from TRMASTER001
        where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                                from TRSYSTEM051);
    Goto Process_End;
END IF;

If numinfotype = REFGETALLOWEDUSERCOUNT then
GLOG.Log_write('logged in user' || ' : ' || varUserID);
begin
        select NVL(Lmda_Parameter_Value,0)
          into numcode
          from clouddb_master.trlicense001b 
            where LMDA_REFERENCE_NUMBER = (select USER_LICENSE_REFERENCE from Clouddb_Global.trsystem022 where UPPER(User_User_Id) = varUserID and USER_RECORD_STATUS NOT IN (10200005,10200006)) 
            and Lmda_Parameter_Code = 92700001
            AND LMDA_RECORD_STAUTS NOT IN (10200005,10200006);
exception 
    when no_data_found then 
      numCode :=0;
  end;
  begin
          select NVL(count(*),0)
          into numcode1
          from Clouddb_Global.TRSYSTEM022 
            where USER_LICENSE_REFERENCE = (select USER_LICENSE_REFERENCE from Clouddb_Global.trsystem022 
                                            where UPPER(User_User_Id) = varUserID
                                            AND USER_RECORD_STATUS NOT IN (10200005,10200006))
            and USER_STATUS_CODE IN (14400001)
            AND USER_RECORD_STATUS NOT IN (10200005,10200006);
  exception 
    when no_data_found then 
      numcode1 :=0;
  end;
            GLOG.Log_write('logged in user' || ' : ' || to_char(numcode));
open gencursor for           
Select numcode "AllowedUsers", numcode1 "AddedUsers"
FROM dual;

Goto Process_End;
END IF;

If numinfotype = REFGETINFLOWMARGINRATE then

open gencursor for 
Select NVL(PRMC_MARGINRATE_INFLOW,0) "MarginRate" FROM TRSYSTEM051 WHERE PRMC_RECORD_STATUS NOT IN (10200005,10200006);
Goto Process_End;
END IF;

If numinfotype = REFGETOUTFLOWMARGINRATE then

open gencursor for 
Select NVL(PRMC_MARGINRATE_OUTFLOW,0) "MarginRate" FROM TRSYSTEM051 WHERE PRMC_RECORD_STATUS NOT IN (10200005,10200006);
Goto Process_End;
END IF;

If numinfotype = REFGETHEDGEDATA then 
    numCode  := GConst.fncxmlextract(xmldoc, 'CompanyCode', numCode); 
    numCode1 := GConst.fncxmlextract(xmldoc, 'LocalBank', numCode1); 
    numCode2 := GConst.fncxmlextract(xmldoc, 'InstrumentType', numCode2); 
    numCode3 := GConst.fncxmlextract(xmldoc, 'BuySell', numCode3); 
    if numcode2 = 32200001 then 
      open gencursor for
        select to_char(rownum) "Rownum", pkgreturncursor.fncgetdescription(deal_Backup_deal,1) "Subportfolio", 
          deal_deal_number "DealNumber",
          deal_execute_date "ExecuteDate",
          pkgreturncursor.fncgetdescription(deal_base_currency,2) "Currency",
          deal_base_amount "Outstanding_Amount",
          deal_exchange_rate "ExchangeRate",
          deal_maturity_date "MaturityDate",
          deal_spot_rate "Spot",
          deal_forward_rate "Forward",
          Deal_margin_rate "Margin",
          pkgreturncursor.fncgetdescription(deal_counter_party,1) "Bank",
          deal_bank_reference "BankReference",
          pkgreturncursor.fncgetdescription(deal_buy_sell,2) "BuySell",
          pkgreturncursor.fncgetdescription(deal_location_code,1) "Location",
          pkgreturncursor.fncgetdescription(deal_init_code,1) "Portfolio",          
          NVL((pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number,deal_serial_number,1,1,datworkdate)),0) "OutstandingAmount",
          datworkdate "EffectiveDate",
          to_char(NVL(pkgforexprocess.fncHedgeAccountingType(Deal_deal_number,datworkdate),DEAL_ACCOUNTING_TYPE)) "ValuationType",
          --pkgreturncursor.fncgetdescription(NVL(HEGE_ACCOUNTING_TYPE,DEAL_ACCOUNTING_TYPE),2) "ValuationTypeDesc"
          pkgreturncursor.fncgetdescription(NVL(pkgforexprocess.fncHedgeAccountingType(Deal_deal_number,datworkdate),DEAL_ACCOUNTING_TYPE),2) "ValuationTypeDesc"
         -- pkgreturncursor.fncgetdescription(33800001,1) "ValuationType"
        from trtran001 
--        LEFT OUTER JOIN 
--             (select HEGE_ACCOUNTING_TYPE,max(HEGE_EFFECTIVE_DATE),HEGE_DEAL_NUMBER
--               from TRTRAN111A
--               where HEGE_RECORD_STATUS NOT IN(10200005,10200006)
--               and HEGE_EFFECTIVE_DATE <= datworkdate
--               group by HEGE_ACCOUNTING_TYPE,HEGE_DEAL_NUMBER) ON
--        deal_deal_number = HEGE_DEAL_NUMBER
        where deal_record_status not in (10200005,10200006)
        and deal_counter_party=decode(numcode1,30699999,deal_counter_party,numcode1)
        and deal_company_code=decode(numcode,30199999,deal_company_code,numcode) 
        and deal_buy_sell=decode(numcode3,25399999,deal_buy_sell,numcode3)
        AND DEAL_DEAL_TYPE NOT IN(25400001,25400002,25400003)
        and deal_maturity_date > datworkdate
        and NVL((pkgforexprocess.fncGetOutstandingTransaction(deal_deal_number,deal_serial_number,1,1,datworkdate)),0)>0
          and deal_Company_Code in( select usco_company_code from trsystem022a
                                        WHERE UPPER(usco_user_id) =VARUSERID
		    AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
           and DEAL_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006));
   else
    open gencursor for
      select to_char(rownum) "Rownum", pkgReturnCursor.fncgetdescription(copt_Backup_deal,2) "Subportfolio",
        copt_deal_number "DealNumber",copt_execute_date "ExecuteDate",
        pkgReturnCursor.fncgetdescription(copt_base_currency,2) "Currency",
        Pkgforexprocess.FncgetoutstandingTransaction(Copt_Deal_Number,
        Copt_Serial_Number,15,1,datworkdate,NULL,1)  "OutstandingAmount",
        cosu_strike_rate "ExchangeRate",
        copt_maturity_date "MaturityDate",  
        0 "Spot",0 "Forward",copt_margin_rate "Margin",
        pkgReturnCursor.fncgetdescription(copt_counter_party,2) "Bank", 
        COPT_BANK_REFERENCE "BankReference",
        pkgReturnCursor.fncgetdescription(COSU_buy_sell,1) "BuySell",
        pkgReturnCursor.fncgetdescription(copt_location_code,1) "Location",              
        pkgReturnCursor.fncgetdescription(copt_init_code,2) "Portfolio",
        datworkdate "EffectiveDate",
        to_char(NVL(pkgforexprocess.fncHedgeAccountingType(Copt_deal_number,datworkdate),COPT_ACCOUNTING_TYPE)) "ValuationType",
        pkgreturncursor.fncgetdescription(NVL(pkgforexprocess.fncHedgeAccountingType(COPT_deal_number,datworkdate),COPT_ACCOUNTING_TYPE),2) "ValuationTypeDesc"
      --  pkgreturncursor.fncgetdescription(29700001,1) "ValuationType"
      from trtran071 inner join TRTRAN072
    on COPT_DEAL_NUMBER      = COSU_DEAL_NUMBER
    AND COPT_RECORD_STATUS NOT IN(10200005,10200006)
    AND COSU_RECORD_STATUS NOT IN(10200005,10200006)
--    left outer join (select HEGE_ACCOUNTING_TYPE,max(HEGE_EFFECTIVE_DATE),HEGE_DEAL_NUMBER
--               from TRTRAN111A
--               where HEGE_RECORD_STATUS NOT IN(10200005,10200006)
--               and HEGE_EFFECTIVE_DATE <= datworkdate
--               group by HEGE_ACCOUNTING_TYPE,HEGE_DEAL_NUMBER) ON
--        COPT_DEAL_NUMBER = HEGE_DEAL_NUMBER
    where COPT_counter_party=decode(numcode1,30699999,COPT_counter_party,numcode1)
    and COPT_company_code=decode(numcode,30199999,COPT_company_code,numcode)
    and COSU_buy_sell=decode(numcode3,25399999,COSU_buy_sell,numcode3)
    AND Pkgforexprocess.FncgetoutstandingTransaction(Copt_Deal_Number,
        Copt_Serial_Number,15,1,datworkdate,NULL,1)>0
    and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where UPPER(usco_user_id) = varUserid
                        AND USCO_RECORD_STATUS NOT IN (10200005,10200006) )
    and COPT_LOCATION_CODE in( select USLO_ENTITY from trsystem022d
                                           where UPPER(USLO_USER_ID) = varUserid
                                           and USLO_RECORD_STATUS NOT IN (10200005,10200006))    ;
  end if ;   
Goto Process_End;
end if; 

If numinfotype = REFGETPREFERENCEFORUSER then

open gencursor for 
select USPF_DASHBOARD_PROGRAMUNIT "Dashboard" from TRSYSTEM022C
WHERE UPPER(USPF_USER_ID) = varUserID
AND USPF_RECORD_STATUS NOT IN (10200005,10200006);
Goto Process_End;
END IF;

If numinfotype = REFGETFUNRPTCURRPAIR then

open gencursor for 
-- select  case when RowNo>1
--     then pkgreturncursor.fncgetdescription(POSN_REPORTING_CURRENCY,2) || '/' || pkgreturncursor.fncgetdescription(POSN_FUNCTIONAL_CURRENCY,2)
--      else pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) || '/' || pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) end "CurrPair"
--      from 
--      (
--      select row_number() over (order by POSN_CURRENCY_CODE,POSN_FOR_CURRENCY) RowNo,
--       --( partition by POSN_CURRENCY_CODE,POSN_FOR_CURRENCY order by POSN_CURRENCY_CODE,POSN_FOR_CURRENCY ) RowNo,
--             POSN_CURRENCY_CODE, POSN_FOR_CURRENCY,
--             POSN_FUNCTIONAL_CURRENCY,POSN_REPORTING_CURRENCY
--       from trsystem997
--      GROUP BY POSN_CURRENCY_CODE, POSN_FOR_CURRENCY,
--               POSN_FUNCTIONAL_CURRENCY,POSN_REPORTING_CURRENCY
--        order by 1 Desc
--      ) 
--where rownum=1;
--Goto Process_End;
 select  pkgreturncursor.fncgetdescription(POSN_REPORTING_CURRENCY,2) || '/' || pkgreturncursor.fncgetdescription(POSN_FUNCTIONAL_CURRENCY,2)  "CurrPair"
       from trsystem997
      GROUP BY  POSN_FUNCTIONAL_CURRENCY,POSN_REPORTING_CURRENCY;
Goto Process_End;
END IF;

If numinfotype = REGGETDISPLAYBUTTONS then
 Glog.log_write('Extracted Information For Display Buttons' || varEntity );
open gencursor for 
Select pkgreturncursor.fncgetdescription(nvl(EINF_OKAY_VISIBLE,12400002),1) OkayButton,
       pkgreturncursor.fncgetdescription(nvl(EINF_COPY_VISIBLE,12400002),1) CopyRecord,
       pkgreturncursor.fncgetdescription(nvl(EINF_NEWRECORD_VISIBLE,12400002),1) NewRecord,
       pkgreturncursor.fncgetdescription(nvl(EINF_STAYONSAME_VISIBLE,12400002),1) StayOnSame
 from TRsystem995
where EINF_ENTITY_NAME=varEntity
and EINF_RECORD_STATUS not in (10200005,10200006);

Goto Process_End;
END IF;

-----ADDED BY SUPRIYA ON 27/11/2020------
If numinfotype = REFCHECKGRIDUSERCONFIGEXISTS then
    numcode := gconst.fncxmlextract(xmldoc,'Param/CursorNumber', numcode);
    --varTemp := gconst.fncxmlextract(xmldoc,'Param/UserID', varTemp);    
    Glog.log_write('Extracted Information to check 999c grid config exists for the user ' || varTemp );   

    open gencursor for 
        SELECT * FROM TRSYSTEM999CU
        WHERE upper(ugrd_user_id) = upper(varUserID) and ugrd_cursor_number = numcode;
    Goto Process_End;
END IF;

-----ADDED BY SUPRIYA ON 27/11/2020------
If numinfotype = REFCHECKENTITYUSERCONFIGEXISTS then
    varTemp1 := gconst.fncxmlextract(xmldoc,'Param/TableSynonym', varTemp1);
    --varTemp := gconst.fncxmlextract(xmldoc,'Param/UserID', varTemp);    
    Glog.log_write('Extracted Information to check 999 user config exists for ' || varTemp );

    open gencursor for 
        SELECT * FROM TRSYSTEM999U
        WHERE upper(ufld_user_id) = upper(varUserID) and ufld_table_synonym = varTemp1;
    Goto Process_End;
END IF;

-----ADDED BY SUPRIYA ON 08/12/2020------
If numinfotype = REFGETVARLIMIT then
    Glog.log_write('Extrac Var Limit Information ');    
    open gencursor for 
        SELECT RISK_MIN_LIMIT "MinimumLimit", 
               RISK_MAX_LIMIT "MaximiumLimit" 
        FROM TRSYSTEM012
        WHERE RISK_RISK_REFERENCE = (select max(RISK_RISK_REFERENCE)
                                            FROM TRSYSTEM012
                                            where RISK_RISK_TYPE = 21000036 
                                            and RISK_RECORD_STATUS not in (10200005,10200006));
    Goto Process_End;
END IF;

If numinfotype = REFGETSPOTDATE then
numcode := gconst.fncxmlextract(xmldoc,'Param/CounterParty', numcode);
dattemp := gconst.fncxmlextract(xmldoc,'Param/AsOnDate', dattemp); 
Glog.log_write('EXTRACTING SPOT DATE FOR AS ON DATE ');
dattemp1 := pkgforexprocess.fncGetSpotDate(numcode, dattemp);
open gencursor for 
Select dattemp1 "SpotDate" from dual;
Goto Process_End;
END IF;

if numInfoType = REFBANKCHARGEABLES then
    varOperation := 'Extracting Bank Charges Calculated';
--    varTemp := GConst.fncXMLExtract(xmlDoc, 'VoucherEvent',varTemp);
--    varQuery := '//' || varEntity  || '/ROW/LocalBank' || varValue;          
--    varTemp1 := GConst.fncXMLExtract(xmlDoc, varQuery,varTemp, GConst.TYPENODEPATH);
--    varQuery := '//' || varEntity  || '/ROW/LimitReference' || varValue;          
--    varDummy := GConst.fncXMLExtract(xmlDoc, varQuery,varTemp, GConst.TYPENODEPATH);
    delete from  tftemp015D;
   -- INSERT INTO TEMP1 VALUES ('CURSOR CALLED');
 --   PKGFOREXPROCESS.prcgetchargeamount(PARAMDATA, numerror);
--    select aloc_other_reference 
--      into varDummy
--      from tftran015b
--      where aloc_reference_number = varDummy;

    open GenCursor for
    select chgc_charge_type ChargeType, chgc_charge_amount ChargeAmount
      from trtemp015D ;
--      where chgc_bank_code = varTemp1
--      and chgc_charge_event = varTemp
--      and chgc_limit_reference = varDummy;

    Goto Process_End;
  End if;



 if  numinfotype = REFBANKACCOUNTNUMBER   then
       varOperation := 'Extracting Bank Account Number';

begin    
        varQuery := '//CommandSet/LocalBank' ;          
        numCode := GConst.fncXMLExtract(xmlDoc, varQuery,numCode, GConst.TYPENODEPATH);
     exception   when others then
         numCode:=0;
     end ;

--        Open GenCursor for
--          SELECT lbbl_account_number AS ACCOUNTNUMBER
--          from trmaster306A
--          WHERE LBBL_BANK_CODE = NUMCODE;
--               and lbBL_record_status not in(GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--        Goto Process_End;
  END IF;

  if numInfoType = REFBANKCHARGELINKENTITY then    
    varOperation := 'Extracting Entity Name  from tfsystem002 where menu_parent_id=59 i.e Banking Process menu';    
    Open GenCursor for 
         select menu_description as "Name",
           menu_program_unit as "ID"
           from Clouddb_Master.trsystem002
           where menu_parent_id in(select menu_menu_id from Clouddb_Master.trsystem002 where menu_parent_id in(19))
           and menu_program_unit in (select actl_program_unit from trsystem006
                                      where actl_record_Status not in(10200005,10200006)
                                      and ACTL_GROUP_CODE >= 14200001
                                      and ACTL_GROUP_CODE in (select user_group_code from Clouddb_Global.trsystem022 
                                                               where user_record_Status not in (10200005,10200006)
                                                               and USER_GROUP_CODE>=14200001)) --- assume that 14200010 above are user Groups -- Changed 14200010 to 14200001

           and menu_program_unit is not null;
        Goto Process_End;
  End if;

If numinfotype = REFGETENTITYCOLUMNS then
    varTemp1 := gconst.fncxmlextract(xmldoc,'Param/TableSynonym', varTemp1);        
    Glog.log_write('EXTRACTING COLUMNS FROM 999 FOR ' || varTemp );

    open gencursor for 
        SELECT FLDP_XML_FIELD "Id",
        FLDP_LABEL_TEXT "Description",
        FLDP_DATA_TYPE "DataType",
        to_char(FLDP_PICK_GROUP) "PickGroup"
        --, FLDP_COLUMN_NAME "Description" 
        from trsystem999 WHERE FLDP_TABLE_SYNONYM = varTemp1
        AND FLDP_RECORD_STATUS NOT IN (10200005, 10200006)
        UNION 
        SELECT '99999' "Id",
        'Not Available' "Description",
        'NA' "DataType",
        '0' "PickGroup"
        from dual
        UNION 
        SELECT '99998' "Id",
        'Not Applicable' "Description",
        'NA' "DataType",
        '0' "PickGroup"
        from dual;
    Goto Process_End;
END IF;

If numinfotype = REFGETALLOWEDFILETYPES then          
    Glog.log_write('EXTRACTING FILE TYPES' );

    open gencursor for 
        select FILE_EXTENTION_SHORT "FileTypes" 
        from CloudDB_Master.TRSYSTEM026
        where FILE_RECORD_STATUS not in (10200005,10200006);
    Goto Process_End;
END IF;

if numinfotype =REFGETFORWARDDEALDATA then
begin
varTemp1 := gconst.fncxmlextract(xmldoc,'Param/DealNumber', varTemp1);
exception   when others then
         varTemp1:=null;
end ;
OPEN Gencursor FOR 
        SELECT rownum "Rownum",
             QUOT_COUNTER_PARTY "CounterParty",
             pkgreturncursor.fncgetdescription(QUOT_COUNTER_PARTY,2) "CounterPartyDesc",
             QUOT_SPOT_RATE "SpotRate",
             QUOT_FORWARD_PERIMUM "ForwardPremium",
             QUOT_MARGIN_RATE "MarginRate",            
             QUOT_ALLIN_RATE "AllInRate",
             QUOT_USER_REMARKS "UserRemarks"
            from trtran001A
            where QUOT_DEAL_NUMBER = varTemp1
            AND QUOT_RECORD_STAUTS NOT IN (10200005,10200006);
 Goto Process_End; 
end if;

--ADDED BY SUPRIYA ON 14/06/2021
If numinfotype = REFGETBRANCHACCOUNTDETAILS then          
    numcode := gconst.fncxmlextract(xmldoc,'Param/BankCode', numcode);  
    numcode1 := gconst.fncxmlextract(xmldoc,'Param/BranchCode', numcode1);  
    open gencursor for 
       select to_char(Rownum) "Rownum", ACCT_ACCOUNT_NUMBER "AccountNumber",
              ACCT_ACCOUNT_TYPE "AccountTypeCode", ACCT_ACCOUNT_STATUS "AccountStatusCode",
              ACCT_CONCENTRATION_ACCOUNT "ConcentrationAccountCode",
              ACCT_REFERENCE_NUMBER "ReferenceNumber",
              pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_TYPE,1) "AccountType", 
              pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_STATUS,1) "AccountStatus",
              pkgreturncursor.fncgetdescription(ACCT_CONCENTRATION_ACCOUNT,1) "ConcentrationAccount",
              to_char('2') "RecordStatus"
        from trmaster306B
        where ACCT_BANK_CODE = numcode
        and ACCT_BRANCH_CODE = numcode1
        -- added By Manjunath To Check the status 
        and ACCT_ACCOUNT_STATUS=14400001
        and ACCT_RECORD_STATUS not in (10200005,10200006);
    Goto Process_End;
END IF;

if numinfotype =REFGETBANKCHARGEINITIALDATA then
begin
varTemp1 := gconst.fncxmlextract(xmldoc,'Param/ReferenceNo', varTemp1);
exception   when others then
         varTemp1:=null;
end ;
OPEN Gencursor FOR 
        SELECT CHAD_PERIOD_TYPE "PeriodType",
             pkgreturncursor.fncgetdescription(CHAD_PERIOD_TYPE,2) "PeriodTypeDesc",
             CHAD_PERIOD_UPTO "PeriodUpto",
             CHAD_AMOUNT_FROM "AmountFrom",
             CHAD_AMOUNT_UPTO "AmountUpto",            
             CHAD_PERCENT_TYPE "PercentType",
             pkgreturncursor.fncgetdescription(CHAD_PERCENT_TYPE,2) "PercentTypeDesc",
             CHAD_CHARGES_AMOUNT "ChargesAmount"
            from trtran015E
            where CHAD_REFERENCE_NUMBER = varTemp1
            AND CHAD_RECORD_STATUS NOT IN (10200005,10200006);
 Goto Process_End; 
end if;

if numinfotype = REFGETBANKCHARGECONFIG then

begin
varTemp := gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber', varTemp);
exception   when others then
         varTemp:=null;
end ;
--begin
--numCode := gconst.fncxmlextract(xmldoc,'Param/Company', numCode);
--exception   when others then
--         numCode:=0;
--end ;
--begin
--numCode1 := gconst.fncxmlextract(xmldoc,'Param/Location', numCode1);
--exception   when others then
--         numCode1:=0;
--end ;
--begin
--numCode2 := gconst.fncxmlextract(xmldoc,'Param/EventType', numCode2);
--exception   when others then
--         numCode2:=0;
--end ;

OPEN Gencursor FOR 
        SELECT 
        ACCD_ACCOUNT_HEAD "AccountHead",
        pkgreturncursor.fncgetdescription(ACCD_ACCOUNT_HEAD,2) "AccountHeadDesc",
          ACCD_CRDR_COLUMN "CreditDebit",
          pkgreturncursor.fncgetdescription(ACCD_CRDR_COLUMN,2) "CreditDebitDesc",
          ACCD_AMOUNT_COLUMN "Amount",
          ACCD_BANKREF_COLUMN "BankReference",
          ACCD_EXCHANGERATE_COLUMN "ExchangeRate",
          ACCD_CURRENCY_COLUMN "Currency",
          ACCD_VOUCHER_CURRENCY "VoucherCurrency",
          pkgreturncursor.fncgetdescription(ACCD_VOUCHER_CURRENCY,2) "VoucherCurrencyDesc",
          ACCD_CHNG_CRDR "ChangeCreditDebit",
          pkgreturncursor.fncgetdescription(ACCD_CHNG_CRDR,2) "ChangeCreditDebitDesc",
          ACCD_CHNG_CHRG_COLLECTION "ChangeRecordType",
          pkgreturncursor.fncgetdescription(ACCD_CHNG_CHRG_COLLECTION,2) "ChangeRecordTypeDesc"
          FROM TRCONFIG002A 
         -- WHERE ACCT_COMPANY_CODE = numCode AND ACCT_LOCATION_CODE = numCode1 
       --   AND ACCT_SYNONYM_NAME = varTemp AND ACCT_EVENT_TYPE = numCode2
       where ACCD_REFERENCE_NUMBER = varTemp
          AND ACCD_RECORD_STATUS NOT IN (10200005,10200006);
 Goto Process_End; 
end if;

if numinfotype = REFGETBNKCHRCONFFORSYNONYM then

    varTemp := gconst.fncxmlextract(xmldoc,'Param/SynonymName', varTemp);

    OPEN Gencursor FOR 
    SELECT
        to_char(ROWNUM)                                             "Rownum",
            --   pkgreturncursor.fncgetdescription(ACCT_ACCOUNT_HEAD,2) "AccountHead",
        accd_account_head                                           "AccountHead",
        pkgreturncursor.fncgetdescription(accd_account_head, 2)     "AccountHeadDesc",
        pkgreturncursor.fncgetdescription(acct_event_type, 2)       "ChargeTypeDesc",
        acct_event_type                                             "ChargeType",
        accd_crdr_column                                            "CreditDebit",
        pkgreturncursor.fncgetdescription(accd_crdr_column, 2)      "CreditDebitDesc",
        accd_amount_column                                          "Amount",
     --   accd_bankref_column                                         "BankReference",
        accd_exchangerate_column                                    "ExchangeRate",
    --    accd_currency_column                                        "Currency",
        acct_class_name                                             "ClassName",
        accd_voucher_currency                                       "VoucherCurrency",
        pkgreturncursor.fncgetdescription(accd_voucher_currency, 2) "VoucherCurrencyDesc",
        accd_chng_crdr                                              "ChangeCrDr",
        accd_chng_chrg_collection                                   "ChangeRecordType",
        acct_bank_field                                             "BankField",
        ACCT_COMPANY_FIELD                                          "CompanyField",
        ACCT_LOCATION_FIELD                                         "LocationField",
        ACCT_PORTFOLIO_FIELD                                        "PortfolioField",
        ACCT_SUBPORTFOLIO_FIELD                                     "SubportfolioField",
        ACCT_CURRENCY_FIELD                                         "CurrencyField",
        ACCT_BANKREFERENCE_FIELD                                    "BankreferenceField",
        ACCT_SYSTEMREFERENCE_FIELD                                     "SystemreferenceField",
        ACCT_SERIALNUMBER_FIELD                                         "SerialNumberField",
        ACCT_SUBSERIALNUMBER_FIELD                                    "SubserialNumberField"
    FROM
             trconfig002
        INNER JOIN trconfig002a ON acct_reference_number = accd_reference_number
    WHERE
            acct_synonym_name = vartemp
        AND acct_record_status NOT IN ( 10200005, 10200006 )
        AND accd_record_status NOT IN ( 10200005, 10200006 ); 
    Goto Process_End; 
end if;

if numinfotype = REFGETVOUCHERDISPLAYDATA then

    --varTemp := gconst.fncxmlextract(xmldoc,'Param/SynonymName', varTemp);

    OPEN Gencursor FOR 
    SELECT      
        '' "AccountHead",
        0 "CreditDebit",
        '' "CreditDebitDesc",
        0 "RecordType",
        '' "RecordTypeDesc",
        0 "VoucherFcy",
        0 "VoucherInr",
        0 "VoucherRate",
        '' "BankReference",
        0 "CurrencyCode",
        0 "CompanyField",
        0 "LocationField",
        0 "PortfolioField",
        0 "SubportfolioField",
        '' "SystemreferenceField",
        0 "SerialNumberField",
        0 "SubserialNumberField",
        0 "VoucherType",
        0 "LocalBank",
        0 "VoucherSerial",
        '' "VoucherNumber"
        FROM DUAL; 
    Goto Process_End; 
end if;

if numinfotype = REFVALIDATEBNKCHRCONFIG then

varTemp := gconst.fncxmlextract(xmldoc,'Param/SynonymName', varTemp);

begin
numCode := gconst.fncxmlextract(xmldoc,'Param/Company', numCode);
exception   when others then
         numCode:=0;
end ;
begin
numCode1 := gconst.fncxmlextract(xmldoc,'Param/Location', numCode1);
exception   when others then
         numCode1:=0;
end ;
begin
numCode2 := gconst.fncxmlextract(xmldoc,'Param/EventType', numCode2);
exception   when others then
         numCode2:=0;
end ;

OPEN Gencursor FOR 
        SELECT count(*) "Records"       
          FROM TRCONFIG002 
          WHERE ACCT_COMPANY_CODE = numCode AND ACCT_LOCATION_CODE = numCode1 
          AND ACCT_SYNONYM_NAME = varTemp AND ACCT_EVENT_TYPE = numCode2
          AND ACCT_RECORD_STATUS NOT IN (10200005,10200006);
 Goto Process_End; 
end if;

if numinfotype =refGetLettersList then

    varTemp := gconst.fncxmlextract(xmldoc,'Param/ProgramUnit', varTemp);  
    --numCode := gconst.fncxmlextract(xmldoc,'Param/BankCode', numCode);  
   -- numcode1 := gconst.fncxmlextract(xmldoc,'Param/BranchCode', numcode1);  

    OPEN Gencursor FOR 
        select wopm_report_id ReportID,wopm_serial_number SerialNumber,
               wopm_control_name ControlName,wopm_description_code DescriptionCode,
               WOPM_BANK_CODE BankCode,WOPM_COLBANK_CODE BankColumn,WOPM_ENABLE_TEMPLATE EnableLetterTemplate
        from trsystem003B 
        where WOPM_SYNONYM_NAME =varTemp
        and wopm_record_status not in (10200005,10200006);
     Goto Process_End; 
end if;

if numinfotype =REFFGETALLLETTERS then

   -- varTemp := gconst.fncxmlextract(xmldoc,'Param/ProgramUnit', varTemp);  
    --numCode := gconst.fncxmlextract(xmldoc,'Param/BankCode', numCode);  
   -- numcode1 := gconst.fncxmlextract(xmldoc,'Param/BranchCode', numcode1);  

    OPEN Gencursor FOR 
        select wopm_report_id ReportID,
               wopm_control_name ControlName, 
               WOPM_BANK_CODE BankCode,WOPM_COLBANK_CODE BankColumn,WOPM_SYNONYM_NAME SynonymName,wopm_record_status status
        from trsystem003B;

     Goto Process_End; 
end if;

if numinfotype =REFGETLETTERIMAGES then

   -- varTemp := gconst.fncxmlextract(xmldoc,'Param/ProgramUnit', varTemp);  
    --numCode := gconst.fncxmlextract(xmldoc,'Param/BankCode', numCode);  
   -- numcode1 := gconst.fncxmlextract(xmldoc,'Param/BranchCode', numcode1);  
    --  numCode1 := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode1);
        Glog.log_write('REFGETLETTERIMAGES  Entered' );
    OPEN Gencursor FOR 

        SELECT IMAG_DOCUMENT_TYPE,IMAG_DOCUMENT_IMAGE,IMAG_DOCUMENT_NAME from TFTRAN101  WHERE (IMAG_REFERENCE_SERIAL,IMAG_DOCUMENT_TYPE ) IN 
            (select MAX(IMAG_REFERENCE_SERIAL) ,IMAG_DOCUMENT_TYPE
            from TFTRAN101  
            WHERE IMAG_DOCUMENT_TYPE IN ('90100009','90100010')
         --   and IMAG_DOCUMENT_REFERENCE=numCode1
            AND imag_record_status NOT IN (10200006,10200005)
        AND IMAG_ENTITY_NAME='COMPANYMASTER' GROUP BY IMAG_DOCUMENT_TYPE);
     Goto Process_End; 
end if;



if numinfotype =refGetLettersParameter then

    varTemp := gconst.fncxmlextract(xmldoc,'Param/LetterID', varTemp);  
  --  numCode := gconst.fncxmlextract(xmldoc,'Param/BankCode', numCode);  
   -- numcode1 := gconst.fncxmlextract(xmldoc,'Param/BranchCode', numcode1);  

OPEN Gencursor FOR 
    select WOPA_LETTER_ID LetterID,WOPA_SERIAL_NUMBER SerialNumber,
           WOPA_PARAMETER_NAME ParameterName,WOPA_SOURCE_FIELD SourceField
     from trsystem003BD 
    where WOPA_LETTER_ID =varTemp
    --and WOPM_BANK_CODE=numCode
    and WOPA_RECORD_STAUTS not in (10200005,10200006);
 Goto Process_End; 
end if;
if numinfotype =refGetLetterDoc then
    varTemp := gconst.fncxmlextract(xmldoc,'Param/LetterID', varTemp);  
    varTemp1 := gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber', varTemp1);  
    numcode1 := gconst.fncxmlextract(xmldoc,'Param/ReferenceSerial', numcode1);  
    numcode2 := gconst.fncxmlextract(xmldoc,'Param/ReferenceSubSerial', numcode2);  
   -- numcode1 := gconst.fncxmlextract(xmldoc,'Param/BranchCode', numcode1);  
  begin
    select count(*)
      into numcode3
      from trsystem003BC
      where WOST_LETTER_ID=varTemp
      and WOST_REFERENCE_NUMBER=varTemp1
      and WOST_REFERENCE_SERIAL=decode(numcode1,0,WOST_REFERENCE_SERIAL,numcode1)
      and WOST_REFERENCE_SUBSERIAL=decode(numcode2,0,WOST_REFERENCE_SUBSERIAL,numcode2)
      and WOST_record_Status not in (10200005,10200006);
  exception 
    when others then 
      numcode3:=0;
  end;

   if numcode3=0 then 
      varOperation:= ' Check whether any changes happend to the Letter if Yes pick the same';
        select count(*)
          into numcode3
          from trsystem003BA
          where wopf_letter_id=varTemp
          and wopf_record_Status not in (10200005,10200006);


            Glog.log_write('clouddb_master numcode3' ||numcode3 );
      if (numcode3=0) then -- if no changes then pick from Master DB        
            OPEN Gencursor FOR 

                select wopf_letter_id LetterID,wopf_serial_number SerialNumber,
                       Wopf_Letter_HTML LetterHTML, '03BA' LetterFrom 
                       --from trsystem003BA
                 from clouddb_master.trsystem003BA
                  where wopf_letter_id=varTemp
                  and wopf_record_Status not in (10200005,10200006);
                   Glog.log_write('clouddb_master getting');
      else
            OPEN Gencursor FOR 
                select wopf_letter_id LetterID,wopf_serial_number SerialNumber,
                       Wopf_Letter_HTML LetterHTML,'03BA' LetterFrom 
                  from trsystem003BA
                  where wopf_letter_id=varTemp
                  and wopf_record_Status not in (10200005,10200006);      
      end if;
   else 
     OPEN Gencursor FOR 
        select m.WOST_LETTER_ID LetterID,m.WOST_SERIAL_NUMBER SerialNumber,
               m.WOST_LETTER_GENHTML LetterHTML,'03BC' LetterFrom 
         from trsystem003BC M
              where WOST_LETTER_ID=varTemp
              and WOST_REFERENCE_NUMBER=varTemp1
              and WOST_REFERENCE_SERIAL=decode(numcode1,0,WOST_REFERENCE_SERIAL,numcode1)
              and WOST_REFERENCE_SUBSERIAL=decode(numcode2,0,WOST_REFERENCE_SUBSERIAL,numcode2)
              and wost_serial_number= (select max(wost_serial_number)  
                                          from trsystem003BC sub
                                      where sub.WOST_LETTER_ID=m.WOST_LETTER_ID
                                      and sub.WOST_REFERENCE_NUMBER=m.WOST_REFERENCE_NUMBER
                                      and sub.WOST_REFERENCE_SERIAL=m.WOST_REFERENCE_SERIAL
                                      and sub.WOST_REFERENCE_SUBSERIAL=m.WOST_REFERENCE_SUBSERIAL
                                      and sub.wost_record_Status not in (10200005,10200006))
              and WOST_record_Status not in (10200005,10200006);
   end if;

 Goto Process_End; 
end if;

--if numinfotype =REFGETEDITLETTER then
--    varTemp := gconst.fncxmlextract(xmldoc,'Param/LetterID', varTemp);     
-- 
--    
--      varOperation:= ' Check whether any changes happend to the Letter if Yes pick the same';
--        select count(*)
--          into numcode3
--          from trsystem003BA
--          where wopf_letter_id=varTemp
--          and wopf_record_Status not in (10200005,10200006);
--      
--      
--            Glog.log_write('clouddb_master numcode3' ||numcode3 );
--      if (numcode3=0) then -- if no changes then pick from Master DB        
--            OPEN Gencursor FOR 
--           
--                select wopf_letter_id LetterID,wopf_serial_number SerialNumber,
--                       Wopf_Letter_HTML LetterHTML, '03BA' LetterFrom 
--                       --from trsystem003BA
--                 from clouddb_master.trsystem003BA
--                  where wopf_letter_id=varTemp
--                  and wopf_record_Status not in (10200005,10200006);
--                   Glog.log_write('clouddb_master getting');
--      else
--            OPEN Gencursor FOR 
--                select wopf_letter_id LetterID,wopf_serial_number SerialNumber,
--                       Wopf_Letter_HTML LetterHTML,'03BA' LetterFrom 
--                  from trsystem003BA
--                  where wopf_letter_id=varTemp
--                  and wopf_record_Status not in (10200005,10200006);      
--      end if;
--    
--  
--  
-- Goto Process_End; 
--end if;



if numinfotype =refGetLetterFields then
 varTemp := gconst.fncxmlextract(xmldoc,'Param/LetterID', varTemp); 
 numcode :=Gconst.fncxmlextract(xmldoc,'Param/LetterSerial', varTemp); 
OPEN Gencursor FOR 
    select woff_field_sourceName,woff_read_only, woff_field_Hide
      from trsystem003BB
      where woff_letter_id=varTemp
      and woff_serial_number=numcode
      and woff_record_Status not in (10200005,10200006);
 Goto Process_End; 
end if;

if numinfotype=REFGETCOPYOVERMASTER then       

OPEN Gencursor FOR 
  select COPY_synonym_name synonymName,menu_description MenuName 
    from Clouddb_master.trconfig100 
  inner join Clouddb_master.trsystem002 
  on copy_synonym_name=menu_program_unit
   where copy_record_status not in (10200005,10200006)
     and menu_record_Status not in (10200005,10200006);

  Goto Process_End; 
 end if;
if numinfotype=REFCOPYOVERMASTERKEY then       
 varTemp := gconst.fncxmlextract(xmldoc,'Param/ProgramUnit', varTemp); 
  open gencursor for 
      select FLDP_KEY_NO,FLDP_XML_FIELD
        from trsystem999 
       where fldp_table_synonym =varTemp
       and nvl(FLDP_KEY_NO,0)>0;
  Goto Process_End; 
 end if; 

--Added by Supriya on 12/08/2021
IF numinfotype = REFGETINTERESTREVALUATIONDATA THEN    
    dattemp1 := gconst.fncxmlextract(xmldoc,'Param/FromDate', dattemp1);
    dattemp2 := gconst.fncxmlextract(xmldoc,'Param/ToDate', dattemp2);

    OPEN Gencursor FOR 
        select rownum "Rownum", IIRM_IRS_NUMBER "SystemReference", IIRM_LEG_SERIAL "LEGSerial", 
        IIRM_SERIAL_NUMBER "SerialNumber", IIRM_SETTLEMENT_DATE "SettlementDate",
        IIRM_INTSTART_DATE "IntStartDate", IIRM_intEnd_Date "IntEndDate",
        IIRM_BASE_RATE "BaseRate", IIRM_SPREAD_RATE "SpreadRate", IIRM_FINAL_RATE "FinalRate",
        pkgreturncursor.fncgetdescription(IIRS_COMPANY_CODE,2) "Company", 
        pkgreturncursor.fncgetdescription(IIRS_LOCATION_CODE,2) "Location", 
        pkgreturncursor.fncgetdescription(IIRS_Portfolio,2) "Portfolio",
        pkgreturncursor.fncgetdescription(IIRS_SUB_PORTFOLIO,2) "SubPortfolio", 
        pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency", 
        pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) "Counterparty",
        IIRS_COMPANY_CODE "CompanyCode", IIRS_LOCATION_CODE "LocationCode", IIRS_Portfolio "PortfolioCode",
        IIRS_SUB_PORTFOLIO "SubPortfolioCode", IIRL_CURRENCY_CODE "CurrencyCode", IIRS_COUNTER_PARTY "CounterpartyCode",
        IIRS_NOTIONAL_AMOUNT "NotionalAmount", IIRS_EXECUTE_DATE "ExecuteDate", 
        --PKGIRS.fncIRSOutstanding(IIRM_INTSTART_DATE,IIRM_INTEND_DATE,IIRM_IRS_NUMBER,IIRM_LEG_SERIAL,IIRM_LEG_SERIAL) OutstandingAmount,
        0 "OutstandingAmount", 0 "InterestRate", 0 "InterestAmount",
        0 "OverrideInterestRate", 0 "OverrideInterestAmount",
        2 "RecordStatus"
        --       (case when IIRL_INT_TYPE= 80300001 then IIRL_FINAL_RATE else 
        --         PKGIRS.fncGetInterestRate(IIRM_INTSTART_DATE,sysdate,IIRS_RATE_TYPE,IIRL_CURRENCY_CODE) end) InterestRate,
        --         
        --       PKGIRS.fncIRSIntCalcforperiod(IIRM_INTSTART_DATE,IIRM_INTEND_DATE,IIRM_IRS_NUMBER,IIRM_LEG_SERIAL,
        --       (case when IIRL_INT_TYPE= 80300001 then IIRL_FINAL_RATE else 
        --         PKGIRS.fncGetInterestRate(IIRM_INTSTART_DATE,sysdate,IIRS_RATE_TYPE,IIRL_CURRENCY_CODE) end) ,
        --       IIRL_INTEREST_DAYSTYPE) InterestAmount
        from trtran091BB inner join trtran091B
        on IIRM_IRS_NUMBER=trtran091B.IIRS_IRS_NUMBER
        and IIRM_LEG_SERIAL=trtran091B.IIRS_LEG_SERIAL
        and IIRM_RECORD_STATUS not in (10200005,10200006)
        inner join TRTRAN091A
        on IIRM_IRS_NUMBER=IIRL_IRS_NUMBER
        and IIRM_LEG_SERIAL=IIRL_LEG_SERIAL
        and IIRL_RECORD_STATUS not in (10200005,10200006)
        inner join trtran091
        on trtran091.IIRS_IRS_NUMBER=IIRM_IRS_NUMBER
        and trtran091.iirs_record_Status not in (10200005,10200006)
        and IIRM_INTFIXING_DATE between dattemp1 and dattemp2;
    Goto Process_End;
end if;

IF numinfotype = REFGETPICKKEYVALUES THEN    

    OPEN Gencursor FOR 
       select pick_key_value "KeyValue",
               pick_Short_description "Description",
               pick_Short_description "ShortDescription",
               pick_long_description "LongDescription",
               pick_key_group "PickKeyGroup"
          from pickupmaster
          where pick_key_number > 0
          and pick_key_group in (146,238)
          and pick_record_status not in (10200006)
            order by pick_key_value;
    Goto Process_End;
end if;

IF numinfotype = REFGETACCOUNTNUMBERS THEN    
   -- The Below exception handling is to take care of incase if we want to get the All bank accounts 
   -- irrespective of Bank Code 
    BEGIN
    numcode1 := gconst.fncxmlextract(xmldoc,'Param/BankCode', numcode1); 

    EXCEPTION 
      WHEN OTHERS THEN 
       numcode1:=30699999;
    END;

    BEGIN
    numcode1 := gconst.fncxmlextract(xmldoc,'Param/LocalBank', numcode1); 

    EXCEPTION 
      WHEN OTHERS THEN 
       numcode1:=30699999;
    END;


    BEGIN
    numcode2 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numcode2); 

    EXCEPTION 
      WHEN OTHERS THEN 
       numcode2:=30299999;
    END;
    OPEN Gencursor FOR 
--       SELECT BRNH_ACCOUNT_NUMBER "Key",
--         BRNH_ACCOUNT_NUMBER "Value"
--        FROM TRMASTER306A 
--        WHERE BRNH_BANK_CODE = numcode1
--        AND BRNH_ACCOUNT_NUMBER IS NOT NULL
--        AND BRNH_RECORD_STATUS NOT IN (10200005, 10200006);

SELECT ACCT_ACCOUNT_NUMBER "ID",
         ACCT_ACCOUNT_NUMBER "Name",
         pkgreturncursor.fncgetdescription(ACCT_BANK_CODE, 2)  "Bank",
         BRNH_SHORT_DESCRIPTION "Branch",
         pkgreturncursor.fncgetdescription(BRNH_LOCATION_CODE, 2)  "Location",
      BRNH_ADDRESS_1||','||BRNH_ADDRESS_2||','||BRNH_ADDRESS_3||','||BRNH_ADDRESS_4  "Address"
        FROM TRMASTER306B INNER JOIN TRMASTER306A
        ON ACCT_BRANCH_CODE = BRNH_PICK_CODE
        WHERE ACCT_BANK_CODE = decode(numcode1,30699999,ACCT_BANK_CODE,numcode1)
       -- AND BRNH_LOCATION_CODE = decode(numcode2,30299999,BRNH_LOCATION_CODE,numcode2
       and ((BRNH_LOCATION_CODE = 30299999) or (BRNH_LOCATION_CODE = decode(numcode2,30299999,BRNH_LOCATION_CODE,numcode2)))
        AND ACCT_ACCOUNT_NUMBER IS NOT NULL
        AND ACCT_RECORD_STATUS NOT IN (10200005, 10200006)
        and ACCT_ACCOUNT_STATUS =14400001;
    Goto Process_End;
end if;

 if numinfotype=REFCOPYOVERMASTERDATA  then 
  varTemp := gconst.fncxmlextract(xmldoc,'Param/ProgramUnit', varTemp); 



      Glog.Log_Write(' Constructing Select Statement ');
     select  Listagg((case when ((fldp_pick_group > 0) and (fldp_key_no>0)) then
                    'pkgReturnCursor.fncGetDescription(' ||  fldp_column_name || ', Decode(' ||FLDP_DESCRIPTION_TYPE || ',92100001,1,92100002,2) ) as '||
                    '"' || FLDP_XML_FIELD ||  '_Desc" , ' || fldp_Column_name || ' as "' || FLDP_XML_FIELD ||  '"'
                    when (fldp_pick_group > 0) then 
                    'pkgReturnCursor.fncGetDescription(' ||  fldp_column_name || ', Decode(' ||FLDP_DESCRIPTION_TYPE || ',92100001,1,92100002,2) ) as "' ||  FLDP_XML_FIELD || '"'
                     else   FLDP_COLUMN_NAME || ' as "' || FLDP_XML_FIELD || '"'  end),' , ')
          within group (order by nvl(FLDP_TAB_NUMBER,0) ,nvl(FLDP_FIELD_SORT,0))
      into varTemp4
    from trsystem999 where fldp_table_synonym =varTemp
    and ((FLDP_DISPLAY_YN=12400001) or ( FLDP_DISPLAY_YN=12400002 or
       nvl(FLDP_KEY_NO,0)>0))


--    and fldp_show_yn=12400001
--    and nvl(FLDP_TAB_NUMBER,0) !=0
--    and nvl(FLDP_FIELD_SORT,0) !=0
    order by nvl(FLDP_TAB_NUMBER,0) ,nvl(FLDP_FIELD_SORT,0);

    select FLDP_COLUMN_NAME
      into varReference
    from trsystem999 
    where fldp_table_synonym =varTemp
    and FLDP_XML_FIELD ='RecordStatus';
--    
--    numcode:= length(varTemp1);
--    
--    varTemp1:= substr(varTemp1,0,numcode-3);

    Glog.Log_Write(' Constructing Where Condition ');

           select listagg( 'B1.' || fldp_column_name || ' = B2.' || fldp_column_name  ,' and ')
                  within group (order by FLDP_KEY_NO)
            into varTemp3
        from trsystem999 
       where fldp_table_synonym =varTemp
         and nvl(FLDP_KEY_NO,0)>0
         and fldp_record_Status not in (10200005,10200006);

--     numcode:= length(varTemp3);
--    
--    varTemp3:= substr(varTemp3,0,numcode-5);

   varTemp5:= ' select ' || varTemp4 || ' from Clouddb_master.'|| varTemp ||' B1 ' ||
              ' where not exists( select '|| '''' || 'x' || '''' || ' from ' || varTemp || ' B2 ' ||
              ' where ' || varTemp3 || ')' ||
             -- ' and ' || varReference ||  ' not in (10200005,10200006))' ||
              ' and ' || varReference ||  ' not in (10200005,10200006)' ;

   GLog.Log_Write (    varTemp5);           
   open GenCursor
     for varTemp5;
    Goto Process_End;   
 end if;

 if numInfoType = REFCURRENTACCOUNT then
    varOperation := 'Getting Cursor for Current Account Transactions';
    varTemp := GConst.fncXMLExtract(xmlDoc, 'Param/VoucherReference',
              varTemp);
    numTemp := GConst.fncXMLExtract(xmlDoc, 'Param/ReferenceSerial',
              numTemp);
    numCode := GConst.fncXMLExtract(xmlDoc, 'Param/VoucherEvent',
              numCode);
    if numaction in (GCONST.CONFIRMLOAD ,GCONST.CONFIRMSAVE) Then
        open Gencursor for
          select bcac_voucher_number VoucherNumber, bcac_local_bank LocalBank, bcac_crdr_code CrdrCode,
            bcac_account_head AccountHead, bcac_voucher_type VoucherType,
            bcac_record_type RecordType, bcac_voucher_currency CurrencyCode,
            bcac_voucher_reference VoucherReference,
            bcac_reference_serial ReferenceSerial, bcac_voucher_fcy VoucherFcy,
            bcac_voucher_rate VoucherRate, bcac_voucher_inr VoucherInr,
            bcac_voucher_detail VoucherDetail, bcac_local_merchant LocalMerchant,
            bcac_account_number AccountNumber
            from CurrentAccountMaster
            where bcac_voucher_reference = varTemp
            and bcac_reference_serial = numTemp
            and bcac_voucher_type in (numCode ,24800032)
            and BCAC_VOUCHER_DATE= (select max(BCAC_VOUCHER_DATE) from  CurrentAccountMaster
                  where bcac_voucher_reference = varTemp
                  and bcac_reference_serial = numTemp
                  and bcac_voucher_type in (numCode ,24800032)
                  and bcac_record_status  <> 10200003)
            and bcac_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id = varUserid )
            and bcac_record_status <> 10200003;
     else
          open Gencursor for
          select bcac_voucher_number "VoucherNumber", 
          bcac_local_bank "LocalBank", 
          bcac_crdr_code "CrdrCode",
          pkgreturncursor.fncgetdescription(bcac_crdr_code,2) "CrdrDesc",
            bcac_account_head "AccountHead", 
            pkgreturncursor.fncgetdescription(bcac_account_head,2) "AccountHeadDesc",
            bcac_voucher_type "VoucherType",
            bcac_record_type "RecordType",
            pkgreturncursor.fncgetdescription(bcac_record_type,2) "RecordTypeDesc",
            BCAC_BANK_REFERENCE "BankReference",
            BCAC_COMPANY_CODE "CompanyField",
            BCAC_LOCATION_CODE "LocationField",       
            bcac_voucher_currency "CurrencyCode",
            bcac_voucher_reference "SystemreferenceField",
           -- bcac_voucher_reference "VoucherReference",
            bcac_reference_serial "SerialNumberField", 
            bcac_voucher_fcy "VoucherFcy",
            bcac_voucher_rate "VoucherRate", 
            bcac_voucher_inr "VoucherInr",
            bcac_voucher_detail "VoucherDetail", 
            bcac_local_merchant "LocalMerchant",
            bcac_account_number "AccountNumber"
            from CurrentAccountMaster
            where bcac_voucher_reference = varTemp
            and bcac_reference_serial = numTemp
            and bcac_voucher_type in (numCode ,24800032)
            and BCAC_VOUCHER_DATE= (select max(BCAC_VOUCHER_DATE) from  CurrentAccountMaster
                  where bcac_voucher_reference = varTemp
                  and bcac_reference_serial = numTemp
                  and bcac_voucher_type in (numCode ,24800032)
                  and bcac_record_status not in ( GConst.STATUSDELETED,GConst.STATUSINACTIVE))
            and bcac_Company_Code in( select usco_company_code from trsystem022a
                                        where UPPER(usco_user_id) = varUserid )
            and bcac_record_status not in ( GConst.STATUSDELETED,GConst.STATUSINACTIVE);
     end if;
    Goto Process_End;
  End if;

  if numInfoType = REFGETVOUCHERS then
    varOperation := 'Getting Cursor for Current Account Transactions';
    datTemp := GConst.fncXMLExtract(xmlDoc, 'Param/FromDate',
              datTemp);
    datTemp1 := GConst.fncXMLExtract(xmlDoc, 'Param/ToDate',
              datTemp1);
    numCode1 := GConst.fncXMLExtract(xmlDoc, 'Param/CounterParty',
              numCode1);
    numCode := GConst.fncXMLExtract(xmlDoc, 'Param/VoucherEvent',
              numCode);  
    numCode2 := GConst.fncXMLExtract(xmlDoc, 'Param/ConfirmUnConfirm',
              numCode2);
     open Gencursor for
          select to_char(rownum) "Rownum",
          bcac_voucher_number "VoucherNumber", 
          bcac_local_bank "LocalBank", 
          bcac_crdr_code "CrdrCode",
          pkgreturncursor.fncgetdescription(bcac_crdr_code,2) "CrdrDesc",
            bcac_account_head "AccountHead", 
            pkgreturncursor.fncgetdescription(bcac_account_head,2) "AccountHeadDesc",
            bcac_voucher_type "VoucherType",
            bcac_record_type "RecordType",
            pkgreturncursor.fncgetdescription(bcac_record_type,2) "RecordTypeDesc",
            BCAC_BANK_REFERENCE "BankReference",
            BCAC_COMPANY_CODE "CompanyField",
            BCAC_LOCATION_CODE "LocationField", 
            pkgreturncursor.fncgetdescription(BCAC_COMPANY_CODE,2) "CompanyFieldDesc",
            pkgreturncursor.fncgetdescription(BCAC_LOCATION_CODE,2) "LocationFieldDesc",
            bcac_voucher_currency "CurrencyCode",
            bcac_voucher_reference "SystemreferenceField",
           -- bcac_voucher_reference "VoucherReference",
            bcac_reference_serial "SerialNumberField", 
            bcac_voucher_fcy "VoucherFcy",
            bcac_voucher_rate "VoucherRate", 
            bcac_voucher_inr "VoucherInr",
            bcac_voucher_detail "VoucherDetail", 
            bcac_local_merchant "LocalMerchant",
            bcac_account_number "AccountNumber"
            from CurrentAccountMaster
            where 
            --BCAC_LOCAL_MERCHANT = numCode1
            --bcac_voucher_reference = varTemp
          --  and bcac_reference_serial = numTemp
             bcac_voucher_type in (numCode ,24800032)
            and BCAC_VOUCHER_DATE between datTemp and datTemp1
            and ((numCode2 = 93400001 and bcac_record_status != 10200003) or (numCode2 = 93400002 and bcac_record_status = 10200003))
            and bcac_Company_Code in( select usco_company_code from trsystem022a
                                        where UPPER(usco_user_id) = varUserid )
            and bcac_record_status not in ( GConst.STATUSDELETED,GConst.STATUSINACTIVE);

    Goto Process_End;
  End if;


 if numInfoType = REFGETJOBSTATUS then
    varOperation := 'Getting Cursor for Current Account Transactions';
    datTemp := GConst.fncXMLExtract(xmlDoc, 'Param/FromDate', datTemp);
    datTemp1 := GConst.fncXMLExtract(xmlDoc, 'Param/ToDate',  datTemp1);
     GLOG.Log_write('REFGETJOBSTATUS.. date');
     open Gencursor for

      select Sjob_Job_number JobNumber,Sjob_Serial_number SerialNumber, 
          pkgreturncursor.fncGetDescription( SJOB_JOB_TORUN,1) JobType, Status JOBStatus,
          Sjob_User_Remarks Remarks, pkgreturncursor.fncGetDescription(Sjob_Frequency_Type,1) JobFrequency,
          pkgreturncursor.fncGetDescriptionMulti(Sjob_Frequency_WDays,1) ScheduleWeekDays,
         TO_CHAR(REQ_START_DATE,'DD-MM-RR HH24:MI:SS') ReqStartDate,
          Actual_start_Date StartDate,
          Run_Duration RunDuration,
          Additional_Info JobComments

          from trjob002 left outer join (select * from USER_SCHEDULER_JOB_RUN_DETAILS Ma
             where log_id in 
             (select max(log_id) from USER_SCHEDULER_JOB_RUN_DETAILS su
               where ma.Job_name=su.job_name))
          on  SJOB_JOB_NUMBER || '_' || SJOB_Serial_number =JOB_NAME 
          where SJOB_record_status not in (10200005,10200006)
          and trunc(Actual_start_Date) between datTemp and datTemp1
      union all    
      select Sjob_Job_number JobNumber,Sjob_Serial_number SerialNumber, 
          pkgreturncursor.fncGetDescription( SJOB_JOB_TORUN,1) JobType,
          pkgreturncursor.fncGetDescription(LJOB_JOB_STATUS,1) JOBStatus,
          Sjob_User_Remarks Remarks, pkgreturncursor.fncGetDescription(Sjob_Frequency_Type,1) JobFrequency,
        pkgreturncursor.fncGetDescriptionMulti(Sjob_Frequency_WDays,1) ScheduleWeekDays,
       null ReqStartDate,
        trunc(LJOB_RUN_DATE) StartDate,
        null RunDuration,
        LJOB_JOB_REMARKS JobComments
        from trjob002 left outer join trjob001
         on  SJOB_JOB_NUMBER || '_' || SJOB_Serial_number =LJOB_JOB_NUMBER 
          where SJOB_record_status not in (10200005,10200006)  
          and LJOB_RUN_DATE between datTemp and datTemp1;
    Goto Process_End;
  End if;


 if numInfoType = REFGETJOBSTATUSDETAILS then
    varOperation := 'Getting Cursor for Current Account Transactions';
    datTemp := GConst.fncXMLExtract(xmlDoc, 'Param/FromDate', datTemp);
    datTemp1 := GConst.fncXMLExtract(xmlDoc, 'Param/ToDate',  datTemp1);
     varReference  := GConst.fncXMLExtract(xmlDoc, 'Param/JobNumber', varReference);
     GLOG.Log_write('REFGETJOBSTATUSDETAILS.. date'|| varReference);
     open Gencursor for
  select Sjob_Job_number JobNumber,Sjob_Serial_number, pkgreturncursor.fncGetDescription( SJOB_JOB_TORUN,2) JobType,
          Sjob_User_Remarks Remarks, pkgreturncursor.fncGetDescription(Sjob_Frequency_Type,1) JobFrequency,
          pkgreturncursor.fncGetDescriptionMulti(Sjob_Frequency_WDays,1) ScheduleWeekDays,
          Status JOBStatus,
          Actual_start_Date StartDate,
          Run_Duration RunDuration,
          Additional_Info JobComments
          from trjob002 left outer join USER_SCHEDULER_JOB_RUN_DETAILS
          on  SJOB_JOB_NUMBER || '_' || SJOB_Serial_number =JOB_NAME 
          where SJOB_record_status not in (10200005,10200006)
          and Sjob_Job_number =varReference
          and trunc(Actual_start_Date) between datTemp and datTemp1
            union all
         select Sjob_Job_number JobNumber,Sjob_Serial_number, pkgreturncursor.fncGetDescription( SJOB_JOB_TORUN,2) JobType,
          Sjob_User_Remarks Remarks, pkgreturncursor.fncGetDescription(Sjob_Frequency_Type,1) JobFrequency,
        pkgreturncursor.fncGetDescriptionMulti(Sjob_Frequency_WDays,1) ScheduleWeekDays,
        pkgreturncursor.fncGetDescription(LJOB_JOB_STATUS,1) JOBStatus,
        trunc(LJOB_RUN_DATE) StartDate,
        null RunDuration,
        LJOB_JOB_REMARKS JobComments
          from trjob002 left outer join trjob001
          on  SJOB_JOB_NUMBER || '_' || SJOB_Serial_number =LJOB_JOB_NUMBER 
          where SJOB_record_status not in (10200005,10200006)
          and Sjob_Job_number =varReference
          and LJOB_RUN_DATE between datTemp and datTemp1;

     Goto Process_End;
 end if; 

 if numInfoType = REFJOBRUN then
    varOperation := 'Getting Cursor for Current Account Transactions';
    varReference  := GConst.fncXMLExtract(xmlDoc, 'Param/JobNumber', varReference);
    numTemp := GConst.fncXMLExtract(xmlDoc, 'Param/SerialNumber',  numTemp);
    varOperation:= 'Calling the Run Job for ' || varReference || ' Serial ' ||numTemp;
    pkgalerts.prcRunJob(varReference,numTemp);
   Goto dummy_cursor;
 end if; 

IF numinfotype = REFGETBANKFORBROKER THEN    
    numcode1 := gconst.fncxmlextract(xmldoc,'Param/BrokerCode', numcode1);   
    OPEN Gencursor FOR 
        select CBRK_LOCAL_BANKS "BankCode" from trmaster502 
        where CBRK_PICK_CODE = numcode1
        AND CBRK_RECORD_STATUS NOT IN (10200005, 10200006);       
    Goto Process_End;
end if;

if numinfotype = REFGETPICKGROUPDATA then
    numCode := gconst.fncxmlextract(xmldoc,'Param/PickGroup', numCode);    

    OPEN Gencursor FOR 
        select Pick_short_description "Desc", pick_long_description "Name", pick_key_value "ID" 
        from trmaster001 
        --inner join trsystem008
       -- on pick_key_value = EREL_ENTITY_RELATION
        where pick_record_status not in (10200005,10200006)
        --and EREL_RECORD_STATUS not in (10200005,10200006)
        --and EREL_RELATION_TYPE = numCode
        and PICK_KEY_GROUP = numCode
        AND PICK_KEY_NUMBER != 0;
--        and PICK_COMPANY_CODE in ( select usco_company_code from trsystem022a
--                                    where upper(usco_user_id) = varUserid
--                                    AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--        and PICK_LOCATION_CODE in ( select USLO_ENTITY from trsystem022d
--                                    where UPPER(USLO_USER_ID) = varUserid
--                                    and USLO_RECORD_STATUS NOT IN (10200005,10200006));   
    Goto Process_End; 
end if;

if numinfotype = REFGETFORWARDDEALAMOUNT then
    numCode := gconst.fncxmlextract(xmldoc,'Param/ReversalType', numCode);    
    numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocalBank', numCode1);
    numCode2 := gconst.fncxmlextract(xmldoc,'Param/TradeCurrency', numCode2);
    datTemp := gconst.fncxmlextract(xmldoc,'Param/MaturityDate', datTemp);
    numCode3 := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode1);
    numCode5 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode2);
    --numCode4 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode2);

         SELECT decode(EXTY_INFLOW_OUTFLOW,17300002, 25300002,17300001,25300001)
                 into numCode4 FROM TRMASTER259 
                 WHERE EXTY_PICK_CODE=numCode
                 AND exty_record_status not in (10200005,10200006);

    GLog.Log_Write('EXTY_PICK_CODE'|| numCode4);
    OPEN Gencursor FOR 
              SELECT  nvl(SUM(OUTSTANDINGBASE),0) "OUTSTANDINGBASE"
              FROM VEWOUTSTANDINGFORWARD 
              WHERE BUYSELLCODE =numCode4
             -- and COUNTERPARTYCODE=numCode1
              and BASECURRENCYCODE=numCode2
              and MATURITY>= datTemp
              and CompanyCode= numCode3
              and LocationCode=numCode5;

    Goto Process_End; 
end if;

if numinfotype = REFGETIMPORANDEXPORT then
 numCode := gconst.fncxmlextract(xmldoc,'Param/ReversalType', numCode);  
   OPEN Gencursor FOR 
 SELECT decode(EXTY_INFLOW_OUTFLOW,17300002, 31700001, 17300001, 31700002) "Type"
                 FROM TRMASTER259
                 WHERE EXTY_PICK_CODE=numCode
                 AND exty_record_status not in (10200005,10200006);
   Goto Process_End; 
end if;

if numinfotype = REFGETVOUCHERFORREFERENCE then
 numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);  
  numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode1);  
   numCode2 := gconst.fncxmlextract(xmldoc,'Param/VoucherType', numCode2);  
    numtemp := gconst.fncxmlextract(xmldoc,'Param/ReferenceSerial', numtemp); 
     varReference := gconst.fncxmlextract(xmldoc,'Param/VoucherReference', varReference);
   OPEN Gencursor FOR 
         select rownum "Rownum",
        BCAC_ACCOUNT_HEAD  "AccountHead",
        pkgreturncursor.fncGetDescription(BCAC_ACCOUNT_HEAD,2)  "AccountHeadDesc",
        BCAC_VOUCHER_FCY "VoucherFcy",
        BCAC_VOUCHER_RATE "ExRate",
        BCAC_VOUCHER_INR "VoucherLcy",
        BCAC_VOUCHER_INR "OverrideAmount",
        BCAC_CRDR_CODE "CrDr",
        BCAC_VOUCHER_NUMBER "VoucherNumber"
        from TRTRAN008 WHERE BCAC_VOUCHER_REFERENCE = varReference
        AND BCAC_COMPANY_CODE = numCode
        AND BCAC_LOCATION_CODE = numCode1
        AND BCAC_VOUCHER_TYPE = numCode2
        AND BCAC_REFERENCE_SERIAL = numtemp
        AND BCAC_RECORD_STATUS not in (10200003,10200005,10200006);
   Goto Process_End; 
end if;

if numinfotype = REFGETVOUCHERSUMMARY then
 numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);  
  numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode1);  
   numCode2 := gconst.fncxmlextract(xmldoc,'Param/VoucherType', numCode2);  
    numtemp := gconst.fncxmlextract(xmldoc,'Param/ReferenceSerial', numtemp); 
     varReference := gconst.fncxmlextract(xmldoc,'Param/VoucherReference', varReference);
   OPEN Gencursor FOR 
         select SUM(BCAC_VOUCHER_INR) "VoucherInr",
        BCAC_COMPANY_CODE "CompanyCode", 
        pkgreturncursor.fncgetdescription(BCAC_COMPANY_CODE,2) "CompanyCode_Desc",
        BCAC_LOCATION_CODE "LocationCode", 
        pkgreturncursor.fncgetdescription(BCAC_LOCATION_CODE,2) "LocationCode_Desc",
        BCAC_LOCAL_BANK "LocalBank", 
        pkgreturncursor.fncgetdescription(BCAC_LOCAL_BANK,2) "LocalBank_Desc",
        BCAC_VOUCHER_REFERENCE "VoucherReference", 
        BCAC_ACCOUNT_NUMBER "AccountNumber",       
       BCAC_VOUCHER_TYPE "VoucherType",
       pkgreturncursor.fncgetdescription(BCAC_VOUCHER_TYPE,2) "VoucherType_Desc",
        BCAC_REFERENCE_SERIAL "ReferenceSerial"
        FROM TRTRAN008 
        WHERE BCAC_VOUCHER_REFERENCE = varReference
        AND BCAC_COMPANY_CODE = numCode
        AND BCAC_LOCATION_CODE = numCode1
        AND BCAC_VOUCHER_TYPE = numCode2
        AND BCAC_REFERENCE_SERIAL = numtemp
        AND BCAC_RECORD_STATUS NOT IN (10200005, 10200006)
        GROUP BY BCAC_COMPANY_CODE, BCAC_LOCATION_CODE,BCAC_VOUCHER_TYPE,BCAC_VOUCHER_DATE,BCAC_VOUCHER_REFERENCE,
        BCAC_REFERENCE_SERIAL,BCAC_ACCOUNT_NUMBER,BCAC_LOCAL_BANK;

   Goto Process_End; 
end if;

--if numinfotype = REFGETVOUCHERSUMMARY then
-- numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);  
--  numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode1);  
--   numCode2 := gconst.fncxmlextract(xmldoc,'Param/VoucherType', numCode2);  
--    numtemp := gconst.fncxmlextract(xmldoc,'Param/ReferenceSerial', numtemp); 
--     varReference := gconst.fncxmlextract(xmldoc,'Param/VoucherReference', varReference);
--   OPEN Gencursor FOR 
--         select SUM(BCAC_VOUCHER_INR) "VoucherInr",
--        BCAC_COMPANY_CODE "CompanyCode", 
--        pkgreturncursor.fncgetdescription(BCAC_COMPANY_CODE,2) "CompanyCode_Desc",
--        BCAC_LOCATION_CODE "LocationCode", 
--        pkgreturncursor.fncgetdescription(BCAC_LOCATION_CODE,2) "LocationCode_Desc",
--        BCAC_LOCAL_BANK "LocalBank", 
--        pkgreturncursor.fncgetdescription(BCAC_LOCAL_BANK,2) "LocalBank_Desc",
--        BCAC_VOUCHER_REFERENCE "VoucherReference", 
--        BCAC_ACCOUNT_NUMBER "AccountNumber",       
--       BCAC_VOUCHER_TYPE "VoucherType",
--       pkgreturncursor.fncgetdescription(BCAC_VOUCHER_TYPE,2) "VoucherType_Desc",
--        BCAC_REFERENCE_SERIAL "ReferenceSerial"
--        FROM TRTRAN008 
--        WHERE BCAC_VOUCHER_REFERENCE = varReference
--        AND BCAC_COMPANY_CODE = numCode
--        AND BCAC_LOCATION_CODE = numCode1
--        AND BCAC_VOUCHER_TYPE = numCode2
--        AND BCAC_REFERENCE_SERIAL = numtemp
--        AND BCAC_RECORD_STATUS NOT IN (10200005, 10200006)
--        GROUP BY BCAC_COMPANY_CODE, BCAC_LOCATION_CODE,BCAC_VOUCHER_TYPE,BCAC_VOUCHER_DATE,BCAC_VOUCHER_REFERENCE,
--        BCAC_REFERENCE_SERIAL,BCAC_ACCOUNT_NUMBER,BCAC_LOCAL_BANK;
--        
--   Goto Process_End; 
--end if;

if numinfotype = REFGETVOUCHERFORDATE then
 numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);  
  numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode1);
  numCode2 := gconst.fncxmlextract(xmldoc,'Param/Portfolio', numCode2);  
  numCode3 := gconst.fncxmlextract(xmldoc,'Param/SubPortfolio', numCode3);
 --  numCode2 := gconst.fncxmlextract(xmldoc,'Param/VoucherType', numCode2);  
   -- numtemp := gconst.fncxmlextract(xmldoc,'Param/ReferenceSerial', numtemp); 
  varReference := gconst.fncxmlextract(xmldoc,'Param/VoucherReference', varReference);
   dattemp := gconst.fncxmlextract(xmldoc,'Param/VoucherDate', dattemp); 
   numCode4:=gconst.fncxmlextract(xmldoc,'Param/VoucherSerial', numCode4); 

   OPEN Gencursor FOR 
         select rownum "Rownum",
        BCAC_ACCOUNT_HEAD  "AccountHead",
        pkgreturncursor.fncGetDescription(BCAC_ACCOUNT_HEAD,2)  "AccountHeadDesc",
        pkgfxcurrentinterface.fncAccountHead(BCAC_LOCAL_BANK,BCAC_ACCOUNT_HEAD,BCAC_CRDR_CODE,
             BCAC_VOUCHER_CURRENCY,BCAC_PORTFOLIO_CODE,BCAC_VOUCHER_TYPE,
             BCAC_ACCOUNT_NUMBER,26899999,BCAC_COMPANY_CODE,BCAC_LOCATION_CODE,BCAC_SUBPORTFOLIO_CODE) "ERPGLCode",
        BCAC_VOUCHER_FCY "VoucherFcy",
        BCAC_VOUCHER_RATE "ExRate",
        BCAC_VOUCHER_INR "VoucherLcy",
        BCAC_VOUCHER_INR "OverrideAmount",
        pkgreturncursor.fncGetDescription(BCAC_CRDR_CODE,2) "CrDr",
        BCAC_CRDR_CODE "CrDrCode",
        BCAC_VOUCHER_NUMBER "VoucherNumber",
        BCAC_REFERENCE_SERIAL "ReferenceSerial",
        BCAC_VOUCHER_REFERENCE "VoucherReference",
        BCAC_VOUCHER_TYPE "VoucherType",
        pkgreturncursor.fncGetDescription(BCAC_VOUCHER_TYPE,2)  "VoucherTypeDesc",
        pkgreturncursor.fncGetDescription(BCAC_LOCATION_CODE,2)  "LocationCodeDesc",
        pkgreturncursor.fncGetDescription(BCAC_PORTFOLIO_CODE,2)  "PortfolioDesc",
        pkgreturncursor.fncGetDescription(BCAC_COMPANY_CODE,2)  "CompanyCodeDesc",
        pkgreturncursor.fncGetDescription(BCAC_SUBPORTFOLIO_CODE,2)  "SubPortfolioDesc",
        BCAC_VOUCHER_DATE "VoucherDate"
        from TRTRAN008 WHERE BCAC_VOUCHER_DATE = dattemp
        AND BCAC_COMPANY_CODE = numCode
        AND BCAC_LOCATION_CODE = numCode1
        AND BCAC_PORTFOLIO_CODE = numCode2
        AND BCAC_SUBPORTFOLIO_CODE = numCode3
        AND BCAC_VOUCHER_REFERENCE = varReference
        and bcac_reference_serial = numcode4
    --    AND BCAC_VOUCHER_TYPE = numCode2
    --    AND BCAC_REFERENCE_SERIAL = numtemp 
        AND (
        (numUserActionType = Gconst.UNCONFIRMLOAD AND BCAC_RECORD_STATUS IN (10200003)) 
        OR (numUserActionType = Gconst.CONFIRMLOAD AND BCAC_RECORD_STATUS NOT IN (10200003)))                                               
        AND BCAC_RECORD_STATUS NOT in (10200005,10200006);
   Goto Process_End; 
end if;

--if numinfotype = REFGETVOUCHERFORDATE then
-- numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);  
--  numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode1);
--  numCode2 := gconst.fncxmlextract(xmldoc,'Param/Portfolio', numCode2);  
--  numCode3 := gconst.fncxmlextract(xmldoc,'Param/SubPortfolio', numCode3);
-- --  numCode2 := gconst.fncxmlextract(xmldoc,'Param/VoucherType', numCode2);  
--   -- numtemp := gconst.fncxmlextract(xmldoc,'Param/ReferenceSerial', numtemp); 
--   --  varReference := gconst.fncxmlextract(xmldoc,'Param/VoucherReference', varReference);
--   dattemp := gconst.fncxmlextract(xmldoc,'Param/VoucherDate', dattemp); 
--   
--   OPEN Gencursor FOR 
--         select rownum "Rownum",
--        BCAC_ACCOUNT_HEAD  "AccountHead",
--        pkgreturncursor.fncGetDescription(BCAC_ACCOUNT_HEAD,2)  "AccountHeadDesc",
--        BCAC_VOUCHER_FCY "VoucherFcy",
--        BCAC_VOUCHER_RATE "ExRate",
--        BCAC_VOUCHER_INR "VoucherLcy",
--        BCAC_VOUCHER_INR "OverrideAmount",
--        pkgreturncursor.fncGetDescription(BCAC_CRDR_CODE,2) "CrDr",
--        BCAC_VOUCHER_NUMBER "VoucherNumber",
--        BCAC_REFERENCE_SERIAL "ReferenceSerial",
--        BCAC_VOUCHER_REFERENCE "VoucherReference",
--        BCAC_VOUCHER_TYPE "VoucherType",
--        pkgreturncursor.fncGetDescription(BCAC_VOUCHER_TYPE,2)  "VoucherTypeDesc",
--        pkgreturncursor.fncGetDescription(BCAC_LOCATION_CODE,2)  "LocationCodeDesc",
--        pkgreturncursor.fncGetDescription(BCAC_PORTFOLIO_CODE,2)  "PortfolioDesc",
--        pkgreturncursor.fncGetDescription(BCAC_COMPANY_CODE,2)  "CompanyCodeDesc",
--        pkgreturncursor.fncGetDescription(BCAC_SUBPORTFOLIO_CODE,2)  "SubPortfolioDesc",
--        BCAC_VOUCHER_DATE "VoucherDate"
--        from TRTRAN008 WHERE BCAC_VOUCHER_DATE = dattemp
--        AND BCAC_COMPANY_CODE = numCode
--        AND BCAC_LOCATION_CODE = numCode1
--        AND BCAC_PORTFOLIO_CODE = numCode2
--        AND BCAC_SUBPORTFOLIO_CODE = numCode3
--    --    AND BCAC_VOUCHER_TYPE = numCode2
--    --    AND BCAC_REFERENCE_SERIAL = numtemp 
--        AND (
--        (numUserActionType = Gconst.UNCONFIRMLOAD AND BCAC_RECORD_STATUS IN (10200003)) 
--        OR (numUserActionType = Gconst.CONFIRMLOAD AND BCAC_RECORD_STATUS NOT IN (10200003)))                                               
--        AND BCAC_RECORD_STATUS NOT in (10200005,10200006);
--   Goto Process_End; 
--end if;

--if numinfotype = REFGETMTMACCOUNTS then
-- numCode := gconst.fncxmlextract(xmldoc,'Param/PeriodType', numCode);  
--  numCode1 := gconst.fncxmlextract(xmldoc,'Param/AccountType', numCode1); 
--   dattemp := gconst.fncxmlextract(xmldoc,'Param/EffectiveDate', dattemp); 
--   
--   OPEN Gencursor FOR 
--         SELECT rownum "Rownum",
--            AMTM_REFERENCE_NUMBER "ReferenceNumber",
--            pkgreturncursor.fncGetDescription(AMTM_PERIOD_TYPE,2) "PeriodType",
--            AMTM_EFFECTIVE_DATE "EffectiveDate",
--            pkgreturncursor.fncGetDescription(AMTM_ACCOUNTING_TYPE,2) "AccountingType"
--            FROM TRSYSTEM958 
--            WHERE AMTM_EFFECTIVE_DATE = datTemp
--            and AMTM_ACCOUNTING_TYPE = numCode1 
--            and AMTM_PERIOD_TYPE = numCode
--            AND AMTM_RECORD_STATUS NOT in (10200005,10200006);
--   Goto Process_End; 
--end if;
if numinfotype = REFGETMTMACCOUNTS then
 numCode := gconst.fncxmlextract(xmldoc,'Param/PeriodType', numCode);  
  numCode1 := gconst.fncxmlextract(xmldoc,'Param/AccountType', numCode1); 
   dattemp := gconst.fncxmlextract(xmldoc,'Param/EffectiveDate', dattemp); 

   OPEN Gencursor FOR 
         SELECT rownum "Rownum",
            AMTM_REFERENCE_NUMBER "ReferenceNumber",
            pkgreturncursor.fncGetDescription(AMTM_PERIOD_TYPE,2) "PeriodType",
            AMTM_EFFECTIVE_DATE "EffectiveDate",
            pkgreturncursor.fncGetDescription(AMTM_ACCOUNTING_TYPE,2) "AccountingType",
            pkgreturncursor.fncGetDescriptionMulti(AMTM_LOCATION_CODE,2) "Entities",
            pkgreturncursor.fncGetDescriptionMulti(AMTM_COMPANY_CODE,2) "Companies",
            pkgreturncursor.fncGetDescriptionMulti(AMTM_PORTFOLIO_CODES,2) "Books",
            pkgreturncursor.fncGetDescriptionMulti(AMTM_SUBPORTFOLIO_CODES,2) "Strategies",
            pkgreturncursor.fncGetDescriptionMulti(AMTM_PASSING_LEVEL,2) "PassingLevel1",
            pkgreturncursor.fncGetDescriptionMulti(AMTM_PASSING_LEVEL2,2) "PassingLevel2",
            pkgreturncursor.fncGetDescription(AMTM_BUY_SELL,2) "BuySell"
            FROM TRSYSTEM958 
            WHERE AMTM_EFFECTIVE_DATE <= datTemp
            and AMTM_ACCOUNTING_TYPE = numCode1 
            and AMTM_PERIOD_TYPE = numCode
            AND AMTM_RECORD_STATUS NOT in (10200005,10200006);
   Goto Process_End; 
end if;

--if numinfotype = REFGETMTMACCOUNTSFORREFERENCE then
-- varReference := gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber', varReference);  
--   
--   OPEN Gencursor FOR 
--        select CASH_AMTM_REFERENCENUMBER "ReferenceNumber",
--        pkgreturncursor.fncGetDescription(CASH_COMPANY_CODE,2) "Company",
--        pkgreturncursor.fncGetDescription(CASH_LOCATION_CODE,2) "Location",
--        pkgreturncursor.fncGetDescription(CASH_PORTOFLIO_CODE,2) "Book",
--        pkgreturncursor.fncGetDescription(CASH_SUBPORTFOLIO_CODE,2) "Strategy",
--        pkgreturncursor.fncGetDescription(CASH_BANK_CODE,2) "Bank",
--        pkgreturncursor.fncGetDescription(CASH_CURRENCY_PAIR,2) "Currency",
--        pkgreturncursor.fncGetDescription(CASH_PROFIT_LOSSCODE,2) "ProfitLoss",
--        CASH_EFFECTIVE_PL "EffectivePL",
--        CASH_INEFFECTIVE_PL "InEffectivePL",
--        pkgreturncursor.fncGetDescription(CASH_ACCOUNTING_TYPE,2) "AccountingType",
--        pkgreturncursor.fncGetDescription(AHPM_ACCOUNT_TYPE,2) "AccountType",
--        AHPM_CREATE_DATE "CreateDate",
--        varUserid "User",
--        CASH_COMPANY_CODE "CompanyCode",
--        CASH_LOCATION_CODE "LocationCode",
--        CASH_PORTOFLIO_CODE "BookCode",
--        CASH_SUBPORTFOLIO_CODE "StrategyCode",
--        CASH_BANK_CODE "BankCode",
--        CASH_CURRENCY_PAIR "CurrencyCode",
--        CASH_PROFIT_LOSSCODE "ProfitLossCode",
--        CASH_EFFECTIVE_PL "EffectivePLCode",
--        CASH_INEFFECTIVE_PL "InEffectivePLCode",
--        CASH_ACCOUNTING_TYPE "AccountingTypeCode"
--        from trtran111 
--        inner join trtran111_main on 
--        --AHPM_PERIOD_TYPE = CASH_PERIOD_TYPE
--        --and AHPM_ACCOUNT_TYPE = CASH_ACCOUNTING_TYPE 
--       -- and trunc(AHPM_EFFECTIVE_DATE) = trunc(CASH_EFFECTIVE_DATE)--CASH_EFFECTIVE_DATE
--        instr(AHPM_AMTM_REFERENCENUMBER,CASH_AMTM_REFERENCENUMBER)>0 
--        where CASH_RECORD_STATUS NOT IN (10200005,10200006)
--        AND AHPM_RECORD_STATUS NOT IN (10200005,10200006)
--        AND AHPM_REFERENCE_NUMBER = varReference
--        AND CASH_COMPANY_CODE  in( select usco_company_code from trsystem022a
--                                                   where upper(usco_user_id) = varUserid
--                                                   AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
--        AND CASH_LOCATION_CODE IN ( select USLO_ENTITY from trsystem022d
--                                            where UPPER(USLO_USER_ID) = varUserid
--                                            and USLO_RECORD_STATUS NOT IN (10200005,10200006))
--        GROUP BY CASH_AMTM_REFERENCENUMBER,CASH_COMPANY_CODE,CASH_LOCATION_CODE,CASH_PORTOFLIO_CODE,CASH_SUBPORTFOLIO_CODE,
--        CASH_BANK_CODE,CASH_CURRENCY_PAIR,CASH_PROFIT_LOSSCODE,CASH_EFFECTIVE_PL,CASH_INEFFECTIVE_PL,
--        CASH_ACCOUNTING_TYPE,AHPM_ACCOUNT_TYPE,AHPM_CREATE_DATE;
--   Goto Process_End; 
--end if;


if numinfotype = REFGETMTMACCOUNTSFORREFERENCE then
 varReference := gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber', varReference);  

   OPEN Gencursor FOR 
        select CASH_AMTM_REFERENCENUMBER "ReferenceNumber",
        pkgreturncursor.fncGetDescription(CASH_COMPANY_CODE,2) "Company",
        pkgreturncursor.fncGetDescription(CASH_LOCATION_CODE,2) "Location",
        pkgreturncursor.fncGetDescription(CASH_PORTOFLIO_CODE,2) "Book",
        pkgreturncursor.fncGetDescription(CASH_SUBPORTFOLIO_CODE,2) "Strategy",
        pkgreturncursor.fncGetDescription(CASH_BANK_CODE,2) "Bank",
        pkgreturncursor.fncGetDescription(CASH_CURRENCY_PAIR,2) "Currency",
        pkgreturncursor.fncGetDescription(CASH_PROFIT_LOSSCODE,2) "ProfitLoss",
        CASH_EFFECTIVE_PL "EffectivePL",
        CASH_INEFFECTIVE_PL "InEffectivePL",
        pkgreturncursor.fncGetDescription(CASH_ACCOUNTING_TYPE,2) "AccountingType",
        pkgreturncursor.fncGetDescription(AHPM_ACCOUNT_TYPE,2) "AccountType",
        AHPM_CREATE_DATE "CreateDate",
        varUserid "User",
        CASH_COMPANY_CODE "CompanyCode",
        CASH_LOCATION_CODE "LocationCode",
        CASH_PORTOFLIO_CODE "BookCode",
        CASH_SUBPORTFOLIO_CODE "StrategyCode",
        CASH_BANK_CODE "BankCode",
        CASH_CURRENCY_PAIR "CurrencyCode",
        CASH_PROFIT_LOSSCODE "ProfitLossCode",
        CASH_EFFECTIVE_PL "EffectivePLCode",
        CASH_INEFFECTIVE_PL "InEffectivePLCode",
        CASH_ACCOUNTING_TYPE "AccountingTypeCode"
        from trtran111 
        inner join trtran111_main on 
        --AHPM_PERIOD_TYPE = CASH_PERIOD_TYPE
        --and AHPM_ACCOUNT_TYPE = CASH_ACCOUNTING_TYPE 
       -- and trunc(AHPM_EFFECTIVE_DATE) = trunc(CASH_EFFECTIVE_DATE)--CASH_EFFECTIVE_DATE
        instr(AHPM_AMTM_REFERENCENUMBER,CASH_AMTM_REFERENCENUMBER)>0 
        where CASH_RECORD_STATUS NOT IN (10200005,10200006)
        AND AHPM_RECORD_STATUS NOT IN (10200005,10200006)
        AND AHPM_REFERENCE_NUMBER = varReference
        AND CASH_COMPANY_CODE  in( select usco_company_code from trsystem022a
                                                   where upper(usco_user_id) = varUserid
                                                   AND USCO_RECORD_STATUS NOT IN (10200005,10200006))
        AND CASH_LOCATION_CODE IN ( select USLO_ENTITY from trsystem022d
                                            where UPPER(USLO_USER_ID) = varUserid
                                            and USLO_RECORD_STATUS NOT IN (10200005,10200006))
        GROUP BY CASH_AMTM_REFERENCENUMBER,CASH_COMPANY_CODE,CASH_LOCATION_CODE,CASH_PORTOFLIO_CODE,CASH_SUBPORTFOLIO_CODE,
        CASH_BANK_CODE,CASH_CURRENCY_PAIR,CASH_PROFIT_LOSSCODE,CASH_EFFECTIVE_PL,CASH_INEFFECTIVE_PL,
        CASH_ACCOUNTING_TYPE,AHPM_ACCOUNT_TYPE,AHPM_CREATE_DATE;
   Goto Process_End; 
end if;


if numinfotype = REFGETMTMACCOUNTDETAIL then
    varReference := gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber', varReference);
    numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);  
    numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode1);
    numCode2 := gconst.fncxmlextract(xmldoc,'Param/Portfolio', numCode2);  
    numCode3 := gconst.fncxmlextract(xmldoc,'Param/SubPortfolio', numCode3);
    numCode4 := gconst.fncxmlextract(xmldoc,'Param/CounterParty', numCode4);  
    numCode5 := gconst.fncxmlextract(xmldoc,'Param/CurrencyPair', numCode5);
    numCode6 := gconst.fncxmlextract(xmldoc,'Param/AccountingType', numCode6);  
    numCode7 := gconst.fncxmlextract(xmldoc,'Param/PLCode', numCode7);

   OPEN Gencursor FOR
        select CASH_EFFECTIVE_DATE "EffectiveDate",
        pkgreturncursor.fncGetDescription(CASH_COMPANY_CODE,2) "Company",
        pkgreturncursor.fncGetDescription(CASH_LOCATION_CODE,2) "Location",
        CASH_USER_ID "UserID",
        CASH_DEAL_NUMBER "DealNumber",
        CASH_DEAL_SERIAL "DealSerial",
        CASH_REFERENCE_DATE "ReferenceDate",
        CASH_BASE_AMOUNT "BaseAmount",
        CASH_OTHER_AMOUNT "OtherAmount",
        CASH_SPOT_RATE "SpotRate",
        CASH_FOWARD_RATE "ForwardRate",
        CASH_MARGIN_RATE "MarginRate",
        CASH_CRYSTAL_AMOUNT "CrystalAmount",
        CASH_UNCRYSTAL_AMOUNT "UnCrystalAmount",
        CASH_CRYSTAL_RATE "CrystalRate",
        CASH_UNCRYSTAL_RATE "UnCrystalRate",
        CASH_MTM_RATE "MtmRate",
        CASH_MTM_AMOUNT "MtmAmount",
        CASH_DISCOUNTING_DAYS "DiscountingDays",
        CASH_INTEREST_RATE "InterestRate",
        CASH_DISCOUNTING_FACTOR "DiscountingFactor",
        CASH_DISCOUNTING_AMOUNT "DiscountingAmount",
        CASH_DEALER_ID "DealerID",
        pkgreturncursor.fncGetDescription(CASH_COUNTER_PARTY,2) "CounterParty",
        CASH_DUE_DATE "DueDate",
        CASH_MATURITY_MONTH "MaturityMonth",
        pkgreturncursor.fncGetDescription(CASH_HEDGE_TRADE,2) "HedgeTrade",
        pkgreturncursor.fncGetDescription(CASH_BUY_SELL,2) "BuySell",
        pkgreturncursor.fncGetDescription(CASH_SWAP_OUTRIGHT,2) "SwapOutright",
        pkgreturncursor.fncGetDescription(CASH_DEAL_TYPE,2) "DealType",
        CASH_EXCHANGE_RATE "ExchangeRate",
        pkgreturncursor.fncGetDescription(CASH_FINAL_RUN,2) "FinalRun",
        CASH_OUTSTANDING_FCY "OutstandingFcy",
        CASH_CRY_MTMDISCOUNT "CrystalizedMtmDiscounting",
        CASH_UNCRY_MTMDISCOUNT "UncrystalizedMtmDiscounting",
        CASH_INEFFECTIVE_PL "IneffectivePL",
        CASH_EFFECTIVE_PL "EffectivePL",
        CASH_BANK_REFERENCE "BankReference",
        pkgreturncursor.fncGetDescription(CASH_ACCOUNTING_TYPE,2) "AccountingType",
        CASH_BS_AMOUNT "BsAmount",
        CASH_PL_AMOUNT "PlAmount",
        pkgreturncursor.fncGetDescription(CASH_DIRECT_INDIRECT,2) "DirectIndirect",
        pkgreturncursor.fncGetDescription(CASH_FUNCTIONAL_CURRENCY,2) "FunctionalCurrency",
        CASH_FUNCATIONAL_RATE "FunctionalRate",
        CASH_BS_AMOUNTFUNCTIONAL "BsAmountFunctional",
        CASH_PL_AMOUNTFUNCTIONAL "PlAmountFunctional",
        CASH_MTM_AMOUNTINFUNCTIONAL "MtmAmountFunctional",
        CASH_AMTM_REFERENCE "AmtmReference",
        CASH_MTM_FROM "MtmFrom",
        pkgreturncursor.fncGetDescription(CASH_PORTOFOLIO_CODE,2) "Book",
        pkgreturncursor.fncGetDescription(CASH_SUBPORTFOLIO_CODE,2) "Strategy",
        pkgreturncursor.fncGetDescription(CASH_CURRENCY_PAIR,2) "CurrencyPair",
        pkgreturncursor.fncGetDescription(CASH_PROFIT_LOSSCODE,2) "ProfitLoss",
        CASH_BANK_MTM "BankMTM",
        CASH_BANK_EFFECTIVEPL "BankEffectivePL",CASH_BANK_INEFFECTIVEPL "BankInEffectivePL"
        from TRTRAN111_DETAIL
        WHERE CASH_AMTM_REFERENCE= varReference
        AND CASH_COMPANY_CODE = decode(numCode,30199999,CASH_COMPANY_CODE,numCode)
        AND CASH_LOCATION_CODE= decode(numCode1,30299999,CASH_LOCATION_CODE,numCode1)
        AND CASH_PORTOFOLIO_CODE= decode(numCode2,33399999,CASH_PORTOFOLIO_CODE,numCode2)
        AND CASH_SUBPORTFOLIO_CODE=decode(numCode3,33899999,CASH_SUBPORTFOLIO_CODE,numCode3)
        AND CASH_COUNTER_PARTY= decode(numCode4,30699999,CASH_COUNTER_PARTY,numCode4)  
        AND CASH_CURRENCY_PAIR= decode(numCode5,25699999,CASH_CURRENCY_PAIR,numCode5)  
        AND CASH_ACCOUNTING_TYPE=decode(numCode6,29799999,CASH_ACCOUNTING_TYPE,numCode6)  
        AND CASH_PROFIT_LOSSCODE=decode(numCode7,30699999,CASH_PROFIT_LOSSCODE,numCode7)  
        AND CASH_RECORD_STATUS NOT IN (10200005,10200006);
   Goto Process_End;  
end if;

--if numinfotype = REFGETMTMACCOUNTDETAIL then
--    varReference := gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber', varReference); 
--    numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);  
--    numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode1);
--    numCode2 := gconst.fncxmlextract(xmldoc,'Param/Portfolio', numCode2);  
--    numCode3 := gconst.fncxmlextract(xmldoc,'Param/SubPortfolio', numCode3);
--    numCode4 := gconst.fncxmlextract(xmldoc,'Param/CounterParty', numCode4);  
--    numCode5 := gconst.fncxmlextract(xmldoc,'Param/CurrencyPair', numCode5);
--    numCode6 := gconst.fncxmlextract(xmldoc,'Param/AccountingType', numCode6);  
--    numCode7 := gconst.fncxmlextract(xmldoc,'Param/PLCode', numCode7);
--   
--   OPEN Gencursor FOR 
--        select CASH_EFFECTIVE_DATE "EffectiveDate",
--        pkgreturncursor.fncGetDescription(CASH_COMPANY_CODE,2) "Company",
--        pkgreturncursor.fncGetDescription(CASH_LOCATION_CODE,2) "Location",
--        CASH_USER_ID "UserID",
--        CASH_DEAL_NUMBER "DealNumber",
--        CASH_DEAL_SERIAL "DealSerial",
--        CASH_REFERENCE_DATE "ReferenceDate",
--        CASH_BASE_AMOUNT "BaseAmount",
--        CASH_OTHER_AMOUNT "OtherAmount",
--        CASH_SPOT_RATE "SpotRate",
--        CASH_FOWARD_RATE "ForwardRate",
--        CASH_MARGIN_RATE "MarginRate",
--        CASH_CRYSTAL_AMOUNT "CrystalAmount",
--        CASH_UNCRYSTAL_AMOUNT "UnCrystalAmount",
--        CASH_CRYSTAL_RATE "CrystalRate",
--        CASH_UNCRYSTAL_RATE "UnCrystalRate",
--        CASH_MTM_RATE "MtmRate",
--        CASH_MTM_AMOUNT "MtmAmount",
--        CASH_DISCOUNTING_DAYS "DiscountingDays",
--        CASH_INTEREST_RATE "InterestRate",
--        CASH_DISCOUNTING_FACTOR "DiscountingFactor",
--        CASH_DISCOUNTING_AMOUNT "DiscountingAmount",
--        CASH_DEALER_ID "DealerID",
--        pkgreturncursor.fncGetDescription(CASH_COUNTER_PARTY,2) "CounterParty",
--        CASH_DUE_DATE "DueDate",
--        CASH_MATURITY_MONTH "MaturityMonth",
--        pkgreturncursor.fncGetDescription(CASH_HEDGE_TRADE,2) "HedgeTrade",
--        pkgreturncursor.fncGetDescription(CASH_BUY_SELL,2) "BuySell",
--        pkgreturncursor.fncGetDescription(CASH_SWAP_OUTRIGHT,2) "SwapOutright", 
--        pkgreturncursor.fncGetDescription(CASH_DEAL_TYPE,2) "DealType",
--        CASH_EXCHANGE_RATE "ExchangeRate",
--        pkgreturncursor.fncGetDescription(CASH_FINAL_RUN,2) "FinalRun",
--        CASH_OUTSTANDING_FCY "OutstandingFcy",
--        CASH_CRY_MTMDISCOUNT "CrystalizedMtmDiscounting",
--        CASH_UNCRY_MTMDISCOUNT "UncrystalizedMtmDiscounting",
--        CASH_INEFFECTIVE_PL "IneffectivePL",
--        CASH_EFFECTIVE_PL "EffectivePL",
--        CASH_BANK_REFERENCE "BankReference",
--        pkgreturncursor.fncGetDescription(CASH_ACCOUNTING_TYPE,2) "AccountingType", 
--        CASH_BS_AMOUNT "BsAmount",
--        CASH_PL_AMOUNT "PlAmount",
--        pkgreturncursor.fncGetDescription(CASH_DIRECT_INDIRECT,2) "DirectIndirect",
--        pkgreturncursor.fncGetDescription(CASH_FUNCTIONAL_CURRENCY,2) "FunctionalCurrency",
--        CASH_FUNCATIONAL_RATE "FunctionalRate",
--        CASH_BS_AMOUNTFUNCTIONAL "BsAmountFunctional",
--        CASH_PL_AMOUNTFUNCTIONAL "PlAmountFunctional",
--        CASH_MTM_AMOUNTINFUNCTIONAL "MtmAmountFunctional",
--        CASH_AMTM_REFERENCE "AmtmReference",
--        CASH_MTM_FROM "MtmFrom",
--        pkgreturncursor.fncGetDescription(CASH_PORTOFOLIO_CODE,2) "Book",
--        pkgreturncursor.fncGetDescription(CASH_SUBPORTFOLIO_CODE,2) "Strategy",
--        pkgreturncursor.fncGetDescription(CASH_CURRENCY_PAIR,2) "CurrencyPair",
--        pkgreturncursor.fncGetDescription(CASH_PROFIT_LOSSCODE,2) "ProfitLoss",
--        CASH_BANK_MTM "BankMTM",
--        CASH_BANK_EFFECTIVEPL "BankEffectivePL",CASH_BANK_INEFFECTIVEPL "BankInEffectivePL"
--        from TRTRAN111_DETAIL 
--        WHERE CASH_AMTM_REFERENCE= varReference 
--        AND CASH_COMPANY_CODE = decode(numCode,30199999,CASH_COMPANY_CODE,numCode)
--        AND CASH_LOCATION_CODE= decode(numCode1,30299999,CASH_LOCATION_CODE,numCode1)
--        AND CASH_PORTOFOLIO_CODE= decode(numCode2,33399999,CASH_PORTOFOLIO_CODE,numCode2)
--        AND CASH_SUBPORTFOLIO_CODE=decode(numCode3,33899999,CASH_SUBPORTFOLIO_CODE,numCode3) 
--        AND CASH_COUNTER_PARTY= decode(numCode4,30699999,CASH_COUNTER_PARTY,numCode4)  
--        AND CASH_CURRENCY_PAIR= decode(numCode5,25699999,CASH_CURRENCY_PAIR,numCode5)  
--        AND CASH_ACCOUNTING_TYPE=decode(numCode6,29799999,CASH_ACCOUNTING_TYPE,numCode6)  
--        AND CASH_PROFIT_LOSSCODE=decode(numCode7,30699999,CASH_PROFIT_LOSSCODE,numCode7)  
--        AND CASH_RECORD_STATUS NOT IN (10200005,10200006);
--   Goto Process_End;  
--end if;


--if numinfotype = REFGETMTMACCOUNTDETAIL then
--    varReference := gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber', varReference); 
--    numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);  
--    numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode1);
--    numCode2 := gconst.fncxmlextract(xmldoc,'Param/Portfolio', numCode2);  
--    numCode3 := gconst.fncxmlextract(xmldoc,'Param/SubPortfolio', numCode3);
--    numCode4 := gconst.fncxmlextract(xmldoc,'Param/CounterParty', numCode4);  
--    numCode5 := gconst.fncxmlextract(xmldoc,'Param/CurrencyPair', numCode5);
--    numCode6 := gconst.fncxmlextract(xmldoc,'Param/AccountingType', numCode6);  
--    numCode7 := gconst.fncxmlextract(xmldoc,'Param/PLCode', numCode7);
--   
--   OPEN Gencursor FOR 
--        select CASH_EFFECTIVE_DATE "EffectiveDate",
--        pkgreturncursor.fncGetDescription(CASH_COMPANY_CODE,2) "Company",
--        pkgreturncursor.fncGetDescription(CASH_LOCATION_CODE,2) "Location",
--        CASH_USER_ID "UserID",
--        CASH_DEAL_NUMBER "DealNumber",
--        CASH_DEAL_SERIAL "DealSerial",
--        CASH_REFERENCE_DATE "ReferenceDate",
--        CASH_BASE_AMOUNT "BaseAmount",
--        CASH_OTHER_AMOUNT "OtherAmount",
--        CASH_SPOT_RATE "SpotRate",
--        CASH_FOWARD_RATE "ForwardRate",
--        CASH_MARGIN_RATE "MarginRate",
--        CASH_CRYSTAL_AMOUNT "CrystalAmount",
--        CASH_UNCRYSTAL_AMOUNT "UnCrystalAmount",
--        CASH_CRYSTAL_RATE "CrystalRate",
--        CASH_UNCRYSTAL_RATE "UnCrystalRate",
--        CASH_MTM_RATE "MtmRate",
--        CASH_MTM_AMOUNT "MtmAmount",
--        CASH_DISCOUNTING_DAYS "DiscountingDays",
--        CASH_INTEREST_RATE "InterestRate",
--        CASH_DISCOUNTING_FACTOR "DiscountingFactor",
--        CASH_DISCOUNTING_AMOUNT "DiscountingAmount",
--        CASH_DEALER_ID "DealerID",
--        pkgreturncursor.fncGetDescription(CASH_COUNTER_PARTY,2) "CounterParty",
--        CASH_DUE_DATE "DueDate",
--        CASH_MATURITY_MONTH "MaturityMonth",
--        pkgreturncursor.fncGetDescription(CASH_HEDGE_TRADE,2) "HedgeTrade",
--        pkgreturncursor.fncGetDescription(CASH_BUY_SELL,2) "BuySell",
--        pkgreturncursor.fncGetDescription(CASH_SWAP_OUTRIGHT,2) "SwapOutright", 
--        pkgreturncursor.fncGetDescription(CASH_DEAL_TYPE,2) "DealType",
--        CASH_EXCHANGE_RATE "ExchangeRate",
--        pkgreturncursor.fncGetDescription(CASH_FINAL_RUN,2) "FinalRun",
--        CASH_OUTSTANDING_FCY "OutstandingFcy",
--        CASH_CRY_MTMDISCOUNT "CrystalizedMtmDiscounting",
--        CASH_UNCRY_MTMDISCOUNT "UncrystalizedMtmDiscounting",
--        CASH_INEFFECTIVE_PL "IneffectivePL",
--        CASH_EFFECTIVE_PL "EffectivePL",
--        CASH_BANK_REFERENCE "BankReference",
--        pkgreturncursor.fncGetDescription(CASH_ACCOUNTING_TYPE,2) "AccountingType", 
--        CASH_BS_AMOUNT "BsAmount",
--        CASH_PL_AMOUNT "PlAmount",
--        pkgreturncursor.fncGetDescription(CASH_DIRECT_INDIRECT,2) "DirectIndirect",
--        pkgreturncursor.fncGetDescription(CASH_FUNCTIONAL_CURRENCY,2) "FunctionalCurrency",
--        CASH_FUNCATIONAL_RATE "FunctionalRate",
--        CASH_BS_AMOUNTFUNCTIONAL "BsAmountFunctional",
--        CASH_PL_AMOUNTFUNCTIONAL "PlAmountFunctional",
--        CASH_MTM_AMOUNTINFUNCTIONAL "MtmAmountFunctional",
--        CASH_AMTM_REFERENCE "AmtmReference",
--        CASH_MTM_FROM "MtmFrom",
--        pkgreturncursor.fncGetDescription(CASH_PORTOFOLIO_CODE,2) "Book",
--        pkgreturncursor.fncGetDescription(CASH_SUBPORTFOLIO_CODE,2) "Strategy",
--        pkgreturncursor.fncGetDescription(CASH_CURRENCY_PAIR,2) "CurrencyPair",
--        pkgreturncursor.fncGetDescription(CASH_PROFIT_LOSSCODE,2) "ProfitLoss"
--        from TRTRAN111_DETAIL 
--        WHERE CASH_AMTM_REFERENCE= varReference 
--        AND CASH_COMPANY_CODE = decode(numCode,30199999,CASH_COMPANY_CODE,numCode)
--        AND CASH_LOCATION_CODE= decode(numCode1,30299999,CASH_LOCATION_CODE,numCode1)
--        AND CASH_PORTOFOLIO_CODE= decode(numCode2,33399999,CASH_PORTOFOLIO_CODE,numCode2)
--        AND CASH_SUBPORTFOLIO_CODE=decode(numCode3,33899999,CASH_SUBPORTFOLIO_CODE,numCode3) 
--        AND CASH_COUNTER_PARTY= decode(numCode4,30699999,CASH_COUNTER_PARTY,numCode4)  
--        AND CASH_CURRENCY_PAIR= decode(numCode5,25699999,CASH_CURRENCY_PAIR,numCode5)  
--        AND CASH_ACCOUNTING_TYPE=decode(numCode6,29799999,CASH_ACCOUNTING_TYPE,numCode6)  
--        AND CASH_PROFIT_LOSSCODE=decode(numCode7,30699999,CASH_PROFIT_LOSSCODE,numCode7)  
--        AND CASH_RECORD_STATUS NOT IN (10200005,10200006);
--   Goto Process_End; 
--end if;

if numinfoType = REFGETDOCCOLUMNDATA then
      varOperation := 'Extracting attachment column details';
      numCode := gconst.fncXMLExtract(xmldoc,'Param/SynonymName', numCode); 

      SELECT EMIL_PROGRAMUNIT_VIEW, EMIL_PARENT_PROGRAMUNIT, EMIL_PROGRAMUNIT_VIEWSOURCE, EMIL_PARENT_PROGRAMUNITSOURCE
      into varTemp, varTemp1,numCode1,numCode2
      FROM TRMASTER148 WHERE EMIL_PICK_CODE = numCode
      and EMIL_RECORD_STATUS NOT IN (10200005, 10200006);

      open gencursor for 
      select rownum "Rownum", a.* from( 
      SELECT fldp_table_synonym "Synonym",
      fldp_xml_field "XMLField",
      FLDP_FIELD_SORT "SortOrder",
      FLDP_LABEL_TEXT "ColumnDisplayName"
      FROM TRSYSTEM999 
      WHERE fldp_columns_forimage = 'DocumentReference' 
      AND fldp_table_synonym IN (varTemp,varTemp1)
      UNION
      SELECT VIEW_VIEW_NAME "Synonym",
      VIEW_COLUMN_NAME "XMLField",
      VIEW_OREDER_BY "SortOrder",
      VIEW_DISPLAY_NAME "ColumnDisplayName"
       from trsystem999V   
        WHERE VIEW_VIEW_NAME IN (varTemp,varTemp1)
       -- AND VIEW_SHOW_YN='12400001') a;
       AND NVL(VIEW_DOCUMENT_REFERENCE,12400002) = 12400001
      UNION
      SELECT LOCL_DATA_NAME "Synonym",
      LOCL_DESTINATION_COLUMN "XMLField",
      LOCL_COLUMN_ID "SortOrder",
      LOCL_DISPLAY_NAME "ColumnDisplayName"
       from TRSYSTEM968  
        WHERE LOCL_DATA_NAME IN (varTemp,varTemp1)
       -- AND VIEW_SHOW_YN='12400001') a;
       AND LOCL_RECORD_STATUS not in(10200005,10200006)    
       ) a;
 GOTO PROCESS_END;
 --  end if;
 end if; 

 if numinfoType = REFGETDOCXMLFIELDDATA then
      varOperation := 'Extracting 967B Table Details';
      varTemp := gconst.fncXMLExtract(xmldoc,'ReferenceNo', varTemp); 
      open gencursor for 
        select rownum "Rownum", TREA_ATTACHEMENT_COLUMN "XMLField",
        TREA_SYNONYM_NAME "Synonym",
        TREA_ORDER_BY "SortOrder"        
        from trsystem967b inner join trsystem967
        on TREM_REFERENCE_NUMBER=TREA_REFERENCE_NUMBER
        and TREM_SERIAL_NUMBER = TREA_SERIAL_NUMBER
--        left outer  join trsystem999
--        on FLDP_TABLE_SYNONYM=TRED_SYNONYM_NAME
        where 
        --TERD_XML_FIELD=FLDP_XML_FIELD
      --  and FLDP_SHOW_YN='12400001'
         TREA_RECORD_STATUS NOT IN (10200005,10200006) 
       and TREM_RECORD_STATUS NOT IN (10200005,10200006) 
        and TREA_REFERENCE_NUMBER=varTemp;
 GOTO PROCESS_END;
 end if;

if numinfotype = REFGETEMAILTEMPLATE then
    varoperation := 'extracting Email template from table';    
    Begin
        numCode := upper(gconst.fncxmlextract(xmldoc,'Param/Email', numCode));
    Exception 
    when others then 
        numCode := 14899999;        
    end;

        open gencursor for
          select rownum "Rownum", TEMP_TEMPLATE_REFERENCE "ID", TEMP_SHORT_DESCRIPTION "Name", TEMP_LONG_DESCRIPTION "Description" 
            from trsystem965
            where temp_program_unit = numCode
            and TEMP_RECORD_STATUS not in (10200005,10200006);     
    goto process_end;
end if; 

--added by supriya on 21/02/2022
If numinfotype = REFGETFNCGETDESCRIPTIONMULTI then

    BEGIN
		vartemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/GroupBy',vartemp,GConst.TYPENODEPATH);

		select PKGRETURNCURSOR.fncGetDescriptionMulti(vartemp5, 1)
		into vartemp6 from dual;
    exception
		when others then
		vartemp6:='BaseCurrency,OtherCurrency,BuySell';
    end; 	

    open gencursor for 
        SELECT Upper(vartemp6) "GroupColumns" FROM DUAL;
    Goto Process_End;
END IF;

if numinfotype = REFGETPREMAMORTIZATIONDETAIL then
    varReference := gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber', varReference); 
    numCode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numCode);  
    numCode1 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode1);
    numCode2 := gconst.fncxmlextract(xmldoc,'Param/Portfolio', numCode2);  
    numCode3 := gconst.fncxmlextract(xmldoc,'Param/SubPortfolio', numCode3);
    numCode4 := gconst.fncxmlextract(xmldoc,'Param/CounterParty', numCode4);  
    numCode5 := gconst.fncxmlextract(xmldoc,'Param/CurrencyPair', numCode5);
    numCode6 := gconst.fncxmlextract(xmldoc,'Param/AccountingType', numCode6);  
    numCode7 := gconst.fncxmlextract(xmldoc,'Param/PLCode', numCode7);

   OPEN Gencursor FOR 
        SELECT  cash_effective_date "EffectiveDate", cash_amtm_reference "AmtmReference",  pkgreturncursor.fncGetDescription(CASH_COMPANY_CODE,2) "Company",
    pkgreturncursor.fncGetDescription(CASH_LOCATION_CODE,2) "Location",   
    pkgreturncursor.fncGetDescription(cash_portofolio_code,2) "Book",
    pkgreturncursor.fncGetDescription(CASH_SUBPORTFOLIO_CODE,2) "Strategy",
    cash_deal_number "DealNumber",
    pkgreturncursor.fncGetDescription(CASH_CURRENCY_PAIR,2) "CurrencyPair",
    pkgreturncursor.fncGetDescription(cash_account_code,2) "AccountCode",
    cash_user_id "UserID",   cash_deal_serial "DealSerial",
    CASH_REFERENCE_DATE "ReferenceDate",
        CASH_BASE_AMOUNT "BaseAmount",
        CASH_OTHER_AMOUNT "OtherAmount",
        CASH_SPOT_RATE "SpotRate",
        CASH_FOWARD_RATE "ForwardRate",
        CASH_MARGIN_RATE "MarginRate",

    cash_exchange_rate "ExchangeRate",    
    cash_outstanding_amount "OutstandingAmount",
     pkgreturncursor.fncGetDescription(cash_cumulative_yesno,2) "Cumulative_YN",
    cash_premium_fromdate "FromDate",
    cash_total_days "TotalDays",
    cash_premium_days "PremiumDays",
    cash_premium_rate "PremiumRate",
    cash_totalpremium_amount "TotalPremiumAmount",
    cash_premium_amount "PremiumAmount",
    cash_dealer_id "DealerID",
     pkgreturncursor.fncGetDescription(cash_counter_party,2) "Bank",
    cash_due_date "DueDate",
    pkgreturncursor.fncGetDescription(cash_hedge_trade,2) "HedgeTrade",
    pkgreturncursor.fncGetDescription(cash_buy_sell,2) "BuySell",
    cash_swap_outright "SwapOutright",
    pkgreturncursor.fncGetDescription(cash_deal_type,2) "DealType",
    pkgreturncursor.fncGetDescription(cash_record_status,2) "RecordStatus",
    pkgreturncursor.fncGetDescription(cash_accounting_type,2) "AccountingType",
    pkgreturncursor.fncGetDescription(cash_functional_currency,2) "FunctionalCurrency",
    cash_funcational_rate "FunctionalRate"
    FROM
    trtran111_premium
        WHERE CASH_AMTM_REFERENCE= varReference 
        AND CASH_COMPANY_CODE = decode(numCode,30199999,CASH_COMPANY_CODE,numCode)
        AND CASH_LOCATION_CODE= decode(numCode1,30299999,CASH_LOCATION_CODE,numCode1)
        AND CASH_PORTOFOLIO_CODE= decode(numCode2,33399999,CASH_PORTOFOLIO_CODE,numCode2)
        AND CASH_SUBPORTFOLIO_CODE=decode(numCode3,33899999,CASH_SUBPORTFOLIO_CODE,numCode3) 
        AND CASH_COUNTER_PARTY= decode(numCode4,30699999,CASH_COUNTER_PARTY,numCode4)  
        AND CASH_CURRENCY_PAIR= decode(numCode5,25699999,CASH_CURRENCY_PAIR,numCode5)  
        AND CASH_ACCOUNTING_TYPE=decode(numCode6,29799999,CASH_ACCOUNTING_TYPE,numCode6)  
      --  AND CASH_PROFIT_LOSSCODE=decode(numCode7,30699999,CASH_PROFIT_LOSSCODE,numCode7)  
        AND CASH_RECORD_STATUS NOT IN (10200005,10200006);
   Goto Process_End;  
end if;

if numinfotype = refHedgePosition then
     varOperation := 'NOP Dash Board Data Extract';
    BEGIN
        vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',vartemp,GConst.TYPENODEPATH);
    exception
        when others then
        vartemp:='ALL';
    end;

    BEGIN
        vartemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',vartemp,GConst.TYPENODEPATH);
    exception
        when others then
        vartemp1:='ALL';
    end;

    BEGIN
        vartemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',vartemp,GConst.TYPENODEPATH);
    exception
        when others then
        vartemp4:='ALL';
    end;    

    BEGIN
        vartemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',vartemp,GConst.TYPENODEPATH);
    exception
        when others then
        vartemp2:='ALL';
    end;    

    BEGIN
        vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',vartemp,GConst.TYPENODEPATH);
    exception
        when others then
        vartemp3:='ALL';
    end;    

    BEGIN
        datTemp:= GConst.fncXMLExtract(xmlDoc,'//Param/DateASON',datTemp,GConst.TYPENODEPATH);
    exception
        when others then
        datTemp:= datWorkdate;
    end; 

	BEGIN
		vartemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/GroupBy',vartemp,GConst.TYPENODEPATH);

		select PKGRETURNCURSOR.fncGetDescriptionMulti(vartemp5, 1)
		into vartemp6 from dual;

        select PKGRETURNCURSOR.fncReturnCursorgetdescriptionMulti(vartemp5, 1, 2)
        into vartemp7 from dual;
    exception
		when others then
		vartemp6:='BASECURRENCYCODE,OTHERCURRENCYCODE,BUYSELLCODE';
        vartemp7:='Pkgreturncursor.Fncgetdescription(BASECURRENCYCODE,2) as BaseCurrency_Desc,
        Pkgreturncursor.Fncgetdescription(OTHERCURRENCYCODE,2) as OtherCurrency_Desc,
        Pkgreturncursor.Fncgetdescription(BUYSELLCODE,2) as BuySell_Desc';
    end; 	
    GLOG.log_write('vartemp5 :- ' || vartemp5 ||' vartemp6:- ' || vartemp6 || ' vartemp7 :- ' || vartemp7);
	varOperation := 'Get Number to convert the Amount FCY into';
	select PICK_SHORT_DESCRIPTION
	into numdetail
	from TRMASTER001
	where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
						from TRSYSTEM051);

--    Commented by Supriya as we are making this cursor as Dynamic query
--    prcHedgePosition (datTemp,vartemp,vartemp1,vartemp4,varUserId,vartemp2, vartemp3);

--	open gencursor for
--        SELECT 
--            --         Pkgreturncursor.Fncgetdescription(DEPN_CURRENCY_CODE,2)||Pkgreturncursor.Fncgetdescription(DEPN_OTHER_CURRENCY,2)"Currency",
--            Pkgreturncursor.Fncgetdescription(DEPN_CURRENCY_CODE,2)|| '/' ||Pkgreturncursor.Fncgetdescription(DEPN_OTHER_CURRENCY,2)"Currency",
--            Pkgreturncursor.Fncgetdescription(DEPN_BUY_SELL ,2) "BuySell",
--            NVL(ROUND(SUM(DEPN_OPEN_POSITION*DEPN_HOLDING_RATE)/(case when nvl(SUM(DEPN_OPEN_POSITION),1) = 0 then 1 else nvl(SUM(DEPN_OPEN_POSITION),1) end),6),0) "HoldingRate",
--            ROUND(NVL(SUM(DEPN_OPEN_POSITION)/numdetail,0),2) "OpenPosition",
--            ROUND(NVL(SUM(DEPN_TOTAL_CANCEL)/numdetail,0),2) "TotalCancel",
--            ROUND(NVL(SUM(DEPN_TOTAL_UTLIZED)/numdetail,0),2) "TotalUtlized",
--            ROUND(NVL(SUM(DEPN_TOTAL_ROLLOVER)/numdetail,0),2) "TotalRollover",
--            ROUND(NVL(SUM(DEPN_TOTAL_ADDITION)/numdetail,0),2) "TOtalAddition",
--            --ROUND(NVL(SUM(DEPN_TOTAL_POSITION),0)/numdetail,2) "TotalPostion",
--            ROUND(SUM((nvl(DEPN_OPEN_POSITION,0)- nvl(DEPN_TOTAL_CANCEL,0) - 
--            nvl(DEPN_TOTAL_UTLIZED,0) - nvl(DEPN_TOTAL_ROLLOVER,0))+ 
--            nvl(DEPN_TOTAL_ADDITION,0))/1000000, 2) "TotalPostion",
--            ROUND(NVL(SUM(DEPN_MTMPANDL_INR),0)/numdetail, 2) "MTMPandL",
--            ROUND(NVL(SUM(DEPN_DTD),0)/numdetail, 2) "PLDTD",
--            ROUND(NVL(SUM(DEPN_MTD),0)/numdetail,2) "PLMTD",
--            ROUND(NVL(SUM(DEPN_QTD),0)/numdetail,2) "PLQTD",
--            ROUND(NVL(SUM(DEPN_YTD),0)/numdetail,2) "PLYTD",
--            ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_TOTAL_POSITION else 0 end),0)/numdetail, 2) FWDPostion,
--            ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_TOTAL_POSITION else 0 end),0)/numdetail, 2) FURPostion,
--            ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_TOTAL_POSITION else 0 end),0)/numdetail, 2) OPTPostion,
--            ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) MTMFWD,
--            ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) MTMFUR,
--            ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) MTMOPT,
--            ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_YTD else 0 end),0)/numdetail, 2) PLFWD,
--            ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_YTD else 0 end),0)/numdetail, 2) PLFUR,
--            ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_YTD else 0 end),0)/numdetail, 2) PLOPT
--        FROM TRSYSTEM997_DEALERPOSITION
--        -- where DEPN_DEALER_NAME not in ('Pawan')
--        GROUP BY DEPN_CURRENCY_CODE,DEPN_OTHER_CURRENCY,DEPN_BUY_SELL;
--	Goto Process_End;

    PrcProductPnlPopulate(trunc(datTemp),'ALL',vartemp,vartemp1,vartemp4,vartemp2,vartemp3);

        varQuery := 'select ' || vartemp6 ||','|| vartemp7 || ','||
        'NVL(ROUND(SUM(OutstandingAmount*HoldingRate)/(case when nvl(SUM(OutstandingAmount),1) = 0 then 1 else nvl(SUM(OutstandingAmount),1) end),6),0) "HoldingRate",
        ROUND(NVL(SUM(OutstandingAmount)/'||numdetail||',0),2) "OpenPosition",
        ROUND(NVL(SUM(CancelAmount)/'||numdetail||',0),2) "TotalCancel",
        ROUND(NVL(SUM(UtlizedAmount)/'||numdetail||',0),2) "TotalUtlized",
        ROUND(NVL(SUM(RollOverAmount)/'||numdetail||',0),2) "TotalRollover",
        ROUND(NVL(SUM(TOTALADDITIONACTUAL)/'||numdetail||',0),2) "TOtalAddition",
        --ROUND(NVL(SUM(DEPN_TOTAL_POSITION),0)/'||numdetail||',2) "TotalPostion",
        ROUND(SUM(nvl(OutstandingAmount,0)+ 
        nvl(TOTALADDITION,0))/'||numdetail||', 2) "TotalPostion",
        ROUND(NVL(SUM(MTMLocal),0)/'||numdetail||', 2) "MTMPandL",
        ROUND(NVL(SUM(DTD),0)/'||numdetail||', 2) "PLDTD",
        ROUND(NVL(SUM(MTD),0)/'||numdetail||',2) "PLMTD",
        ROUND(NVL(SUM(QTD),0)/'||numdetail||',2) "PLQTD",
        ROUND(NVL(SUM(YTD),0)/'||numdetail||',2) "PLYTD"
        from(select nvl(POSN_COMPANY_CODE, CompanyCode) CompanyCode, nvl(POSN_LOCATION_CODE, LOCATIONCODE) LocationCode, 
                  nvl(POSN_COUNTER_PARTY, COUNTERPARTY) BankCode, nvl(POSN_CURRENCY_PAIR, CURRENCYPAIR) CurrencyPairCode,
                  --nvl(POSN_CURRENCY_CODE, CurrencyCode) BaseCurrencyCode, nvl(POSN_FOR_CURRENCY, FORCURRENCY) OtherCurrencyCode, 
                  TransactionAmount TransactionAmount, HoldingRate HoldingRate,  
                  OutstandingAmount OutstandingAmount, MTMLocal MTMLocal, nvl(TransactionType, Tran_TYPE) TransactionType,
                  nvl(POSN_SUBPRODUCT_CODE, INITCODE) StrategyCode, nvl(POSN_PRODUCT_CODE, Backupdeal) BookCode,
                  DTD DTD, MTD MTD, QTD QTD, YTD YTD, CancelAmount CancelAmount, UtlizedAmount UtlizedAmount,
                  RollOverAmount RollOverAmount, CancelAmountLat CancelAmountLat, UtlizedAmountLat UtlizedAmountLat,
                  RollOverAmountLat RollOverAmountLat, TOTALADDITION TOTALADDITION, TOTALADDITIONACTUAL TOTALADDITIONACTUAL,
                  nvl(POSNBUYSELL, CANCELBUYSELL) BuySellCode,
                  nvl(MaturityMonth, CMaturityMonth) MaturityMonth, nvl(MaturityYear,CMaturityYear) MaturityYear,
                  nvl(MaturityMonth, CMaturityMonth) MaturityMonth_Desc, nvl(MaturityYear,CMaturityYear) MaturityYear_Desc,
                  FinancialYear FinancialYear, FinancialYear FinancialYear_Desc,
				  nvl(POSN_PURPOSE_CODE, PURPOSECODE) PurposeCode';
    varQuery1 := ' from (select POSN_COMPANY_CODE, POSN_LOCATION_CODE, POSN_CURRENCY_PAIR, POSN_CURRENCY_CODE, POSN_FOR_CURRENCY, 
                    sum(POSN_Transaction_AMOUNT) TransactionAmount,
                    round(sum(POSN_OUTSTANDING_AMOUNT*POSN_ALLIN_RATE)/sum(POSN_OUTSTANDING_AMOUNT),6) HoldingRate,
                    sum(case when (POSN_REFERENCE_DATE < ''' || trunc(datTemp)|| ''') then POSN_OUTSTANDING_AMOUNT else 0 end) OutstandingAmount,
                    SUM(Case When (POSN_REFERENCE_DATE = ''' || trunc(datTemp)|| ''') then POSN_OUTSTANDING_AMOUNT Else 0 End) TOTALADDITION,
                    SUM(Case When (POSN_REFERENCE_DATE = ''' || trunc(datTemp)|| ''') then 
                      (case when POSN_DEAL_DIRECTINDIRECT=12400001 then POSN_TRANSACTION_AMOUNT else posn_quote_amount end) 
                      Else 0 End) TOTALADDITIONACTUAL,
                    sum(ROUND(POSN_TOPNL_LOCALAMOUNT,2)) MTMLocal, POSN_TRANSACTION_TYPE TransactionType,
                    POSN_SUBPRODUCT_CODE, POSN_PRODUCT_CODE, POSN_BUY_SELL POSNBUYSELL, POSN_COUNTER_PARTY,
                    To_Char(posn_due_date,''MM-YYYY'') MaturityMonth,
                    To_Char(posn_due_date,''YYYY'') MaturityYear, POSN_PURPOSE_CODE,
                    fncGetFinancialYear(posn_due_date,posn_due_date,1) FinancialYear
                from TRSYSTEM997
                where POSN_OUTSTANDING_AMOUNT > 0
                and POSN_TRANSACTION_TYPE in (32200001,32200002,32200003)
                group by To_Char(posn_due_date,''MM-YYYY''),
                    To_Char(posn_due_date,''YYYY''),
                    fncGetFinancialYear(posn_due_date,posn_due_date,1) ,
                    POSN_COMPANY_CODE, POSN_LOCATION_CODE, POSN_PRODUCT_CODE, POSN_SUBPRODUCT_CODE, 
                POSN_CURRENCY_CODE, POSN_FOR_CURRENCY, POSN_PURPOSE_CODE,
                 POSN_CURRENCY_PAIR, POSN_COUNTER_PARTY, POSN_BUY_SELL, POSN_TRANSACTION_TYPE) OpenTransaction
                full outer join ';
       varQuery2 :=  ' (select COMPANYCODE, LOCATIONCODE, CURRENCYPAIR, CURRENCYCODE, FORCURRENCY, 
               INITCODE InitCode, BACKUPDEAL BackupDeal, PURPOSECODE,
                    sum(case when PNlType=38500001 then  PROFITLOSS else 0 end) DTD,
                    sum(case when PNlType in (38500002,38500001) then  PROFITLOSS else 0 end) MTD,
                    sum(case when PNlType in (38500001,38500002,38500003) then  PROFITLOSS else 0 end) QTD,
                    sum(case when PNlType in (38500001,38500002,38500003,38500004) then  PROFITLOSS else 0 end) YTD,
                    sum(case when (CANCELDATE = ''' || trunc(datTemp) || ''' and CancelType=27000001 and ROLLOVERREFERENCE is null) then CANCELAMOUNT else 0 end) CancelAmount,
                    sum(case when (CANCELDATE = ''' || trunc(datTemp) || ''' and CancelType=27000002 and ROLLOVERREFERENCE is null) then CANCELAMOUNT else 0 end) UtlizedAmount,
                    sum(case when (CANCELDATE = ''' || trunc(datTemp) || ''' and ROLLOVERREFERENCE is not null) then CANCELAMOUNT else 0 end) RollOverAmount,
                     sum(case when (EXECUTEDATE < ''' || trunc(datTemp) || ''' and CancelType=27000001 and ROLLOVERREFERENCE is null) then CANCELAMOUNT else 0 end) CancelAmountLat,
                    sum(case when (EXECUTEDATE < ''' || trunc(datTemp) || ''' and CancelType=27000002 and ROLLOVERREFERENCE is null) then CANCELAMOUNT else 0 end) UtlizedAmountLat,
                    sum(case when (EXECUTEDATE < ''' || trunc(datTemp) || ''' and ROLLOVERREFERENCE is not null) then CANCELAMOUNT else 0 end) RollOverAmountLat,
                    Tran_TYPE,BUYSELLCODE CANCELBUYSELL, COUNTERPARTY,
                    To_Char(CANCELDATE,''MM-YYYY'') CMaturityMonth,
                    To_Char(CANCELDATE,''YYYY'') CMaturityYear,
                    fncGetFinancialYear(CANCELDATE,CANCELDATE,1) CFinancialYear
                from  trsystem983 
                group by To_Char(CANCELDATE,''MM-YYYY''),To_Char(CANCELDATE,''YYYY''),
                 fncGetFinancialYear(CANCELDATE,CANCELDATE,1), 
                 COMPANYCODE, LOCATIONCODE, BACKUPDEAL, INITCODE, CURRENCYCODE, FORCURRENCY, 
                CURRENCYPAIR, COUNTERPARTY, BUYSELLCODE, TRAN_TYPE, PURPOSECODE) CancelTran
            on  COMPANYCODE = POSN_COMPANY_CODE and LOCATIONCODE = POSN_LOCATION_CODE
            and CURRENCYCODE = POSN_CURRENCY_CODE and FORCURRENCY = POSN_FOR_CURRENCY
            and CURRENCYPAIR = POSN_CURRENCY_PAIR and PURPOSECODE = POSN_PURPOSE_CODE
            and INITCODE = POSN_SUBPRODUCT_CODE and Backupdeal = POSN_PRODUCT_CODE
            and Tran_TYPE = TransactionType and CANCELBUYSELL = POSNBUYSELL
            and COUNTERPARTY = POSN_COUNTER_PARTY 
            and CMaturityMonth = MaturityMonth and CMaturityYear = MaturityYear
            and FinancialYear=CFinancialYear)
            where CancelAmount >0 or UtlizedAmount >0 or RollOverAmount >0 or TOTALADDITION >0 or TOTALADDITIONACTUAL >0    
            Group By ' || vartemp6 ||
            ' Order by ' || vartemp6;
    GLOG.log_write('varQuery:- ' || varQuery);
    GLOG.log_write('varQuery1:- ' || varQuery1);
    open gencursor for varQuery || varQuery1 || varQuery2;
    Goto Process_End;
end if;      

if numinfotype = REFHEDGEPOSITIONCURRBUYSELL then
     varOperation := 'NOP Dash Board Data Extract';
    BEGIN
        vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',vartemp,GConst.TYPENODEPATH);
    exception
        when others then
        vartemp:='ALL';
    end;

    BEGIN
        vartemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',vartemp,GConst.TYPENODEPATH);
    exception
        when others then
        vartemp1:='ALL';
    end;

    BEGIN
        vartemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',vartemp,GConst.TYPENODEPATH);
    exception
        when others then
        vartemp4:='ALL';
    end;    

    BEGIN
        vartemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',vartemp,GConst.TYPENODEPATH);
    exception
        when others then
        vartemp2:='ALL';
    end;    

    BEGIN
        vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',vartemp,GConst.TYPENODEPATH);
    exception
        when others then
        vartemp3:='ALL';
    end;    

    BEGIN
        datTemp:= GConst.fncXMLExtract(xmlDoc,'//Param/DateASON',datTemp,GConst.TYPENODEPATH);
    exception
        when others then
        datTemp:= datWorkdate;
    end; 

	varOperation := 'Get Number to convert the Amount FCY into';
	select PICK_SHORT_DESCRIPTION
	into numdetail
	from TRMASTER001
	where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
						from TRSYSTEM051);


    PrcProductPnlPopulate(trunc(datTemp),'ALL',vartemp,vartemp1,vartemp4,vartemp2,vartemp3);    

        varQuery := 'select BUYSELLCODE,to_char(CURRENCYPAIRCODE) "CurrencyPairCode",Pkgreturncursor.Fncgetdescription(BUYSELLCODE,2) "BuySell", 
        Pkgreturncursor.Fncgetdescription(CURRENCYPAIRCODE,2) "Currency",
        NVL(ROUND(SUM(OutstandingAmount*HoldingRate)/(case when nvl(SUM(OutstandingAmount),1) = 0 then 1 else nvl(SUM(OutstandingAmount),1) end),6),0) "HoldingRate",
        ROUND(NVL(SUM(OutstandingAmount)/'||numdetail||',0),2) "OpenPosition",
        ROUND(NVL(SUM(CancelAmount)/'||numdetail||',0),2) "TotalCancel",
        ROUND(NVL(SUM(UtlizedAmount)/'||numdetail||',0),2) "TotalUtlized",
        ROUND(NVL(SUM(RollOverAmount)/'||numdetail||',0),2) "TotalRollover",
        ROUND(NVL(SUM(TOTALADDITIONACTUAL)/'||numdetail||',0),2) "TOtalAddition",
        --ROUND(NVL(SUM(DEPN_TOTAL_POSITION),0)/'||numdetail||',2) "TotalPostion",
        ROUND(SUM(nvl(OutstandingAmount,0)+ 
        nvl(TOTALADDITION,0))/'||numdetail||', 2) "TotalPostion",
        ROUND(NVL(SUM(MTMLocal),0)/'||numdetail||', 2) "MTMPandL",
        ROUND(NVL(SUM(DTD),0)/'||numdetail||', 2) "PLDTD",
        ROUND(NVL(SUM(MTD),0)/'||numdetail||',2) "PLMTD",
        ROUND(NVL(SUM(QTD),0)/'||numdetail||',2) "PLQTD",
        ROUND(NVL(SUM(YTD),0)/'||numdetail||',2) "PLYTD"
        from(select nvl(POSN_COMPANY_CODE, CompanyCode) CompanyCode, nvl(POSN_LOCATION_CODE, LOCATIONCODE) LocationCode, 
                  nvl(POSN_COUNTER_PARTY, COUNTERPARTY) BankCode, nvl(POSN_CURRENCY_PAIR, CURRENCYPAIR) CurrencyPairCode,
                  --nvl(POSN_CURRENCY_CODE, CurrencyCode) BaseCurrencyCode, nvl(POSN_FOR_CURRENCY, FORCURRENCY) OtherCurrencyCode, 
                  TransactionAmount TransactionAmount, HoldingRate HoldingRate,  
                  OutstandingAmount OutstandingAmount, MTMLocal MTMLocal, nvl(TransactionType, Tran_TYPE) TransactionType,
                  nvl(POSN_SUBPRODUCT_CODE, INITCODE) StrategyCode, nvl(POSN_PRODUCT_CODE, Backupdeal) BookCode,
                  DTD DTD, MTD MTD, QTD QTD, YTD YTD, CancelAmount CancelAmount, UtlizedAmount UtlizedAmount,
                  RollOverAmount RollOverAmount, CancelAmountLat CancelAmountLat, UtlizedAmountLat UtlizedAmountLat,
                  RollOverAmountLat RollOverAmountLat, TOTALADDITION TOTALADDITION,TOTALADDITIONACTUAL TOTALADDITIONACTUAL,
                  nvl(POSNBUYSELL, CANCELBUYSELL) BuySellCode,
				  nvl(POSN_PURPOSE_CODE, PURPOSECODE) PurposeCode';
    varQuery1 := ' from (select POSN_COMPANY_CODE, POSN_LOCATION_CODE, POSN_CURRENCY_PAIR, POSN_CURRENCY_CODE, POSN_FOR_CURRENCY, 
                    sum(POSN_Transaction_AMOUNT) TransactionAmount,
                    round(sum(POSN_OUTSTANDING_AMOUNT*POSN_ALLIN_RATE)/sum(POSN_OUTSTANDING_AMOUNT),6) HoldingRate,
                    sum(case when (POSN_REFERENCE_DATE < ''' || trunc(datTemp)|| ''') then POSN_OUTSTANDING_AMOUNT else 0 end) OutstandingAmount,
                    SUM(Case When (POSN_REFERENCE_DATE = ''' || trunc(datTemp)|| ''') then POSN_OUTSTANDING_AMOUNT Else 0 End) TOTALADDITION,
                    SUM(Case When (POSN_REFERENCE_DATE = ''' || trunc(datTemp)|| ''') then
                      (case when posn_deal_directindirect=12400001 then 
                         POSN_TRANSACTION_AMOUNT else posn_quote_amount end)
                      Else 0 End) TOTALADDITIONACTUAL,
                    sum(ROUND(POSN_TOPNL_LOCALAMOUNT,2)) MTMLocal, POSN_TRANSACTION_TYPE TransactionType,
                    POSN_SUBPRODUCT_CODE, POSN_PRODUCT_CODE, POSN_BUY_SELL POSNBUYSELL, POSN_COUNTER_PARTY,
                    POSN_PURPOSE_CODE 
                from TRSYSTEM997
                where POSN_OUTSTANDING_AMOUNT > 0
                and POSN_TRANSACTION_TYPE in (32200001,32200002,32200003)
                group by POSN_COMPANY_CODE, POSN_LOCATION_CODE, POSN_PRODUCT_CODE, POSN_SUBPRODUCT_CODE, 
                POSN_CURRENCY_CODE, POSN_FOR_CURRENCY, POSN_PURPOSE_CODE,
                 POSN_CURRENCY_PAIR, POSN_COUNTER_PARTY, POSN_BUY_SELL, POSN_TRANSACTION_TYPE) OpenTransaction
                full outer join ';
       varQuery2 := ' (select COMPANYCODE, LOCATIONCODE, CURRENCYPAIR, CURRENCYCODE, FORCURRENCY, 
               INITCODE InitCode, BACKUPDEAL BackupDeal, PURPOSECODE,
                    sum(case when PNlType=38500001 then  PROFITLOSS else 0 end) DTD,
                    sum(case when PNlType in (38500002,38500001) then  PROFITLOSS else 0 end) MTD,
                    sum(case when PNlType in (38500001,38500002,38500003) then  PROFITLOSS else 0 end) QTD,
                    sum(case when PNlType in (38500001,38500002,38500003,38500004) then  PROFITLOSS else 0 end) YTD,
                    sum(case when (CANCELDATE = ''' || trunc(datTemp) || ''' and CancelType=27000001 and ROLLOVERREFERENCE is null) then CANCELAMOUNT else 0 end) CancelAmount,
                    sum(case when (CANCELDATE = ''' || trunc(datTemp) || ''' and CancelType=27000002 and ROLLOVERREFERENCE is null) then CANCELAMOUNT else 0 end) UtlizedAmount,
                    sum(case when (CANCELDATE = ''' || trunc(datTemp) || ''' and ROLLOVERREFERENCE is not null) then CANCELAMOUNT else 0 end) RollOverAmount,
                    sum(case when (EXECUTEDATE < ''' || trunc(datTemp) || ''' and CancelType=27000001 and ROLLOVERREFERENCE is null) then CANCELAMOUNT else 0 end) CancelAmountLat,
                    sum(case when (EXECUTEDATE < ''' || trunc(datTemp) || ''' and CancelType=27000002 and ROLLOVERREFERENCE is null) then CANCELAMOUNT else 0 end) UtlizedAmountLat,
                    sum(case when (EXECUTEDATE < ''' || trunc(datTemp) || ''' and ROLLOVERREFERENCE is not null) then CANCELAMOUNT else 0 end) RollOverAmountLat,
                    Tran_TYPE,BUYSELLCODE CANCELBUYSELL, COUNTERPARTY                   
                from  trsystem983 
                group by  COMPANYCODE, LOCATIONCODE, BACKUPDEAL, INITCODE, CURRENCYCODE, FORCURRENCY, 
                CURRENCYPAIR, COUNTERPARTY, BUYSELLCODE, TRAN_TYPE, PURPOSECODE) CancelTran
            on  COMPANYCODE = POSN_COMPANY_CODE and LOCATIONCODE = POSN_LOCATION_CODE
            and CURRENCYCODE = POSN_CURRENCY_CODE and FORCURRENCY = POSN_FOR_CURRENCY
            and CURRENCYPAIR = POSN_CURRENCY_PAIR and PURPOSECODE = POSN_PURPOSE_CODE
            and INITCODE = POSN_SUBPRODUCT_CODE and Backupdeal = POSN_PRODUCT_CODE
            and Tran_TYPE = TransactionType and CANCELBUYSELL = POSNBUYSELL
            and COUNTERPARTY = POSN_COUNTER_PARTY)
            where CancelAmount >0 or UtlizedAmount >0 or RollOverAmount >0 or TOTALADDITION >0 or TOTALADDITIONACTUAL >0
            Group By BUYSELLCODE,CURRENCYPAIRCODE
            Order by BUYSELLCODE,CURRENCYPAIRCODE';
    GLOG.log_write('varQuery:- ' || varQuery);
    GLOG.log_write('varQuery1:- ' || varQuery1);
    open gencursor for varQuery || varQuery1 || varQuery2;
    Goto Process_End;
end if;   

 if numinfotype=REFHedgePortfolio then

     varOperation := 'Get Number to convert the Amount FCY into';
       select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

 open gencursor for
    select pkgreturncursor.fncgetdescription(DEPN_BACKUP_DEAL,2) Book,
          --  pkgreturncursor.fncgetdescription(DEPN_INIT_CODE,2) Strategy,
           ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_YTD else 0 end) ,0)/numdetail, 2) FWDYTD,
           ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_YTD else 0 end),0)/numdetail, 2) FURYTD,
           ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_YTD else 0 end),0)/numdetail, 2) OPTYTD,
           ROUND(sum(DEPN_YTD) /numdetail, 2) TotalYTD,
           ROUND(nvl( sum( case when DEPN_instrument=32200001 then DEPN_MTMPANDL_INR else 0 end) ,0)/numdetail, 2) FWDMTM,
           ROUND(nvl( sum( case when DEPN_instrument=32200002 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) FURMTM,
           ROUND(nvl( sum( case when DEPN_instrument=32200003 then DEPN_MTMPANDL_INR else 0 end),0)/numdetail, 2) OPTMTM,
           ROUND(sum(DEPN_MTMPANDL_INR) /numdetail, 2) TotalMTM
   from TRSYSTEM997_DEALERPOSITION
   group by DEPN_BACKUP_DEAL,DEPN_INIT_CODE;
     Goto Process_End;
 end if;


 if numinfotype=RefHedgePositionPivot then

     varOperation := 'Get Number to convert the Amount FCY into';
       select PICK_SHORT_DESCRIPTION
    into numdetail
    from TRMASTER001
    where PICK_KEY_VALUE = (select PRMC_CONVERT_AMOUNTINTO
                            from TRSYSTEM051);

 open gencursor for
SELECT pkgreturncursor.fncgetdescription(posn_company_code,1) "Company",
       pkgreturncursor.fncgetdescription(posn_location_code,1) "Location",
       pkgreturncursor.fncgetdescription(posn_product_code,1) "Book",
       pkgreturncursor.fncgetdescription(posn_subproduct_code,1) "Strategy",
       pkgreturncursor.fncgetdescription(posn_currency_pair,2) "Currency",
       pkgreturncursor.fncgetdescription(posn_account_code,1) "AccountType",
       posn_dealer_id "DealerID",
       To_Char(posn_reference_date,'MM-YYYY') "ExecuteMonth",
       pkgreturncursor.fncgetdescription(posn_counter_party,1) "CounterParty",
       round(sum(posn_outstanding_amount)/numdetail,2) "OustandingAmount",
       round(sum(posn_transaction_amount)/numdetail,2) "BaseAmount",
       To_Char(posn_due_date,'MM-YYYY') "MaturityMonth",
       To_Char(posn_due_date,'YYYY') "MaturityYear",
       round(sum(posn_premium_amount)/numdetail,2) "PremiumAmount",   
       pkgreturncursor.fncgetdescription(posn_hedge_trade,1) "TradeType",
       round(sum(posn_mtm_amount)/numdetail,2) "MTMAmount",
       pkgreturncursor.fncgetdescription(posn_reporting_currency,2) "ReportingCurrency",
       round(sum(posn_topnl_amount)/numdetail,2) "ReportingMTMAmount", 
       pkgreturncursor.fncgetdescription(posn_functional_currency,2) "FunctionalCurrency",
       round(sum(posn_functional_amount)/numdetail,2) "ReportignCurrAmount",
       pkgreturncursor.fncgetdescription(posn_buy_sell,2) "buysell",
       pkgreturncursor.fncgetdescription(posn_transaction_type,1) "DerivativeType",
       pkgreturncursor.fncgetdescription(posn_exchange_code,2) "Exchange",
       round(sum(posn_topnl_localamount)/numdetail,2) "PLLocalAmount",
       round(sum(posn_delta_position)/numdetail,2) "DeltaPosition"
     FROM    trsystem997
    where  posn_transaction_type !=32200004
    group by posn_company_code,    posn_location_code,
    posn_product_code,    posn_subproduct_code,    posn_currency_code,
    posn_for_currency,posn_currency_pair, posn_account_code,    posn_user_id,
    To_Char(posn_reference_date,'MM-YYYY'),  posn_dealer_id,posn_counter_party,
    To_Char(posn_due_date,'MM-YYYY'),  posn_premium_amount,  posn_hedge_trade,
    posn_reporting_currency,  posn_functional_currency,posn_buy_sell,
    posn_transaction_type,    posn_exchange_code,  posn_topnl_localamount,
    posn_delta_position,  posn_account_codegroup, To_Char(posn_due_date,'YYYY');
     Goto Process_End;
 end if;


if numinfotype=REFGETAUTOLINKINGDATA then
     varOperation := 'Extracting Trade Register for Hedging';
        numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
        numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
        numcode2 := Gconst.fncXMLextract(xmldoc, 'CompanyCode',numcode2);
        numcode3 := Gconst.fncXMLextract(xmldoc,'CounterParty',numcode3);
        numCode4 := Gconst.fncXMLextract(xmldoc,'Category',numcode4);
        Numcode5 := Gconst.Fncxmlextract(Xmldoc,'SubCategory',Numcode5);
        datTemp := Gconst.fncXMLExtract(xmldoc,'EffectiveDate',datTemp);
        numCode6 := Gconst.fncXMLextract(xmldoc,'Period',numcode6);

    PRCAUTOTAGGING(numcode2,30299999,numCode4,Numcode5,numcode3,datTemp,varUserId,numCode,numCode6,numCode1);

 open gencursor for
--    SELECT DEALNUMBER "DealNumber",
--    TRADEREFERENCE "TradeReference",
--    COVEREDAMOUNT "CoveredAmount"
--          FROM TRTEMP001;

--   select rownum "Rownum",DEALNUMBER "DealNumber",
--            TRADEREFERENCE "TradeReference",
--            COVEREDAMOUNT "HedgingAmount",
--            pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) "Company",
--            DEAL_COMPANY_CODE "CompanyCode",
--            pkgreturncursor.fncgetdescription(DEAL_LOCATION_CODE,2) "LocationCode",
--            pkgreturncursor.fncgetdescription(TRAD_SUBPRODUCT_CODE,2) "Strategy",
--            pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2) "Book",
--            DEAL_EXCHANGE_RATE "ExchangeRate",
--            NVL(DEAL_LOCAL_RATE,0) "LocalRate",
--            DEAL_SERIAL_NUMBER "SerialNumber" 

    select rownum "Rownum",DEALNUMBER "DealNumber",
            TRADEREFERENCE "TradeReference",
            COVEREDAMOUNT "HedgingAmount",
            pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) "Company",
            DEAL_COMPANY_CODE "CompanyCode",
            pkgreturncursor.fncgetdescription(DEAL_LOCATION_CODE,2) "LocationCode",
            deal_execute_date "ExecuteDate"
           ,deal_base_amount "BaseAmount",Deal_other_amount "QuoteAmount",
             nvl(pkgReportprograms.fncGetCoverAmount(null,deal_deal_number),0) "CoveredAmount",
             pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datTemp) "OutStanding",
             (deal_base_amount-pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datTemp)) "Reversed", 
             (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datTemp)-nvl(pkgReportprograms.fncGetCoverAmount(null,deal_deal_number),0)) "UncoveredAmount",
          --   (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datTemp)-nvl(pkgReportprograms.fncGetCoverAmount(null,deal_deal_number),0)) "HedgingAmount",
              DEAL_SPOT_RATE "SpotRate",
              DEAL_FORWARD_RATE "ForwardRate",DEAL_MARGIN_RATE "MarginRate", deal_Exchange_rate "AllinRate",
              DEAL_MATURITY_FROM "ExpiryDate", deal_maturity_date "SettlementDate", pkgReturnCursor.fncGetDescription(deal_buy_sell,2) "BuySell",
              deal_user_reference "UserReference", 
              pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
            pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
            pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
              deal_forward_rate "Premium",deal_exchange_rate  "ExchangeRate",
              deal_other_currency "OtherCurrencyCode", 
              --0 "RecordStatus",
              deal_serial_number "SerialNumber",            
            pkgreturncursor.fncgetdescription(TRAD_SUBPRODUCT_CODE,2) "Strategy",
            pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2) "Book",
         --   DEAL_EXCHANGE_RATE "ExchangeRate",
            NVL(DEAL_LOCAL_RATE,0) "LocalRate",
           -- DEAL_SERIAL_NUMBER "SerialNumber" 

         -- pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "Product", 
          trad_contract_no as "BillReference",
          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "ExpBank",
          trad_maturity_date "BillMaturity",
          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "ExpCurrency",
          trad_trade_fcy  "BillAmount",
          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,GCONST.UTILCONTRACTOS,1,datTemp) "ExpOutStanding",
          NVL(PKGREPORTPROGRAMS.fncGetCoverAmount (TRAD_TRADE_REFERENCE,NULL),0) "ExpCoveredAmount",  
        --  (Case when OutStanding> CoveredAmount then OutStanding-CoveredAmount else 0 end) "UncoveredAmount",
      --    (Case when OutStanding> CoveredAmount then OutStanding-CoveredAmount else 0 end)"HedgingAmount",
          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
          trad_reference_date as "ReferenceDate",  trad_trade_remarks "BankReference",  
          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
          trad_local_bank "BankCode",
          trad_trade_currency "currencyCode" ,
          --0 "RecordStatus", 
          (select b.trad_maturity_date
            from TradeRegister b
            where a.trad_reverse_reference = b.trad_trade_reference) "ContractMaturity"
    from trtemp001 inner join trtran002 a on
    trad_trade_reference= tradereference
    and trad_record_Status not in (10200005,10200006)
    inner join trtran001
    on deal_deal_number= dealnumber
    and deal_record_Status not in (10200005,10200006);

Goto Process_End;
 end if;

 if numinfotype=REFGETRISKLIMITDATA then 

    BEGIN
        datTemp:= GConst.fncXMLExtract(xmlDoc,'//Param/DateASON',datTemp,GConst.TYPENODEPATH);
    exception
        when others then
        datTemp:= datWorkdate;
    end; 

    PKGRISKVALIDATION.prcRiskPopulateNew(datTemp,null);

 open gencursor for
    select pkgreturncursor.fncgetdescription(RiskTypes.RiskType,1) "RiskType",
       riskTypes.ReferenceGuid "ReferenceGuid",
       RiskTypes.RiskType "RiskTypeCode",
       to_char(RiskConfiguration) "RiskConfiguration",
       nvl(Exception_LOW_Risk,0) "Exception_LOW_Risk",
       nvl(Exception_Medium_Risk,0) "Exception_Medium_Risk",
       nvl(Exception_High_Risk,0) "Exception_High_Risk"
  from
        (select rdel_risk_type RiskType,RDEL_REFERENCE_GUID ReferenceGuid,
              count(*) RiskConfiguration
        from trtran011
        where trunc(rdel_risk_date)= trunc(datTemp)
        and RDEL_GUID_SERIALNUMBER = (select max(RDEL_GUID_SERIALNUMBER)
                                        from trtran011
                                      where trunc(rdel_risk_date)= trunc(datTemp))
        group by rdel_risk_type,RDEL_REFERENCE_GUID) RiskTypes
        left outer join
         (select RDEL_REFERENCE_GUID ReferenceGuid,
            RDEL_RISK_TYPE RiskType, sum(case when rdel_risk_level=92000001 then 1 else 0 end) Exception_LOW_Risk,
            sum(case when rdel_risk_level=92000002 then 1 else 0 end) Exception_Medium_Risk,
            sum(case when rdel_risk_level=92000003 then 1 else 0 end) Exception_High_Risk
          from trtran011A
          group by rdel_risk_type,RDEL_REFERENCE_GUID) exce
         on RiskTypes.RiskType=exce.RiskType
         and RiskTypes.ReferenceGuid=exce.ReferenceGuid;
 Goto Process_End;
 end if;


 if numinfotype=REFGETRISKCALCULATION then
     varOperation := 'Extracting rISK Calculation';
        varTemp := GConst.fncXMLExtract(xmldoc, 'guid', varTemp);

 open gencursor for

    select pkgreturncursor.fncgetdescription(RDEL_COMPANY_CODE,1) "Company",
        RDEL_RISK_REFERENCE "RiskReference",
        RDEL_DEAL_NUMBER "DealNumber",
        pkgreturncursor.fncgetdescription(RDEL_RISK_TYPE,1) "RiskType",
        RDEL_RISK_DATE "RiskDate",        
        pkgreturncursor.fncgetdescription(RDEL_BUY_SELL,1) "BuySell",
        pkgreturncursor.fncgetdescription(RDEL_COUNTER_PARTY,1) "CounterParty",
        pkgreturncursor.fncgetdescription(RDEL_RISK_LEVEL,1) "RiskLevel",
          RDEL_SERIAL_NUMBER "SerialNumber",
        RDEL_LIMIT_USD "LimitUSD",
        RDEL_AMOUNT_EXCESS "AmountExcess",
        RDEL_ACTION_TAKEN "ActionTaken",
        RDEL_STAKE_HOLDER "StakeHolder",
        RDEL_MOBILE_NUMBER "MobileNumber",
        RDEL_EMAIL_ID "EmailID",
        RDEL_MESSAGE_TEXT "MessageText",
        RDEL_SENT_STATUS "SentStatus",
        RDEL_SENT_TIMESTAMP "SentTimeStamp",
        pkgreturncursor.fncgetdescription(RDEL_RECORD_STATUS,1) "RecordStatus",
        RDEL_CREATE_DATE "CreateDate",
        RDEL_ENTRY_DETAIL "EntryDetail",
        RDEL_LIMIT_VALIDATIONAMOUNT "ValidationAmount",
        RDEL_LIMIT_VALIDATIONRATE "ValidationRate",
        pkgreturncursor.fncgetdescription(RDEL_LOCATION_CODE,1) "LocationCode",
        pkgreturncursor.fncgetdescription(RDEL_PRODUCT_CODE,1) "Book",
        pkgreturncursor.fncgetdescription(RDEL_SUBPRODUCT_CODE,1) "Strategy",
        pkgreturncursor.fncgetdescription(RDEL_CURRENCY_PRODUCT,1) "CurrencyProduct",
        pkgreturncursor.fncgetdescription(RDEL_ACTION_TYPE,1) "ActionType",
        RDEL_MIN_LIMIT "MinLimit",
        RDEL_MAX_LIMIT "MaxLimit",
        RDEL_CC_EMAILID "CcEmailID",
        pkgreturncursor.fncgetdescription(RDEL_HEDGE_TRADE,1) "HedgeTrade",
        pkgreturncursor.fncgetdescription(RDEL_SWAP_OUTRIGHT,1) "SwapOutright",
        pkgreturncursor.fncgetdescription(RDEL_DEAL_TYPE,1) "DealType",
        RDEL_DEALER_ID "DealerID",
        pkgreturncursor.fncgetdescription(RDEL_CURRENCY_CODE,1) "Currency",
        RDEL_REFERENCE_GUID "ReferenceGuid",
        RDEL_GUID_SERIALNUMBER "GuidSerialNumber"
    from trtran011
    where RDEL_REFERENCE_GUID = varTemp
    and RDEL_RECORD_STATUS not in (10200005,10200006);

 Goto Process_End;
 end if;


 if numinfotype=REFGETRISKTRANSDETAIL then
     varOperation := 'Extracting rISK transaction detail';
        varTemp := GConst.fncXMLExtract(xmldoc, 'guid', varTemp);

 open gencursor for

    select pkgreturncursor.fncgetdescription(RIPO_COMPANY_CODE,1) "Company",
    pkgreturncursor.fncgetdescription(RIPO_LOCATION_CODE,1) "Location",
    pkgreturncursor.fncgetdescription(RIPO_BASE_CURRENCY,1) "BaseCurrency",
    pkgreturncursor.fncgetdescription(RIPO_BUY_SELL,1) "BuySell",
    pkgreturncursor.fncgetdescription(RIPO_ACCOUNT_CODE,1) "AccountCode",
    RIPO_REFERENCE_NUMBER "ReferenceNumber",
    pkgreturncursor.fncgetdescription(RIPO_COUNTER_PARTY,1) "CounterParty",
    RIPO_TRANSACTION_AMOUNT "Amount",    
        RIPO_REFERENCE_GUID "ReferenceGuid",
        RIPO_USER_ID "UserID",
        RIPO_REFERENCE_SERIAL "ReferenceSerial",
        RIPO_REFERENCE_DATE "ReferenceDate",
        RIPO_DEALER_ID "DealerID",
        RIPO_ALLIN_RATE "AllInRate",
        RIPO_FUNCTIONAL_EXRATE "FunctionalExRate",
        pkgreturncursor.fncgetdescription(RIPO_FUNCTIONAL_CURRENCY,1) "FunctionalCurrency",
        RIPO_FUNCTIONAL_AMOUNT "FunctionalAmount",
        RIPO_MTM_RATE "MTMRate",
        RIPO_MTM_AMOUNT "MTMAmount",
        RIPO_TOPNL_CONRATE "ToPnlConrate",
        RIPO_TOPNL_AMOUNT "ToPnlAmount",
        RIPO_TOPNL_LOCALRATE "ToPnlLocalRate",
        RIPO_TOPNL_LOCALAMOUNT "ToPnlLocalAmount",
        RIPO_DUE_DATE "DueDate",
        RIPO_MATURITY_MONTH "MaturityMonth",
        pkgreturncursor.fncgetdescription(RIPO_PRODUCT_CODE,1) "Book",
        pkgreturncursor.fncgetdescription(RIPO_FOR_CURRENCY,1) "ForCurrency",
        pkgreturncursor.fncgetdescription(RIPO_SUBPRODUCT_CODE,1) "Strategy",
        pkgreturncursor.fncgetdescription(RIPO_HEDGE_TRADE,1) "HedgeTrade",
        pkgreturncursor.fncgetdescription(RIPO_SWAP_OUTRIGHT,1) "SwapOutright",
        pkgreturncursor.fncgetdescription(RIPO_DEAL_TYPE,1) "DealType",
        pkgreturncursor.fncgetdescription(RIPO_CURRENCY_PRODUCT,1) "CurrencyProduct",
        pkgreturncursor.fncgetdescription(RIPO_LOCAL_CURRENCY,1) "LocalCurrency",
        RIPO_LOCAL_EXRATE "LocalExrate",
        RIPO_LOCAL_AMOUNT "LocalAmount",
        RIPO_DELTA_POSITION "DeltaPosition",
        RIPO_PREMIUM_STATUS "PremiumStatus",
        RIPO_PREMIUM_AMOUNT "PremiumAmount",
        pkgreturncursor.fncgetdescription(POSN_EXCHANGE_CODE,1) "ExchangeCode",
        RIPO_HEDGED_COUVERED "HedgedCovered",
        RIPO_HEDGED_COUVEREDRATE "HedgedCoveredRate",
        RIPO_OUTSTANGING_AMOUNT "OutstandingAmount",
        RIPO_TRANSACTION_TYPE "TransactionType",
        pkgreturncursor.fncgetdescription(RIPO_CURRENCY_CODE,1) "Currency",
        RIPO_RISKCURR_AMOUNT "RiskCurrAmount",        
        RIPO_RISKCURR_MTMAMOUNT "RiskCurrMtmAmount",
        RIPO_REPORTING_CURRENCY "ReportingCurrency",
        pkgreturncursor.fncgetdescription(RIPO_CURRENCY_PAIR,1) "CurrencyPair",
        pkgreturncursor.fncgetdescription(RIPO_DEAL_DIRECTINDIRECT,1) "DealDirectIndirect",
        pkgreturncursor.fncgetdescription(RIPO_PURPOSE_CODE,1) "PurposeCode",
        RIPO_QUOTE_AMOUNT "QuoteAmount"
    from trsystem997f_drilldown
    where RIPO_REFERENCE_GUID = varTemp;


 Goto Process_End;
 end if;
--if numinfotype =REFGETMARKETRATES then
--
--OPEN Gencursor FOR 
--       SELECT RACF_SOURCE_CODE "SourceCode",
--            RACF_RATE_TYPE "RateType", 
--            RACF_INTERFACE_TYPE "InterfaceType", 
--            RACF_SCHEDULE_TYPE "ScheduleType",
--            RACF_SCHEDULE_TIME "ScheduleTime"
--            FROM CLOUDDB_MASTER.TRSYSTEM012B
--            where RACF_RECORD_STATUS not in (10200005,10200006);
-- Goto Process_End; 
--end if;
--
--if numinfotype =REFGETMARKETRATELIST then
--numcode := gconst.fncxmlextract(xmldoc,'Param/SourceCode',numcode);
--numcode1 := gconst.fncxmlextract(xmldoc,'Param/RateType',numcode1);
-- 
--
--if numcode1=13600001 then
--Open GenCursor for select FWRD_RIC_CODE RIC
-- from CLOUDDB_MASTER.trsystem012AA
-- where FWDR_SOURCE_CODE=numcode
-- and FWRD_RECORD_STATUS not in (10200005,10200006);
-- Goto Process_End;
-- elsif numcode1=13600002 then
--Open GenCursor for select  
--        FUTR_RIC_CODE RIC
-- from CLOUDDB_MASTER.trsystem012AB
-- where FUTR_SOURCE_CODE=numcode
-- and FUTR_RECORD_STATUS not in (10200005,10200006);
-- Goto Process_End;
-- elsif numcode1=13600003 then
-- Open GenCursor for
--  select  INTR_RIC_CODE RIC
-- from CLOUDDB_MASTER.trsystem012AC
-- where INTR_SOURCE_CODE=numcode
-- and INTR_RECORD_STATUS not in (10200005,10200006);
-- Goto Process_End;
--  else 
-- Open GenCursor for select  VOLS_RIC_CODE RIC
-- from CLOUDDB_MASTER.trsystem012AD
-- where VOLS_SOURCE_CODE=numcode
-- and VOLS_RECORD_STATUS not in (10200005,10200006);
-- Goto Process_End;
-- end if;
--  
--end if;
--
--if numinfotype =REFGETRATESUPLOAD then
--numcode := gconst.fncxmlextract(xmldoc,'Param/SourceCode',numcode);
--numcode1 := gconst.fncxmlextract(xmldoc,'Param/RateType',numcode1);
--OPEN GENCURSOR FOR 
--select rate_source_column SourceColumns
----listagg(rate_source_column,',') within group(order by rate_rate_Type) SourceColumns
--from CLOUDDB_MASTER.trsystem012A 
--where rate_source_code =numcode
--and rate_rate_Type=numcode1
--and rate_record_Status not in (10200005,10200006);
--
--Goto Process_End; 
--end if;



<< dummy_cursor >>



    varoperation := 'opening a dummy cursor';

    open gencursor for
      select '0' as "records"
       from dual;

<< process_end >>
    numerror := 0;
    varerror := ' : successful operation';
    numrecords := numinfotype;
    errordata := gconst.fncreturnerror('retcursor',   varmessage,   1,   numerror,   varoperation,   varerror);

exception
    when error_occurred then
        numrecordsets := 0;
        numerror := numinfotype;
        errordata := gconst.fncreturnerror('retcursor',   varmessage,   0,   numerror,   varoperation,   varerror);
        GLOG.LOG_Error(errordata,'PKGReturnCursor..prcReturnCursor');
        -- raise_application_error(-20101, errordata);
    when others then
        numrecordsets := 0;
        numerror := numinfotype;
        varerror := sqlerrm || ' - ' || varerror;
        errordata := gconst.fncreturnerror('retcursor',   varmessage,   0,   numerror,   varoperation,   varerror);
        GLOG.LOG_Error(errordata,'PKGReturnCursor..prcReturnCursor');
    end;

procedure Process_Cursor
    ( numInfoType in number,
      ParamData in gconst.gclobtype%type,
      ErrorData out nocopy gconst.gclobtype%type,
      GenCursor out Gconst.DataCursor)
  is
   varProcedureName varchar(50);
   varQuery varchar(100);
   varerror varchar(4000);
   numerror number;
   XMLDoc xmltype;
   TempCursor Clouddb_master.pkgGlobalmethods.DataCursor;
  begin
    GLOG.Log_write(' Entered inside the : Process_Cursor');

    GC_varmessage := 'cursor requested: ' || numinfotype;

    XMLDoc := xmltype(paramdata);
    GC_varoperation := 'extracting parameters';
    GC_workdate := gconst.fncxmlextract(XMLDoc,'WorkDate',GC_workdate);
    GC_UserID := UPPER(gconst.fncxmlextract(XMLDoc,'UserCode',GC_UserID));
    GC_action := nvl(gconst.fncxmlextract(XMLDoc,'Action',GC_action),0);
    GC_Entity := gconst.fncxmlextract(XMLDoc,'Entity',GC_Entity);
    -- added by manjunath Reddy on 24/09/2019-- to get the User Selected while fetching the Records
    begin
        GC_UserActionType:= nvl(gconst.fncxmlextract(XMLDoc,'UserActionType',GC_UserActionType),0);
    exception 
      when others then
        GC_UserActionType:=101;
    end;

    begin
        select GRIM_Procedure_name
          into varProcedureName
         from trsystem999CA
         where GRIM_CURSOR_NUMBER=numInfoType
         and GRIM_RECORD_STATUS not in (10200005,10200006);
    exception 
     when no_Data_found then
      varProcedureName:= null;
    end ;
     GC_varOperation := ' After Procedure Name is Identified: ' || varProcedureName;
     if varProcedureName is null then 
        varQuery:= 'Begin cursor_' || numInfoType || ' (:1,:2); end;';
     else 
        varQuery:= 'Begin ' || varProcedureName || '(:1:2); end;';
      end if;
       GLOG.Log_write('Entered inside the : ' || varQuery);
       begin   
        EXECUTE IMMEDIATE varQuery using in XMLDoc, out TempCursor ;
       exception
         when others then
            GLOG.Log_write('Execute Exception  for Query: ' || varQuery); 
         end ;

       GenCursor:=  TempCursor;

       GLOG.Log_write(' After Executing  : ' || varQuery); 
    varerror := ' : successful operation';
    errordata := gconst.fncreturnerror('Process_Cursor',   GC_varmessage,   1,   0,   GC_varoperation,   varerror);
exception
    when others then
        numerror := numinfotype;
        varerror := ' Error for the Cursor ' || numerror || sqlerrm || ' - ' || varerror;
        GLOG.LOG_Error(varerror,'PKGReturnCursor..Process_Cursor');
        errordata := gconst.fncreturnerror('Process_Cursor',   GC_varmessage,   0,   numerror,   GC_varoperation,   varerror);
        GLOG.LOG_Error(errordata,'PKGReturnCursor..Process_Cursor');
end Process_Cursor;


end PKGRETURNCURSOR;